<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (2,018 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=25347] (488 samples, 24.18%)</title><rect x="10.0" y="931.0" width="285.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="942.0">[NIO Selector #0 tid=25347]</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.10%)</title><rect x="10.0" y="915.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (486 samples, 24.08%)</title><rect x="11.2" y="915.0" width="284.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="14.2" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.05%)</title><rect x="11.2" y="899.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.2" y="910.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (295 samples, 14.62%)</title><rect x="11.8" y="899.0" width="172.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.8" y="910.0">one/nio/net/JavaSelect..</text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="11.8" y="883.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="14.8" y="894.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7 samples, 0.35%)</title><rect x="12.3" y="883.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.3" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.05%)</title><rect x="12.9" y="867.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="15.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.05%)</title><rect x="13.5" y="867.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.05%)</title><rect x="13.5" y="851.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.5" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.20%)</title><rect x="14.1" y="867.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.15%)</title><rect x="14.7" y="851.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.7" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.05%)</title><rect x="14.7" y="835.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="17.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.05%)</title><rect x="15.3" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="15.3" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.05%)</title><rect x="15.8" y="835.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.8" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (287 samples, 14.22%)</title><rect x="16.4" y="883.0" width="167.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.4" y="894.0">sun/nio/ch/SelectorIm..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (287 samples, 14.22%)</title><rect x="16.4" y="867.0" width="167.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.4" y="878.0">sun/nio/ch/SelectorIm..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (286 samples, 14.17%)</title><rect x="17.0" y="851.0" width="167.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.0" y="862.0">sun/nio/ch/KQueueSele..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (276 samples, 13.68%)</title><rect x="17.0" y="835.0" width="161.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="846.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>kevent (272 samples, 13.48%)</title><rect x="19.4" y="819.0" width="159.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="22.4" y="830.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.25%)</title><rect x="178.4" y="835.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="181.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="179.6" y="819.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="179.6" y="803.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="182.6" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.10%)</title><rect x="180.2" y="819.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.10%)</title><rect x="180.2" y="803.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.10%)</title><rect x="180.2" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.05%)</title><rect x="180.7" y="771.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="183.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.20%)</title><rect x="181.3" y="835.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.3" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.10%)</title><rect x="181.9" y="819.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.putIfAbsent (1 samples, 0.05%)</title><rect x="183.1" y="819.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.1" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.05%)</title><rect x="183.1" y="803.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="186.1" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.05%)</title><rect x="183.1" y="787.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="186.1" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.05%)</title><rect x="183.1" y="771.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="186.1" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.05%)</title><rect x="183.1" y="755.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="186.1" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::extract_attached_method(vframeStream&amp;) (1 samples, 0.05%)</title><rect x="183.1" y="739.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="186.1" y="750.0"></text>
</g>
<g>
<title>CompiledICLocker::CompiledICLocker(CompiledMethod*) (1 samples, 0.05%)</title><rect x="183.1" y="723.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="186.1" y="734.0"></text>
</g>
<g>
<title>DefaultICProtectionBehaviour::lock(CompiledMethod*) (1 samples, 0.05%)</title><rect x="183.1" y="707.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="186.1" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="183.1" y="691.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="186.1" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="183.1" y="675.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="186.1" y="686.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.05%)</title><rect x="183.1" y="659.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="186.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.05%)</title><rect x="183.7" y="835.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.7" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.05%)</title><rect x="183.7" y="819.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="183.7" y="803.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="183.7" y="787.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.7" y="798.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.05%)</title><rect x="183.7" y="771.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="186.7" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.05%)</title><rect x="183.7" y="755.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="186.7" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (190 samples, 9.42%)</title><rect x="184.3" y="899.0" width="111.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.3" y="910.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (190 samples, 9.42%)</title><rect x="184.3" y="883.0" width="111.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.3" y="894.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (141 samples, 6.99%)</title><rect x="184.8" y="867.0" width="82.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.8" y="878.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (140 samples, 6.94%)</title><rect x="184.8" y="851.0" width="81.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.8" y="862.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (1 samples, 0.05%)</title><rect x="186.0" y="835.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.0" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (137 samples, 6.79%)</title><rect x="186.6" y="835.0" width="80.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.6" y="846.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (134 samples, 6.64%)</title><rect x="187.2" y="819.0" width="78.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.2" y="830.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (130 samples, 6.44%)</title><rect x="187.8" y="803.0" width="76.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.8" y="814.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (127 samples, 6.29%)</title><rect x="187.8" y="787.0" width="74.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.8" y="798.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.50%)</title><rect x="187.8" y="771.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.8" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="188.3" y="755.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="191.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.40%)</title><rect x="188.9" y="755.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="188.9" y="739.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.10%)</title><rect x="189.5" y="739.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.10%)</title><rect x="189.5" y="723.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.5" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="190.1" y="707.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.1" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.25%)</title><rect x="190.7" y="739.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.25%)</title><rect x="190.7" y="723.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="193.0" y="707.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.0" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (117 samples, 5.80%)</title><rect x="193.6" y="771.0" width="68.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.6" y="782.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (117 samples, 5.80%)</title><rect x="193.6" y="755.0" width="68.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.6" y="766.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (116 samples, 5.75%)</title><rect x="194.2" y="739.0" width="67.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.2" y="750.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (116 samples, 5.75%)</title><rect x="194.2" y="723.0" width="67.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.2" y="734.0">one/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="194.2" y="707.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="197.2" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="194.2" y="691.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="197.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="194.2" y="675.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.2" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="194.2" y="659.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.2" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="194.2" y="643.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.2" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="194.2" y="627.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (115 samples, 5.70%)</title><rect x="194.8" y="707.0" width="67.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.8" y="718.0">sun/nio..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.10%)</title><rect x="194.8" y="691.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.10%)</title><rect x="194.8" y="675.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="197.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.10%)</title><rect x="194.8" y="659.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.10%)</title><rect x="194.8" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.10%)</title><rect x="194.8" y="627.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="197.8" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.10%)</title><rect x="194.8" y="611.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="197.8" y="622.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="194.8" y="595.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="197.8" y="606.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="194.8" y="579.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="197.8" y="590.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="195.4" y="595.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="198.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="195.9" y="691.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="198.9" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (112 samples, 5.55%)</title><rect x="196.5" y="691.0" width="65.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.5" y="702.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (112 samples, 5.55%)</title><rect x="196.5" y="675.0" width="65.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.5" y="686.0">sun/nio..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.25%)</title><rect x="196.5" y="659.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.5" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.25%)</title><rect x="196.5" y="643.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.5" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.25%)</title><rect x="196.5" y="627.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.05%)</title><rect x="196.5" y="611.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.5" y="622.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (1 samples, 0.05%)</title><rect x="196.5" y="595.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="199.5" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::ThreadStateTransition(JavaThread*) (1 samples, 0.05%)</title><rect x="196.5" y="579.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="199.5" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.20%)</title><rect x="197.1" y="611.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.20%)</title><rect x="197.1" y="595.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.05%)</title><rect x="197.1" y="579.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkOffset (1 samples, 0.05%)</title><rect x="197.1" y="563.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.15%)</title><rect x="197.7" y="579.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.10%)</title><rect x="198.3" y="563.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="201.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (2 samples, 0.10%)</title><rect x="198.3" y="547.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.3" y="558.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (2 samples, 0.10%)</title><rect x="198.3" y="531.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="201.3" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.10%)</title><rect x="198.3" y="515.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="201.3" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.10%)</title><rect x="198.3" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="201.3" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="198.3" y="483.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="201.3" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="198.3" y="467.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="201.3" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="198.3" y="451.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="201.3" y="462.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.05%)</title><rect x="198.3" y="435.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="201.3" y="446.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="198.9" y="483.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="201.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (105 samples, 5.20%)</title><rect x="199.5" y="659.0" width="61.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.5" y="670.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (105 samples, 5.20%)</title><rect x="199.5" y="643.0" width="61.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="202.5" y="654.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (105 samples, 5.20%)</title><rect x="199.5" y="627.0" width="61.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.5" y="638.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.05%)</title><rect x="200.6" y="611.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="203.6" y="622.0"></text>
</g>
<g>
<title>write (102 samples, 5.05%)</title><rect x="201.2" y="611.0" width="59.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="204.2" y="622.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="260.9" y="659.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.9" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (1 samples, 0.05%)</title><rect x="260.9" y="643.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="261.4" y="659.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.4" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.free (1 samples, 0.05%)</title><rect x="261.4" y="643.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="264.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.05%)</title><rect x="261.4" y="627.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.4" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.15%)</title><rect x="262.0" y="787.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.15%)</title><rect x="262.0" y="771.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="265.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.15%)</title><rect x="262.0" y="755.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="262.6" y="739.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="265.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="262.6" y="723.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.6" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.05%)</title><rect x="262.6" y="707.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.6" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.05%)</title><rect x="262.6" y="691.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.6" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="263.2" y="739.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.status (3 samples, 0.15%)</title><rect x="263.8" y="803.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (3 samples, 0.15%)</title><rect x="263.8" y="787.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.8" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.15%)</title><rect x="263.8" y="771.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.10%)</title><rect x="263.8" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.8" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.05%)</title><rect x="264.4" y="739.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.05%)</title><rect x="264.4" y="723.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.4" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="264.9" y="755.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="267.9" y="766.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.10%)</title><rect x="265.5" y="819.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.10%)</title><rect x="265.5" y="803.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.10%)</title><rect x="265.5" y="787.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="266.1" y="771.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.05%)</title><rect x="266.1" y="755.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.05%)</title><rect x="266.7" y="851.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.7" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="266.7" y="835.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.7" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="266.7" y="819.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.7" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (48 samples, 2.38%)</title><rect x="267.3" y="867.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.3" y="878.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (48 samples, 2.38%)</title><rect x="267.3" y="851.0" width="28.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="270.3" y="862.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (48 samples, 2.38%)</title><rect x="267.3" y="835.0" width="28.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.3" y="846.0">su..</text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.05%)</title><rect x="267.3" y="819.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.3" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="267.3" y="803.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="270.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="267.9" y="819.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.9" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (45 samples, 2.23%)</title><rect x="268.5" y="819.0" width="26.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.5" y="830.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (45 samples, 2.23%)</title><rect x="268.5" y="803.0" width="26.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="271.5" y="814.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.20%)</title><rect x="269.0" y="787.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.0" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.10%)</title><rect x="270.2" y="771.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="270.8" y="755.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.05%)</title><rect x="270.8" y="739.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.8" y="750.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="270.8" y="723.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="273.8" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (39 samples, 1.93%)</title><rect x="271.4" y="787.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.4" y="798.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (39 samples, 1.93%)</title><rect x="271.4" y="771.0" width="22.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.4" y="782.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (39 samples, 1.93%)</title><rect x="271.4" y="755.0" width="22.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.4" y="766.0">s..</text>
</g>
<g>
<title>read (36 samples, 1.78%)</title><rect x="273.1" y="739.0" width="21.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="276.1" y="750.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="294.2" y="787.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.2" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="294.2" y="771.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="297.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.05%)</title><rect x="294.8" y="819.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.8" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (1 samples, 0.05%)</title><rect x="294.8" y="803.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.8" y="814.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=39171] (512 samples, 25.37%)</title><rect x="295.4" y="931.0" width="299.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="298.4" y="942.0">[NIO Selector #1 tid=39171]</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.10%)</title><rect x="295.4" y="915.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="298.4" y="926.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (510 samples, 25.27%)</title><rect x="296.5" y="915.0" width="298.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.5" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (307 samples, 15.21%)</title><rect x="297.1" y="899.0" width="179.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.1" y="910.0">one/nio/net/JavaSelecto..</text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.05%)</title><rect x="297.7" y="883.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.7" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="297.7" y="867.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="300.7" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="297.7" y="851.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="300.7" y="862.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="297.7" y="835.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="300.7" y="846.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.05%)</title><rect x="297.7" y="819.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="300.7" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.05%)</title><rect x="297.7" y="803.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="300.7" y="814.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.05%)</title><rect x="297.7" y="787.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="300.7" y="798.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="297.7" y="771.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="300.7" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.05%)</title><rect x="297.7" y="755.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="300.7" y="766.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.05%)</title><rect x="297.7" y="739.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="300.7" y="750.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="297.7" y="723.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="300.7" y="734.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.05%)</title><rect x="297.7" y="707.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="300.7" y="718.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.05%)</title><rect x="297.7" y="691.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="300.7" y="702.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="297.7" y="675.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="300.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="297.7" y="659.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="300.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="297.7" y="643.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="300.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="297.7" y="627.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="300.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="297.7" y="611.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="300.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="297.7" y="595.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="300.7" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="297.7" y="579.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="300.7" y="590.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.10%)</title><rect x="298.3" y="883.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="301.3" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.05%)</title><rect x="298.9" y="867.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.05%)</title><rect x="298.9" y="851.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.05%)</title><rect x="298.9" y="835.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.9" y="846.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.05%)</title><rect x="299.4" y="883.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.4" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.register (1 samples, 0.05%)</title><rect x="299.4" y="867.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.4" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.05%)</title><rect x="299.4" y="851.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="302.4" y="862.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.05%)</title><rect x="299.4" y="835.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="302.4" y="846.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.05%)</title><rect x="299.4" y="819.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="302.4" y="830.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.05%)</title><rect x="299.4" y="803.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="302.4" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="299.4" y="787.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="302.4" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="299.4" y="771.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="302.4" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="299.4" y="755.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="302.4" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="299.4" y="739.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="302.4" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (302 samples, 14.97%)</title><rect x="300.0" y="883.0" width="176.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.0" y="894.0">sun/nio/ch/SelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (302 samples, 14.97%)</title><rect x="300.0" y="867.0" width="176.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="303.0" y="878.0">sun/nio/ch/SelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (302 samples, 14.97%)</title><rect x="300.0" y="851.0" width="176.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.0" y="862.0">sun/nio/ch/KQueueSelect..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (287 samples, 14.22%)</title><rect x="300.0" y="835.0" width="167.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="303.0" y="846.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>kevent (282 samples, 13.97%)</title><rect x="303.0" y="819.0" width="164.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="306.0" y="830.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.45%)</title><rect x="467.8" y="835.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.8" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.30%)</title><rect x="469.6" y="819.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="472.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.05%)</title><rect x="470.2" y="803.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="473.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.05%)</title><rect x="470.2" y="787.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="470.2" y="771.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.10%)</title><rect x="470.8" y="803.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.10%)</title><rect x="470.8" y="787.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="470.8" y="771.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="471.4" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.10%)</title><rect x="471.9" y="803.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.05%)</title><rect x="472.5" y="787.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (1 samples, 0.05%)</title><rect x="472.5" y="771.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="475.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.10%)</title><rect x="473.1" y="835.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.1" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.10%)</title><rect x="473.1" y="819.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.15%)</title><rect x="474.3" y="835.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.3" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.15%)</title><rect x="474.3" y="819.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.10%)</title><rect x="474.3" y="803.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="477.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.10%)</title><rect x="474.3" y="787.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="477.3" y="798.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.05%)</title><rect x="474.3" y="771.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="477.3" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.05%)</title><rect x="474.3" y="755.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="477.3" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.05%)</title><rect x="474.3" y="739.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="477.3" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.05%)</title><rect x="474.9" y="771.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="477.9" y="782.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="475.5" y="803.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.5" y="814.0"></text>
</g>
<g>
<title>jdk/internal/access/SharedSecrets.getJavaLangAccess (1 samples, 0.05%)</title><rect x="475.5" y="787.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="478.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.05%)</title><rect x="476.0" y="835.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="479.0" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.05%)</title><rect x="476.0" y="819.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.0" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="476.0" y="803.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.0" y="814.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="476.0" y="787.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="476.0" y="771.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.0" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (202 samples, 10.01%)</title><rect x="476.6" y="899.0" width="118.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.6" y="910.0">one/nio/net/Se..</text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.05%)</title><rect x="477.2" y="883.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.2" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="477.2" y="867.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="480.2" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="477.2" y="851.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="480.2" y="862.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="477.2" y="835.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="480.2" y="846.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.05%)</title><rect x="477.2" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="480.2" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.05%)</title><rect x="477.2" y="803.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="480.2" y="814.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.05%)</title><rect x="477.2" y="787.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="480.2" y="798.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="477.2" y="771.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="480.2" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.05%)</title><rect x="477.2" y="755.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="480.2" y="766.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.05%)</title><rect x="477.2" y="739.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="480.2" y="750.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="477.2" y="723.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="480.2" y="734.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.05%)</title><rect x="477.2" y="707.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="480.2" y="718.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.05%)</title><rect x="477.2" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="480.2" y="702.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="477.2" y="675.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="480.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="477.2" y="659.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="480.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="477.2" y="643.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="480.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="477.2" y="627.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="480.2" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (198 samples, 9.81%)</title><rect x="477.8" y="883.0" width="115.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="480.8" y="894.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (150 samples, 7.43%)</title><rect x="479.5" y="867.0" width="87.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="482.5" y="878.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (141 samples, 6.99%)</title><rect x="481.9" y="851.0" width="82.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.9" y="862.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (141 samples, 6.99%)</title><rect x="481.9" y="835.0" width="82.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.9" y="846.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (139 samples, 6.89%)</title><rect x="481.9" y="819.0" width="81.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="484.9" y="830.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (138 samples, 6.84%)</title><rect x="482.5" y="803.0" width="80.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.5" y="814.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (137 samples, 6.79%)</title><rect x="482.5" y="787.0" width="80.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.5" y="798.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.64%)</title><rect x="482.5" y="771.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.5" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="483.1" y="755.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="486.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.55%)</title><rect x="483.6" y="755.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="486.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.05%)</title><rect x="483.6" y="739.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="486.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.30%)</title><rect x="484.2" y="739.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="487.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="487.1" y="723.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="490.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.20%)</title><rect x="487.7" y="739.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="490.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.15%)</title><rect x="488.3" y="723.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="489.5" y="707.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="492.5" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="489.5" y="691.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="492.5" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (124 samples, 6.14%)</title><rect x="490.1" y="771.0" width="72.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="493.1" y="782.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (123 samples, 6.10%)</title><rect x="490.7" y="755.0" width="71.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.7" y="766.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (122 samples, 6.05%)</title><rect x="490.7" y="739.0" width="71.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.7" y="750.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (122 samples, 6.05%)</title><rect x="490.7" y="723.0" width="71.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.7" y="734.0">one/nio/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="490.7" y="707.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.7" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="490.7" y="691.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.7" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="490.7" y="675.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="493.7" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="490.7" y="659.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.7" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="490.7" y="643.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="493.7" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="490.7" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="493.7" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="490.7" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="493.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (121 samples, 6.00%)</title><rect x="491.2" y="707.0" width="70.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="494.2" y="718.0">sun/nio/..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="491.2" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="494.2" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="491.2" y="675.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="494.2" y="686.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="491.2" y="659.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="494.2" y="670.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="491.2" y="643.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="494.2" y="654.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::create_mdo(methodHandle const&amp;, JavaThread*) (1 samples, 0.05%)</title><rect x="491.2" y="627.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="494.2" y="638.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="491.2" y="611.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="494.2" y="622.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.05%)</title><rect x="491.2" y="595.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="494.2" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="491.2" y="579.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="494.2" y="590.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="491.2" y="563.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="494.2" y="574.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="491.2" y="547.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="494.2" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (1 samples, 0.05%)</title><rect x="491.8" y="691.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="494.8" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (119 samples, 5.90%)</title><rect x="492.4" y="691.0" width="69.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="495.4" y="702.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (119 samples, 5.90%)</title><rect x="492.4" y="675.0" width="69.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.4" y="686.0">sun/nio..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.25%)</title><rect x="492.4" y="659.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.4" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.25%)</title><rect x="492.4" y="643.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.25%)</title><rect x="492.4" y="627.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="495.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.20%)</title><rect x="493.0" y="611.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.20%)</title><rect x="493.0" y="595.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.15%)</title><rect x="493.6" y="579.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.isPrimitive (2 samples, 0.10%)</title><rect x="494.2" y="563.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="497.2" y="574.0"></text>
</g>
<g>
<title>JVM_IsPrimitiveClass (2 samples, 0.10%)</title><rect x="494.2" y="547.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="497.2" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.10%)</title><rect x="494.2" y="531.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="497.2" y="542.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="494.2" y="515.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="497.2" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="494.7" y="515.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="497.7" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="494.7" y="499.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="497.7" y="510.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="494.7" y="483.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.7" y="494.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="494.7" y="467.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="497.7" y="478.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="494.7" y="451.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="497.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (113 samples, 5.60%)</title><rect x="495.3" y="659.0" width="66.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="498.3" y="670.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (113 samples, 5.60%)</title><rect x="495.3" y="643.0" width="66.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.3" y="654.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (113 samples, 5.60%)</title><rect x="495.3" y="627.0" width="66.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="498.3" y="638.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.05%)</title><rect x="497.1" y="611.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="500.1" y="622.0"></text>
</g>
<g>
<title>write (109 samples, 5.40%)</title><rect x="497.7" y="611.0" width="63.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="500.7" y="622.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="561.4" y="659.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="564.4" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="561.4" y="643.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="564.4" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.05%)</title><rect x="561.4" y="627.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="564.4" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="562.0" y="739.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="565.0" y="750.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="562.0" y="723.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="565.0" y="734.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="562.0" y="707.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="565.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="562.6" y="787.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="565.6" y="798.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.05%)</title><rect x="563.2" y="819.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="566.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="563.2" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="566.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="563.2" y="787.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.2" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.05%)</title><rect x="563.7" y="819.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.10%)</title><rect x="564.3" y="851.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="567.3" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.10%)</title><rect x="564.3" y="835.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="567.3" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.10%)</title><rect x="564.3" y="819.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="567.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.05%)</title><rect x="565.5" y="851.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="568.5" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="565.5" y="835.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="568.5" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.10%)</title><rect x="566.1" y="851.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="569.1" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.10%)</title><rect x="566.1" y="835.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.1" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (45 samples, 2.23%)</title><rect x="567.3" y="867.0" width="26.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="570.3" y="878.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (45 samples, 2.23%)</title><rect x="567.3" y="851.0" width="26.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="570.3" y="862.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.25%)</title><rect x="567.3" y="835.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.3" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.20%)</title><rect x="567.8" y="819.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="570.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.20%)</title><rect x="567.8" y="803.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="570.8" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="568.4" y="787.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.4" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.10%)</title><rect x="568.4" y="771.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="569.6" y="771.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="569.6" y="755.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.6" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="569.6" y="739.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.6" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (40 samples, 1.98%)</title><rect x="570.2" y="835.0" width="23.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="573.2" y="846.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="570.2" y="819.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="573.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="570.2" y="803.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="573.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="570.2" y="787.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="570.2" y="771.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="573.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.05%)</title><rect x="570.2" y="755.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="573.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (39 samples, 1.93%)</title><rect x="570.8" y="819.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.8" y="830.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (39 samples, 1.93%)</title><rect x="570.8" y="803.0" width="22.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="573.8" y="814.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.15%)</title><rect x="570.8" y="787.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.8" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.10%)</title><rect x="571.3" y="771.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="574.3" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.05%)</title><rect x="571.3" y="755.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="574.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="571.3" y="739.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.3" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="571.9" y="755.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="574.9" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="571.9" y="739.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.9" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="571.9" y="723.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="574.9" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="571.9" y="707.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.9" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 1.78%)</title><rect x="572.5" y="787.0" width="21.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="575.5" y="798.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (34 samples, 1.68%)</title><rect x="573.1" y="771.0" width="19.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (34 samples, 1.68%)</title><rect x="573.1" y="755.0" width="19.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="576.1" y="766.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.05%)</title><rect x="573.1" y="739.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="576.1" y="750.0"></text>
</g>
<g>
<title>read (33 samples, 1.64%)</title><rect x="573.7" y="739.0" width="19.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="576.7" y="750.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.05%)</title><rect x="593.0" y="771.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="596.0" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.10%)</title><rect x="593.6" y="883.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="596.6" y="894.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.10%)</title><rect x="593.6" y="867.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="596.6" y="878.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.10%)</title><rect x="593.6" y="851.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="596.6" y="862.0"></text>
</g>
<g>
<title>_res (2 samples, 0.10%)</title><rect x="593.6" y="835.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="596.6" y="846.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=26115] (410 samples, 20.32%)</title><rect x="594.7" y="931.0" width="239.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="597.7" y="942.0">[NIO Selector #2 tid=26115]</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.10%)</title><rect x="594.7" y="915.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="597.7" y="926.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="595.3" y="899.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="598.3" y="910.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="595.3" y="883.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="598.3" y="894.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (408 samples, 20.22%)</title><rect x="595.9" y="915.0" width="238.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="598.9" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (1 samples, 0.05%)</title><rect x="597.7" y="899.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="600.7" y="910.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (3 samples, 0.15%)</title><rect x="598.2" y="899.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="601.2" y="910.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.10%)</title><rect x="598.8" y="883.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="601.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.05%)</title><rect x="599.4" y="867.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="602.4" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (230 samples, 11.40%)</title><rect x="600.0" y="899.0" width="134.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="603.0" y="910.0">one/nio/net/JavaS..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.15%)</title><rect x="600.0" y="883.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.05%)</title><rect x="600.6" y="867.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="603.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.05%)</title><rect x="600.6" y="851.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="603.6" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.05%)</title><rect x="601.2" y="867.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.05%)</title><rect x="601.2" y="851.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="604.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.05%)</title><rect x="601.2" y="835.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="604.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="601.2" y="819.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="604.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (226 samples, 11.20%)</title><rect x="601.8" y="883.0" width="132.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="604.8" y="894.0">sun/nio/ch/Selec..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (226 samples, 11.20%)</title><rect x="601.8" y="867.0" width="132.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="604.8" y="878.0">sun/nio/ch/Selec..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (225 samples, 11.15%)</title><rect x="602.3" y="851.0" width="131.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.3" y="862.0">sun/nio/ch/KQueu..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (218 samples, 10.80%)</title><rect x="602.9" y="835.0" width="127.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="605.9" y="846.0">sun/nio/ch/KQueu..</text>
</g>
<g>
<title>kevent (210 samples, 10.41%)</title><rect x="607.6" y="819.0" width="122.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="610.6" y="830.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.20%)</title><rect x="730.4" y="835.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.15%)</title><rect x="731.0" y="819.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="734.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.05%)</title><rect x="731.0" y="803.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="734.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.05%)</title><rect x="731.0" y="787.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="734.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.05%)</title><rect x="731.0" y="771.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="734.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.05%)</title><rect x="731.6" y="803.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="734.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.05%)</title><rect x="731.6" y="787.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="734.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="731.6" y="771.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="734.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.05%)</title><rect x="732.2" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="735.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.05%)</title><rect x="732.7" y="835.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="735.7" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.05%)</title><rect x="732.7" y="819.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="735.7" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.05%)</title><rect x="733.3" y="835.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="736.3" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.05%)</title><rect x="733.3" y="819.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="736.3" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="733.3" y="803.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="736.3" y="814.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="733.3" y="787.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="736.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="733.3" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="736.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.05%)</title><rect x="733.9" y="883.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="736.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.05%)</title><rect x="733.9" y="867.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.05%)</title><rect x="733.9" y="851.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="736.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (171 samples, 8.47%)</title><rect x="734.5" y="899.0" width="100.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="737.5" y="910.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (167 samples, 8.28%)</title><rect x="735.7" y="883.0" width="97.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.7" y="894.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (129 samples, 6.39%)</title><rect x="735.7" y="867.0" width="75.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="738.7" y="878.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (123 samples, 6.10%)</title><rect x="737.4" y="851.0" width="71.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="740.4" y="862.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (123 samples, 6.10%)</title><rect x="737.4" y="835.0" width="71.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="740.4" y="846.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (122 samples, 6.05%)</title><rect x="737.4" y="819.0" width="71.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.4" y="830.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (120 samples, 5.95%)</title><rect x="737.4" y="803.0" width="70.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="740.4" y="814.0">one/nio/..</text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.05%)</title><rect x="738.0" y="787.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="741.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (117 samples, 5.80%)</title><rect x="738.6" y="787.0" width="68.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.6" y="798.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.79%)</title><rect x="738.6" y="771.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="741.6" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="739.8" y="755.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="742.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13 samples, 0.64%)</title><rect x="740.3" y="755.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="743.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="740.3" y="739.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="743.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.05%)</title><rect x="740.3" y="723.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.3" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.25%)</title><rect x="740.9" y="739.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="743.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.10%)</title><rect x="742.7" y="723.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="745.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.35%)</title><rect x="743.8" y="739.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="746.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.30%)</title><rect x="744.4" y="723.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="746.8" y="707.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="749.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="746.8" y="691.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="749.8" y="702.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (1 samples, 0.05%)</title><rect x="747.4" y="707.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="750.4" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (101 samples, 5.00%)</title><rect x="747.9" y="771.0" width="59.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="750.9" y="782.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.&lt;init&gt; (1 samples, 0.05%)</title><rect x="747.9" y="755.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="750.9" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (100 samples, 4.96%)</title><rect x="748.5" y="755.0" width="58.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="751.5" y="766.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (100 samples, 4.96%)</title><rect x="748.5" y="739.0" width="58.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="751.5" y="750.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (100 samples, 4.96%)</title><rect x="748.5" y="723.0" width="58.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="751.5" y="734.0">one/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.10%)</title><rect x="748.5" y="707.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.5" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="748.5" y="691.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="751.5" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="748.5" y="675.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.5" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="748.5" y="659.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="751.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="748.5" y="643.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="751.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="749.1" y="643.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="752.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (98 samples, 4.86%)</title><rect x="749.7" y="707.0" width="57.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="752.7" y="718.0">sun/ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.15%)</title><rect x="750.3" y="691.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="753.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.15%)</title><rect x="750.3" y="675.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="753.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.15%)</title><rect x="750.3" y="659.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.15%)</title><rect x="750.3" y="643.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.15%)</title><rect x="750.3" y="627.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.3" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.15%)</title><rect x="750.3" y="611.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="753.3" y="622.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="750.3" y="595.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="753.3" y="606.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="750.3" y="579.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="753.3" y="590.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="750.3" y="563.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="753.3" y="574.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.10%)</title><rect x="750.9" y="595.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="753.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (94 samples, 4.66%)</title><rect x="752.0" y="691.0" width="55.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="755.0" y="702.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (94 samples, 4.66%)</title><rect x="752.0" y="675.0" width="55.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="755.0" y="686.0">sun/n..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.15%)</title><rect x="752.0" y="659.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.0" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.15%)</title><rect x="752.0" y="643.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.15%)</title><rect x="752.0" y="627.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="755.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.05%)</title><rect x="752.0" y="611.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="755.0" y="622.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (1 samples, 0.05%)</title><rect x="752.0" y="595.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="755.0" y="606.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.05%)</title><rect x="752.0" y="579.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="755.0" y="590.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.05%)</title><rect x="752.0" y="563.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="755.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.10%)</title><rect x="752.6" y="611.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="755.6" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.10%)</title><rect x="752.6" y="595.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="755.6" y="606.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.05%)</title><rect x="752.6" y="579.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="753.2" y="579.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.2" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.05%)</title><rect x="753.2" y="563.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (90 samples, 4.46%)</title><rect x="753.8" y="659.0" width="52.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.8" y="670.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (90 samples, 4.46%)</title><rect x="753.8" y="643.0" width="52.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.8" y="654.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (90 samples, 4.46%)</title><rect x="753.8" y="627.0" width="52.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="756.8" y="638.0">sun/n..</text>
</g>
<g>
<title>write (88 samples, 4.36%)</title><rect x="755.0" y="611.0" width="51.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="758.0" y="622.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="806.4" y="659.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="809.4" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="806.4" y="643.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.4" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.05%)</title><rect x="806.4" y="627.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="809.4" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="807.0" y="787.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="807.0" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.status (2 samples, 0.10%)</title><rect x="807.6" y="803.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.10%)</title><rect x="807.6" y="787.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="810.6" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.10%)</title><rect x="807.6" y="771.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="810.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.05%)</title><rect x="807.6" y="755.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="807.6" y="739.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="810.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.05%)</title><rect x="808.2" y="755.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="811.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.05%)</title><rect x="808.8" y="819.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="808.8" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="811.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="808.8" y="787.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="808.8" y="771.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.05%)</title><rect x="808.8" y="755.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="811.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.05%)</title><rect x="809.3" y="851.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.3" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.05%)</title><rect x="809.3" y="835.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="812.3" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="809.9" y="851.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="812.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="809.9" y="835.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.9" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="809.9" y="819.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="810.5" y="851.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="813.5" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="810.5" y="835.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="813.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (38 samples, 1.88%)</title><rect x="811.1" y="867.0" width="22.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.1" y="878.0">o..</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (1 samples, 0.05%)</title><rect x="811.1" y="851.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="814.1" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (1 samples, 0.05%)</title><rect x="811.1" y="835.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="814.1" y="846.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.05%)</title><rect x="811.1" y="819.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="814.1" y="830.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 1.83%)</title><rect x="811.7" y="851.0" width="21.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.7" y="862.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="811.7" y="835.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="814.7" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="811.7" y="819.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.7" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="811.7" y="803.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="814.7" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="811.7" y="787.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="814.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="811.7" y="771.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.7" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.05%)</title><rect x="811.7" y="755.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="814.7" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="811.7" y="739.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="814.7" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="811.7" y="723.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="814.7" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper_internal(methodHandle, frame const&amp;, CompiledMethod*, bool, bool, Handle, CallInfo&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="811.7" y="707.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="814.7" y="718.0"></text>
</g>
<g>
<title>CompiledICLocker::CompiledICLocker(CompiledMethod*) (1 samples, 0.05%)</title><rect x="811.7" y="691.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="814.7" y="702.0"></text>
</g>
<g>
<title>DefaultICProtectionBehaviour::lock(CompiledMethod*) (1 samples, 0.05%)</title><rect x="811.7" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="814.7" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="811.7" y="659.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.7" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="811.7" y="643.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.7" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="811.7" y="627.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="814.7" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="811.7" y="611.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="814.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (36 samples, 1.78%)</title><rect x="812.3" y="835.0" width="21.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.3" y="846.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.10%)</title><rect x="812.3" y="819.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="815.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.10%)</title><rect x="812.3" y="803.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.10%)</title><rect x="812.3" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.10%)</title><rect x="812.3" y="771.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="815.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.05%)</title><rect x="812.8" y="755.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="815.8" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.05%)</title><rect x="812.8" y="739.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="815.8" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.05%)</title><rect x="812.8" y="723.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.8" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 1.68%)</title><rect x="813.4" y="819.0" width="19.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 1.68%)</title><rect x="813.4" y="803.0" width="19.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="816.4" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.10%)</title><rect x="813.4" y="787.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="816.4" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.10%)</title><rect x="813.4" y="771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="816.4" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.10%)</title><rect x="813.4" y="755.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.4" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.10%)</title><rect x="813.4" y="739.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.4" y="750.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (2 samples, 0.10%)</title><rect x="813.4" y="723.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="816.4" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.05%)</title><rect x="813.4" y="707.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.4" y="718.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="813.4" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="816.4" y="702.0"></text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.05%)</title><rect x="814.0" y="707.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="817.0" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (32 samples, 1.59%)</title><rect x="814.6" y="787.0" width="18.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.6" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (32 samples, 1.59%)</title><rect x="814.6" y="771.0" width="18.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (32 samples, 1.59%)</title><rect x="814.6" y="755.0" width="18.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="817.6" y="766.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.05%)</title><rect x="815.2" y="739.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="818.2" y="750.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="815.2" y="723.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="818.2" y="734.0"></text>
</g>
<g>
<title>read (30 samples, 1.49%)</title><rect x="815.8" y="739.0" width="17.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="818.8" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.10%)</title><rect x="833.3" y="883.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="836.3" y="894.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="833.9" y="867.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="836.9" y="878.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="833.9" y="851.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="836.9" y="862.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=26883] (376 samples, 18.63%)</title><rect x="834.5" y="931.0" width="219.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="837.5" y="942.0">[NIO Selector #3 tid=26883]</text>
</g>
<g>
<title>Runtime1::new_instance(JavaThread*, Klass*) (1 samples, 0.05%)</title><rect x="834.5" y="915.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="837.5" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="834.5" y="899.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="834.5" y="883.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="837.5" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="834.5" y="867.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="837.5" y="878.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="834.5" y="851.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="837.5" y="862.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.05%)</title><rect x="835.1" y="915.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="838.1" y="926.0"></text>
</g>
<g>
<title>Deoptimization::unpack_frames(JavaThread*, int) (1 samples, 0.05%)</title><rect x="835.1" y="899.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="838.1" y="910.0"></text>
</g>
<g>
<title>vframeArray::unpack_to_stack(frame&amp;, int, int) (1 samples, 0.05%)</title><rect x="835.1" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="838.1" y="894.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (374 samples, 18.53%)</title><rect x="835.6" y="915.0" width="218.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="838.6" y="926.0">one/nio/server/SelectorThread..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.05%)</title><rect x="838.0" y="899.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="841.0" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.05%)</title><rect x="838.6" y="899.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="841.6" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="838.6" y="883.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="841.6" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="838.6" y="867.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="841.6" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.05%)</title><rect x="838.6" y="851.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="841.6" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.05%)</title><rect x="838.6" y="835.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="841.6" y="846.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.05%)</title><rect x="838.6" y="819.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.6" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.05%)</title><rect x="838.6" y="803.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="841.6" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="838.6" y="787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="841.6" y="798.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.05%)</title><rect x="838.6" y="771.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="841.6" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.05%)</title><rect x="838.6" y="755.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="841.6" y="766.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.05%)</title><rect x="838.6" y="739.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="841.6" y="750.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.05%)</title><rect x="839.2" y="899.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="842.2" y="910.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (217 samples, 10.75%)</title><rect x="839.7" y="899.0" width="126.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="842.7" y="910.0">one/nio/net/Java..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.15%)</title><rect x="839.7" y="883.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="842.7" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/SelectionKey.attachment (1 samples, 0.05%)</title><rect x="840.3" y="867.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="843.3" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.05%)</title><rect x="840.9" y="867.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="843.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.05%)</title><rect x="840.9" y="851.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="843.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.05%)</title><rect x="840.9" y="835.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="843.9" y="846.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.05%)</title><rect x="841.5" y="883.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="844.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.05%)</title><rect x="841.5" y="867.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="844.5" y="878.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="842.1" y="883.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="845.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (211 samples, 10.46%)</title><rect x="842.7" y="883.0" width="123.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="845.7" y="894.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (211 samples, 10.46%)</title><rect x="842.7" y="867.0" width="123.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="845.7" y="878.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (210 samples, 10.41%)</title><rect x="843.3" y="851.0" width="122.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.3" y="862.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (204 samples, 10.11%)</title><rect x="843.3" y="835.0" width="119.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="846.3" y="846.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.05%)</title><rect x="847.9" y="819.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="850.9" y="830.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.05%)</title><rect x="847.9" y="803.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="850.9" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="847.9" y="787.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="850.9" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="847.9" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="850.9" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="847.9" y="755.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="850.9" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="847.9" y="739.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="850.9" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="847.9" y="723.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="850.9" y="734.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.05%)</title><rect x="848.5" y="819.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="851.5" y="830.0"></text>
</g>
<g>
<title>kevent (194 samples, 9.61%)</title><rect x="849.1" y="819.0" width="113.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="852.1" y="830.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.15%)</title><rect x="962.5" y="835.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="965.5" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.15%)</title><rect x="962.5" y="819.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="965.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.10%)</title><rect x="962.5" y="803.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="965.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.10%)</title><rect x="962.5" y="787.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="965.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="962.5" y="771.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.05%)</title><rect x="963.1" y="771.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="966.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.05%)</title><rect x="963.7" y="803.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="966.7" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.05%)</title><rect x="963.7" y="787.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="966.7" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.10%)</title><rect x="964.3" y="835.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="967.3" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.10%)</title><rect x="964.3" y="819.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="967.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="964.9" y="803.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="967.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="964.9" y="787.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="967.9" y="798.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.05%)</title><rect x="964.9" y="771.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="967.9" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.05%)</title><rect x="964.9" y="755.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="967.9" y="766.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.05%)</title><rect x="964.9" y="739.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.05%)</title><rect x="965.5" y="835.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="968.5" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.05%)</title><rect x="965.5" y="819.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="968.5" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="965.5" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="968.5" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.05%)</title><rect x="966.0" y="883.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="969.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.05%)</title><rect x="966.0" y="867.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="969.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.05%)</title><rect x="966.0" y="851.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="969.0" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (150 samples, 7.43%)</title><rect x="966.6" y="899.0" width="87.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="969.6" y="910.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (146 samples, 7.23%)</title><rect x="968.4" y="883.0" width="85.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.4" y="894.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (110 samples, 5.45%)</title><rect x="968.4" y="867.0" width="64.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="971.4" y="878.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (102 samples, 5.05%)</title><rect x="969.6" y="851.0" width="59.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="972.6" y="862.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (102 samples, 5.05%)</title><rect x="969.6" y="835.0" width="59.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="972.6" y="846.0">one/ni..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (100 samples, 4.96%)</title><rect x="969.6" y="819.0" width="58.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="972.6" y="830.0">Reques..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (95 samples, 4.71%)</title><rect x="969.6" y="803.0" width="55.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="972.6" y="814.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (94 samples, 4.66%)</title><rect x="969.6" y="787.0" width="54.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="972.6" y="798.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.35%)</title><rect x="969.6" y="771.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="972.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.30%)</title><rect x="970.1" y="755.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="973.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="970.1" y="739.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="973.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.05%)</title><rect x="970.1" y="723.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="973.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.05%)</title><rect x="970.7" y="739.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="973.7" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="970.7" y="723.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="973.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.10%)</title><rect x="971.3" y="739.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="974.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="971.9" y="723.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="974.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="971.9" y="707.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.9" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.10%)</title><rect x="972.5" y="739.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="975.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.10%)</title><rect x="972.5" y="723.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="975.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="973.1" y="707.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="976.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="973.1" y="691.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="976.1" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (87 samples, 4.31%)</title><rect x="973.6" y="771.0" width="50.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="976.6" y="782.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (87 samples, 4.31%)</title><rect x="973.6" y="755.0" width="50.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="976.6" y="766.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (87 samples, 4.31%)</title><rect x="973.6" y="739.0" width="50.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="976.6" y="750.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (87 samples, 4.31%)</title><rect x="973.6" y="723.0" width="50.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="976.6" y="734.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.15%)</title><rect x="973.6" y="707.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="976.6" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="973.6" y="691.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="976.6" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="973.6" y="675.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="976.6" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="974.2" y="659.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="977.2" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.10%)</title><rect x="974.2" y="643.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="977.2" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="974.8" y="627.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="977.8" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="974.8" y="611.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="977.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (84 samples, 4.16%)</title><rect x="975.4" y="707.0" width="49.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="978.4" y="718.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="975.4" y="691.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="978.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="975.4" y="675.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="978.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="975.4" y="659.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="978.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="975.4" y="643.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="978.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.05%)</title><rect x="975.4" y="627.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="978.4" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="975.4" y="611.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.4" y="622.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="975.4" y="595.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="978.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (82 samples, 4.06%)</title><rect x="976.0" y="691.0" width="47.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="979.0" y="702.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (82 samples, 4.06%)</title><rect x="976.0" y="675.0" width="47.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="979.0" y="686.0">sun/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.25%)</title><rect x="976.0" y="659.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="979.0" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.20%)</title><rect x="976.6" y="643.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="979.6" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.20%)</title><rect x="976.6" y="627.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="979.6" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.20%)</title><rect x="976.6" y="611.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.6" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.20%)</title><rect x="976.6" y="595.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="979.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.05%)</title><rect x="976.6" y="579.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="979.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.15%)</title><rect x="977.2" y="579.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="980.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (77 samples, 3.82%)</title><rect x="978.9" y="659.0" width="45.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="981.9" y="670.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (77 samples, 3.82%)</title><rect x="978.9" y="643.0" width="45.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="981.9" y="654.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (77 samples, 3.82%)</title><rect x="978.9" y="627.0" width="45.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="981.9" y="638.0">sun/..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.05%)</title><rect x="980.1" y="611.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="983.1" y="622.0"></text>
</g>
<g>
<title>write (74 samples, 3.67%)</title><rect x="980.7" y="611.0" width="43.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="983.7" y="622.0">write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (1 samples, 0.05%)</title><rect x="1023.9" y="691.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1026.9" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="1024.5" y="787.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1027.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.status (5 samples, 0.25%)</title><rect x="1025.1" y="803.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1028.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (5 samples, 0.25%)</title><rect x="1025.1" y="787.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1028.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.15%)</title><rect x="1025.1" y="771.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1028.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.15%)</title><rect x="1025.1" y="755.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1028.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.10%)</title><rect x="1025.7" y="739.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.7" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="1026.3" y="723.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1029.3" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1026.9" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1029.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.10%)</title><rect x="1026.9" y="755.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1029.9" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.10%)</title><rect x="1026.9" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1029.9" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.05%)</title><rect x="1027.4" y="723.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1030.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.10%)</title><rect x="1028.0" y="819.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1031.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="1028.6" y="803.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1031.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="1028.6" y="787.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="1028.6" y="771.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1031.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.05%)</title><rect x="1028.6" y="755.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1031.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.05%)</title><rect x="1029.2" y="851.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1032.2" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1029.2" y="835.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1032.2" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1029.2" y="819.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1032.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.15%)</title><rect x="1029.8" y="851.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.15%)</title><rect x="1029.8" y="835.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1032.8" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.10%)</title><rect x="1030.4" y="819.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1033.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.05%)</title><rect x="1031.0" y="803.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.05%)</title><rect x="1031.0" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1034.0" y="798.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.05%)</title><rect x="1031.0" y="771.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1034.0" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.10%)</title><rect x="1031.5" y="851.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.5" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1032.1" y="835.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1035.1" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (36 samples, 1.78%)</title><rect x="1032.7" y="867.0" width="21.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.7" y="878.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (36 samples, 1.78%)</title><rect x="1032.7" y="851.0" width="21.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1035.7" y="862.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="1033.3" y="835.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1036.3" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1033.3" y="819.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1036.3" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1033.3" y="803.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1036.3" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1033.3" y="787.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1036.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1033.3" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1036.3" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="1033.3" y="755.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1036.3" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (34 samples, 1.68%)</title><rect x="1033.9" y="835.0" width="19.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1036.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="1033.9" y="819.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1036.9" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 1.64%)</title><rect x="1034.5" y="819.0" width="19.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1037.5" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 1.64%)</title><rect x="1034.5" y="803.0" width="19.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1037.5" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.10%)</title><rect x="1034.5" y="787.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1037.5" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.10%)</title><rect x="1034.5" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1037.5" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="1035.0" y="755.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1038.0" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.05%)</title><rect x="1035.0" y="739.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1038.0" y="750.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (1 samples, 0.05%)</title><rect x="1035.0" y="723.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1038.0" y="734.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="1035.0" y="707.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.0" y="718.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.05%)</title><rect x="1035.0" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.0" y="702.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="1035.0" y="675.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1038.0" y="686.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.05%)</title><rect x="1035.0" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.0" y="670.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="1035.0" y="643.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.0" y="654.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.05%)</title><rect x="1035.0" y="627.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1038.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (31 samples, 1.54%)</title><rect x="1035.6" y="787.0" width="18.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1038.6" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (31 samples, 1.54%)</title><rect x="1035.6" y="771.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1038.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (30 samples, 1.49%)</title><rect x="1036.2" y="755.0" width="17.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1039.2" y="766.0"></text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.05%)</title><rect x="1036.8" y="739.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1039.8" y="750.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.10%)</title><rect x="1037.4" y="739.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1040.4" y="750.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="1038.0" y="723.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1041.0" y="734.0"></text>
</g>
<g>
<title>read (26 samples, 1.29%)</title><rect x="1038.6" y="739.0" width="15.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1041.6" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="1053.8" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.8" y="894.0"></text>
</g>
<g>
<title>[tid=12035] (8 samples, 0.40%)</title><rect x="1054.3" y="931.0" width="4.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1057.3" y="942.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.40%)</title><rect x="1054.3" y="915.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1057.3" y="926.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.40%)</title><rect x="1054.3" y="899.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1057.3" y="910.0"></text>
</g>
<g>
<title>_pthread_body (8 samples, 0.40%)</title><rect x="1054.3" y="883.0" width="4.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1057.3" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.40%)</title><rect x="1054.3" y="867.0" width="4.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1057.3" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.40%)</title><rect x="1054.3" y="851.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.3" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 0.40%)</title><rect x="1054.3" y="835.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.3" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.15%)</title><rect x="1054.3" y="819.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.3" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.10%)</title><rect x="1054.3" y="803.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1057.3" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.10%)</title><rect x="1054.3" y="787.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.3" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.10%)</title><rect x="1054.3" y="771.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.3" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (2 samples, 0.10%)</title><rect x="1054.3" y="755.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.3" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (2 samples, 0.10%)</title><rect x="1054.3" y="739.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.3" y="750.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.10%)</title><rect x="1054.3" y="723.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.3" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.05%)</title><rect x="1054.3" y="707.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1057.3" y="718.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="1054.3" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.3" y="702.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.05%)</title><rect x="1054.9" y="707.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1057.9" y="718.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.05%)</title><rect x="1054.9" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.9" y="702.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate&lt;G1ScanObjsDuringUpdateRSClosure&gt;(G1ScanObjsDuringUpdateRSClosure*, MemRegion) (1 samples, 0.05%)</title><rect x="1054.9" y="675.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.9" y="686.0"></text>
</g>
<g>
<title>void ObjArrayKlass::oop_oop_iterate_elements_bounded&lt;unsigned int, G1ScanObjsDuringUpdateRSClosure&gt;(objArrayOopDesc*, G1ScanObjsDuringUpdateRSClosure*, void*, void*) (1 samples, 0.05%)</title><rect x="1054.9" y="659.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.9" y="670.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="1054.9" y="643.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.9" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1055.5" y="803.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1058.5" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="1055.5" y="787.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.5" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1055.5" y="771.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.5" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.05%)</title><rect x="1055.5" y="755.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1058.5" y="766.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1055.5" y="739.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1058.5" y="750.0"></text>
</g>
<g>
<title>frame::oops_code_blob_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) (1 samples, 0.05%)</title><rect x="1055.5" y="723.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.5" y="734.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.05%)</title><rect x="1055.5" y="707.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.5" y="718.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1055.5" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1058.5" y="702.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.05%)</title><rect x="1055.5" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1058.5" y="686.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="1055.5" y="659.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1058.5" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.05%)</title><rect x="1055.5" y="643.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1058.5" y="654.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1055.5" y="627.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1058.5" y="638.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (4 samples, 0.20%)</title><rect x="1056.1" y="819.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1059.1" y="830.0"></text>
</g>
<g>
<title>InlineCacheBuffer::update_inline_caches() (1 samples, 0.05%)</title><rect x="1056.1" y="803.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1059.1" y="814.0"></text>
</g>
<g>
<title>StubQueue::remove_all() (1 samples, 0.05%)</title><rect x="1056.1" y="787.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1059.1" y="798.0"></text>
</g>
<g>
<title>StubQueue::remove_first() (1 samples, 0.05%)</title><rect x="1056.1" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1059.1" y="782.0"></text>
</g>
<g>
<title>CompiledIC::CompiledIC(CompiledMethod*, NativeCall*) (1 samples, 0.05%)</title><rect x="1056.1" y="755.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1059.1" y="766.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 0.15%)</title><rect x="1056.7" y="803.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.7" y="814.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (3 samples, 0.15%)</title><rect x="1056.7" y="787.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1059.7" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (3 samples, 0.15%)</title><rect x="1056.7" y="771.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1059.7" y="782.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_monitor_list(ObjectMonitor**, ObjectMonitor**, ObjectMonitor**) (1 samples, 0.05%)</title><rect x="1056.7" y="755.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1059.7" y="766.0"></text>
</g>
<g>
<title>elapsedTimer::seconds() const (2 samples, 0.10%)</title><rect x="1057.3" y="755.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.3" y="766.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.05%)</title><rect x="1058.4" y="819.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.4" y="830.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.05%)</title><rect x="1058.4" y="803.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1061.4" y="814.0"></text>
</g>
<g>
<title>[tid=19203] (8 samples, 0.40%)</title><rect x="1059.0" y="931.0" width="4.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1062.0" y="942.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.40%)</title><rect x="1059.0" y="915.0" width="4.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1062.0" y="926.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.40%)</title><rect x="1059.0" y="899.0" width="4.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1062.0" y="910.0"></text>
</g>
<g>
<title>_pthread_body (8 samples, 0.40%)</title><rect x="1059.0" y="883.0" width="4.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1062.0" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.40%)</title><rect x="1059.0" y="867.0" width="4.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1062.0" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.40%)</title><rect x="1059.0" y="851.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.0" y="862.0"></text>
</g>
<g>
<title>VMThread::run() (8 samples, 0.40%)</title><rect x="1059.0" y="835.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.0" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (8 samples, 0.40%)</title><rect x="1059.0" y="819.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.0" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.20%)</title><rect x="1059.0" y="803.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1062.0" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.20%)</title><rect x="1059.0" y="787.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1062.0" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.15%)</title><rect x="1059.0" y="771.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.0" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.15%)</title><rect x="1059.0" y="755.0" width="1.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1062.0" y="766.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.05%)</title><rect x="1060.8" y="771.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1063.8" y="782.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.15%)</title><rect x="1061.4" y="803.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.4" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.10%)</title><rect x="1061.4" y="787.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.4" y="798.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (2 samples, 0.10%)</title><rect x="1061.4" y="771.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.4" y="782.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.10%)</title><rect x="1061.4" y="755.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.4" y="766.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.10%)</title><rect x="1061.4" y="739.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1064.4" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.05%)</title><rect x="1062.5" y="787.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1065.5" y="798.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.05%)</title><rect x="1062.5" y="771.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1065.5" y="782.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.05%)</title><rect x="1063.1" y="803.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1066.1" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.05%)</title><rect x="1063.1" y="787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1066.1" y="798.0"></text>
</g>
<g>
<title>VM_RevokeBias::doit() (1 samples, 0.05%)</title><rect x="1063.1" y="771.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.1" y="782.0"></text>
</g>
<g>
<title>revoke_bias(oopDesc*, bool, bool, JavaThread*, JavaThread**) (1 samples, 0.05%)</title><rect x="1063.1" y="755.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1066.1" y="766.0"></text>
</g>
<g>
<title>get_or_compute_monitor_info(JavaThread*) (1 samples, 0.05%)</title><rect x="1063.1" y="739.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1066.1" y="750.0"></text>
</g>
<g>
<title>vframe::java_sender() const (1 samples, 0.05%)</title><rect x="1063.1" y="723.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.1" y="734.0"></text>
</g>
<g>
<title>vframe::sender() const (1 samples, 0.05%)</title><rect x="1063.1" y="707.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.1" y="718.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.05%)</title><rect x="1063.1" y="691.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.1" y="702.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(RegisterMap const*) (1 samples, 0.05%)</title><rect x="1063.1" y="675.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.1" y="686.0"></text>
</g>
<g>
<title>[tid=19971] (5 samples, 0.25%)</title><rect x="1063.7" y="931.0" width="2.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1066.7" y="942.0"></text>
</g>
<g>
<title>thread_start (5 samples, 0.25%)</title><rect x="1063.7" y="915.0" width="2.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1066.7" y="926.0"></text>
</g>
<g>
<title>_pthread_start (5 samples, 0.25%)</title><rect x="1063.7" y="899.0" width="2.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1066.7" y="910.0"></text>
</g>
<g>
<title>_pthread_body (5 samples, 0.25%)</title><rect x="1063.7" y="883.0" width="2.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1066.7" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.25%)</title><rect x="1063.7" y="867.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1066.7" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.25%)</title><rect x="1063.7" y="851.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.7" y="862.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (5 samples, 0.25%)</title><rect x="1063.7" y="835.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.7" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (5 samples, 0.25%)</title><rect x="1063.7" y="819.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.7" y="830.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (5 samples, 0.25%)</title><rect x="1063.7" y="803.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.7" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.25%)</title><rect x="1063.7" y="787.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.7" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.25%)</title><rect x="1063.7" y="771.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.7" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.25%)</title><rect x="1063.7" y="755.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.7" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.20%)</title><rect x="1063.7" y="739.0" width="2.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1066.7" y="750.0"></text>
</g>
<g>
<title>mutex (1 samples, 0.05%)</title><rect x="1066.0" y="739.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1069.0" y="750.0"></text>
</g>
<g>
<title>[tid=20227] (1 samples, 0.05%)</title><rect x="1066.6" y="931.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1069.6" y="942.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="1066.6" y="915.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1069.6" y="926.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="1066.6" y="899.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1069.6" y="910.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="1066.6" y="883.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1069.6" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="1066.6" y="867.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1069.6" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="1066.6" y="851.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.6" y="862.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.05%)</title><rect x="1066.6" y="835.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1069.6" y="846.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (1 samples, 0.05%)</title><rect x="1066.6" y="819.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.6" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (1 samples, 0.05%)</title><rect x="1066.6" y="803.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.6" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.05%)</title><rect x="1066.6" y="787.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.6" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (1 samples, 0.05%)</title><rect x="1066.6" y="771.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.6" y="782.0"></text>
</g>
<g>
<title>G1RefineCardConcurrentlyClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.05%)</title><rect x="1066.6" y="755.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.6" y="766.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (1 samples, 0.05%)</title><rect x="1066.6" y="739.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.6" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (1 samples, 0.05%)</title><rect x="1066.6" y="723.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.6" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.05%)</title><rect x="1066.6" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1069.6" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.05%)</title><rect x="1066.6" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.6" y="702.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_size(oopDesc*) const (1 samples, 0.05%)</title><rect x="1066.6" y="675.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.6" y="686.0"></text>
</g>
<g>
<title>[tid=22019] (169 samples, 8.37%)</title><rect x="1067.2" y="931.0" width="98.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1070.2" y="942.0">[tid=22019]</text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.05%)</title><rect x="1067.2" y="915.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1070.2" y="926.0"></text>
</g>
<g>
<title>thread_start (168 samples, 8.33%)</title><rect x="1067.8" y="915.0" width="98.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1070.8" y="926.0">thread_start</text>
</g>
<g>
<title>_pthread_start (168 samples, 8.33%)</title><rect x="1067.8" y="899.0" width="98.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1070.8" y="910.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (168 samples, 8.33%)</title><rect x="1067.8" y="883.0" width="98.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1070.8" y="894.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (168 samples, 8.33%)</title><rect x="1067.8" y="867.0" width="98.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1070.8" y="878.0">thread_nativ..</text>
</g>
<g>
<title>Thread::call_run() (168 samples, 8.33%)</title><rect x="1067.8" y="851.0" width="98.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.8" y="862.0">Thread::call..</text>
</g>
<g>
<title>JavaThread::run() (168 samples, 8.33%)</title><rect x="1067.8" y="835.0" width="98.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.8" y="846.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (168 samples, 8.33%)</title><rect x="1067.8" y="819.0" width="98.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.8" y="830.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (168 samples, 8.33%)</title><rect x="1067.8" y="803.0" width="98.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.8" y="814.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (168 samples, 8.33%)</title><rect x="1067.8" y="787.0" width="98.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.8" y="798.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (166 samples, 8.23%)</title><rect x="1067.8" y="771.0" width="97.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.8" y="782.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (166 samples, 8.23%)</title><rect x="1067.8" y="755.0" width="97.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.8" y="766.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (103 samples, 5.10%)</title><rect x="1067.8" y="739.0" width="60.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.8" y="750.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.20%)</title><rect x="1067.8" y="723.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.8" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.05%)</title><rect x="1068.4" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.4" y="718.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.10%)</title><rect x="1069.0" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1072.0" y="718.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.10%)</title><rect x="1069.0" y="691.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1072.0" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.20%)</title><rect x="1070.1" y="723.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.1" y="734.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.05%)</title><rect x="1070.1" y="707.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.1" y="718.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1070.1" y="691.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.1" y="702.0"></text>
</g>
<g>
<title>PhaseRegAlloc::is_oop(Node const*) const (1 samples, 0.05%)</title><rect x="1070.1" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.1" y="686.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.05%)</title><rect x="1070.7" y="707.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.7" y="718.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.05%)</title><rect x="1071.3" y="707.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.3" y="718.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (1 samples, 0.05%)</title><rect x="1071.3" y="691.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1074.3" y="702.0"></text>
</g>
<g>
<title>Assembler::prefix(Address, RegisterImpl*, bool) (1 samples, 0.05%)</title><rect x="1071.3" y="675.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.3" y="686.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.05%)</title><rect x="1071.9" y="707.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1074.9" y="718.0"></text>
</g>
<g>
<title>MachNode::ideal_Opcode() const (1 samples, 0.05%)</title><rect x="1072.5" y="723.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.5" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.50%)</title><rect x="1073.1" y="723.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.1" y="734.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.05%)</title><rect x="1073.1" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.1" y="718.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="1073.1" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.1" y="702.0"></text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="1073.1" y="675.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1076.1" y="686.0"></text>
</g>
<g>
<title>large_entry_for_pointer_no_lock (1 samples, 0.05%)</title><rect x="1073.1" y="659.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1076.1" y="670.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.05%)</title><rect x="1073.6" y="707.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1076.6" y="718.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.05%)</title><rect x="1073.6" y="691.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.6" y="702.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.10%)</title><rect x="1074.2" y="707.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.2" y="718.0"></text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 0.05%)</title><rect x="1074.8" y="691.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.8" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.30%)</title><rect x="1075.4" y="707.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1078.4" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.05%)</title><rect x="1075.4" y="691.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.4" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.20%)</title><rect x="1076.0" y="691.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.0" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.15%)</title><rect x="1076.0" y="675.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.0" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.15%)</title><rect x="1076.0" y="659.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.0" y="670.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.10%)</title><rect x="1076.0" y="643.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.0" y="654.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.05%)</title><rect x="1076.6" y="627.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.6" y="638.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1076.6" y="611.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.6" y="622.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1076.6" y="595.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.6" y="606.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.05%)</title><rect x="1077.1" y="643.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.1" y="654.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.05%)</title><rect x="1077.1" y="627.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.1" y="638.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.05%)</title><rect x="1077.7" y="675.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.7" y="686.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.05%)</title><rect x="1077.7" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.7" y="670.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.05%)</title><rect x="1077.7" y="643.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.7" y="654.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1078.3" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.3" y="702.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1078.3" y="675.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.3" y="686.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.10%)</title><rect x="1078.9" y="723.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.9" y="734.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.05%)</title><rect x="1078.9" y="707.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.9" y="718.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.05%)</title><rect x="1078.9" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.9" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::add_block(Block*) (1 samples, 0.05%)</title><rect x="1078.9" y="675.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.9" y="686.0"></text>
</g>
<g>
<title>qsort (1 samples, 0.05%)</title><rect x="1079.5" y="707.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1082.5" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.05%)</title><rect x="1080.1" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1083.1" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.05%)</title><rect x="1080.1" y="707.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.1" y="718.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1080.1" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.1" y="702.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.05%)</title><rect x="1080.1" y="675.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.1" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.35%)</title><rect x="1080.7" y="723.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.7" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.35%)</title><rect x="1080.7" y="707.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1083.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1080.7" y="691.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.7" y="702.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.05%)</title><rect x="1080.7" y="675.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.7" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.10%)</title><rect x="1081.2" y="691.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_exit_block_pressure(Block*) (1 samples, 0.05%)</title><rect x="1081.8" y="675.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.8" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1081.8" y="659.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.8" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.10%)</title><rect x="1082.4" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.4" y="702.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="1082.4" y="675.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1085.4" y="686.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1083.0" y="675.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1086.0" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.10%)</title><rect x="1083.6" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (74 samples, 3.67%)</title><rect x="1084.7" y="723.0" width="43.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.7" y="734.0">Phas..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1084.7" y="707.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1087.7" y="718.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.05%)</title><rect x="1085.3" y="707.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.3" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.05%)</title><rect x="1085.9" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.05%)</title><rect x="1086.5" y="707.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.10%)</title><rect x="1087.1" y="707.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.1" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.10%)</title><rect x="1087.1" y="691.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.25%)</title><rect x="1088.3" y="707.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.05%)</title><rect x="1090.0" y="691.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.05%)</title><rect x="1090.0" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.0" y="686.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.05%)</title><rect x="1090.0" y="659.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.05%)</title><rect x="1090.6" y="691.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.6" y="702.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1090.6" y="675.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.6" y="686.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1090.6" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.6" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (20 samples, 0.99%)</title><rect x="1091.2" y="707.0" width="11.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.2" y="718.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.05%)</title><rect x="1092.9" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.9" y="702.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.05%)</title><rect x="1093.5" y="691.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.5" y="702.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.05%)</title><rect x="1094.1" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1094.7" y="691.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1094.7" y="675.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.10%)</title><rect x="1095.3" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.3" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1095.3" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.3" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1095.9" y="675.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.9" y="686.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1095.9" y="659.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.9" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.35%)</title><rect x="1096.4" y="691.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.4" y="702.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1096.4" y="675.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.4" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1097.0" y="675.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.0" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1097.6" y="675.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.6" y="686.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (4 samples, 0.20%)</title><rect x="1098.2" y="675.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.20%)</title><rect x="1100.5" y="691.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.5" y="702.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (1 samples, 0.05%)</title><rect x="1100.5" y="675.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.5" y="686.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="1101.1" y="675.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.1" y="686.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.10%)</title><rect x="1101.7" y="675.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.05%)</title><rect x="1102.9" y="707.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.9" y="718.0"></text>
</g>
<g>
<title>RegMask::is_NotEmpty() const (1 samples, 0.05%)</title><rect x="1102.9" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.05%)</title><rect x="1103.5" y="707.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (15 samples, 0.74%)</title><rect x="1104.0" y="707.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.0" y="718.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.05%)</title><rect x="1106.4" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.4" y="702.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (3 samples, 0.15%)</title><rect x="1107.0" y="691.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.0" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.10%)</title><rect x="1108.7" y="691.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.7" y="702.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (2 samples, 0.10%)</title><rect x="1109.9" y="691.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.9" y="702.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.05%)</title><rect x="1110.5" y="675.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.5" y="686.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (2 samples, 0.10%)</title><rect x="1111.1" y="691.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.1" y="702.0"></text>
</g>
<g>
<title>rRegIOper::in_RegMask(int) const (1 samples, 0.05%)</title><rect x="1112.2" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.10%)</title><rect x="1112.8" y="707.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (12 samples, 0.59%)</title><rect x="1114.0" y="707.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.25%)</title><rect x="1116.9" y="691.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.9" y="702.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (2 samples, 0.10%)</title><rect x="1119.8" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.8" y="702.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 0.10%)</title><rect x="1119.8" y="675.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1122.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.05%)</title><rect x="1121.0" y="707.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.0" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.10%)</title><rect x="1121.6" y="707.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.6" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.10%)</title><rect x="1121.6" y="691.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.6" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.05%)</title><rect x="1121.6" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.6" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.05%)</title><rect x="1122.2" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.2" y="686.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.05%)</title><rect x="1122.2" y="659.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.2" y="670.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1122.2" y="643.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.10%)</title><rect x="1122.8" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.8" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.10%)</title><rect x="1122.8" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.8" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="1122.8" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.8" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1123.3" y="675.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.3" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.10%)</title><rect x="1123.9" y="707.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.9" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1123.9" y="691.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1124.5" y="691.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.5" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.15%)</title><rect x="1125.1" y="707.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.1" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1125.7" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.7" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1126.3" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.3" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1126.3" y="675.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.3" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.10%)</title><rect x="1126.8" y="707.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.8" y="718.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.10%)</title><rect x="1126.8" y="691.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.8" y="702.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.10%)</title><rect x="1126.8" y="675.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.8" y="686.0"></text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="1126.8" y="659.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1129.8" y="670.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.05%)</title><rect x="1126.8" y="643.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1129.8" y="654.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.05%)</title><rect x="1127.4" y="659.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1130.4" y="670.0"></text>
</g>
<g>
<title>Compile::Init(int) (1 samples, 0.05%)</title><rect x="1128.0" y="739.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.0" y="750.0"></text>
</g>
<g>
<title>Compile::set_cached_top_node(Node*) (1 samples, 0.05%)</title><rect x="1128.0" y="723.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.0" y="734.0"></text>
</g>
<g>
<title>Node::setup_is_top() (1 samples, 0.05%)</title><rect x="1128.0" y="707.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.0" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (38 samples, 1.88%)</title><rect x="1128.6" y="739.0" width="22.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.6" y="750.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.05%)</title><rect x="1128.6" y="723.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.6" y="734.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.05%)</title><rect x="1128.6" y="707.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.6" y="718.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.05%)</title><rect x="1128.6" y="691.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.6" y="702.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&amp;, unsigned int) (1 samples, 0.05%)</title><rect x="1128.6" y="675.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.6" y="686.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.05%)</title><rect x="1128.6" y="659.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.6" y="670.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1128.6" y="643.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.6" y="654.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1128.6" y="627.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.6" y="638.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (12 samples, 0.59%)</title><rect x="1129.2" y="723.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (12 samples, 0.59%)</title><rect x="1129.2" y="707.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.2" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1129.2" y="691.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.2" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1129.2" y="675.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.2" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1129.2" y="659.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.2" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1129.2" y="643.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::replace_parallel_iv(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="1129.2" y="627.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.2" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate_invariants(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1129.8" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.8" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate_add_sub(Node*, PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1129.8" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.8" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::is_invariant(Node*) const (1 samples, 0.05%)</title><rect x="1129.8" y="659.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_ctrl(Node*) const (1 samples, 0.05%)</title><rect x="1129.8" y="643.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.8" y="654.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1129.8" y="627.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.8" y="638.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.05%)</title><rect x="1130.4" y="691.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.05%)</title><rect x="1130.9" y="691.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.9" y="702.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.05%)</title><rect x="1130.9" y="675.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1130.9" y="659.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.20%)</title><rect x="1131.5" y="691.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (2 samples, 0.10%)</title><rect x="1132.7" y="675.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1132.7" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.7" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1132.7" y="643.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.7" y="654.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1132.7" y="627.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.7" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.05%)</title><rect x="1133.3" y="659.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.05%)</title><rect x="1133.3" y="643.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.3" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.05%)</title><rect x="1133.3" y="627.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.3" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.05%)</title><rect x="1133.9" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.05%)</title><rect x="1133.9" y="675.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1133.9" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.9" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.15%)</title><rect x="1134.4" y="691.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.4" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.15%)</title><rect x="1134.4" y="675.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.4" y="686.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1134.4" y="659.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.4" y="670.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.05%)</title><rect x="1134.4" y="643.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.4" y="654.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.05%)</title><rect x="1134.4" y="627.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.4" y="638.0"></text>
</g>
<g>
<title>BarrierSetC2::has_load_barriers() const (1 samples, 0.05%)</title><rect x="1135.0" y="659.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.0" y="670.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1135.6" y="659.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.6" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1135.6" y="643.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.6" y="654.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1135.6" y="627.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="638.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.05%)</title><rect x="1135.6" y="611.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="622.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.05%)</title><rect x="1135.6" y="595.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.6" y="606.0"></text>
</g>
<g>
<title>Compile::print_method(CompilerPhaseType, int) (1 samples, 0.05%)</title><rect x="1136.2" y="723.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.2" y="734.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.05%)</title><rect x="1136.2" y="707.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.2" y="718.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.05%)</title><rect x="1136.2" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.2" y="702.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="1136.2" y="675.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1139.2" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.05%)</title><rect x="1136.8" y="723.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.8" y="734.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1136.8" y="707.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.8" y="718.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1136.8" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.8" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1136.8" y="675.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.8" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1136.8" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.8" y="670.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.05%)</title><rect x="1136.8" y="643.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.8" y="654.0"></text>
</g>
<g>
<title>TypePtr::eq(Type const*) const (1 samples, 0.05%)</title><rect x="1136.8" y="627.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.8" y="638.0"></text>
</g>
<g>
<title>TypePtr::eq_speculative(TypePtr const*) const (1 samples, 0.05%)</title><rect x="1136.8" y="611.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.05%)</title><rect x="1137.4" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.4" y="734.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1137.4" y="707.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.4" y="718.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1137.4" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (11 samples, 0.55%)</title><rect x="1138.0" y="723.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.0" y="734.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.05%)</title><rect x="1138.0" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.10%)</title><rect x="1138.5" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.5" y="718.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.05%)</title><rect x="1139.1" y="691.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.10%)</title><rect x="1139.7" y="707.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1140.3" y="691.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.3" y="702.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1140.3" y="675.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.20%)</title><rect x="1140.9" y="707.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (2 samples, 0.10%)</title><rect x="1142.1" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.05%)</title><rect x="1142.1" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.05%)</title><rect x="1142.1" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1142.1" y="643.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.1" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1142.1" y="627.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.1" y="638.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1142.1" y="611.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.1" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1142.6" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1142.6" y="659.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.05%)</title><rect x="1143.2" y="707.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.05%)</title><rect x="1143.2" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.05%)</title><rect x="1143.2" y="675.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1143.2" y="659.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1143.2" y="643.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.2" y="654.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1143.2" y="627.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.2" y="638.0"></text>
</g>
<g>
<title>UnlockNode::Opcode() const (1 samples, 0.05%)</title><rect x="1143.8" y="707.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.8" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.40%)</title><rect x="1144.4" y="723.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.35%)</title><rect x="1144.4" y="707.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.4" y="718.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1144.4" y="691.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="702.0"></text>
</g>
<g>
<title>IfNode::fold_compares(PhaseIterGVN*) (1 samples, 0.05%)</title><rect x="1144.4" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="686.0"></text>
</g>
<g>
<title>IfNode::cmpi_folds(PhaseIterGVN*) (1 samples, 0.05%)</title><rect x="1144.4" y="659.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="670.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1145.0" y="691.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="702.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1145.0" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="686.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.05%)</title><rect x="1145.0" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.0" y="670.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1145.0" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.0" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1145.0" y="627.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.0" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1145.0" y="611.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.0" y="622.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1145.6" y="691.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1146.1" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.1" y="702.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1146.1" y="675.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.1" y="686.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1146.1" y="659.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.1" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1146.7" y="691.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.7" y="702.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.05%)</title><rect x="1146.7" y="675.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.7" y="686.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1147.3" y="691.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="702.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1147.9" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.05%)</title><rect x="1147.9" y="675.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.9" y="686.0"></text>
</g>
<g>
<title>RootNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1148.5" y="707.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.5" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.10%)</title><rect x="1149.1" y="723.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.10%)</title><rect x="1149.1" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.1" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.10%)</title><rect x="1149.1" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.1" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1149.1" y="675.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.1" y="686.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.05%)</title><rect x="1149.7" y="675.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.7" y="686.0"></text>
</g>
<g>
<title>URShiftLNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1150.2" y="723.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.2" y="734.0"></text>
</g>
<g>
<title>Compile::build_start_state(StartNode*, TypeFunc const*) (1 samples, 0.05%)</title><rect x="1150.8" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.8" y="750.0"></text>
</g>
<g>
<title>ProjNode::ProjNode(Node*, unsigned int, bool) (1 samples, 0.05%)</title><rect x="1150.8" y="723.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.8" y="734.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1150.8" y="707.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1153.8" y="718.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.10%)</title><rect x="1151.4" y="739.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.4" y="750.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.05%)</title><rect x="1152.6" y="739.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="750.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.05%)</title><rect x="1152.6" y="723.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1152.6" y="707.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.6" y="718.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.05%)</title><rect x="1152.6" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.94%)</title><rect x="1153.2" y="739.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.2" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.94%)</title><rect x="1153.2" y="723.0" width="11.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.89%)</title><rect x="1153.2" y="707.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.89%)</title><rect x="1153.2" y="691.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 0.84%)</title><rect x="1153.2" y="675.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.2" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.15%)</title><rect x="1153.2" y="659.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.2" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (3 samples, 0.15%)</title><rect x="1153.2" y="643.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.2" y="654.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (3 samples, 0.15%)</title><rect x="1153.2" y="627.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.2" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 0.15%)</title><rect x="1153.2" y="611.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.2" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (3 samples, 0.15%)</title><rect x="1153.2" y="595.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.2" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 0.15%)</title><rect x="1153.2" y="579.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.2" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.10%)</title><rect x="1153.7" y="563.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.10%)</title><rect x="1153.7" y="547.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.7" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.05%)</title><rect x="1153.7" y="531.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.7" y="542.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciInstanceKlass*&gt;::GrowableArray(Arena*, int, int, ciInstanceKlass* const&amp;) (1 samples, 0.05%)</title><rect x="1153.7" y="515.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.7" y="526.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1153.7" y="499.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.7" y="510.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1153.7" y="483.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.7" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1154.3" y="531.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1154.3" y="515.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.3" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1154.3" y="499.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.3" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1154.3" y="483.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.3" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1154.3" y="467.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.3" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1154.3" y="451.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.3" y="462.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1154.3" y="435.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.3" y="446.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.05%)</title><rect x="1154.3" y="419.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.3" y="430.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="1154.3" y="403.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.3" y="414.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="1154.3" y="387.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.3" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1154.3" y="371.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1157.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.59%)</title><rect x="1154.9" y="659.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.59%)</title><rect x="1154.9" y="643.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.59%)</title><rect x="1154.9" y="627.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.59%)</title><rect x="1154.9" y="611.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.59%)</title><rect x="1154.9" y="595.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.9" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.15%)</title><rect x="1154.9" y="579.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.9" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1154.9" y="563.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.9" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1154.9" y="547.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.9" y="558.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1154.9" y="531.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.9" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1154.9" y="515.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.9" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1154.9" y="499.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1154.9" y="483.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1154.9" y="467.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.9" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1154.9" y="451.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1154.9" y="435.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1154.9" y="419.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.9" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1154.9" y="403.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.9" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1154.9" y="387.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.9" y="398.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1154.9" y="371.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="382.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1154.9" y="355.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.9" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.05%)</title><rect x="1154.9" y="339.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.9" y="350.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1154.9" y="323.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.9" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1154.9" y="307.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="318.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.05%)</title><rect x="1154.9" y="291.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="302.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.05%)</title><rect x="1154.9" y="275.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.9" y="286.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.05%)</title><rect x="1154.9" y="259.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.9" y="270.0"></text>
</g>
<g>
<title>hash_symbol(char const*, int, bool) (1 samples, 0.05%)</title><rect x="1154.9" y="243.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1157.9" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.10%)</title><rect x="1155.5" y="563.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.5" y="574.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.10%)</title><rect x="1155.5" y="547.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.5" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.10%)</title><rect x="1155.5" y="531.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.5" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.10%)</title><rect x="1155.5" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.5" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.10%)</title><rect x="1155.5" y="499.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.5" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.10%)</title><rect x="1155.5" y="483.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.5" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.10%)</title><rect x="1155.5" y="467.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.5" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1155.5" y="451.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.5" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.05%)</title><rect x="1155.5" y="435.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.5" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1155.5" y="419.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.5" y="430.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::GrowableArray(Arena*, int, int, ciTypeFlow::Block* const&amp;) (1 samples, 0.05%)</title><rect x="1155.5" y="403.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.5" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1156.1" y="451.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.1" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1156.1" y="435.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.1" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1156.1" y="419.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.1" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1156.1" y="403.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.1" y="414.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1156.1" y="387.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.1" y="398.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1156.1" y="371.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.35%)</title><rect x="1156.7" y="579.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.35%)</title><rect x="1156.7" y="563.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.35%)</title><rect x="1156.7" y="547.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.35%)</title><rect x="1156.7" y="531.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.35%)</title><rect x="1156.7" y="515.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.7" y="526.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.05%)</title><rect x="1156.7" y="499.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.7" y="510.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.05%)</title><rect x="1156.7" y="483.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.7" y="494.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.05%)</title><rect x="1156.7" y="467.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.7" y="478.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.05%)</title><rect x="1156.7" y="451.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.7" y="462.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="1156.7" y="435.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.7" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="1156.7" y="419.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.7" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1156.7" y="403.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1159.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.05%)</title><rect x="1157.3" y="499.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.3" y="510.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.05%)</title><rect x="1157.3" y="483.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.3" y="494.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.05%)</title><rect x="1157.3" y="467.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.3" y="478.0"></text>
</g>
<g>
<title>Type::get_const_type(ciType*) (1 samples, 0.05%)</title><rect x="1157.3" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.3" y="462.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1157.3" y="435.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.3" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1157.3" y="419.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.3" y="430.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1157.3" y="403.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.25%)</title><rect x="1157.8" y="499.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.25%)</title><rect x="1157.8" y="483.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.25%)</title><rect x="1157.8" y="467.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.25%)</title><rect x="1157.8" y="451.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.20%)</title><rect x="1157.8" y="435.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.20%)</title><rect x="1157.8" y="419.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.20%)</title><rect x="1157.8" y="403.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.20%)</title><rect x="1157.8" y="387.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.20%)</title><rect x="1157.8" y="371.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.20%)</title><rect x="1157.8" y="355.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.8" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1157.8" y="339.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.8" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1157.8" y="323.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.8" y="334.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1157.8" y="307.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.8" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1157.8" y="291.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.8" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1157.8" y="275.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.8" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1157.8" y="259.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.8" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1157.8" y="243.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.8" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1157.8" y="227.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.8" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1157.8" y="211.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1157.8" y="195.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.8" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1157.8" y="179.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.8" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1157.8" y="163.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.8" y="174.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1157.8" y="147.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.8" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1157.8" y="131.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.8" y="142.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1157.8" y="115.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.8" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.15%)</title><rect x="1158.4" y="339.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.15%)</title><rect x="1158.4" y="323.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.15%)</title><rect x="1158.4" y="307.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.15%)</title><rect x="1158.4" y="291.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="1158.4" y="275.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.4" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="1158.4" y="259.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.4" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="1158.4" y="243.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.4" y="254.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="1158.4" y="227.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.4" y="238.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="1158.4" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1159.0" y="227.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1159.0" y="211.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1159.0" y="195.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1159.0" y="179.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1159.0" y="163.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1159.0" y="147.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1159.0" y="131.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.05%)</title><rect x="1159.0" y="115.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.0" y="126.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1159.0" y="99.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1159.0" y="83.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.05%)</title><rect x="1159.0" y="67.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.0" y="78.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1159.0" y="51.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.0" y="62.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1159.0" y="35.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1159.6" y="275.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="286.0"></text>
</g>
<g>
<title>ciInstanceKlass::java_mirror() (1 samples, 0.05%)</title><rect x="1159.6" y="259.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="270.0"></text>
</g>
<g>
<title>ciKlass::java_mirror() (1 samples, 0.05%)</title><rect x="1159.6" y="243.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.05%)</title><rect x="1159.6" y="227.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="238.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.05%)</title><rect x="1159.6" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.05%)</title><rect x="1160.2" y="435.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.2" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1160.8" y="579.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1160.8" y="563.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1160.8" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1160.8" y="531.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1160.8" y="515.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1160.8" y="499.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1160.8" y="483.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1160.8" y="467.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1160.8" y="451.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1160.8" y="435.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1160.8" y="419.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1160.8" y="403.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1160.8" y="387.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1160.8" y="371.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1160.8" y="355.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1160.8" y="339.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1160.8" y="323.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1160.8" y="307.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1160.8" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1160.8" y="275.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.05%)</title><rect x="1160.8" y="259.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.8" y="270.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.05%)</title><rect x="1160.8" y="243.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.8" y="254.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.05%)</title><rect x="1160.8" y="227.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.8" y="238.0"></text>
</g>
<g>
<title>DecodeNarrowPtrNode::DecodeNarrowPtrNode(Node*, Type const*) (1 samples, 0.05%)</title><rect x="1160.8" y="211.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.8" y="222.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.05%)</title><rect x="1160.8" y="195.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.8" y="206.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1160.8" y="179.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.8" y="190.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1160.8" y="163.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.8" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1161.3" y="579.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1161.3" y="563.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.3" y="574.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1161.3" y="547.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1161.3" y="531.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.3" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1161.3" y="515.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.3" y="526.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1161.3" y="499.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.3" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1161.3" y="483.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="1161.9" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1161.9" y="643.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1161.9" y="627.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1161.9" y="611.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1161.9" y="595.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1161.9" y="579.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1161.9" y="563.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1161.9" y="547.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.9" y="558.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="1161.9" y="531.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.9" y="542.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.05%)</title><rect x="1161.9" y="515.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.9" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1162.5" y="643.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1162.5" y="627.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1162.5" y="611.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1162.5" y="595.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1162.5" y="579.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1162.5" y="563.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1162.5" y="547.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1162.5" y="531.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1162.5" y="515.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1162.5" y="499.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1162.5" y="483.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.5" y="494.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.05%)</title><rect x="1162.5" y="467.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.5" y="478.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.05%)</title><rect x="1162.5" y="451.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.5" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1162.5" y="435.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.5" y="446.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1162.5" y="419.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1163.1" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1163.1" y="659.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.1" y="670.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1163.1" y="643.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.1" y="654.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1163.1" y="627.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.1" y="638.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1163.1" y="611.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.1" y="622.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1163.1" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.1" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1163.1" y="579.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.1" y="590.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.05%)</title><rect x="1163.1" y="563.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.05%)</title><rect x="1163.7" y="707.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="718.0"></text>
</g>
<g>
<title>Node::set_prec(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1163.7" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.7" y="702.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1164.3" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.3" y="750.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1164.3" y="723.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.3" y="734.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.05%)</title><rect x="1164.9" y="771.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.9" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.05%)</title><rect x="1165.4" y="771.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.4" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1165.4" y="755.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.4" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1165.4" y="739.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.4" y="750.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1165.4" y="723.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.4" y="734.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.05%)</title><rect x="1165.4" y="707.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.4" y="718.0"></text>
</g>
<g>
<title>[tid=28163] (3 samples, 0.15%)</title><rect x="1166.0" y="931.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1169.0" y="942.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.15%)</title><rect x="1166.0" y="915.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1169.0" y="926.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.15%)</title><rect x="1166.0" y="899.0" width="1.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1169.0" y="910.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.15%)</title><rect x="1166.0" y="883.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1169.0" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.15%)</title><rect x="1166.0" y="867.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1169.0" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.15%)</title><rect x="1166.0" y="851.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.0" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.15%)</title><rect x="1166.0" y="835.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.0" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.15%)</title><rect x="1166.0" y="819.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.0" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1166.0" y="803.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.0" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1166.0" y="787.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.05%)</title><rect x="1166.0" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.0" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.05%)</title><rect x="1166.0" y="755.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.0" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (1 samples, 0.05%)</title><rect x="1166.0" y="739.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.0" y="750.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.05%)</title><rect x="1166.0" y="723.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.0" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.05%)</title><rect x="1166.0" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.0" y="718.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="1166.0" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.0" y="702.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.05%)</title><rect x="1166.0" y="675.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.0" y="686.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1166.0" y="659.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1169.0" y="670.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1166.6" y="803.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.6" y="814.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.05%)</title><rect x="1166.6" y="787.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.6" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.05%)</title><rect x="1166.6" y="771.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.6" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_strong_code_roots(HeapRegion*) (1 samples, 0.05%)</title><rect x="1166.6" y="755.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.6" y="766.0"></text>
</g>
<g>
<title>G1CodeRootSetTable::nmethods_do(CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1166.6" y="739.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.6" y="750.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.05%)</title><rect x="1166.6" y="723.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1167.2" y="803.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_string_table_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="1167.2" y="787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.2" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.05%)</title><rect x="1167.2" y="771.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.2" y="782.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1167.2" y="755.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.05%)</title><rect x="1167.2" y="739.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="750.0"></text>
</g>
<g>
<title>[tid=37123] (4 samples, 0.20%)</title><rect x="1167.8" y="931.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1170.8" y="942.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.20%)</title><rect x="1167.8" y="915.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1170.8" y="926.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.20%)</title><rect x="1167.8" y="899.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1170.8" y="910.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.20%)</title><rect x="1167.8" y="883.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1170.8" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.20%)</title><rect x="1167.8" y="867.0" width="2.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1170.8" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.20%)</title><rect x="1167.8" y="851.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.20%)</title><rect x="1167.8" y="835.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.8" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.15%)</title><rect x="1167.8" y="819.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.8" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.10%)</title><rect x="1167.8" y="803.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.8" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.10%)</title><rect x="1167.8" y="787.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.10%)</title><rect x="1167.8" y="771.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.8" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (2 samples, 0.10%)</title><rect x="1167.8" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (2 samples, 0.10%)</title><rect x="1167.8" y="739.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.8" y="750.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.10%)</title><rect x="1167.8" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.10%)</title><rect x="1167.8" y="707.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.8" y="718.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.10%)</title><rect x="1167.8" y="691.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="702.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.10%)</title><rect x="1167.8" y="675.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.8" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1168.9" y="803.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="1168.9" y="787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.9" y="798.0"></text>
</g>
<g>
<title>SymbolPropertyTable::oops_do(OopClosure*) (1 samples, 0.05%)</title><rect x="1168.9" y="771.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="782.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1168.9" y="755.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.05%)</title><rect x="1168.9" y="739.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="750.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="1168.9" y="723.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="734.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.05%)</title><rect x="1169.5" y="819.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1172.5" y="830.0"></text>
</g>
<g>
<title>[tid=37379] (6 samples, 0.30%)</title><rect x="1170.1" y="931.0" width="3.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1173.1" y="942.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.30%)</title><rect x="1170.1" y="915.0" width="3.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1173.1" y="926.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.30%)</title><rect x="1170.1" y="899.0" width="3.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1173.1" y="910.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.30%)</title><rect x="1170.1" y="883.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1173.1" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.30%)</title><rect x="1170.1" y="867.0" width="3.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1173.1" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.30%)</title><rect x="1170.1" y="851.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.1" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 0.30%)</title><rect x="1170.1" y="835.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.1" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.15%)</title><rect x="1170.1" y="819.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.15%)</title><rect x="1170.1" y="803.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.1" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.15%)</title><rect x="1170.1" y="787.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.1" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.15%)</title><rect x="1170.1" y="771.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.1" y="782.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (3 samples, 0.15%)</title><rect x="1170.1" y="755.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.1" y="766.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (3 samples, 0.15%)</title><rect x="1170.1" y="739.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.1" y="750.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.15%)</title><rect x="1170.1" y="723.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.1" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (3 samples, 0.15%)</title><rect x="1170.1" y="707.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.1" y="718.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.15%)</title><rect x="1170.1" y="691.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.1" y="702.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.10%)</title><rect x="1170.7" y="675.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.7" y="686.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.05%)</title><rect x="1171.3" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="670.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.10%)</title><rect x="1171.9" y="819.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.9" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.10%)</title><rect x="1171.9" y="803.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.9" y="814.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1171.9" y="787.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.9" y="798.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.05%)</title><rect x="1172.5" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.05%)</title><rect x="1172.5" y="771.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.5" y="782.0"></text>
</g>
<g>
<title>elapsedTimer::seconds() const (1 samples, 0.05%)</title><rect x="1172.5" y="755.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="766.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.05%)</title><rect x="1173.0" y="819.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="830.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.05%)</title><rect x="1173.0" y="803.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1176.0" y="814.0"></text>
</g>
<g>
<title>[tid=41219] (9 samples, 0.45%)</title><rect x="1173.6" y="931.0" width="5.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1176.6" y="942.0"></text>
</g>
<g>
<title>thread_start (9 samples, 0.45%)</title><rect x="1173.6" y="915.0" width="5.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1176.6" y="926.0"></text>
</g>
<g>
<title>_pthread_start (9 samples, 0.45%)</title><rect x="1173.6" y="899.0" width="5.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1176.6" y="910.0"></text>
</g>
<g>
<title>_pthread_body (9 samples, 0.45%)</title><rect x="1173.6" y="883.0" width="5.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1176.6" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.45%)</title><rect x="1173.6" y="867.0" width="5.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1176.6" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.45%)</title><rect x="1173.6" y="851.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="862.0"></text>
</g>
<g>
<title>WatcherThread::run() (9 samples, 0.45%)</title><rect x="1173.6" y="835.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="846.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.05%)</title><rect x="1173.6" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="830.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.05%)</title><rect x="1173.6" y="803.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.6" y="814.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (8 samples, 0.40%)</title><rect x="1174.2" y="819.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.40%)</title><rect x="1174.2" y="803.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 0.40%)</title><rect x="1174.2" y="787.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.2" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 0.40%)</title><rect x="1174.2" y="771.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.40%)</title><rect x="1174.2" y="755.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1177.2" y="766.0"></text>
</g>
<g>
<title>[tid=41475] (4 samples, 0.20%)</title><rect x="1178.9" y="931.0" width="2.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1181.9" y="942.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.20%)</title><rect x="1178.9" y="915.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1181.9" y="926.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.20%)</title><rect x="1178.9" y="899.0" width="2.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1181.9" y="910.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.20%)</title><rect x="1178.9" y="883.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1181.9" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.20%)</title><rect x="1178.9" y="867.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1181.9" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.20%)</title><rect x="1178.9" y="851.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.20%)</title><rect x="1178.9" y="835.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.20%)</title><rect x="1178.9" y="819.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="830.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (4 samples, 0.20%)</title><rect x="1178.9" y="803.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.10%)</title><rect x="1178.9" y="787.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.10%)</title><rect x="1178.9" y="771.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="782.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.05%)</title><rect x="1178.9" y="755.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="766.0"></text>
</g>
<g>
<title>nmethod::scopes_pcs_begin() const (1 samples, 0.05%)</title><rect x="1178.9" y="739.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="750.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.05%)</title><rect x="1179.5" y="755.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1182.5" y="766.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.05%)</title><rect x="1179.5" y="739.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="750.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1179.5" y="723.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="734.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1179.5" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="718.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1179.5" y="691.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="702.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.05%)</title><rect x="1179.5" y="675.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.10%)</title><rect x="1180.1" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.1" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.10%)</title><rect x="1180.1" y="771.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.10%)</title><rect x="1180.1" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.10%)</title><rect x="1180.1" y="739.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1183.1" y="750.0"></text>
</g>
<g>
<title>[tid=42243] (2 samples, 0.10%)</title><rect x="1181.2" y="931.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1184.2" y="942.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.10%)</title><rect x="1181.2" y="915.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1184.2" y="926.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.10%)</title><rect x="1181.2" y="899.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1184.2" y="910.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.10%)</title><rect x="1181.2" y="883.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1184.2" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.10%)</title><rect x="1181.2" y="867.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1184.2" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.10%)</title><rect x="1181.2" y="851.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.10%)</title><rect x="1181.2" y="835.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.10%)</title><rect x="1181.2" y="819.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (2 samples, 0.10%)</title><rect x="1181.2" y="803.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.10%)</title><rect x="1181.2" y="787.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.10%)</title><rect x="1181.2" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.10%)</title><rect x="1181.2" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.10%)</title><rect x="1181.2" y="739.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1184.2" y="750.0"></text>
</g>
<g>
<title>[tid=42755] (13 samples, 0.64%)</title><rect x="1182.4" y="931.0" width="7.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1185.4" y="942.0"></text>
</g>
<g>
<title>thread_start (13 samples, 0.64%)</title><rect x="1182.4" y="915.0" width="7.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1185.4" y="926.0"></text>
</g>
<g>
<title>_pthread_start (13 samples, 0.64%)</title><rect x="1182.4" y="899.0" width="7.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1185.4" y="910.0"></text>
</g>
<g>
<title>_pthread_body (13 samples, 0.64%)</title><rect x="1182.4" y="883.0" width="7.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1185.4" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 0.64%)</title><rect x="1182.4" y="867.0" width="7.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1185.4" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (13 samples, 0.64%)</title><rect x="1182.4" y="851.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.4" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (13 samples, 0.64%)</title><rect x="1182.4" y="835.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.4" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (13 samples, 0.64%)</title><rect x="1182.4" y="819.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (13 samples, 0.64%)</title><rect x="1182.4" y="803.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.4" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (11 samples, 0.55%)</title><rect x="1182.4" y="787.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (11 samples, 0.55%)</title><rect x="1182.4" y="771.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.4" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (11 samples, 0.55%)</title><rect x="1182.4" y="755.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.4" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (11 samples, 0.55%)</title><rect x="1182.4" y="739.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.4" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (9 samples, 0.45%)</title><rect x="1182.4" y="723.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.4" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (5 samples, 0.25%)</title><rect x="1182.4" y="707.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 0.20%)</title><rect x="1182.4" y="691.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.4" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 0.20%)</title><rect x="1182.4" y="675.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 0.20%)</title><rect x="1182.4" y="659.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.15%)</title><rect x="1182.4" y="643.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.4" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.15%)</title><rect x="1182.4" y="627.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1182.4" y="611.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.4" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1182.4" y="595.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.4" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1182.4" y="579.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.4" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1182.4" y="563.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.4" y="574.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1182.4" y="547.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.05%)</title><rect x="1182.4" y="531.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.4" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.05%)</title><rect x="1182.4" y="515.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.4" y="526.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.05%)</title><rect x="1182.4" y="499.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="510.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.05%)</title><rect x="1182.4" y="483.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.4" y="494.0"></text>
</g>
<g>
<title>constantPoolHandle::operator=(constantPoolHandle const&amp;) (1 samples, 0.05%)</title><rect x="1182.4" y="467.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.4" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.10%)</title><rect x="1183.0" y="611.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.10%)</title><rect x="1183.0" y="595.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.10%)</title><rect x="1183.0" y="579.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.10%)</title><rect x="1183.0" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.10%)</title><rect x="1183.0" y="547.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1183.0" y="531.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1183.0" y="515.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1183.0" y="499.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1183.0" y="483.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="494.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1183.0" y="467.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1183.0" y="451.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.05%)</title><rect x="1183.0" y="435.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.05%)</title><rect x="1183.0" y="419.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.05%)</title><rect x="1183.0" y="403.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="414.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="1183.0" y="387.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="1183.0" y="371.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1183.0" y="355.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1183.6" y="531.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1183.6" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1183.6" y="499.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="1183.6" y="483.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="1183.6" y="467.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1183.6" y="451.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1183.6" y="435.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1183.6" y="419.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.05%)</title><rect x="1183.6" y="403.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="414.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.05%)</title><rect x="1183.6" y="387.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="398.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.05%)</title><rect x="1183.6" y="371.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="382.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.05%)</title><rect x="1183.6" y="355.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::setup_start_block(int, BlockBegin*, BlockBegin*, ValueStack*) (1 samples, 0.05%)</title><rect x="1184.2" y="643.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="654.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1184.2" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="638.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1184.2" y="611.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="622.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.05%)</title><rect x="1184.2" y="595.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="606.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.05%)</title><rect x="1184.7" y="691.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.7" y="702.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.05%)</title><rect x="1184.7" y="675.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.7" y="686.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_all() (1 samples, 0.05%)</title><rect x="1184.7" y="659.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.7" y="670.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.05%)</title><rect x="1184.7" y="643.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="654.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 0.20%)</title><rect x="1185.3" y="707.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.3" y="718.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.05%)</title><rect x="1185.3" y="691.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.05%)</title><rect x="1185.3" y="675.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.3" y="686.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.05%)</title><rect x="1185.3" y="659.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.3" y="670.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.05%)</title><rect x="1185.3" y="643.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="654.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1185.3" y="627.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="638.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1185.3" y="611.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="622.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.05%)</title><rect x="1185.3" y="595.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.3" y="606.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.05%)</title><rect x="1185.3" y="579.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.3" y="590.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="1185.3" y="563.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.3" y="574.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 0.15%)</title><rect x="1185.9" y="691.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.9" y="702.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (2 samples, 0.10%)</title><rect x="1185.9" y="675.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="686.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (2 samples, 0.10%)</title><rect x="1185.9" y="659.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="670.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (1 samples, 0.05%)</title><rect x="1186.5" y="643.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.5" y="654.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.05%)</title><rect x="1186.5" y="627.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.5" y="638.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.05%)</title><rect x="1186.5" y="611.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.5" y="622.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.05%)</title><rect x="1187.1" y="675.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="686.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.05%)</title><rect x="1187.1" y="659.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.1" y="670.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1187.1" y="643.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.1" y="654.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (2 samples, 0.10%)</title><rect x="1187.7" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.7" y="734.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (2 samples, 0.10%)</title><rect x="1187.7" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="718.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.05%)</title><rect x="1187.7" y="691.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.7" y="702.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (1 samples, 0.05%)</title><rect x="1187.7" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="686.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.05%)</title><rect x="1188.2" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.2" y="702.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.05%)</title><rect x="1188.2" y="675.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1191.2" y="686.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.10%)</title><rect x="1188.8" y="787.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.8" y="798.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.10%)</title><rect x="1188.8" y="771.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.8" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.10%)</title><rect x="1188.8" y="755.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.10%)</title><rect x="1188.8" y="739.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
</g>
</svg>
