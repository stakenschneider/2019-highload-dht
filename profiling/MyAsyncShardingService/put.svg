<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (5,071 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=25347] (335 samples, 6.61%)</title><rect x="10.0" y="851.0" width="78.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.0" y="862.0">[NIO Sele..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (332 samples, 6.55%)</title><rect x="10.5" y="835.0" width="77.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.5" y="846.0">one/nio/s..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (211 samples, 4.16%)</title><rect x="11.2" y="819.0" width="49.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.2" y="830.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.10%)</title><rect x="11.2" y="803.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.2" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectionKey.isValid (2 samples, 0.04%)</title><rect x="11.4" y="787.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.4" y="798.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (4 samples, 0.08%)</title><rect x="12.3" y="803.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.08%)</title><rect x="12.3" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (3 samples, 0.06%)</title><rect x="12.6" y="771.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.6" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="12.6" y="755.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.6" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (202 samples, 3.98%)</title><rect x="13.3" y="803.0" width="47.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.3" y="814.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (202 samples, 3.98%)</title><rect x="13.3" y="787.0" width="47.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.3" y="798.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (197 samples, 3.88%)</title><rect x="14.4" y="771.0" width="45.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.4" y="782.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (195 samples, 3.85%)</title><rect x="14.4" y="755.0" width="45.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.4" y="766.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.08%)</title><rect x="16.5" y="739.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="19.5" y="750.0"></text>
</g>
<g>
<title>kevent (182 samples, 3.59%)</title><rect x="17.4" y="739.0" width="42.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="20.4" y="750.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.04%)</title><rect x="59.8" y="755.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.04%)</title><rect x="59.8" y="739.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="59.8" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="59.8" y="707.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="59.8" y="691.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.8" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (118 samples, 2.33%)</title><rect x="60.3" y="819.0" width="27.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.3" y="830.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (117 samples, 2.31%)</title><rect x="60.5" y="803.0" width="27.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="63.5" y="814.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (81 samples, 1.60%)</title><rect x="60.5" y="787.0" width="18.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (64 samples, 1.26%)</title><rect x="60.5" y="771.0" width="14.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (64 samples, 1.26%)</title><rect x="60.5" y="755.0" width="14.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (63 samples, 1.24%)</title><rect x="60.7" y="739.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="63.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (63 samples, 1.24%)</title><rect x="60.7" y="723.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.06%)</title><rect x="60.7" y="707.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (59 samples, 1.16%)</title><rect x="61.4" y="707.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (59 samples, 1.16%)</title><rect x="61.4" y="691.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (59 samples, 1.16%)</title><rect x="61.4" y="675.0" width="13.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (56 samples, 1.10%)</title><rect x="61.4" y="659.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (55 samples, 1.08%)</title><rect x="61.7" y="643.0" width="12.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (55 samples, 1.08%)</title><rect x="61.7" y="627.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="64.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (55 samples, 1.08%)</title><rect x="61.7" y="611.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (55 samples, 1.08%)</title><rect x="61.7" y="595.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="64.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (54 samples, 1.06%)</title><rect x="61.9" y="579.0" width="12.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.9" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (51 samples, 1.01%)</title><rect x="62.4" y="563.0" width="11.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="65.4" y="574.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="62.8" y="547.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="65.8" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="63.3" y="547.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="66.3" y="558.0"></text>
</g>
<g>
<title>__psynch_cvsignal (39 samples, 0.77%)</title><rect x="64.2" y="547.0" width="9.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="67.2" y="558.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.06%)</title><rect x="73.3" y="547.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="76.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.06%)</title><rect x="74.5" y="659.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.06%)</title><rect x="74.5" y="643.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.06%)</title><rect x="74.5" y="627.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="77.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (3 samples, 0.06%)</title><rect x="74.5" y="611.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.10%)</title><rect x="75.4" y="771.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="75.9" y="755.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="75.9" y="739.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.9" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 0.10%)</title><rect x="76.6" y="771.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.08%)</title><rect x="76.8" y="755.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.08%)</title><rect x="76.8" y="739.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="77.2" y="723.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.2" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.04%)</title><rect x="77.2" y="707.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.2" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.08%)</title><rect x="77.7" y="771.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="77.7" y="755.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="78.2" y="755.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="78.6" y="771.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="78.6" y="755.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.6" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (36 samples, 0.71%)</title><rect x="79.3" y="787.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.3" y="798.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (36 samples, 0.71%)</title><rect x="79.3" y="771.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (36 samples, 0.71%)</title><rect x="79.3" y="755.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="82.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.10%)</title><rect x="79.3" y="739.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.10%)</title><rect x="79.3" y="723.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.08%)</title><rect x="79.3" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.04%)</title><rect x="79.3" y="691.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.3" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="79.3" y="675.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.3" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.04%)</title><rect x="79.3" y="659.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.61%)</title><rect x="80.5" y="739.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.5" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.61%)</title><rect x="80.5" y="723.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (31 samples, 0.61%)</title><rect x="80.5" y="707.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.5" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (31 samples, 0.61%)</title><rect x="80.5" y="691.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="83.5" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (31 samples, 0.61%)</title><rect x="80.5" y="675.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.5" y="686.0"></text>
</g>
<g>
<title>read (31 samples, 0.61%)</title><rect x="80.5" y="659.0" width="7.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="83.5" y="670.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=26115] (293 samples, 5.78%)</title><rect x="88.0" y="851.0" width="68.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="91.0" y="862.0">[NIO Se..</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.06%)</title><rect x="88.2" y="835.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="91.2" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="88.4" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="91.4" y="830.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="88.4" y="803.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="91.4" y="814.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (289 samples, 5.70%)</title><rect x="88.9" y="835.0" width="67.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.9" y="846.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.04%)</title><rect x="88.9" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.9" y="830.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (182 samples, 3.59%)</title><rect x="89.3" y="819.0" width="42.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.3" y="830.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="89.3" y="803.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.3" y="814.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (9 samples, 0.18%)</title><rect x="89.8" y="803.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="89.8" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (7 samples, 0.14%)</title><rect x="90.3" y="787.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="93.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (5 samples, 0.10%)</title><rect x="90.7" y="771.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.7" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.06%)</title><rect x="90.7" y="755.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.7" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (3 samples, 0.06%)</title><rect x="90.7" y="739.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.7" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="91.4" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.4" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (2 samples, 0.04%)</title><rect x="91.4" y="739.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.4" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (169 samples, 3.33%)</title><rect x="91.9" y="803.0" width="39.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.9" y="814.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (169 samples, 3.33%)</title><rect x="91.9" y="787.0" width="39.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.9" y="798.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (168 samples, 3.31%)</title><rect x="92.1" y="771.0" width="39.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.1" y="782.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (164 samples, 3.23%)</title><rect x="92.6" y="755.0" width="38.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.6" y="766.0">sun..</text>
</g>
<g>
<title>kevent (154 samples, 3.04%)</title><rect x="94.9" y="739.0" width="35.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="97.9" y="750.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="130.8" y="755.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.8" y="766.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (2 samples, 0.04%)</title><rect x="130.8" y="739.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="133.8" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (105 samples, 2.07%)</title><rect x="131.7" y="819.0" width="24.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.7" y="830.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (103 samples, 2.03%)</title><rect x="131.7" y="803.0" width="24.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.7" y="814.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (80 samples, 1.58%)</title><rect x="131.9" y="787.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (65 samples, 1.28%)</title><rect x="132.2" y="771.0" width="15.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="135.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (65 samples, 1.28%)</title><rect x="132.2" y="755.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (63 samples, 1.24%)</title><rect x="132.6" y="739.0" width="14.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (61 samples, 1.20%)</title><rect x="133.1" y="723.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.08%)</title><rect x="133.1" y="707.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="136.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.04%)</title><rect x="133.3" y="691.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="136.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (57 samples, 1.12%)</title><rect x="134.0" y="707.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (57 samples, 1.12%)</title><rect x="134.0" y="691.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="137.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (57 samples, 1.12%)</title><rect x="134.0" y="675.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="137.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (56 samples, 1.10%)</title><rect x="134.0" y="659.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="137.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (55 samples, 1.08%)</title><rect x="134.3" y="643.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="137.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (55 samples, 1.08%)</title><rect x="134.3" y="627.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (55 samples, 1.08%)</title><rect x="134.3" y="611.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="137.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (55 samples, 1.08%)</title><rect x="134.3" y="595.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (55 samples, 1.08%)</title><rect x="134.3" y="579.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.3" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (50 samples, 0.99%)</title><rect x="135.2" y="563.0" width="11.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="138.2" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (38 samples, 0.75%)</title><rect x="136.6" y="547.0" width="8.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="139.6" y="558.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.06%)</title><rect x="145.9" y="547.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="148.9" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.10%)</title><rect x="147.3" y="771.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="150.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.06%)</title><rect x="147.3" y="755.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="148.0" y="755.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="148.0" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.08%)</title><rect x="148.5" y="771.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.08%)</title><rect x="148.5" y="755.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.5" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.08%)</title><rect x="148.5" y="739.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="151.5" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="149.4" y="771.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="149.6" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="150.1" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="150.1" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.1" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (22 samples, 0.43%)</title><rect x="150.5" y="787.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.5" y="798.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (22 samples, 0.43%)</title><rect x="150.5" y="771.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (22 samples, 0.43%)</title><rect x="150.5" y="755.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.14%)</title><rect x="150.5" y="739.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.14%)</title><rect x="150.5" y="723.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (6 samples, 0.12%)</title><rect x="150.8" y="707.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.04%)</title><rect x="151.2" y="691.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.2" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="151.2" y="675.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.2" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.04%)</title><rect x="151.2" y="659.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="154.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.30%)</title><rect x="152.2" y="739.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.30%)</title><rect x="152.2" y="723.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.2" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (15 samples, 0.30%)</title><rect x="152.2" y="707.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.2" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (15 samples, 0.30%)</title><rect x="152.2" y="691.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="155.2" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (15 samples, 0.30%)</title><rect x="152.2" y="675.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.2" y="686.0"></text>
</g>
<g>
<title>read (14 samples, 0.28%)</title><rect x="152.4" y="659.0" width="3.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="155.4" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="155.7" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="158.7" y="814.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=26883] (554 samples, 10.92%)</title><rect x="156.1" y="851.0" width="128.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="159.1" y="862.0">[NIO Selector #3..</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="156.8" y="835.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="159.8" y="846.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (548 samples, 10.81%)</title><rect x="157.5" y="835.0" width="127.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="846.0">one/nio/server/S..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.08%)</title><rect x="158.7" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.7" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="159.2" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="162.2" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.04%)</title><rect x="159.2" y="787.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="162.2" y="798.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="159.2" y="771.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="162.2" y="782.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (2 samples, 0.04%)</title><rect x="159.9" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.9" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.04%)</title><rect x="159.9" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.04%)</title><rect x="159.9" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.9" y="798.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (313 samples, 6.17%)</title><rect x="160.3" y="819.0" width="72.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.3" y="830.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="160.6" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.6" y="814.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (8 samples, 0.16%)</title><rect x="161.0" y="803.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="164.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (8 samples, 0.16%)</title><rect x="161.0" y="787.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (7 samples, 0.14%)</title><rect x="161.3" y="771.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.3" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (6 samples, 0.12%)</title><rect x="161.3" y="755.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="164.3" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (4 samples, 0.08%)</title><rect x="161.3" y="739.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="164.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="162.2" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (299 samples, 5.90%)</title><rect x="162.9" y="803.0" width="69.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="165.9" y="814.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (299 samples, 5.90%)</title><rect x="162.9" y="787.0" width="69.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.9" y="798.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (296 samples, 5.84%)</title><rect x="163.6" y="771.0" width="68.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.6" y="782.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (292 samples, 5.76%)</title><rect x="163.6" y="755.0" width="67.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.6" y="766.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.08%)</title><rect x="165.7" y="739.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="168.7" y="750.0"></text>
</g>
<g>
<title>kevent (279 samples, 5.50%)</title><rect x="166.6" y="739.0" width="64.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="169.6" y="750.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.04%)</title><rect x="231.5" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.04%)</title><rect x="231.5" y="739.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="231.5" y="723.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="231.5" y="707.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="231.5" y="691.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="234.5" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.04%)</title><rect x="232.7" y="803.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.04%)</title><rect x="232.7" y="787.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.04%)</title><rect x="232.7" y="771.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.7" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (223 samples, 4.40%)</title><rect x="233.2" y="819.0" width="51.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.2" y="830.0">one/n..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="233.6" y="803.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="236.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (216 samples, 4.26%)</title><rect x="234.1" y="803.0" width="50.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.1" y="814.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (152 samples, 3.00%)</title><rect x="234.1" y="787.0" width="35.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.1" y="798.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (132 samples, 2.60%)</title><rect x="234.3" y="771.0" width="30.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="237.3" y="782.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (132 samples, 2.60%)</title><rect x="234.3" y="755.0" width="30.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.3" y="766.0">on..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.04%)</title><rect x="234.3" y="739.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="234.3" y="723.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (130 samples, 2.56%)</title><rect x="234.8" y="739.0" width="30.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.8" y="750.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (130 samples, 2.56%)</title><rect x="234.8" y="723.0" width="30.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.8" y="734.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.04%)</title><rect x="235.0" y="707.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.0" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="235.0" y="691.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="238.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/237278380.get$Lambda (2 samples, 0.04%)</title><rect x="235.0" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (126 samples, 2.48%)</title><rect x="235.7" y="707.0" width="29.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.7" y="718.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (126 samples, 2.48%)</title><rect x="235.7" y="691.0" width="29.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.7" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (126 samples, 2.48%)</title><rect x="235.7" y="675.0" width="29.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.7" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (107 samples, 2.11%)</title><rect x="235.7" y="659.0" width="24.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="238.7" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (107 samples, 2.11%)</title><rect x="235.7" y="643.0" width="24.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.7" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (107 samples, 2.11%)</title><rect x="235.7" y="627.0" width="24.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.7" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (107 samples, 2.11%)</title><rect x="235.7" y="611.0" width="24.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.7" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (107 samples, 2.11%)</title><rect x="235.7" y="595.0" width="24.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.7" y="606.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (107 samples, 2.11%)</title><rect x="235.7" y="579.0" width="24.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.7" y="590.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (100 samples, 1.97%)</title><rect x="237.1" y="563.0" width="23.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="240.1" y="574.0">U..</text>
</g>
<g>
<title>Thread::current() (5 samples, 0.10%)</title><rect x="237.8" y="547.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="240.8" y="558.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.04%)</title><rect x="237.8" y="531.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="240.8" y="542.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="238.3" y="531.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="241.3" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.08%)</title><rect x="239.2" y="547.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="242.2" y="558.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="239.7" y="531.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="242.7" y="542.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="239.7" y="515.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="242.7" y="526.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="239.7" y="499.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="242.7" y="510.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="239.7" y="483.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="242.7" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.06%)</title><rect x="240.1" y="547.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="243.1" y="558.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="240.4" y="531.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="243.4" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (77 samples, 1.52%)</title><rect x="241.3" y="547.0" width="17.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="244.3" y="558.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="259.7" y="547.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="262.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.37%)</title><rect x="260.6" y="659.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="263.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.37%)</title><rect x="260.6" y="643.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.37%)</title><rect x="260.6" y="627.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (19 samples, 0.37%)</title><rect x="260.6" y="611.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8 samples, 0.16%)</title><rect x="265.0" y="771.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.04%)</title><rect x="265.0" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="265.5" y="755.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="265.5" y="739.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.08%)</title><rect x="266.0" y="755.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.08%)</title><rect x="267.1" y="771.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.08%)</title><rect x="267.1" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="267.6" y="739.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="267.6" y="723.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.12%)</title><rect x="268.1" y="771.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.12%)</title><rect x="268.1" y="755.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.1" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (64 samples, 1.26%)</title><rect x="269.5" y="787.0" width="14.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.5" y="798.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (63 samples, 1.24%)</title><rect x="269.7" y="771.0" width="14.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (62 samples, 1.22%)</title><rect x="269.9" y="755.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.12%)</title><rect x="269.9" y="739.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.12%)</title><rect x="269.9" y="723.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (5 samples, 0.10%)</title><rect x="270.2" y="707.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.04%)</title><rect x="270.6" y="691.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.6" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="270.6" y="675.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.6" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.04%)</title><rect x="270.6" y="659.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.6" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (56 samples, 1.10%)</title><rect x="271.3" y="739.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (56 samples, 1.10%)</title><rect x="271.3" y="723.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (55 samples, 1.08%)</title><rect x="271.5" y="707.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.5" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (54 samples, 1.06%)</title><rect x="271.8" y="691.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.8" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (54 samples, 1.06%)</title><rect x="271.8" y="675.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.8" y="686.0"></text>
</g>
<g>
<title>read (52 samples, 1.03%)</title><rect x="272.2" y="659.0" width="12.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="275.2" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="284.3" y="803.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="287.3" y="814.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="284.6" y="787.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="287.6" y="798.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="284.6" y="771.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="287.6" y="782.0"></text>
</g>
<g>
<title>[tid=19971] (6 samples, 0.12%)</title><rect x="285.3" y="851.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="288.3" y="862.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.12%)</title><rect x="285.3" y="835.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="288.3" y="846.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.12%)</title><rect x="285.3" y="819.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="288.3" y="830.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.12%)</title><rect x="285.3" y="803.0" width="1.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="288.3" y="814.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.12%)</title><rect x="285.3" y="787.0" width="1.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="288.3" y="798.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.12%)</title><rect x="285.3" y="771.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="288.3" y="782.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (6 samples, 0.12%)</title><rect x="285.3" y="755.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="288.3" y="766.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (6 samples, 0.12%)</title><rect x="285.3" y="739.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="288.3" y="750.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (5 samples, 0.10%)</title><rect x="285.5" y="723.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="288.5" y="734.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.10%)</title><rect x="285.5" y="707.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="288.5" y="718.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.10%)</title><rect x="285.5" y="691.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="288.5" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.10%)</title><rect x="285.5" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="288.5" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.10%)</title><rect x="285.5" y="659.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="288.5" y="670.0"></text>
</g>
<g>
<title>[tid=22019] (121 samples, 2.39%)</title><rect x="286.7" y="851.0" width="28.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="289.7" y="862.0">[t..</text>
</g>
<g>
<title>thread_start (121 samples, 2.39%)</title><rect x="286.7" y="835.0" width="28.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="289.7" y="846.0">th..</text>
</g>
<g>
<title>_pthread_start (121 samples, 2.39%)</title><rect x="286.7" y="819.0" width="28.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="289.7" y="830.0">_p..</text>
</g>
<g>
<title>_pthread_body (121 samples, 2.39%)</title><rect x="286.7" y="803.0" width="28.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="289.7" y="814.0">_p..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (121 samples, 2.39%)</title><rect x="286.7" y="787.0" width="28.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="289.7" y="798.0">th..</text>
</g>
<g>
<title>Thread::call_run() (121 samples, 2.39%)</title><rect x="286.7" y="771.0" width="28.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="289.7" y="782.0">Th..</text>
</g>
<g>
<title>JavaThread::run() (121 samples, 2.39%)</title><rect x="286.7" y="755.0" width="28.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="289.7" y="766.0">Ja..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (121 samples, 2.39%)</title><rect x="286.7" y="739.0" width="28.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="289.7" y="750.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (121 samples, 2.39%)</title><rect x="286.7" y="723.0" width="28.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="289.7" y="734.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (120 samples, 2.37%)</title><rect x="286.7" y="707.0" width="27.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="289.7" y="718.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (120 samples, 2.37%)</title><rect x="286.7" y="691.0" width="27.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="289.7" y="702.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (120 samples, 2.37%)</title><rect x="286.7" y="675.0" width="27.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="289.7" y="686.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (74 samples, 1.46%)</title><rect x="286.7" y="659.0" width="17.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="289.7" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.14%)</title><rect x="286.9" y="643.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="289.9" y="654.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.06%)</title><rect x="287.1" y="627.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="290.1" y="638.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.04%)</title><rect x="287.1" y="611.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="290.1" y="622.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (2 samples, 0.04%)</title><rect x="288.1" y="627.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="291.1" y="638.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.04%)</title><rect x="288.1" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="291.1" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.04%)</title><rect x="288.1" y="595.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="291.1" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.04%)</title><rect x="288.1" y="579.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="291.1" y="590.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.10%)</title><rect x="288.5" y="643.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="291.5" y="654.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.04%)</title><rect x="288.5" y="627.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="291.5" y="638.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.06%)</title><rect x="289.0" y="627.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="292.0" y="638.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.04%)</title><rect x="289.0" y="611.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="292.0" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.16%)</title><rect x="289.9" y="643.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="292.9" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.16%)</title><rect x="289.9" y="627.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="292.9" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.04%)</title><rect x="290.6" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="293.6" y="622.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.06%)</title><rect x="291.1" y="611.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="294.1" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (52 samples, 1.03%)</title><rect x="291.8" y="643.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="294.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.06%)</title><rect x="292.0" y="627.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="295.0" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.06%)</title><rect x="292.0" y="611.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="295.0" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.06%)</title><rect x="292.0" y="595.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="295.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.12%)</title><rect x="292.7" y="627.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="295.7" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="292.7" y="611.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="295.7" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.06%)</title><rect x="293.4" y="611.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="296.4" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="293.4" y="595.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="296.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.16%)</title><rect x="294.1" y="627.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="297.1" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.20%)</title><rect x="296.0" y="627.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="299.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.04%)</title><rect x="296.2" y="611.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="299.2" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.06%)</title><rect x="296.7" y="611.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="299.7" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.06%)</title><rect x="297.4" y="611.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="300.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (2 samples, 0.04%)</title><rect x="298.5" y="627.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="301.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.08%)</title><rect x="299.0" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="302.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.10%)</title><rect x="299.9" y="627.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="302.9" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.08%)</title><rect x="299.9" y="611.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="302.9" y="622.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.04%)</title><rect x="301.3" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="304.3" y="638.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.04%)</title><rect x="301.3" y="611.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="304.3" y="622.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.04%)</title><rect x="301.3" y="595.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="304.3" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.04%)</title><rect x="302.0" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="305.0" y="638.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.10%)</title><rect x="302.7" y="627.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="305.7" y="638.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.04%)</title><rect x="303.4" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="306.4" y="622.0"></text>
</g>
<g>
<title>Compile::Optimize() (35 samples, 0.69%)</title><rect x="303.9" y="659.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="306.9" y="670.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (3 samples, 0.06%)</title><rect x="304.1" y="643.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="307.1" y="654.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (3 samples, 0.06%)</title><rect x="304.1" y="627.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="307.1" y="638.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.04%)</title><rect x="304.1" y="611.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="307.1" y="622.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (13 samples, 0.26%)</title><rect x="304.8" y="643.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="307.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (13 samples, 0.26%)</title><rect x="304.8" y="627.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="307.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.04%)</title><rect x="305.1" y="611.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="308.1" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.14%)</title><rect x="305.5" y="611.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="308.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (5 samples, 0.10%)</title><rect x="306.0" y="595.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="309.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.06%)</title><rect x="306.2" y="579.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="309.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.04%)</title><rect x="306.5" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="309.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="306.5" y="547.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="309.5" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="306.5" y="531.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="309.5" y="542.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.04%)</title><rect x="306.5" y="515.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="309.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.04%)</title><rect x="307.9" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="310.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.04%)</title><rect x="307.9" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="310.9" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.04%)</title><rect x="308.3" y="643.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="311.3" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (10 samples, 0.20%)</title><rect x="308.8" y="643.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="311.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.10%)</title><rect x="309.2" y="627.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="312.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (2 samples, 0.04%)</title><rect x="309.7" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="312.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.04%)</title><rect x="309.7" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="312.7" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="310.6" y="627.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="313.6" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="310.6" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="313.6" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="311.1" y="643.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="314.1" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="311.1" y="627.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="314.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.20%)</title><rect x="312.0" y="659.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="315.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.20%)</title><rect x="312.0" y="643.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="315.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.20%)</title><rect x="312.0" y="627.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="315.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.20%)</title><rect x="312.0" y="611.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="315.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.20%)</title><rect x="312.0" y="595.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="315.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.16%)</title><rect x="312.0" y="579.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="315.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.16%)</title><rect x="312.0" y="563.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="315.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.16%)</title><rect x="312.0" y="547.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="315.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.16%)</title><rect x="312.0" y="531.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="315.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.16%)</title><rect x="312.0" y="515.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="315.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="312.3" y="499.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="315.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="312.3" y="483.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="315.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="312.3" y="467.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="315.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="312.3" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="315.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="312.3" y="435.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="315.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="312.3" y="419.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="315.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="312.3" y="403.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="315.3" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="312.7" y="419.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="315.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="312.7" y="403.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="315.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="312.7" y="387.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="315.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="312.7" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="315.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="312.7" y="355.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="315.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="312.7" y="339.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="315.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="312.7" y="323.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="315.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="312.7" y="307.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="315.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="312.7" y="291.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="315.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="312.7" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="315.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="312.7" y="259.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="315.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="312.7" y="243.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="315.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="312.7" y="227.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="315.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="312.7" y="211.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="315.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="312.7" y="195.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="315.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="312.7" y="179.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="315.7" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="312.7" y="163.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="315.7" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="312.7" y="147.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="315.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="312.7" y="131.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="315.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="312.7" y="115.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="315.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="312.7" y="99.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="315.7" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="312.7" y="83.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="315.7" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="312.7" y="67.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="315.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="312.7" y="51.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="315.7" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="312.7" y="35.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="315.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="313.2" y="499.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="316.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="313.2" y="483.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="316.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="313.2" y="467.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="316.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="313.2" y="451.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="316.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="313.2" y="435.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="316.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="313.2" y="419.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="316.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="313.2" y="403.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="316.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="313.2" y="387.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="316.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="313.2" y="371.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="316.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="313.2" y="355.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="316.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="313.2" y="339.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="316.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="313.2" y="323.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="316.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="313.2" y="307.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="316.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="313.4" y="291.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="316.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="313.4" y="275.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="316.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="313.4" y="259.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="316.4" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="313.9" y="579.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="316.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="313.9" y="563.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="316.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="313.9" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="316.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="313.9" y="531.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="316.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="313.9" y="515.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="316.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="313.9" y="499.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="316.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="313.9" y="483.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="316.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="313.9" y="467.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="316.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="313.9" y="451.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="316.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="313.9" y="435.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="316.9" y="446.0"></text>
</g>
<g>
<title>[tid=41219] (4 samples, 0.08%)</title><rect x="314.8" y="851.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="317.8" y="862.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.08%)</title><rect x="314.8" y="835.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="317.8" y="846.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.08%)</title><rect x="314.8" y="819.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="317.8" y="830.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.08%)</title><rect x="314.8" y="803.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="317.8" y="814.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.08%)</title><rect x="314.8" y="787.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="317.8" y="798.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.08%)</title><rect x="314.8" y="771.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="317.8" y="782.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.08%)</title><rect x="314.8" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="317.8" y="766.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.08%)</title><rect x="314.8" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="317.8" y="750.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.08%)</title><rect x="314.8" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="317.8" y="734.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.08%)</title><rect x="314.8" y="707.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="317.8" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="315.1" y="691.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="318.1" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="315.1" y="675.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="318.1" y="686.0"></text>
</g>
<g>
<title>[tid=42755] (3 samples, 0.06%)</title><rect x="316.0" y="851.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="319.0" y="862.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.06%)</title><rect x="316.0" y="835.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="319.0" y="846.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.06%)</title><rect x="316.0" y="819.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="319.0" y="830.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.06%)</title><rect x="316.0" y="803.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="319.0" y="814.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.06%)</title><rect x="316.0" y="787.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="319.0" y="798.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.06%)</title><rect x="316.0" y="771.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="319.0" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.06%)</title><rect x="316.0" y="755.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="319.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.06%)</title><rect x="316.0" y="739.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="319.0" y="750.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.06%)</title><rect x="316.0" y="723.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="319.0" y="734.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.06%)</title><rect x="316.0" y="707.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="319.0" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.06%)</title><rect x="316.0" y="691.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="319.0" y="702.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.06%)</title><rect x="316.0" y="675.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="319.0" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.06%)</title><rect x="316.0" y="659.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="319.0" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.06%)</title><rect x="316.0" y="643.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="319.0" y="654.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.04%)</title><rect x="316.2" y="627.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="319.2" y="638.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.04%)</title><rect x="316.2" y="611.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="319.2" y="622.0"></text>
</g>
<g>
<title>[worker tid=29187] (963 samples, 18.99%)</title><rect x="316.7" y="851.0" width="224.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="319.7" y="862.0">[worker tid=29187]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.14%)</title><rect x="316.7" y="835.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="319.7" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 0.14%)</title><rect x="316.7" y="819.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="319.7" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (5 samples, 0.10%)</title><rect x="317.2" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="320.2" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (4 samples, 0.08%)</title><rect x="317.4" y="787.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="320.4" y="798.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.04%)</title><rect x="318.3" y="835.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="321.3" y="846.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="318.8" y="835.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="321.8" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="318.8" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="321.8" y="830.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.06%)</title><rect x="319.3" y="835.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="322.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (946 samples, 18.66%)</title><rect x="320.0" y="835.0" width="220.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="323.0" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (946 samples, 18.66%)</title><rect x="320.0" y="819.0" width="220.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.0" y="830.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (946 samples, 18.66%)</title><rect x="320.0" y="803.0" width="220.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.0" y="814.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (262 samples, 5.17%)</title><rect x="320.6" y="787.0" width="61.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.6" y="798.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (262 samples, 5.17%)</title><rect x="320.6" y="771.0" width="61.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.6" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (246 samples, 4.85%)</title><rect x="320.6" y="755.0" width="57.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.6" y="766.0">java/u..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.08%)</title><rect x="320.6" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.06%)</title><rect x="321.6" y="739.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.06%)</title><rect x="322.3" y="739.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.06%)</title><rect x="322.3" y="723.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.04%)</title><rect x="322.3" y="707.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.04%)</title><rect x="322.3" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.04%)</title><rect x="322.3" y="675.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.3" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="322.3" y="659.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="325.3" y="670.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="322.3" y="643.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="325.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (236 samples, 4.65%)</title><rect x="323.0" y="739.0" width="54.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.0" y="750.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (236 samples, 4.65%)</title><rect x="323.0" y="723.0" width="54.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="326.0" y="734.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (229 samples, 4.52%)</title><rect x="324.6" y="707.0" width="53.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="327.6" y="718.0">Unsaf..</text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.04%)</title><rect x="324.8" y="691.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="327.8" y="702.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="325.5" y="691.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.5" y="702.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (216 samples, 4.26%)</title><rect x="326.5" y="691.0" width="50.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="329.5" y="702.0">Parke..</text>
</g>
<g>
<title>__psynch_cvwait (208 samples, 4.10%)</title><rect x="327.4" y="675.0" width="48.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="330.4" y="686.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.06%)</title><rect x="375.8" y="675.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="378.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 0.32%)</title><rect x="377.9" y="755.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 0.32%)</title><rect x="377.9" y="739.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 0.32%)</title><rect x="377.9" y="723.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 0.32%)</title><rect x="377.9" y="707.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (16 samples, 0.32%)</title><rect x="377.9" y="691.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="380.9" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (15 samples, 0.30%)</title><rect x="378.1" y="675.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="381.1" y="686.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.24%)</title><rect x="378.8" y="659.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="381.8" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (681 samples, 13.43%)</title><rect x="381.6" y="787.0" width="158.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="384.6" y="798.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (681 samples, 13.43%)</title><rect x="381.6" y="771.0" width="158.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.6" y="782.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (166 samples, 3.27%)</title><rect x="381.6" y="755.0" width="38.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.6" y="766.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (159 samples, 3.14%)</title><rect x="381.8" y="739.0" width="37.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.8" y="750.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.22%)</title><rect x="381.8" y="723.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.8" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.16%)</title><rect x="382.5" y="707.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.5" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.06%)</title><rect x="382.8" y="691.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="382.8" y="675.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.8" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.08%)</title><rect x="383.5" y="691.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="386.5" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.08%)</title><rect x="383.5" y="675.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.5" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (148 samples, 2.92%)</title><rect x="384.4" y="723.0" width="34.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.4" y="734.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (148 samples, 2.92%)</title><rect x="384.4" y="707.0" width="34.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.4" y="718.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (146 samples, 2.88%)</title><rect x="384.9" y="691.0" width="33.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="387.9" y="702.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (146 samples, 2.88%)</title><rect x="384.9" y="675.0" width="33.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.9" y="686.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="384.9" y="659.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.9" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="384.9" y="643.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="387.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="384.9" y="627.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="387.9" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="384.9" y="611.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.9" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="384.9" y="595.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.9" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="384.9" y="579.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (143 samples, 2.82%)</title><rect x="385.6" y="659.0" width="33.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.6" y="670.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.08%)</title><rect x="385.6" y="643.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="386.0" y="627.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="389.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="386.0" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="386.0" y="595.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="389.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="386.0" y="579.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.0" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="386.0" y="563.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="389.0" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (139 samples, 2.74%)</title><rect x="386.5" y="643.0" width="32.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.5" y="654.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (139 samples, 2.74%)</title><rect x="386.5" y="627.0" width="32.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="389.5" y="638.0">su..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.06%)</title><rect x="386.5" y="611.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.5" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.06%)</title><rect x="386.5" y="595.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.5" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.06%)</title><rect x="386.5" y="579.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="389.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="386.5" y="563.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.5" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.06%)</title><rect x="386.5" y="547.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.5" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="386.7" y="531.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="389.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (135 samples, 2.66%)</title><rect x="387.2" y="611.0" width="31.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.2" y="622.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (135 samples, 2.66%)</title><rect x="387.2" y="595.0" width="31.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.2" y="606.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (135 samples, 2.66%)</title><rect x="387.2" y="579.0" width="31.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.2" y="590.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="388.1" y="563.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="391.1" y="574.0"></text>
</g>
<g>
<title>write (129 samples, 2.54%)</title><rect x="388.6" y="563.0" width="30.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="391.6" y="574.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.08%)</title><rect x="418.8" y="739.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="419.1" y="723.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="422.1" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="419.3" y="707.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.3" y="718.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.04%)</title><rect x="419.8" y="739.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (2 samples, 0.04%)</title><rect x="419.8" y="723.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="422.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/237278380.act (515 samples, 10.16%)</title><rect x="420.2" y="755.0" width="119.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.2" y="766.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$2 (515 samples, 10.16%)</title><rect x="420.2" y="739.0" width="119.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.2" y="750.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (515 samples, 10.16%)</title><rect x="420.2" y="723.0" width="119.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.2" y="734.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="420.2" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="423.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="420.5" y="691.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="423.5" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="420.5" y="675.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="423.5" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="420.5" y="659.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="423.5" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="420.7" y="643.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="423.7" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="420.7" y="627.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="423.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (511 samples, 10.08%)</title><rect x="421.2" y="707.0" width="118.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.2" y="718.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (511 samples, 10.08%)</title><rect x="421.2" y="691.0" width="118.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="424.2" y="702.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (511 samples, 10.08%)</title><rect x="421.2" y="675.0" width="118.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.2" y="686.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (506 samples, 9.98%)</title><rect x="422.3" y="659.0" width="117.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="425.3" y="670.0">Java_org_rocks..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="422.6" y="643.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="425.6" y="654.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.06%)</title><rect x="423.3" y="643.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="426.3" y="654.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (498 samples, 9.82%)</title><rect x="424.0" y="643.0" width="115.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="427.0" y="654.0">rocksdb_put_he..</text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="424.9" y="627.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="427.9" y="638.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="424.9" y="611.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="427.9" y="622.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.06%)</title><rect x="425.4" y="627.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="428.4" y="638.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.04%)</title><rect x="425.6" y="611.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="428.6" y="622.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.10%)</title><rect x="426.1" y="627.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="429.1" y="638.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.06%)</title><rect x="426.3" y="611.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="429.3" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="427.2" y="627.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="430.2" y="638.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.08%)</title><rect x="427.9" y="627.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="430.9" y="638.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.08%)</title><rect x="427.9" y="611.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="430.9" y="622.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="427.9" y="595.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="430.9" y="606.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.04%)</title><rect x="427.9" y="579.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="430.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (477 samples, 9.41%)</title><rect x="428.9" y="627.0" width="110.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="431.9" y="638.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (477 samples, 9.41%)</title><rect x="428.9" y="611.0" width="110.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="431.9" y="622.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (475 samples, 9.37%)</title><rect x="429.1" y="595.0" width="110.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="432.1" y="606.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (456 samples, 8.99%)</title><rect x="429.8" y="579.0" width="106.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="432.8" y="590.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (451 samples, 8.89%)</title><rect x="430.0" y="563.0" width="105.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="433.0" y="574.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="433.3" y="547.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="436.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (144 samples, 2.84%)</title><rect x="433.7" y="547.0" width="33.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="436.7" y="558.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (142 samples, 2.80%)</title><rect x="434.0" y="531.0" width="33.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="437.0" y="542.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (139 samples, 2.74%)</title><rect x="434.7" y="515.0" width="32.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="437.7" y="526.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.08%)</title><rect x="434.7" y="499.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="437.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (135 samples, 2.66%)</title><rect x="435.6" y="499.0" width="31.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="438.6" y="510.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (129 samples, 2.54%)</title><rect x="437.0" y="483.0" width="30.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="440.0" y="494.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="437.0" y="467.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="440.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (125 samples, 2.46%)</title><rect x="437.9" y="467.0" width="29.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="440.9" y="478.0">ro..</text>
</g>
<g>
<title>write (124 samples, 2.45%)</title><rect x="438.2" y="451.0" width="28.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="441.2" y="462.0">wr..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (14 samples, 0.28%)</title><rect x="467.9" y="547.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="470.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (14 samples, 0.28%)</title><rect x="467.9" y="531.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="470.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (12 samples, 0.24%)</title><rect x="468.4" y="515.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="471.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (12 samples, 0.24%)</title><rect x="468.4" y="499.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="471.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (10 samples, 0.20%)</title><rect x="468.6" y="483.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="471.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.20%)</title><rect x="468.6" y="467.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="471.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.08%)</title><rect x="470.0" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="473.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="470.5" y="435.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="473.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (20 samples, 0.39%)</title><rect x="471.2" y="547.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="474.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (17 samples, 0.34%)</title><rect x="471.9" y="531.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="474.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.30%)</title><rect x="472.4" y="515.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="475.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.30%)</title><rect x="472.4" y="499.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="475.4" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.10%)</title><rect x="472.6" y="483.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="475.6" y="494.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.10%)</title><rect x="472.6" y="467.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="475.6" y="478.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.10%)</title><rect x="472.6" y="451.0" width="1.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="475.6" y="462.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.10%)</title><rect x="472.6" y="435.0" width="1.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="475.6" y="446.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.10%)</title><rect x="472.6" y="419.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="475.6" y="430.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="473.1" y="403.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="476.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (9 samples, 0.18%)</title><rect x="473.8" y="483.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="476.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.14%)</title><rect x="474.2" y="467.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.14%)</title><rect x="474.2" y="451.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="477.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="475.2" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="478.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (139 samples, 2.74%)</title><rect x="475.9" y="547.0" width="32.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="478.9" y="558.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (139 samples, 2.74%)</title><rect x="475.9" y="531.0" width="32.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="478.9" y="542.0">ro..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="477.0" y="515.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="480.0" y="526.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="477.0" y="499.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="480.0" y="510.0"></text>
</g>
<g>
<title>xdrrec_ops (131 samples, 2.58%)</title><rect x="477.7" y="515.0" width="30.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="480.7" y="526.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (5 samples, 0.10%)</title><rect x="508.2" y="547.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="511.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.06%)</title><rect x="508.2" y="531.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="511.2" y="542.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.04%)</title><rect x="508.2" y="515.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="511.2" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="508.2" y="499.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="511.2" y="510.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="508.9" y="531.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="511.9" y="542.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="508.9" y="515.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="511.9" y="526.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="508.9" y="499.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="511.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (9 samples, 0.18%)</title><rect x="509.4" y="547.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="512.4" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.12%)</title><rect x="509.8" y="531.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="512.8" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.12%)</title><rect x="509.8" y="515.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="512.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (77 samples, 1.52%)</title><rect x="511.5" y="547.0" width="17.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="514.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (76 samples, 1.50%)</title><rect x="511.5" y="531.0" width="17.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="514.5" y="542.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (63 samples, 1.24%)</title><rect x="512.4" y="515.0" width="14.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="515.4" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (51 samples, 1.01%)</title><rect x="512.6" y="499.0" width="11.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="515.6" y="510.0"></text>
</g>
<g>
<title>_pthread_cond_wait (11 samples, 0.22%)</title><rect x="524.5" y="499.0" width="2.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="527.5" y="510.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.20%)</title><rect x="524.7" y="483.0" width="2.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="527.7" y="494.0"></text>
</g>
<g>
<title>__psynch_mutexwait (10 samples, 0.20%)</title><rect x="524.7" y="467.0" width="2.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="527.7" y="478.0"></text>
</g>
<g>
<title>xdrrec_ops (8 samples, 0.16%)</title><rect x="527.3" y="515.0" width="1.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="530.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (19 samples, 0.37%)</title><rect x="529.4" y="547.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="532.4" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.24%)</title><rect x="529.6" y="531.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="532.6" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.20%)</title><rect x="529.6" y="515.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="532.6" y="526.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="531.9" y="515.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="534.9" y="526.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (6 samples, 0.12%)</title><rect x="532.4" y="531.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="535.4" y="542.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (6 samples, 0.12%)</title><rect x="532.4" y="515.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="535.4" y="526.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (6 samples, 0.12%)</title><rect x="532.4" y="499.0" width="1.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="535.4" y="510.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="534.0" y="547.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="537.0" y="558.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="534.5" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="537.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="534.5" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="537.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="536.1" y="579.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="539.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.08%)</title><rect x="536.6" y="579.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="539.6" y="590.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="536.8" y="563.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="539.8" y="574.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.04%)</title><rect x="536.8" y="547.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="539.8" y="558.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="536.8" y="531.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="539.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (8 samples, 0.16%)</title><rect x="537.5" y="579.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="540.5" y="590.0"></text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="537.5" y="563.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="540.5" y="574.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.08%)</title><rect x="538.2" y="563.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="541.2" y="574.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="540.1" y="835.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="543.1" y="846.0"></text>
</g>
<g>
<title>[worker tid=34819] (890 samples, 17.55%)</title><rect x="540.8" y="851.0" width="207.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="543.8" y="862.0">[worker tid=34819]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.16%)</title><rect x="541.0" y="835.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="544.0" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.12%)</title><rect x="541.2" y="819.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="544.2" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="541.2" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="544.2" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="541.2" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="544.2" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="541.2" y="771.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="544.2" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.08%)</title><rect x="541.7" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="544.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (878 samples, 17.31%)</title><rect x="543.3" y="835.0" width="204.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="546.3" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (878 samples, 17.31%)</title><rect x="543.3" y="819.0" width="204.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="546.3" y="830.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (878 samples, 17.31%)</title><rect x="543.3" y="803.0" width="204.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="546.3" y="814.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (247 samples, 4.87%)</title><rect x="544.0" y="787.0" width="57.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.0" y="798.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (243 samples, 4.79%)</title><rect x="545.0" y="771.0" width="56.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="548.0" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (222 samples, 4.38%)</title><rect x="545.0" y="755.0" width="51.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.0" y="766.0">java/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.06%)</title><rect x="545.0" y="739.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="548.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.04%)</title><rect x="545.7" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.08%)</title><rect x="546.1" y="739.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="549.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="546.6" y="723.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="549.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="546.6" y="707.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.08%)</title><rect x="547.1" y="739.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="550.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.08%)</title><rect x="547.1" y="723.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="550.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.08%)</title><rect x="547.1" y="707.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="550.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.08%)</title><rect x="547.1" y="691.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="550.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.08%)</title><rect x="547.1" y="675.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="550.1" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.08%)</title><rect x="547.1" y="659.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="550.1" y="670.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.08%)</title><rect x="547.1" y="643.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="550.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (209 samples, 4.12%)</title><rect x="548.0" y="739.0" width="48.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="551.0" y="750.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (209 samples, 4.12%)</title><rect x="548.0" y="723.0" width="48.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.0" y="734.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (194 samples, 3.83%)</title><rect x="551.3" y="707.0" width="45.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="554.3" y="718.0">Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (184 samples, 3.63%)</title><rect x="552.4" y="691.0" width="42.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="555.4" y="702.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (180 samples, 3.55%)</title><rect x="552.6" y="675.0" width="41.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="555.6" y="686.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="594.8" y="675.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="597.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.37%)</title><rect x="597.1" y="755.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.37%)</title><rect x="597.1" y="739.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="600.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.37%)</title><rect x="597.1" y="723.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="600.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.37%)</title><rect x="597.1" y="707.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="600.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.37%)</title><rect x="597.1" y="691.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="600.1" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (17 samples, 0.34%)</title><rect x="597.6" y="675.0" width="3.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="600.6" y="686.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.32%)</title><rect x="597.8" y="659.0" width="3.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="600.8" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (628 samples, 12.38%)</title><rect x="601.5" y="787.0" width="146.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="604.5" y="798.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (628 samples, 12.38%)</title><rect x="601.5" y="771.0" width="146.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="604.5" y="782.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (147 samples, 2.90%)</title><rect x="601.5" y="755.0" width="34.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.5" y="766.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (144 samples, 2.84%)</title><rect x="601.7" y="739.0" width="33.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="604.7" y="750.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.04%)</title><rect x="601.7" y="723.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="604.7" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (142 samples, 2.80%)</title><rect x="602.2" y="723.0" width="33.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.2" y="734.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (141 samples, 2.78%)</title><rect x="602.4" y="707.0" width="32.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="605.4" y="718.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (141 samples, 2.78%)</title><rect x="602.4" y="691.0" width="32.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.4" y="702.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (141 samples, 2.78%)</title><rect x="602.4" y="675.0" width="32.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="605.4" y="686.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="602.4" y="659.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="605.4" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="602.4" y="643.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="605.4" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="602.4" y="627.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.4" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="602.4" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="605.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="602.4" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="605.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="602.4" y="579.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="605.4" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.04%)</title><rect x="602.4" y="563.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="605.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (139 samples, 2.74%)</title><rect x="602.9" y="659.0" width="32.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="605.9" y="670.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.06%)</title><rect x="602.9" y="643.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="605.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="603.1" y="627.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="606.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="603.1" y="611.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="603.1" y="595.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (136 samples, 2.68%)</title><rect x="603.6" y="643.0" width="31.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="606.6" y="654.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (136 samples, 2.68%)</title><rect x="603.6" y="627.0" width="31.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="606.6" y="638.0">su..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (8 samples, 0.16%)</title><rect x="603.6" y="611.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="606.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (8 samples, 0.16%)</title><rect x="603.6" y="595.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="606.6" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.14%)</title><rect x="603.6" y="579.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="606.6" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.14%)</title><rect x="603.6" y="563.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="606.6" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.14%)</title><rect x="603.6" y="547.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="606.6" y="558.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.04%)</title><rect x="603.8" y="531.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="606.8" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.06%)</title><rect x="604.5" y="531.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="607.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (127 samples, 2.50%)</title><rect x="605.5" y="611.0" width="29.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="608.5" y="622.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (127 samples, 2.50%)</title><rect x="605.5" y="595.0" width="29.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.5" y="606.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (127 samples, 2.50%)</title><rect x="605.5" y="579.0" width="29.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="608.5" y="590.0">su..</text>
</g>
<g>
<title>write (121 samples, 2.39%)</title><rect x="606.9" y="563.0" width="28.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="609.9" y="574.0">wr..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/237278380.act (481 samples, 9.49%)</title><rect x="635.7" y="755.0" width="111.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.7" y="766.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$2 (481 samples, 9.49%)</title><rect x="635.7" y="739.0" width="111.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.7" y="750.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (481 samples, 9.49%)</title><rect x="635.7" y="723.0" width="111.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.7" y="734.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="635.7" y="707.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="635.7" y="691.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.7" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="635.7" y="675.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="635.7" y="659.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (477 samples, 9.41%)</title><rect x="636.6" y="707.0" width="111.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.6" y="718.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (471 samples, 9.29%)</title><rect x="636.6" y="691.0" width="109.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.6" y="702.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (471 samples, 9.29%)</title><rect x="636.6" y="675.0" width="109.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="639.6" y="686.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (469 samples, 9.25%)</title><rect x="637.1" y="659.0" width="109.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="640.1" y="670.0">Java_org_rock..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.04%)</title><rect x="638.0" y="643.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="641.0" y="654.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (463 samples, 9.13%)</title><rect x="638.5" y="643.0" width="107.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="641.5" y="654.0">rocksdb_put_h..</text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="638.5" y="627.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="641.5" y="638.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="638.5" y="611.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="641.5" y="622.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.06%)</title><rect x="639.0" y="627.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="642.0" y="638.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.06%)</title><rect x="639.0" y="611.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="642.0" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.10%)</title><rect x="639.9" y="627.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="642.9" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.06%)</title><rect x="640.4" y="611.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="643.4" y="622.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.12%)</title><rect x="641.1" y="627.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="644.1" y="638.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.12%)</title><rect x="641.1" y="611.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="644.1" y="622.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.08%)</title><rect x="641.5" y="595.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="644.5" y="606.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="641.8" y="579.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="644.8" y="590.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="641.8" y="563.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="644.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (445 samples, 8.78%)</title><rect x="642.5" y="627.0" width="103.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="645.5" y="638.0">rocksdb::Com..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (444 samples, 8.76%)</title><rect x="642.7" y="611.0" width="103.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="645.7" y="622.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (444 samples, 8.76%)</title><rect x="642.7" y="595.0" width="103.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="645.7" y="606.0">rocksdb::DB:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (428 samples, 8.44%)</title><rect x="643.9" y="579.0" width="99.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="646.9" y="590.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (422 samples, 8.32%)</title><rect x="644.1" y="563.0" width="98.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="647.1" y="574.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (126 samples, 2.48%)</title><rect x="646.9" y="547.0" width="29.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="649.9" y="558.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (126 samples, 2.48%)</title><rect x="646.9" y="531.0" width="29.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="649.9" y="542.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (125 samples, 2.46%)</title><rect x="646.9" y="515.0" width="29.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="649.9" y="526.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (124 samples, 2.45%)</title><rect x="647.1" y="499.0" width="28.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="650.1" y="510.0">ro..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (2 samples, 0.04%)</title><rect x="647.8" y="483.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="650.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="648.5" y="483.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="651.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (116 samples, 2.29%)</title><rect x="649.0" y="483.0" width="27.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="652.0" y="494.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (115 samples, 2.27%)</title><rect x="649.2" y="467.0" width="26.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="652.2" y="478.0">r..</text>
</g>
<g>
<title>write (114 samples, 2.25%)</title><rect x="649.4" y="451.0" width="26.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="652.4" y="462.0">w..</text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.04%)</title><rect x="676.4" y="547.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="679.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (24 samples, 0.47%)</title><rect x="676.9" y="547.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="679.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (24 samples, 0.47%)</title><rect x="676.9" y="531.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="679.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.04%)</title><rect x="677.1" y="515.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="680.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (21 samples, 0.41%)</title><rect x="677.6" y="515.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="680.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (21 samples, 0.41%)</title><rect x="677.6" y="499.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="680.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (18 samples, 0.35%)</title><rect x="677.8" y="483.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="680.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.30%)</title><rect x="678.5" y="467.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="681.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (18 samples, 0.35%)</title><rect x="682.5" y="547.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="685.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (15 samples, 0.30%)</title><rect x="683.2" y="531.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="686.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (14 samples, 0.28%)</title><rect x="683.4" y="515.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="686.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (14 samples, 0.28%)</title><rect x="683.4" y="499.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="686.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.04%)</title><rect x="683.9" y="483.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="686.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (9 samples, 0.18%)</title><rect x="684.4" y="483.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="687.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.18%)</title><rect x="684.4" y="467.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="687.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="684.6" y="451.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="687.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="684.6" y="435.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="687.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.10%)</title><rect x="685.3" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="688.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="686.0" y="435.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="689.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (153 samples, 3.02%)</title><rect x="686.7" y="547.0" width="35.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="689.7" y="558.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (152 samples, 3.00%)</title><rect x="686.7" y="531.0" width="35.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="689.7" y="542.0">roc..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="688.1" y="515.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="691.1" y="526.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="688.1" y="499.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="691.1" y="510.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="688.1" y="483.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="691.1" y="494.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.04%)</title><rect x="688.5" y="515.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="691.5" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="688.5" y="499.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="691.5" y="510.0"></text>
</g>
<g>
<title>xdrrec_ops (142 samples, 2.80%)</title><rect x="689.0" y="515.0" width="33.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="692.0" y="526.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.06%)</title><rect x="722.3" y="547.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="725.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="722.3" y="531.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="725.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (9 samples, 0.18%)</title><rect x="723.0" y="547.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="726.0" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.12%)</title><rect x="723.2" y="531.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="726.2" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.12%)</title><rect x="723.2" y="515.0" width="1.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="726.2" y="526.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="724.6" y="531.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="727.6" y="542.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="724.6" y="515.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="727.6" y="526.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="724.6" y="499.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="727.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (62 samples, 1.22%)</title><rect x="725.1" y="547.0" width="14.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="728.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (62 samples, 1.22%)</title><rect x="725.1" y="531.0" width="14.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="728.1" y="542.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (45 samples, 0.89%)</title><rect x="726.9" y="515.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="729.9" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (38 samples, 0.75%)</title><rect x="726.9" y="499.0" width="8.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="729.9" y="510.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.14%)</title><rect x="735.8" y="499.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="738.8" y="510.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.14%)</title><rect x="735.8" y="483.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="738.8" y="494.0"></text>
</g>
<g>
<title>__psynch_mutexwait (7 samples, 0.14%)</title><rect x="735.8" y="467.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="738.8" y="478.0"></text>
</g>
<g>
<title>xdrrec_ops (9 samples, 0.18%)</title><rect x="737.4" y="515.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="740.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (9 samples, 0.18%)</title><rect x="739.5" y="547.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.5" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.14%)</title><rect x="739.5" y="531.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="742.5" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.14%)</title><rect x="739.5" y="515.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="742.5" y="526.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="741.1" y="531.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="744.1" y="542.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="741.1" y="515.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="744.1" y="526.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="741.1" y="499.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="744.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.04%)</title><rect x="742.5" y="563.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="745.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.06%)</title><rect x="743.5" y="579.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="746.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="744.2" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="747.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="744.2" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="747.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.06%)</title><rect x="744.6" y="579.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="747.6" y="590.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="744.9" y="563.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="747.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.04%)</title><rect x="745.3" y="579.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="748.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.08%)</title><rect x="746.2" y="691.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="749.2" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.06%)</title><rect x="746.5" y="675.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="749.5" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.04%)</title><rect x="746.7" y="659.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="749.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.04%)</title><rect x="747.2" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="750.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.04%)</title><rect x="747.2" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="750.2" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.04%)</title><rect x="747.2" y="659.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="750.2" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="747.2" y="643.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="750.2" y="654.0"></text>
</g>
<g>
<title>[worker tid=35331] (931 samples, 18.36%)</title><rect x="747.9" y="851.0" width="216.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="750.9" y="862.0">[worker tid=35331]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (11 samples, 0.22%)</title><rect x="747.9" y="835.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="750.9" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (10 samples, 0.20%)</title><rect x="748.1" y="819.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.1" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.06%)</title><rect x="748.3" y="803.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="751.3" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.12%)</title><rect x="749.0" y="803.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="752.0" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (4 samples, 0.08%)</title><rect x="749.5" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="752.5" y="798.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="750.9" y="835.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="753.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (915 samples, 18.04%)</title><rect x="751.4" y="835.0" width="212.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="754.4" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (915 samples, 18.04%)</title><rect x="751.4" y="819.0" width="212.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="754.4" y="830.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (915 samples, 18.04%)</title><rect x="751.4" y="803.0" width="212.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.4" y="814.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (243 samples, 4.79%)</title><rect x="752.3" y="787.0" width="56.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.3" y="798.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (240 samples, 4.73%)</title><rect x="753.0" y="771.0" width="55.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.0" y="782.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (211 samples, 4.16%)</title><rect x="753.2" y="755.0" width="49.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="756.2" y="766.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (209 samples, 4.12%)</title><rect x="753.7" y="739.0" width="48.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.7" y="750.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (209 samples, 4.12%)</title><rect x="753.7" y="723.0" width="48.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="756.7" y="734.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (201 samples, 3.96%)</title><rect x="755.3" y="707.0" width="46.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="758.3" y="718.0">Unsa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.04%)</title><rect x="755.6" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="758.6" y="702.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.06%)</title><rect x="756.5" y="691.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="759.5" y="702.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (183 samples, 3.61%)</title><rect x="757.4" y="691.0" width="42.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="760.4" y="702.0">Park..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.08%)</title><rect x="757.4" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="760.4" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.04%)</title><rect x="757.4" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="760.4" y="670.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="757.9" y="659.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="760.9" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (175 samples, 3.45%)</title><rect x="758.3" y="675.0" width="40.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="761.3" y="686.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.06%)</title><rect x="799.1" y="675.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="802.1" y="686.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.04%)</title><rect x="799.3" y="659.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="802.3" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.06%)</title><rect x="800.7" y="691.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="803.7" y="702.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.06%)</title><rect x="800.7" y="675.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="803.7" y="686.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="800.9" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="803.9" y="670.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="800.9" y="643.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="803.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.08%)</title><rect x="802.3" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.08%)</title><rect x="802.3" y="739.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="805.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.06%)</title><rect x="802.3" y="723.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="805.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="802.3" y="707.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.04%)</title><rect x="802.3" y="691.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="805.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title><rect x="802.3" y="675.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.3" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.04%)</title><rect x="802.3" y="659.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="805.3" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.04%)</title><rect x="802.3" y="643.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="805.3" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="802.3" y="627.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="805.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 0.47%)</title><rect x="803.3" y="755.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="806.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 0.47%)</title><rect x="803.3" y="739.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 0.47%)</title><rect x="803.3" y="723.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 0.47%)</title><rect x="803.3" y="707.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (24 samples, 0.47%)</title><rect x="803.3" y="691.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.3" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (21 samples, 0.41%)</title><rect x="804.0" y="675.0" width="4.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="807.0" y="686.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.35%)</title><rect x="804.0" y="659.0" width="4.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="807.0" y="670.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="808.4" y="659.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="811.4" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (668 samples, 13.17%)</title><rect x="808.8" y="787.0" width="155.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.8" y="798.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (668 samples, 13.17%)</title><rect x="808.8" y="771.0" width="155.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="811.8" y="782.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (173 samples, 3.41%)</title><rect x="809.1" y="755.0" width="40.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="812.1" y="766.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (168 samples, 3.31%)</title><rect x="809.5" y="739.0" width="39.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="812.5" y="750.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.06%)</title><rect x="809.5" y="723.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.5" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (165 samples, 3.25%)</title><rect x="810.2" y="723.0" width="38.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="813.2" y="734.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (164 samples, 3.23%)</title><rect x="810.5" y="707.0" width="38.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.5" y="718.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (164 samples, 3.23%)</title><rect x="810.5" y="691.0" width="38.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="813.5" y="702.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (164 samples, 3.23%)</title><rect x="810.5" y="675.0" width="38.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="813.5" y="686.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="810.5" y="659.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.5" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="810.5" y="643.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="810.5" y="627.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="813.5" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="810.5" y="611.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="813.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="810.5" y="595.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="810.5" y="579.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.5" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.06%)</title><rect x="810.5" y="563.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="813.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (161 samples, 3.17%)</title><rect x="811.2" y="659.0" width="37.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.2" y="670.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.12%)</title><rect x="811.2" y="643.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.10%)</title><rect x="811.4" y="627.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="814.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.10%)</title><rect x="811.4" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.10%)</title><rect x="811.4" y="595.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.06%)</title><rect x="811.6" y="579.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="814.6" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="811.6" y="563.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="814.6" y="574.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="811.6" y="547.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="814.6" y="558.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="811.9" y="531.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="814.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (155 samples, 3.06%)</title><rect x="812.6" y="643.0" width="36.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="815.6" y="654.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (155 samples, 3.06%)</title><rect x="812.6" y="627.0" width="36.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="815.6" y="638.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (6 samples, 0.12%)</title><rect x="812.6" y="611.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (6 samples, 0.12%)</title><rect x="812.6" y="595.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="815.6" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.12%)</title><rect x="812.6" y="579.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="815.6" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.12%)</title><rect x="812.6" y="563.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="815.6" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.12%)</title><rect x="812.6" y="547.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="815.6" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.08%)</title><rect x="813.0" y="531.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="816.0" y="542.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="813.3" y="515.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="816.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (149 samples, 2.94%)</title><rect x="814.0" y="611.0" width="34.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.0" y="622.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (149 samples, 2.94%)</title><rect x="814.0" y="595.0" width="34.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.0" y="606.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (149 samples, 2.94%)</title><rect x="814.0" y="579.0" width="34.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.0" y="590.0">su..</text>
</g>
<g>
<title>write (144 samples, 2.84%)</title><rect x="815.1" y="563.0" width="33.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="818.1" y="574.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="848.6" y="739.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="851.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/237278380.act (494 samples, 9.74%)</title><rect x="849.3" y="755.0" width="115.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="852.3" y="766.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$2 (494 samples, 9.74%)</title><rect x="849.3" y="739.0" width="115.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.3" y="750.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (494 samples, 9.74%)</title><rect x="849.3" y="723.0" width="115.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.3" y="734.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="849.3" y="707.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="852.3" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="849.3" y="691.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.3" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="849.3" y="675.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.3" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="849.3" y="659.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.3" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="849.3" y="643.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (492 samples, 9.70%)</title><rect x="849.8" y="707.0" width="114.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="852.8" y="718.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (488 samples, 9.62%)</title><rect x="849.8" y="691.0" width="113.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="852.8" y="702.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (488 samples, 9.62%)</title><rect x="849.8" y="675.0" width="113.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.8" y="686.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (486 samples, 9.58%)</title><rect x="850.3" y="659.0" width="113.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="853.3" y="670.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (482 samples, 9.51%)</title><rect x="851.2" y="643.0" width="112.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.2" y="654.0">rocksdb_put_he..</text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="852.1" y="627.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="855.1" y="638.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.08%)</title><rect x="853.1" y="627.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="856.1" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="853.5" y="611.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="856.5" y="622.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.10%)</title><rect x="854.2" y="627.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="857.2" y="638.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.10%)</title><rect x="854.2" y="611.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="857.2" y="622.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.10%)</title><rect x="854.2" y="595.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="857.2" y="606.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.08%)</title><rect x="854.5" y="579.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="857.5" y="590.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.08%)</title><rect x="854.5" y="563.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="857.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (462 samples, 9.11%)</title><rect x="855.4" y="627.0" width="107.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="858.4" y="638.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (461 samples, 9.09%)</title><rect x="855.6" y="611.0" width="107.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="858.6" y="622.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (456 samples, 8.99%)</title><rect x="856.1" y="595.0" width="106.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="859.1" y="606.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (445 samples, 8.78%)</title><rect x="856.5" y="579.0" width="103.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="859.5" y="590.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (439 samples, 8.66%)</title><rect x="857.0" y="563.0" width="102.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="860.0" y="574.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (120 samples, 2.37%)</title><rect x="859.8" y="547.0" width="27.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="862.8" y="558.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.04%)</title><rect x="859.8" y="531.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (113 samples, 2.23%)</title><rect x="860.3" y="531.0" width="26.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="863.3" y="542.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (113 samples, 2.23%)</title><rect x="860.3" y="515.0" width="26.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="863.3" y="526.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.06%)</title><rect x="860.5" y="499.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="863.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (109 samples, 2.15%)</title><rect x="861.2" y="499.0" width="25.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="864.2" y="510.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (108 samples, 2.13%)</title><rect x="861.4" y="483.0" width="25.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.4" y="494.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="861.4" y="467.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="864.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (105 samples, 2.07%)</title><rect x="862.1" y="467.0" width="24.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="865.1" y="478.0">r..</text>
</g>
<g>
<title>write (102 samples, 2.01%)</title><rect x="862.8" y="451.0" width="23.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="865.8" y="462.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (5 samples, 0.10%)</title><rect x="886.6" y="531.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.6" y="542.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (5 samples, 0.10%)</title><rect x="886.6" y="515.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="889.6" y="526.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (4 samples, 0.08%)</title><rect x="886.8" y="499.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="889.8" y="510.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (4 samples, 0.08%)</title><rect x="886.8" y="483.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="889.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.04%)</title><rect x="888.0" y="547.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="891.0" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="888.0" y="531.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="891.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (31 samples, 0.61%)</title><rect x="888.4" y="547.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (28 samples, 0.55%)</title><rect x="889.1" y="531.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="892.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (27 samples, 0.53%)</title><rect x="889.4" y="515.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (2 samples, 0.04%)</title><rect x="889.4" y="499.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="892.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (25 samples, 0.49%)</title><rect x="889.8" y="499.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (24 samples, 0.47%)</title><rect x="889.8" y="483.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.39%)</title><rect x="890.8" y="467.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="892.8" y="451.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="895.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="892.8" y="435.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.14%)</title><rect x="893.3" y="451.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="896.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="894.5" y="435.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="897.5" y="446.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="894.5" y="419.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="897.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="894.9" y="451.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="897.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (29 samples, 0.57%)</title><rect x="895.6" y="547.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (25 samples, 0.49%)</title><rect x="896.6" y="531.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="899.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.45%)</title><rect x="897.0" y="515.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="900.0" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Statistics_toString (2 samples, 0.04%)</title><rect x="897.0" y="499.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="900.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (21 samples, 0.41%)</title><rect x="897.5" y="499.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="900.5" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="897.5" y="483.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="900.5" y="494.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="897.5" y="467.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="900.5" y="478.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="897.5" y="451.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="900.5" y="462.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="897.5" y="435.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="900.5" y="446.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="897.5" y="419.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="900.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (18 samples, 0.35%)</title><rect x="898.2" y="483.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="901.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.32%)</title><rect x="898.7" y="467.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="901.7" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.08%)</title><rect x="899.1" y="451.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="899.6" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="902.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.18%)</title><rect x="900.3" y="451.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (141 samples, 2.78%)</title><rect x="902.4" y="547.0" width="32.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="905.4" y="558.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (141 samples, 2.78%)</title><rect x="902.4" y="531.0" width="32.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="905.4" y="542.0">ro..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (4 samples, 0.08%)</title><rect x="902.9" y="515.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="905.9" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.08%)</title><rect x="902.9" y="499.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="905.9" y="510.0"></text>
</g>
<g>
<title>xdrrec_ops (134 samples, 2.64%)</title><rect x="904.0" y="515.0" width="31.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="907.0" y="526.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="935.2" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.08%)</title><rect x="935.7" y="547.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.7" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.08%)</title><rect x="935.7" y="531.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.7" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.08%)</title><rect x="935.7" y="515.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="938.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (74 samples, 1.46%)</title><rect x="936.6" y="547.0" width="17.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (74 samples, 1.46%)</title><rect x="936.6" y="531.0" width="17.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="939.6" y="542.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (59 samples, 1.16%)</title><rect x="937.5" y="515.0" width="13.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="940.5" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (44 samples, 0.87%)</title><rect x="937.5" y="499.0" width="10.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="940.5" y="510.0"></text>
</g>
<g>
<title>_pthread_cond_wait (15 samples, 0.30%)</title><rect x="947.8" y="499.0" width="3.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="950.8" y="510.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (14 samples, 0.28%)</title><rect x="948.0" y="483.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="951.0" y="494.0"></text>
</g>
<g>
<title>__psynch_mutexwait (14 samples, 0.28%)</title><rect x="948.0" y="467.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="951.0" y="478.0"></text>
</g>
<g>
<title>xdrrec_ops (10 samples, 0.20%)</title><rect x="951.5" y="515.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="954.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (22 samples, 0.43%)</title><rect x="953.8" y="547.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.8" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (19 samples, 0.37%)</title><rect x="953.8" y="531.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.8" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.35%)</title><rect x="953.8" y="515.0" width="4.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="956.8" y="526.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.06%)</title><rect x="958.2" y="531.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.2" y="542.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.06%)</title><rect x="958.2" y="515.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="961.2" y="526.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.06%)</title><rect x="958.2" y="499.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="961.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.04%)</title><rect x="959.2" y="563.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="960.3" y="579.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.3" y="590.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.04%)</title><rect x="960.3" y="563.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.3" y="574.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="960.3" y="547.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="963.3" y="558.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="960.3" y="531.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="963.3" y="542.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="960.3" y="515.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="963.3" y="526.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="960.3" y="499.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="963.3" y="510.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="960.3" y="483.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="963.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (6 samples, 0.12%)</title><rect x="960.8" y="579.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="963.8" y="590.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="960.8" y="563.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="963.8" y="574.0"></text>
</g>
<g>
<title>szone_size (4 samples, 0.08%)</title><rect x="961.3" y="563.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="964.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.06%)</title><rect x="962.2" y="595.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (3 samples, 0.06%)</title><rect x="963.4" y="691.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="966.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.04%)</title><rect x="963.4" y="675.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="966.4" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="963.4" y="659.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="966.4" y="670.0"></text>
</g>
<g>
<title>[worker tid=36099] (969 samples, 19.11%)</title><rect x="964.5" y="851.0" width="225.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="967.5" y="862.0">[worker tid=36099]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.18%)</title><rect x="964.8" y="835.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.8" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.16%)</title><rect x="964.8" y="819.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="967.8" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.12%)</title><rect x="965.2" y="803.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="968.2" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.06%)</title><rect x="965.9" y="787.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="968.9" y="798.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="967.1" y="835.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="970.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (955 samples, 18.83%)</title><rect x="967.5" y="835.0" width="222.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="970.5" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (955 samples, 18.83%)</title><rect x="967.5" y="819.0" width="222.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="970.5" y="830.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (955 samples, 18.83%)</title><rect x="967.5" y="803.0" width="222.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="970.5" y="814.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (243 samples, 4.79%)</title><rect x="967.8" y="787.0" width="56.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="970.8" y="798.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (241 samples, 4.75%)</title><rect x="968.2" y="771.0" width="56.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="971.2" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (210 samples, 4.14%)</title><rect x="968.2" y="755.0" width="48.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.2" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.08%)</title><rect x="968.7" y="739.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="971.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.08%)</title><rect x="969.6" y="739.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="972.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.08%)</title><rect x="969.6" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="972.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.04%)</title><rect x="969.9" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="972.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.04%)</title><rect x="969.9" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="972.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.04%)</title><rect x="969.9" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="972.9" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="969.9" y="659.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="972.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (200 samples, 3.94%)</title><rect x="970.6" y="739.0" width="46.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="973.6" y="750.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (200 samples, 3.94%)</title><rect x="970.6" y="723.0" width="46.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="973.6" y="734.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (197 samples, 3.88%)</title><rect x="971.3" y="707.0" width="45.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="974.3" y="718.0">Unsa..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.06%)</title><rect x="971.7" y="691.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.7" y="702.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (2 samples, 0.04%)</title><rect x="972.0" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.0" y="686.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (2 samples, 0.04%)</title><rect x="972.0" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.0" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (184 samples, 3.63%)</title><rect x="972.4" y="691.0" width="42.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.4" y="702.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (177 samples, 3.49%)</title><rect x="972.7" y="675.0" width="41.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="975.7" y="686.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.08%)</title><rect x="1013.8" y="675.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1016.8" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="1014.8" y="675.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1017.8" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.06%)</title><rect x="1015.5" y="691.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1018.5" y="702.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.06%)</title><rect x="1015.5" y="675.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1018.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.08%)</title><rect x="1017.1" y="755.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1020.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.08%)</title><rect x="1017.1" y="739.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1020.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="1017.6" y="723.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="1017.6" y="707.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1020.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 0.53%)</title><rect x="1018.0" y="755.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1021.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 0.53%)</title><rect x="1018.0" y="739.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1021.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 0.53%)</title><rect x="1018.0" y="723.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1021.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 0.53%)</title><rect x="1018.0" y="707.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1021.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (27 samples, 0.53%)</title><rect x="1018.0" y="691.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1021.0" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (24 samples, 0.47%)</title><rect x="1018.7" y="675.0" width="5.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1021.7" y="686.0"></text>
</g>
<g>
<title>__psynch_cvsignal (20 samples, 0.39%)</title><rect x="1019.4" y="659.0" width="4.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1022.4" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (711 samples, 14.02%)</title><rect x="1024.3" y="787.0" width="165.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1027.3" y="798.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (711 samples, 14.02%)</title><rect x="1024.3" y="771.0" width="165.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1027.3" y="782.0">ru/mail/polis/service..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (182 samples, 3.59%)</title><rect x="1024.6" y="755.0" width="42.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1027.6" y="766.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (178 samples, 3.51%)</title><rect x="1024.8" y="739.0" width="41.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1027.8" y="750.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.22%)</title><rect x="1024.8" y="723.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1027.8" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.12%)</title><rect x="1025.9" y="707.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1028.9" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="1025.9" y="691.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1028.9" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.08%)</title><rect x="1026.4" y="691.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1029.4" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.08%)</title><rect x="1026.4" y="675.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="1026.9" y="659.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1029.9" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (167 samples, 3.29%)</title><rect x="1027.3" y="723.0" width="38.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1030.3" y="734.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (166 samples, 3.27%)</title><rect x="1027.6" y="707.0" width="38.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1030.6" y="718.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (166 samples, 3.27%)</title><rect x="1027.6" y="691.0" width="38.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1030.6" y="702.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (166 samples, 3.27%)</title><rect x="1027.6" y="675.0" width="38.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1030.6" y="686.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="1027.6" y="659.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1030.6" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="1027.6" y="643.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1030.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="1027.6" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1030.6" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="1027.6" y="611.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1030.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="1027.8" y="595.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1030.8" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="1027.8" y="579.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1030.8" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.06%)</title><rect x="1027.8" y="563.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1030.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (162 samples, 3.19%)</title><rect x="1028.5" y="659.0" width="37.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1031.5" y="670.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.14%)</title><rect x="1028.5" y="643.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1031.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.12%)</title><rect x="1028.7" y="627.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1031.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.12%)</title><rect x="1028.7" y="611.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1031.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.12%)</title><rect x="1028.7" y="595.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1031.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.10%)</title><rect x="1029.0" y="579.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1032.0" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="1029.4" y="563.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1032.4" y="574.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="1029.4" y="547.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1032.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (155 samples, 3.06%)</title><rect x="1030.1" y="643.0" width="36.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.1" y="654.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (155 samples, 3.06%)</title><rect x="1030.1" y="627.0" width="36.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1033.1" y="638.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (7 samples, 0.14%)</title><rect x="1030.4" y="611.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1033.4" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (7 samples, 0.14%)</title><rect x="1030.4" y="595.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1033.4" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.06%)</title><rect x="1030.8" y="579.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1033.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="1030.8" y="563.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1033.8" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.06%)</title><rect x="1030.8" y="547.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1033.8" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="1031.1" y="531.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.1" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.04%)</title><rect x="1031.5" y="579.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1034.5" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.04%)</title><rect x="1031.5" y="563.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1034.5" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.04%)</title><rect x="1031.5" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1034.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (147 samples, 2.90%)</title><rect x="1032.0" y="611.0" width="34.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1035.0" y="622.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (147 samples, 2.90%)</title><rect x="1032.0" y="595.0" width="34.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1035.0" y="606.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (147 samples, 2.90%)</title><rect x="1032.0" y="579.0" width="34.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1035.0" y="590.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="1032.9" y="563.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1035.9" y="574.0"></text>
</g>
<g>
<title>write (141 samples, 2.78%)</title><rect x="1033.4" y="563.0" width="32.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1036.4" y="574.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="1066.2" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1069.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="1066.2" y="723.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1069.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/237278380.act (528 samples, 10.41%)</title><rect x="1066.9" y="755.0" width="122.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1069.9" y="766.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$2 (528 samples, 10.41%)</title><rect x="1066.9" y="739.0" width="122.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1069.9" y="750.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (528 samples, 10.41%)</title><rect x="1066.9" y="723.0" width="122.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1069.9" y="734.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="1067.1" y="707.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.1" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="1067.4" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1070.4" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1067.4" y="675.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1067.4" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1070.4" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (523 samples, 10.31%)</title><rect x="1068.1" y="707.0" width="121.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1071.1" y="718.0">ru/mail/polis/d..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (520 samples, 10.25%)</title><rect x="1068.1" y="691.0" width="121.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1071.1" y="702.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (520 samples, 10.25%)</title><rect x="1068.1" y="675.0" width="121.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1071.1" y="686.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (519 samples, 10.23%)</title><rect x="1068.3" y="659.0" width="120.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1071.3" y="670.0">Java_org_rocksd..</text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="1068.8" y="643.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1071.8" y="654.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (515 samples, 10.16%)</title><rect x="1069.2" y="643.0" width="119.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.2" y="654.0">rocksdb_put_hel..</text>
</g>
<g>
<title>free_tiny (4 samples, 0.08%)</title><rect x="1069.7" y="627.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1072.7" y="638.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="1070.6" y="627.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1073.6" y="638.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.12%)</title><rect x="1071.3" y="627.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1074.3" y="638.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.12%)</title><rect x="1071.3" y="611.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1074.3" y="622.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.12%)</title><rect x="1071.3" y="595.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1074.3" y="606.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.10%)</title><rect x="1071.6" y="579.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1074.6" y="590.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.10%)</title><rect x="1071.6" y="563.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1074.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (498 samples, 9.82%)</title><rect x="1072.7" y="627.0" width="115.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.7" y="638.0">rocksdb::Compa..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (498 samples, 9.82%)</title><rect x="1072.7" y="611.0" width="115.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.7" y="622.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (497 samples, 9.80%)</title><rect x="1072.7" y="595.0" width="115.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.7" y="606.0">rocksdb::DB::P..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (485 samples, 9.56%)</title><rect x="1073.4" y="579.0" width="112.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.4" y="590.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (480 samples, 9.47%)</title><rect x="1073.9" y="563.0" width="111.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.9" y="574.0">rocksdb::DBIm..</text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (2 samples, 0.04%)</title><rect x="1076.4" y="547.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1079.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (127 samples, 2.50%)</title><rect x="1077.1" y="547.0" width="29.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.1" y="558.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (121 samples, 2.39%)</title><rect x="1078.1" y="531.0" width="28.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.1" y="542.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (118 samples, 2.33%)</title><rect x="1078.8" y="515.0" width="27.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.8" y="526.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (7 samples, 0.14%)</title><rect x="1079.0" y="499.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1082.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (110 samples, 2.17%)</title><rect x="1080.6" y="499.0" width="25.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.6" y="510.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (108 samples, 2.13%)</title><rect x="1081.1" y="483.0" width="25.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.1" y="494.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (107 samples, 2.11%)</title><rect x="1081.3" y="467.0" width="24.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.3" y="478.0">r..</text>
</g>
<g>
<title>write (104 samples, 2.05%)</title><rect x="1082.0" y="451.0" width="24.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1085.0" y="462.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (2 samples, 0.04%)</title><rect x="1106.2" y="531.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (27 samples, 0.53%)</title><rect x="1106.9" y="547.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (27 samples, 0.53%)</title><rect x="1106.9" y="531.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (27 samples, 0.53%)</title><rect x="1106.9" y="515.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.51%)</title><rect x="1107.2" y="499.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (24 samples, 0.47%)</title><rect x="1107.6" y="483.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.41%)</title><rect x="1108.3" y="467.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.12%)</title><rect x="1111.6" y="451.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.08%)</title><rect x="1112.0" y="435.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.0" y="446.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="1112.3" y="419.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1115.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (23 samples, 0.45%)</title><rect x="1113.2" y="547.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (19 samples, 0.37%)</title><rect x="1113.9" y="531.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (19 samples, 0.37%)</title><rect x="1113.9" y="515.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (19 samples, 0.37%)</title><rect x="1113.9" y="499.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.9" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="1114.1" y="483.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1117.1" y="494.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1114.1" y="467.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1117.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (16 samples, 0.32%)</title><rect x="1114.6" y="483.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.32%)</title><rect x="1114.6" y="467.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (13 samples, 0.26%)</title><rect x="1115.3" y="451.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.14%)</title><rect x="1116.7" y="435.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="1117.6" y="419.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (152 samples, 3.00%)</title><rect x="1118.6" y="547.0" width="35.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.6" y="558.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (152 samples, 3.00%)</title><rect x="1118.6" y="531.0" width="35.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.6" y="542.0">roc..</text>
</g>
<g>
<title>xdrrec_ops (145 samples, 2.86%)</title><rect x="1120.2" y="515.0" width="33.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1123.2" y="526.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="1153.9" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (19 samples, 0.37%)</title><rect x="1154.4" y="547.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.4" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (13 samples, 0.26%)</title><rect x="1155.1" y="531.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.1" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.26%)</title><rect x="1155.1" y="515.0" width="3.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1158.1" y="526.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.06%)</title><rect x="1158.1" y="531.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.1" y="542.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.06%)</title><rect x="1158.1" y="515.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1161.1" y="526.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.06%)</title><rect x="1158.1" y="499.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1161.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (96 samples, 1.89%)</title><rect x="1158.8" y="547.0" width="22.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.8" y="558.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (95 samples, 1.87%)</title><rect x="1158.8" y="531.0" width="22.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.8" y="542.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (80 samples, 1.58%)</title><rect x="1159.7" y="515.0" width="18.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.7" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (70 samples, 1.38%)</title><rect x="1159.7" y="499.0" width="16.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1162.7" y="510.0"></text>
</g>
<g>
<title>_pthread_cond_wait (9 samples, 0.18%)</title><rect x="1176.0" y="499.0" width="2.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1179.0" y="510.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (8 samples, 0.16%)</title><rect x="1176.0" y="483.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1179.0" y="494.0"></text>
</g>
<g>
<title>__psynch_mutexwait (8 samples, 0.16%)</title><rect x="1176.0" y="467.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1179.0" y="478.0"></text>
</g>
<g>
<title>xdrrec_ops (11 samples, 0.22%)</title><rect x="1178.4" y="515.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1181.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (15 samples, 0.30%)</title><rect x="1181.2" y="547.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.18%)</title><rect x="1181.2" y="531.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.16%)</title><rect x="1181.2" y="515.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1184.2" y="526.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (6 samples, 0.12%)</title><rect x="1183.3" y="531.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="542.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (6 samples, 0.12%)</title><rect x="1183.3" y="515.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1186.3" y="526.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (5 samples, 0.10%)</title><rect x="1183.5" y="499.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1186.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.04%)</title><rect x="1185.6" y="563.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.06%)</title><rect x="1186.3" y="579.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="1186.5" y="563.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.08%)</title><rect x="1187.0" y="579.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="590.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.06%)</title><rect x="1187.0" y="563.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="574.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="1187.2" y="547.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1190.2" y="558.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1187.2" y="531.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1190.2" y="542.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="1187.2" y="515.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1190.2" y="526.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="1187.2" y="499.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1190.2" y="510.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="1187.2" y="483.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1190.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.04%)</title><rect x="1187.9" y="579.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="590.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="1187.9" y="563.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1190.9" y="574.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="1187.9" y="547.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1190.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.04%)</title><rect x="1188.6" y="627.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.04%)</title><rect x="1189.3" y="691.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1192.3" y="702.0"></text>
</g>
</g>
</svg>
