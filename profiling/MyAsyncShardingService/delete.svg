<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (4,849 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>[NIO Selector #1 tid=39171] (268 samples, 5.53%)</title><rect x="10.0" y="547.0" width="65.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.0" y="558.0">[NIO Se..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (267 samples, 5.51%)</title><rect x="10.2" y="531.0" width="65.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.2" y="542.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (177 samples, 3.65%)</title><rect x="10.7" y="515.0" width="43.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.7" y="526.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.10%)</title><rect x="10.7" y="499.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.7" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (4 samples, 0.08%)</title><rect x="11.9" y="499.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.08%)</title><rect x="11.9" y="483.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (4 samples, 0.08%)</title><rect x="11.9" y="467.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.9" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.06%)</title><rect x="11.9" y="451.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.9" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (3 samples, 0.06%)</title><rect x="11.9" y="435.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (166 samples, 3.42%)</title><rect x="12.9" y="499.0" width="40.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="510.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (166 samples, 3.42%)</title><rect x="12.9" y="483.0" width="40.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.9" y="494.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (161 samples, 3.32%)</title><rect x="14.1" y="467.0" width="39.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.1" y="478.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (157 samples, 3.24%)</title><rect x="14.4" y="451.0" width="38.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.4" y="462.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.04%)</title><rect x="16.8" y="435.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="19.8" y="446.0"></text>
</g>
<g>
<title>kevent (145 samples, 2.99%)</title><rect x="17.3" y="435.0" width="35.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="20.3" y="446.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="52.8" y="451.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.04%)</title><rect x="53.3" y="499.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.04%)</title><rect x="53.3" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.04%)</title><rect x="53.3" y="467.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.3" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (88 samples, 1.81%)</title><rect x="53.8" y="515.0" width="21.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.8" y="526.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (85 samples, 1.75%)</title><rect x="54.5" y="499.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.5" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (58 samples, 1.20%)</title><rect x="54.5" y="483.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.5" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (53 samples, 1.09%)</title><rect x="54.8" y="467.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.8" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (52 samples, 1.07%)</title><rect x="55.0" y="451.0" width="12.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (51 samples, 1.05%)</title><rect x="55.3" y="435.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (51 samples, 1.05%)</title><rect x="55.3" y="419.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.3" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.12%)</title><rect x="55.5" y="403.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="56.5" y="387.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (44 samples, 0.91%)</title><rect x="57.0" y="403.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (43 samples, 0.89%)</title><rect x="57.2" y="387.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (43 samples, 0.89%)</title><rect x="57.2" y="371.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="60.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (41 samples, 0.85%)</title><rect x="57.2" y="355.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (41 samples, 0.85%)</title><rect x="57.2" y="339.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (41 samples, 0.85%)</title><rect x="57.2" y="323.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (41 samples, 0.85%)</title><rect x="57.2" y="307.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (41 samples, 0.85%)</title><rect x="57.2" y="291.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (41 samples, 0.85%)</title><rect x="57.2" y="275.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.2" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (36 samples, 0.74%)</title><rect x="58.4" y="259.0" width="8.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="61.4" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.04%)</title><rect x="59.4" y="243.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="62.4" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (28 samples, 0.58%)</title><rect x="59.9" y="243.0" width="6.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="62.9" y="254.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="66.7" y="243.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="69.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="67.2" y="355.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="67.2" y="339.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="67.2" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.06%)</title><rect x="67.7" y="467.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.7" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="67.9" y="451.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.9" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="67.9" y="435.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="70.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (27 samples, 0.56%)</title><rect x="68.6" y="483.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.6" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (27 samples, 0.56%)</title><rect x="68.6" y="467.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (27 samples, 0.56%)</title><rect x="68.6" y="451.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (25 samples, 0.52%)</title><rect x="69.1" y="435.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (25 samples, 0.52%)</title><rect x="69.1" y="419.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (25 samples, 0.52%)</title><rect x="69.1" y="403.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (25 samples, 0.52%)</title><rect x="69.1" y="387.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (25 samples, 0.52%)</title><rect x="69.1" y="371.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.1" y="382.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.04%)</title><rect x="69.1" y="355.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="72.1" y="366.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="69.1" y="339.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="72.1" y="350.0"></text>
</g>
<g>
<title>read (23 samples, 0.47%)</title><rect x="69.6" y="355.0" width="5.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="72.6" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=26115] (273 samples, 5.63%)</title><rect x="75.2" y="547.0" width="66.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="78.2" y="558.0">[NIO Se..</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="75.2" y="531.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="78.2" y="542.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="75.2" y="515.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="78.2" y="526.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="75.2" y="499.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="78.2" y="510.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (270 samples, 5.57%)</title><rect x="75.9" y="531.0" width="65.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.9" y="542.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (171 samples, 3.53%)</title><rect x="76.4" y="515.0" width="41.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.4" y="526.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.10%)</title><rect x="76.4" y="499.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.4" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.04%)</title><rect x="77.2" y="483.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="77.2" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.2" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (5 samples, 0.10%)</title><rect x="77.7" y="499.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.08%)</title><rect x="77.9" y="483.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (4 samples, 0.08%)</title><rect x="77.9" y="467.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.9" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="77.9" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.9" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="78.4" y="451.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.4" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (2 samples, 0.04%)</title><rect x="78.4" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (161 samples, 3.32%)</title><rect x="78.9" y="499.0" width="39.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.9" y="510.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (161 samples, 3.32%)</title><rect x="78.9" y="483.0" width="39.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.9" y="494.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (159 samples, 3.28%)</title><rect x="79.4" y="467.0" width="38.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.4" y="478.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (156 samples, 3.22%)</title><rect x="79.4" y="451.0" width="37.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.4" y="462.0">sun..</text>
</g>
<g>
<title>kevent (146 samples, 3.01%)</title><rect x="81.8" y="435.0" width="35.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="84.8" y="446.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.04%)</title><rect x="117.3" y="451.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.04%)</title><rect x="117.3" y="435.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="120.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="117.3" y="419.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="117.3" y="403.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="120.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="117.3" y="387.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (97 samples, 2.00%)</title><rect x="118.0" y="515.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.0" y="526.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (93 samples, 1.92%)</title><rect x="119.0" y="499.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.0" y="510.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (63 samples, 1.30%)</title><rect x="119.0" y="483.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.0" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (52 samples, 1.07%)</title><rect x="119.0" y="467.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.0" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (52 samples, 1.07%)</title><rect x="119.0" y="451.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.06%)</title><rect x="119.0" y="435.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.06%)</title><rect x="119.0" y="419.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.06%)</title><rect x="119.0" y="403.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.06%)</title><rect x="119.0" y="387.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.04%)</title><rect x="119.8" y="435.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.8" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="119.8" y="419.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (47 samples, 0.97%)</title><rect x="120.2" y="435.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (47 samples, 0.97%)</title><rect x="120.2" y="419.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.2" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.12%)</title><rect x="120.2" y="403.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="123.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="120.2" y="387.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="120.2" y="371.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="120.7" y="387.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (2 samples, 0.04%)</title><rect x="121.0" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (40 samples, 0.82%)</title><rect x="121.7" y="403.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="124.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (40 samples, 0.82%)</title><rect x="121.7" y="387.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="124.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (40 samples, 0.82%)</title><rect x="121.7" y="371.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (36 samples, 0.74%)</title><rect x="122.2" y="355.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (36 samples, 0.74%)</title><rect x="122.2" y="339.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="125.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (36 samples, 0.74%)</title><rect x="122.2" y="323.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="125.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (36 samples, 0.74%)</title><rect x="122.2" y="307.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (36 samples, 0.74%)</title><rect x="122.2" y="291.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (36 samples, 0.74%)</title><rect x="122.2" y="275.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="125.2" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (34 samples, 0.70%)</title><rect x="122.7" y="259.0" width="8.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="125.7" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="123.9" y="243.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="126.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (23 samples, 0.47%)</title><rect x="124.4" y="243.0" width="5.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="127.4" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="130.5" y="243.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="133.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="130.9" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="133.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="130.9" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.12%)</title><rect x="131.7" y="467.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.7" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="132.2" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.2" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="132.2" y="435.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="135.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.04%)</title><rect x="132.6" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.04%)</title><rect x="133.1" y="467.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="136.1" y="478.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="133.1" y="451.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="136.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.04%)</title><rect x="133.1" y="435.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="133.1" y="419.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="136.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.04%)</title><rect x="133.1" y="403.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="133.6" y="467.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="133.9" y="451.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="136.9" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="133.9" y="435.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.9" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="133.9" y="419.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (30 samples, 0.62%)</title><rect x="134.4" y="483.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.4" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (30 samples, 0.62%)</title><rect x="134.4" y="467.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="137.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (30 samples, 0.62%)</title><rect x="134.4" y="451.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="137.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.14%)</title><rect x="134.4" y="435.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.14%)</title><rect x="134.4" y="419.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (5 samples, 0.10%)</title><rect x="134.4" y="403.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.04%)</title><rect x="134.6" y="387.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="135.6" y="403.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="138.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="135.6" y="387.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="135.6" y="371.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (23 samples, 0.47%)</title><rect x="136.1" y="435.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="139.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (23 samples, 0.47%)</title><rect x="136.1" y="419.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (23 samples, 0.47%)</title><rect x="136.1" y="403.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (23 samples, 0.47%)</title><rect x="136.1" y="387.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (23 samples, 0.47%)</title><rect x="136.1" y="371.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.1" y="382.0"></text>
</g>
<g>
<title>read (21 samples, 0.43%)</title><rect x="136.5" y="355.0" width="5.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="139.5" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=26883] (514 samples, 10.60%)</title><rect x="141.7" y="547.0" width="125.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="144.7" y="558.0">[NIO Selector #..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (510 samples, 10.52%)</title><rect x="142.1" y="531.0" width="124.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.1" y="542.0">one/nio/server/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (273 samples, 5.63%)</title><rect x="142.4" y="515.0" width="66.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.4" y="526.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7 samples, 0.14%)</title><rect x="142.4" y="499.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="142.4" y="483.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.10%)</title><rect x="142.9" y="483.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.10%)</title><rect x="142.9" y="467.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="145.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="142.9" y="451.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.06%)</title><rect x="143.4" y="451.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (10 samples, 0.21%)</title><rect x="144.1" y="499.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (8 samples, 0.16%)</title><rect x="144.6" y="483.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (8 samples, 0.16%)</title><rect x="144.6" y="467.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="147.6" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="145.1" y="451.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.1" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (4 samples, 0.08%)</title><rect x="145.5" y="451.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.5" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (3 samples, 0.06%)</title><rect x="145.8" y="435.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (255 samples, 5.26%)</title><rect x="146.5" y="499.0" width="62.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.5" y="510.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (255 samples, 5.26%)</title><rect x="146.5" y="483.0" width="62.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.5" y="494.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (253 samples, 5.22%)</title><rect x="147.0" y="467.0" width="61.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.0" y="478.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (250 samples, 5.16%)</title><rect x="147.2" y="451.0" width="60.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="150.2" y="462.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.04%)</title><rect x="150.9" y="435.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="153.9" y="446.0"></text>
</g>
<g>
<title>kevent (233 samples, 4.81%)</title><rect x="151.4" y="435.0" width="56.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="154.4" y="446.0">kevent</text>
</g>
<g>
<title>one/nio/net/Session.process (236 samples, 4.87%)</title><rect x="208.8" y="515.0" width="57.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.8" y="526.0">one/ni..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="210.0" y="499.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="213.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (228 samples, 4.70%)</title><rect x="210.5" y="499.0" width="55.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="213.5" y="510.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (163 samples, 3.36%)</title><rect x="210.8" y="483.0" width="39.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.8" y="494.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (133 samples, 2.74%)</title><rect x="211.5" y="467.0" width="32.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.5" y="478.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (132 samples, 2.72%)</title><rect x="211.7" y="451.0" width="32.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="214.7" y="462.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.04%)</title><rect x="211.7" y="435.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="214.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (12 samples, 0.25%)</title><rect x="212.2" y="435.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.2" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.23%)</title><rect x="212.2" y="419.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.2" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.23%)</title><rect x="212.2" y="403.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.08%)</title><rect x="213.9" y="387.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.06%)</title><rect x="215.1" y="435.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="215.1" y="419.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="215.4" y="403.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (115 samples, 2.37%)</title><rect x="215.9" y="435.0" width="28.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.9" y="446.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (113 samples, 2.33%)</title><rect x="216.4" y="419.0" width="27.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.4" y="430.0">r..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.04%)</title><rect x="216.8" y="403.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (109 samples, 2.25%)</title><rect x="217.3" y="403.0" width="26.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.3" y="414.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (108 samples, 2.23%)</title><rect x="217.6" y="387.0" width="26.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.6" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (108 samples, 2.23%)</title><rect x="217.6" y="371.0" width="26.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.6" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (102 samples, 2.10%)</title><rect x="217.6" y="355.0" width="24.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.6" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (102 samples, 2.10%)</title><rect x="217.6" y="339.0" width="24.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.6" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (102 samples, 2.10%)</title><rect x="217.6" y="323.0" width="24.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.6" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (102 samples, 2.10%)</title><rect x="217.6" y="307.0" width="24.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="220.6" y="318.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (102 samples, 2.10%)</title><rect x="217.6" y="291.0" width="24.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.6" y="302.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (102 samples, 2.10%)</title><rect x="217.6" y="275.0" width="24.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.6" y="286.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (95 samples, 1.96%)</title><rect x="219.0" y="259.0" width="23.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="222.0" y="270.0">U..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="219.3" y="243.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="222.3" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="219.3" y="227.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="222.3" y="238.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (2 samples, 0.04%)</title><rect x="219.8" y="243.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="222.8" y="254.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.04%)</title><rect x="220.3" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="223.3" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="220.3" y="227.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="223.3" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.10%)</title><rect x="221.0" y="243.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="224.0" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="221.5" y="227.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="224.5" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.06%)</title><rect x="222.2" y="243.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="225.2" y="254.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (3 samples, 0.06%)</title><rect x="222.2" y="227.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="225.2" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.08%)</title><rect x="222.9" y="243.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="225.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (70 samples, 1.44%)</title><rect x="223.9" y="243.0" width="17.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="226.9" y="254.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="241.2" y="243.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="244.2" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="241.7" y="243.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="244.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.04%)</title><rect x="242.4" y="355.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.04%)</title><rect x="242.4" y="339.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.08%)</title><rect x="242.9" y="355.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="243.1" y="339.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="243.1" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (11 samples, 0.23%)</title><rect x="243.9" y="467.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.9" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.12%)</title><rect x="244.3" y="451.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.3" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.04%)</title><rect x="246.0" y="451.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.06%)</title><rect x="246.5" y="467.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.5" y="478.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.06%)</title><rect x="246.5" y="451.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.5" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.06%)</title><rect x="246.5" y="435.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.5" y="446.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="246.8" y="419.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.8" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.04%)</title><rect x="246.8" y="403.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.04%)</title><rect x="247.3" y="467.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.3" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="247.8" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.8" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.19%)</title><rect x="248.2" y="467.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.2" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.14%)</title><rect x="248.7" y="451.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.7" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (64 samples, 1.32%)</title><rect x="250.4" y="483.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.4" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (64 samples, 1.32%)</title><rect x="250.4" y="467.0" width="15.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (63 samples, 1.30%)</title><rect x="250.7" y="451.0" width="15.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.12%)</title><rect x="250.9" y="435.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.12%)</title><rect x="250.9" y="419.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (6 samples, 0.12%)</title><rect x="250.9" y="403.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (56 samples, 1.15%)</title><rect x="252.4" y="435.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (56 samples, 1.15%)</title><rect x="252.4" y="419.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (55 samples, 1.13%)</title><rect x="252.6" y="403.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (55 samples, 1.13%)</title><rect x="252.6" y="387.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (55 samples, 1.13%)</title><rect x="252.6" y="371.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.6" y="382.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.04%)</title><rect x="252.9" y="355.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="255.9" y="366.0"></text>
</g>
<g>
<title>read (52 samples, 1.07%)</title><rect x="253.3" y="355.0" width="12.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="256.3" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="266.2" y="531.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="269.2" y="542.0"></text>
</g>
<g>
<title>[tid=19971] (4 samples, 0.08%)</title><rect x="266.7" y="547.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="269.7" y="558.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.08%)</title><rect x="266.7" y="531.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="269.7" y="542.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.08%)</title><rect x="266.7" y="515.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="269.7" y="526.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.08%)</title><rect x="266.7" y="499.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="269.7" y="510.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.08%)</title><rect x="266.7" y="483.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="269.7" y="494.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.08%)</title><rect x="266.7" y="467.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="269.7" y="478.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.08%)</title><rect x="266.7" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="269.7" y="462.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.08%)</title><rect x="266.7" y="435.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="269.7" y="446.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.06%)</title><rect x="267.0" y="419.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="270.0" y="430.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.06%)</title><rect x="267.0" y="403.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="270.0" y="414.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.06%)</title><rect x="267.0" y="387.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="270.0" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="267.0" y="371.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="270.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="267.0" y="355.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="270.0" y="366.0"></text>
</g>
<g>
<title>[tid=22019] (46 samples, 0.95%)</title><rect x="267.7" y="547.0" width="11.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="270.7" y="558.0"></text>
</g>
<g>
<title>thread_start (46 samples, 0.95%)</title><rect x="267.7" y="531.0" width="11.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="270.7" y="542.0"></text>
</g>
<g>
<title>_pthread_start (46 samples, 0.95%)</title><rect x="267.7" y="515.0" width="11.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="270.7" y="526.0"></text>
</g>
<g>
<title>_pthread_body (46 samples, 0.95%)</title><rect x="267.7" y="499.0" width="11.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="270.7" y="510.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (46 samples, 0.95%)</title><rect x="267.7" y="483.0" width="11.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="270.7" y="494.0"></text>
</g>
<g>
<title>Thread::call_run() (46 samples, 0.95%)</title><rect x="267.7" y="467.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="270.7" y="478.0"></text>
</g>
<g>
<title>JavaThread::run() (46 samples, 0.95%)</title><rect x="267.7" y="451.0" width="11.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="270.7" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (46 samples, 0.95%)</title><rect x="267.7" y="435.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="270.7" y="446.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (46 samples, 0.95%)</title><rect x="267.7" y="419.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="270.7" y="430.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (46 samples, 0.95%)</title><rect x="267.7" y="403.0" width="11.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="270.7" y="414.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (44 samples, 0.91%)</title><rect x="267.7" y="387.0" width="10.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="270.7" y="398.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (44 samples, 0.91%)</title><rect x="267.7" y="371.0" width="10.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="270.7" y="382.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 0.54%)</title><rect x="267.7" y="355.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="270.7" y="366.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.04%)</title><rect x="267.7" y="339.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="270.7" y="350.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.04%)</title><rect x="268.2" y="339.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="271.2" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 0.45%)</title><rect x="268.7" y="339.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="271.7" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.06%)</title><rect x="268.9" y="323.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="271.9" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.16%)</title><rect x="269.7" y="323.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="272.7" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.04%)</title><rect x="269.9" y="307.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="272.9" y="318.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.04%)</title><rect x="269.9" y="291.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="272.9" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.06%)</title><rect x="270.4" y="307.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="273.4" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.04%)</title><rect x="271.1" y="307.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="274.1" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.04%)</title><rect x="271.6" y="323.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="274.6" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.04%)</title><rect x="272.3" y="323.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="275.3" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.04%)</title><rect x="272.3" y="307.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="275.3" y="318.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.06%)</title><rect x="273.3" y="323.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="276.3" y="334.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 0.25%)</title><rect x="274.0" y="355.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="277.0" y="366.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (5 samples, 0.10%)</title><rect x="274.5" y="339.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="277.5" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 0.10%)</title><rect x="274.5" y="323.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="277.5" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.04%)</title><rect x="275.3" y="307.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="278.3" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 0.08%)</title><rect x="275.7" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="278.7" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.04%)</title><rect x="276.2" y="323.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="279.2" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (2 samples, 0.04%)</title><rect x="276.2" y="307.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="279.2" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="276.2" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="279.2" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="276.2" y="275.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="279.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="277.2" y="355.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="280.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="277.2" y="339.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="280.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.10%)</title><rect x="277.2" y="323.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="280.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.10%)</title><rect x="277.2" y="307.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="280.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.10%)</title><rect x="277.2" y="291.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="280.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="277.2" y="275.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="280.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="277.2" y="259.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="280.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="277.2" y="243.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="280.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="277.2" y="227.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="280.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="277.2" y="211.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="280.2" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="277.2" y="195.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="280.2" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="277.2" y="179.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="280.2" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="277.7" y="195.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="280.7" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="277.7" y="179.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="280.7" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="277.7" y="163.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="280.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="277.7" y="147.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="280.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="277.7" y="131.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="280.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="277.7" y="115.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="280.7" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="277.7" y="99.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="280.7" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="277.7" y="83.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="280.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="277.7" y="67.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="280.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="277.7" y="51.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="280.7" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="277.7" y="35.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="280.7" y="46.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.04%)</title><rect x="278.4" y="387.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="281.4" y="398.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.04%)</title><rect x="278.4" y="371.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="281.4" y="382.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.04%)</title><rect x="278.4" y="355.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="281.4" y="366.0"></text>
</g>
<g>
<title>free_large (2 samples, 0.04%)</title><rect x="278.4" y="339.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="281.4" y="350.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (2 samples, 0.04%)</title><rect x="278.4" y="323.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="281.4" y="334.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (2 samples, 0.04%)</title><rect x="278.4" y="307.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="281.4" y="318.0"></text>
</g>
<g>
<title>[tid=41219] (7 samples, 0.14%)</title><rect x="278.9" y="547.0" width="1.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="281.9" y="558.0"></text>
</g>
<g>
<title>thread_start (7 samples, 0.14%)</title><rect x="278.9" y="531.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="281.9" y="542.0"></text>
</g>
<g>
<title>_pthread_start (7 samples, 0.14%)</title><rect x="278.9" y="515.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="281.9" y="526.0"></text>
</g>
<g>
<title>_pthread_body (7 samples, 0.14%)</title><rect x="278.9" y="499.0" width="1.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="281.9" y="510.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (7 samples, 0.14%)</title><rect x="278.9" y="483.0" width="1.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="281.9" y="494.0"></text>
</g>
<g>
<title>Thread::call_run() (7 samples, 0.14%)</title><rect x="278.9" y="467.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="281.9" y="478.0"></text>
</g>
<g>
<title>WatcherThread::run() (7 samples, 0.14%)</title><rect x="278.9" y="451.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="281.9" y="462.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (7 samples, 0.14%)</title><rect x="278.9" y="435.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="281.9" y="446.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.12%)</title><rect x="278.9" y="419.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="281.9" y="430.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.12%)</title><rect x="278.9" y="403.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="281.9" y="414.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 0.12%)</title><rect x="278.9" y="387.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="281.9" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.12%)</title><rect x="278.9" y="371.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="281.9" y="382.0"></text>
</g>
<g>
<title>[tid=41475] (2 samples, 0.04%)</title><rect x="280.6" y="547.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="283.6" y="558.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.04%)</title><rect x="280.6" y="531.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="283.6" y="542.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.04%)</title><rect x="280.6" y="515.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="283.6" y="526.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.04%)</title><rect x="280.6" y="499.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="283.6" y="510.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.04%)</title><rect x="280.6" y="483.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="283.6" y="494.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.04%)</title><rect x="280.6" y="467.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="283.6" y="478.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.04%)</title><rect x="280.6" y="451.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="283.6" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.04%)</title><rect x="280.6" y="435.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="283.6" y="446.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.04%)</title><rect x="280.6" y="419.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="283.6" y="430.0"></text>
</g>
<g>
<title>[worker tid=29187] (944 samples, 19.47%)</title><rect x="281.1" y="547.0" width="229.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="284.1" y="558.0">[worker tid=29187]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.16%)</title><rect x="281.1" y="531.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="284.1" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.16%)</title><rect x="281.1" y="515.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="284.1" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="281.1" y="499.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="284.1" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.12%)</title><rect x="281.6" y="499.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="284.6" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (5 samples, 0.10%)</title><rect x="281.8" y="483.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="284.8" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.run (934 samples, 19.26%)</title><rect x="283.3" y="531.0" width="227.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.3" y="542.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (934 samples, 19.26%)</title><rect x="283.3" y="515.0" width="227.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.3" y="526.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (934 samples, 19.26%)</title><rect x="283.3" y="499.0" width="227.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.3" y="510.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.08%)</title><rect x="284.7" y="483.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.7" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.08%)</title><rect x="284.7" y="467.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.7" y="478.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.04%)</title><rect x="285.0" y="451.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="288.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (210 samples, 4.33%)</title><rect x="285.7" y="483.0" width="51.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.7" y="494.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (210 samples, 4.33%)</title><rect x="285.7" y="467.0" width="51.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.7" y="478.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (185 samples, 3.82%)</title><rect x="285.7" y="451.0" width="45.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.7" y="462.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="286.0" y="435.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.04%)</title><rect x="286.4" y="435.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="286.4" y="419.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (180 samples, 3.71%)</title><rect x="286.9" y="435.0" width="43.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.9" y="446.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (180 samples, 3.71%)</title><rect x="286.9" y="419.0" width="43.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.9" y="430.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (172 samples, 3.55%)</title><rect x="288.9" y="403.0" width="41.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="291.9" y="414.0">Uns..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.08%)</title><rect x="289.9" y="387.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="292.9" y="398.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="289.9" y="371.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="292.9" y="382.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.04%)</title><rect x="289.9" y="355.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="292.9" y="366.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (157 samples, 3.24%)</title><rect x="291.1" y="387.0" width="38.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="294.1" y="398.0">Par..</text>
</g>
<g>
<title>__psynch_cvwait (150 samples, 3.09%)</title><rect x="291.6" y="371.0" width="36.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="294.6" y="382.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.04%)</title><rect x="328.1" y="371.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="331.1" y="382.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.04%)</title><rect x="328.5" y="371.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="331.5" y="382.0"></text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.04%)</title><rect x="329.8" y="387.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="332.8" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="330.2" y="387.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="333.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.04%)</title><rect x="331.0" y="451.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.04%)</title><rect x="331.0" y="435.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.04%)</title><rect x="331.0" y="419.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="331.0" y="403.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 0.45%)</title><rect x="331.5" y="451.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="334.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 0.45%)</title><rect x="331.5" y="435.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 0.45%)</title><rect x="331.5" y="419.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 0.45%)</title><rect x="331.5" y="403.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (22 samples, 0.45%)</title><rect x="331.5" y="387.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.5" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.39%)</title><rect x="332.2" y="371.0" width="4.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="335.2" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.29%)</title><rect x="332.7" y="355.0" width="3.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="335.7" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="336.3" y="355.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="339.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (713 samples, 14.70%)</title><rect x="337.1" y="483.0" width="173.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.1" y="494.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (713 samples, 14.70%)</title><rect x="337.1" y="467.0" width="173.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="340.1" y="478.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (176 samples, 3.63%)</title><rect x="337.3" y="451.0" width="42.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="340.3" y="462.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (172 samples, 3.55%)</title><rect x="337.3" y="435.0" width="41.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="340.3" y="446.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.12%)</title><rect x="337.3" y="419.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="340.3" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.06%)</title><rect x="338.0" y="403.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="341.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="338.3" y="387.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="338.3" y="371.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (166 samples, 3.42%)</title><rect x="338.8" y="419.0" width="40.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="341.8" y="430.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (166 samples, 3.42%)</title><rect x="338.8" y="403.0" width="40.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="341.8" y="414.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (166 samples, 3.42%)</title><rect x="338.8" y="387.0" width="40.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.8" y="398.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (166 samples, 3.42%)</title><rect x="338.8" y="371.0" width="40.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.8" y="382.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="338.8" y="355.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="338.8" y="339.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="338.8" y="323.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.8" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="339.0" y="307.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="339.0" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="339.0" y="275.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (162 samples, 3.34%)</title><rect x="339.7" y="355.0" width="39.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="342.7" y="366.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.19%)</title><rect x="339.7" y="339.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.14%)</title><rect x="340.2" y="323.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="343.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.14%)</title><rect x="340.2" y="307.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="343.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.14%)</title><rect x="340.2" y="291.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.10%)</title><rect x="340.5" y="275.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="343.5" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="341.0" y="259.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="344.0" y="270.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="341.0" y="243.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="344.0" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="341.0" y="227.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="344.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (153 samples, 3.16%)</title><rect x="341.9" y="339.0" width="37.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.9" y="350.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (153 samples, 3.16%)</title><rect x="341.9" y="323.0" width="37.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.9" y="334.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (9 samples, 0.19%)</title><rect x="341.9" y="307.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (9 samples, 0.19%)</title><rect x="341.9" y="291.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.9" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.08%)</title><rect x="342.4" y="275.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.08%)</title><rect x="342.4" y="259.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.08%)</title><rect x="342.4" y="243.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.4" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.08%)</title><rect x="342.4" y="227.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="345.4" y="238.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.04%)</title><rect x="342.4" y="211.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="345.4" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="342.9" y="211.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="345.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.06%)</title><rect x="343.4" y="275.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="346.4" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.06%)</title><rect x="343.4" y="259.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="346.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.06%)</title><rect x="343.4" y="243.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.04%)</title><rect x="343.6" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="346.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (144 samples, 2.97%)</title><rect x="344.1" y="307.0" width="35.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.1" y="318.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (144 samples, 2.97%)</title><rect x="344.1" y="291.0" width="35.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="347.1" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (144 samples, 2.97%)</title><rect x="344.1" y="275.0" width="35.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="347.1" y="286.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.06%)</title><rect x="344.8" y="259.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="347.8" y="270.0"></text>
</g>
<g>
<title>write (138 samples, 2.85%)</title><rect x="345.6" y="259.0" width="33.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="348.6" y="270.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="379.2" y="435.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="382.2" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="379.2" y="419.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.2" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="379.4" y="403.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.4" y="414.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="379.4" y="387.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="382.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$91/1990120482.act (536 samples, 11.05%)</title><rect x="380.1" y="451.0" width="130.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.1" y="462.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$3 (535 samples, 11.03%)</title><rect x="380.4" y="435.0" width="130.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.4" y="446.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.delete (535 samples, 11.03%)</title><rect x="380.4" y="419.0" width="130.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="383.4" y="430.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (535 samples, 11.03%)</title><rect x="380.4" y="403.0" width="130.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="383.4" y="414.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (533 samples, 10.99%)</title><rect x="380.4" y="387.0" width="129.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.4" y="398.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (532 samples, 10.97%)</title><rect x="380.6" y="371.0" width="129.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="383.6" y="382.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (527 samples, 10.87%)</title><rect x="381.8" y="355.0" width="128.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="384.8" y="366.0">Java_org_rocksdb..</text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.04%)</title><rect x="382.3" y="339.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="385.3" y="350.0"></text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (522 samples, 10.77%)</title><rect x="383.1" y="339.0" width="127.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="386.1" y="350.0">rocksdb_delete_h..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.06%)</title><rect x="383.5" y="323.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="386.5" y="334.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="384.3" y="323.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="387.3" y="334.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="384.8" y="323.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="387.8" y="334.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.06%)</title><rect x="385.2" y="323.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="388.2" y="334.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="385.2" y="307.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="388.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (509 samples, 10.50%)</title><rect x="386.0" y="323.0" width="123.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="389.0" y="334.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (509 samples, 10.50%)</title><rect x="386.0" y="307.0" width="123.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="389.0" y="318.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (503 samples, 10.37%)</title><rect x="386.7" y="291.0" width="122.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="389.7" y="302.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (498 samples, 10.27%)</title><rect x="386.7" y="275.0" width="121.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="389.7" y="286.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (152 samples, 3.13%)</title><rect x="390.1" y="259.0" width="37.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="393.1" y="270.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (152 samples, 3.13%)</title><rect x="390.1" y="243.0" width="37.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="393.1" y="254.0">roc..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (151 samples, 3.11%)</title><rect x="390.4" y="227.0" width="36.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="393.4" y="238.0">roc..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (9 samples, 0.19%)</title><rect x="390.4" y="211.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="393.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (142 samples, 2.93%)</title><rect x="392.5" y="211.0" width="34.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="395.5" y="222.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="393.0" y="195.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="396.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (138 samples, 2.85%)</title><rect x="393.5" y="195.0" width="33.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="396.5" y="206.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (135 samples, 2.78%)</title><rect x="394.2" y="179.0" width="32.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="397.2" y="190.0">ro..</text>
</g>
<g>
<title>write (133 samples, 2.74%)</title><rect x="394.7" y="163.0" width="32.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="397.7" y="174.0">wr..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (29 samples, 0.60%)</title><rect x="427.3" y="259.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="430.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (27 samples, 0.56%)</title><rect x="427.8" y="243.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="430.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (27 samples, 0.56%)</title><rect x="427.8" y="227.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="430.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.49%)</title><rect x="428.6" y="211.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="431.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (22 samples, 0.45%)</title><rect x="428.6" y="195.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="431.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (18 samples, 0.37%)</title><rect x="429.5" y="179.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="432.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.06%)</title><rect x="431.5" y="163.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="434.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.12%)</title><rect x="432.2" y="163.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="435.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="433.9" y="195.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="436.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (38 samples, 0.78%)</title><rect x="434.4" y="259.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="437.4" y="270.0"></text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (2 samples, 0.04%)</title><rect x="435.1" y="243.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="438.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.04%)</title><rect x="435.9" y="243.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="438.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (29 samples, 0.60%)</title><rect x="436.3" y="243.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="439.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.58%)</title><rect x="436.6" y="227.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="439.6" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="437.1" y="211.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="440.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.47%)</title><rect x="437.8" y="211.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="440.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (21 samples, 0.43%)</title><rect x="437.8" y="195.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="440.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.41%)</title><rect x="438.1" y="179.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="441.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (18 samples, 0.37%)</title><rect x="438.5" y="163.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="441.5" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="441.0" y="147.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="444.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.10%)</title><rect x="441.7" y="147.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="444.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="442.2" y="131.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="445.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.04%)</title><rect x="442.9" y="195.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="445.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (150 samples, 3.09%)</title><rect x="443.6" y="259.0" width="36.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="446.6" y="270.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (147 samples, 3.03%)</title><rect x="443.9" y="243.0" width="35.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="446.9" y="254.0">roc..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="444.6" y="227.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="447.6" y="238.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="444.6" y="211.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="447.6" y="222.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="444.6" y="195.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="447.6" y="206.0"></text>
</g>
<g>
<title>xdrrec_ops (142 samples, 2.93%)</title><rect x="445.1" y="227.0" width="34.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="448.1" y="238.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (13 samples, 0.27%)</title><rect x="480.2" y="259.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="483.2" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.16%)</title><rect x="480.9" y="243.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="483.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.16%)</title><rect x="480.9" y="227.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="483.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (84 samples, 1.73%)</title><rect x="483.3" y="259.0" width="20.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="486.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (82 samples, 1.69%)</title><rect x="483.6" y="243.0" width="19.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="486.6" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (66 samples, 1.36%)</title><rect x="485.3" y="227.0" width="16.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="488.3" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (53 samples, 1.09%)</title><rect x="485.3" y="211.0" width="12.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="488.3" y="222.0"></text>
</g>
<g>
<title>_pthread_cond_wait (13 samples, 0.27%)</title><rect x="498.2" y="211.0" width="3.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="501.2" y="222.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (13 samples, 0.27%)</title><rect x="498.2" y="195.0" width="3.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="501.2" y="206.0"></text>
</g>
<g>
<title>__psynch_mutexwait (13 samples, 0.27%)</title><rect x="498.2" y="179.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="501.2" y="190.0"></text>
</g>
<g>
<title>xdrrec_ops (9 samples, 0.19%)</title><rect x="501.3" y="227.0" width="2.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="504.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (14 samples, 0.29%)</title><rect x="503.8" y="259.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="506.8" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.23%)</title><rect x="503.8" y="243.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="506.8" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.23%)</title><rect x="503.8" y="227.0" width="2.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="506.8" y="238.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.06%)</title><rect x="506.4" y="243.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="509.4" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.06%)</title><rect x="506.4" y="227.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="509.4" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.06%)</title><rect x="506.4" y="211.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="509.4" y="222.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="508.6" y="275.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="511.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="509.1" y="291.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="512.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.04%)</title><rect x="510.1" y="387.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="513.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.04%)</title><rect x="510.1" y="371.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="513.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.04%)</title><rect x="510.1" y="355.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="513.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="510.1" y="339.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="513.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="510.1" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="513.1" y="334.0"></text>
</g>
<g>
<title>[worker tid=34819] (903 samples, 18.62%)</title><rect x="510.8" y="547.0" width="219.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="513.8" y="558.0">[worker tid=34819]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.14%)</title><rect x="510.8" y="531.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="513.8" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 0.14%)</title><rect x="510.8" y="515.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="513.8" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="510.8" y="499.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="513.8" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="510.8" y="483.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="513.8" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="510.8" y="467.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="513.8" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.08%)</title><rect x="511.5" y="499.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="514.5" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.run (894 samples, 18.44%)</title><rect x="513.0" y="531.0" width="217.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="516.0" y="542.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (894 samples, 18.44%)</title><rect x="513.0" y="515.0" width="217.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="516.0" y="526.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (894 samples, 18.44%)</title><rect x="513.0" y="499.0" width="217.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="516.0" y="510.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.06%)</title><rect x="514.5" y="483.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="517.5" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.06%)</title><rect x="514.5" y="467.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="517.5" y="478.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.06%)</title><rect x="514.5" y="451.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="517.5" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="514.7" y="435.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="517.7" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="514.7" y="419.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="517.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.04%)</title><rect x="515.2" y="483.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="518.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="515.2" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="518.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (234 samples, 4.83%)</title><rect x="515.7" y="483.0" width="56.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.7" y="494.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (234 samples, 4.83%)</title><rect x="515.7" y="467.0" width="56.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.7" y="478.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (208 samples, 4.29%)</title><rect x="515.7" y="451.0" width="50.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="518.7" y="462.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.06%)</title><rect x="516.2" y="435.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="516.2" y="419.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="519.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (203 samples, 4.19%)</title><rect x="516.9" y="435.0" width="49.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="519.9" y="446.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (203 samples, 4.19%)</title><rect x="516.9" y="419.0" width="49.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.9" y="430.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (195 samples, 4.02%)</title><rect x="518.8" y="403.0" width="47.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="521.8" y="414.0">Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (178 samples, 3.67%)</title><rect x="520.1" y="387.0" width="43.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="523.1" y="398.0">Park..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.04%)</title><rect x="520.1" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="523.1" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (171 samples, 3.53%)</title><rect x="520.5" y="371.0" width="41.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="523.5" y="382.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.06%)</title><rect x="562.2" y="371.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="565.2" y="382.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (3 samples, 0.06%)</title><rect x="563.4" y="387.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="566.4" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.06%)</title><rect x="564.6" y="387.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="567.6" y="398.0"></text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.04%)</title><rect x="565.6" y="387.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="568.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.04%)</title><rect x="566.3" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.04%)</title><rect x="566.3" y="435.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.14%)</title><rect x="566.8" y="451.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="569.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.14%)</title><rect x="566.8" y="435.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="569.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.10%)</title><rect x="567.0" y="419.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="567.3" y="403.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.04%)</title><rect x="567.8" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="570.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 0.35%)</title><rect x="568.5" y="451.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 0.35%)</title><rect x="568.5" y="435.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 0.35%)</title><rect x="568.5" y="419.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="571.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 0.35%)</title><rect x="568.5" y="403.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="571.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (17 samples, 0.35%)</title><rect x="568.5" y="387.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.5" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (16 samples, 0.33%)</title><rect x="568.7" y="371.0" width="3.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="571.7" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.27%)</title><rect x="569.2" y="355.0" width="3.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="572.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (649 samples, 13.38%)</title><rect x="572.6" y="483.0" width="158.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="575.6" y="494.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (649 samples, 13.38%)</title><rect x="572.6" y="467.0" width="158.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="575.6" y="478.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (160 samples, 3.30%)</title><rect x="572.6" y="451.0" width="39.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="575.6" y="462.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (154 samples, 3.18%)</title><rect x="573.6" y="435.0" width="37.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="576.6" y="446.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.12%)</title><rect x="573.6" y="419.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="576.6" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.10%)</title><rect x="573.8" y="403.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="576.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.08%)</title><rect x="574.1" y="387.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.1" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.08%)</title><rect x="574.1" y="371.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="577.1" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (148 samples, 3.05%)</title><rect x="575.1" y="419.0" width="36.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="578.1" y="430.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (148 samples, 3.05%)</title><rect x="575.1" y="403.0" width="36.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="578.1" y="414.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (148 samples, 3.05%)</title><rect x="575.1" y="387.0" width="36.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="578.1" y="398.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (148 samples, 3.05%)</title><rect x="575.1" y="371.0" width="36.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="578.1" y="382.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="575.1" y="355.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="575.1" y="339.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="578.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="575.3" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.3" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="575.3" y="307.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="578.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (145 samples, 2.99%)</title><rect x="575.8" y="355.0" width="35.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="578.8" y="366.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.10%)</title><rect x="575.8" y="339.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.10%)</title><rect x="575.8" y="323.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="578.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.10%)</title><rect x="575.8" y="307.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="578.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.10%)</title><rect x="575.8" y="291.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="578.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.06%)</title><rect x="576.3" y="275.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="579.3" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="576.3" y="259.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.3" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="576.5" y="243.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="579.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (140 samples, 2.89%)</title><rect x="577.0" y="339.0" width="34.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="580.0" y="350.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (140 samples, 2.89%)</title><rect x="577.0" y="323.0" width="34.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="580.0" y="334.0">su..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (8 samples, 0.16%)</title><rect x="577.0" y="307.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="580.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (8 samples, 0.16%)</title><rect x="577.0" y="291.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="580.0" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.08%)</title><rect x="577.0" y="275.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="580.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.08%)</title><rect x="577.0" y="259.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="580.0" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.08%)</title><rect x="577.0" y="243.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="580.0" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="577.5" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="580.5" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.04%)</title><rect x="577.5" y="211.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="580.5" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.08%)</title><rect x="578.0" y="275.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="581.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.08%)</title><rect x="578.0" y="259.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="581.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.08%)</title><rect x="578.0" y="243.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="581.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.06%)</title><rect x="578.2" y="227.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="581.2" y="238.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.04%)</title><rect x="578.5" y="211.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="581.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (132 samples, 2.72%)</title><rect x="579.0" y="307.0" width="32.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.0" y="318.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (132 samples, 2.72%)</title><rect x="579.0" y="291.0" width="32.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="582.0" y="302.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (132 samples, 2.72%)</title><rect x="579.0" y="275.0" width="32.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.0" y="286.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="580.4" y="259.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="583.4" y="270.0"></text>
</g>
<g>
<title>write (124 samples, 2.56%)</title><rect x="580.9" y="259.0" width="30.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="583.9" y="270.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="611.1" y="435.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="614.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$91/1990120482.act (489 samples, 10.08%)</title><rect x="611.6" y="451.0" width="119.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="614.6" y="462.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$3 (489 samples, 10.08%)</title><rect x="611.6" y="435.0" width="119.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="614.6" y="446.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.delete (489 samples, 10.08%)</title><rect x="611.6" y="419.0" width="119.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="614.6" y="430.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (486 samples, 10.02%)</title><rect x="612.3" y="403.0" width="118.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="615.3" y="414.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (482 samples, 9.94%)</title><rect x="612.3" y="387.0" width="117.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.3" y="398.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (482 samples, 9.94%)</title><rect x="612.3" y="371.0" width="117.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="615.3" y="382.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (479 samples, 9.88%)</title><rect x="613.0" y="355.0" width="116.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="616.0" y="366.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (474 samples, 9.78%)</title><rect x="614.2" y="339.0" width="115.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="617.2" y="350.0">rocksdb_delete..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.04%)</title><rect x="614.5" y="323.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="617.5" y="334.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="615.0" y="323.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="618.0" y="334.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="615.0" y="307.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="618.0" y="318.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.06%)</title><rect x="615.7" y="323.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="618.7" y="334.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="615.7" y="307.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="618.7" y="318.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="615.7" y="291.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="618.7" y="302.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="615.7" y="275.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="618.7" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="615.9" y="259.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="618.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (464 samples, 9.57%)</title><rect x="616.4" y="323.0" width="112.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="619.4" y="334.0">rocksdb::Compa..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (462 samples, 9.53%)</title><rect x="616.7" y="307.0" width="112.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="619.7" y="318.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (455 samples, 9.38%)</title><rect x="616.7" y="291.0" width="110.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="619.7" y="302.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (449 samples, 9.26%)</title><rect x="617.4" y="275.0" width="109.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="620.4" y="286.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (118 samples, 2.43%)</title><rect x="619.1" y="259.0" width="28.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="622.1" y="270.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (116 samples, 2.39%)</title><rect x="619.1" y="243.0" width="28.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="622.1" y="254.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (115 samples, 2.37%)</title><rect x="619.3" y="227.0" width="28.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="622.3" y="238.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.08%)</title><rect x="619.3" y="211.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="622.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (111 samples, 2.29%)</title><rect x="620.3" y="211.0" width="27.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="623.3" y="222.0">r..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (3 samples, 0.06%)</title><rect x="620.8" y="195.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="623.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (105 samples, 2.17%)</title><rect x="621.8" y="195.0" width="25.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="624.8" y="206.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (104 samples, 2.14%)</title><rect x="622.0" y="179.0" width="25.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="625.0" y="190.0">r..</text>
</g>
<g>
<title>write (103 samples, 2.12%)</title><rect x="622.3" y="163.0" width="25.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="625.3" y="174.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (34 samples, 0.70%)</title><rect x="648.5" y="259.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="651.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (30 samples, 0.62%)</title><rect x="649.5" y="243.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="652.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.58%)</title><rect x="650.0" y="227.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="653.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (27 samples, 0.56%)</title><rect x="650.3" y="211.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="653.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (23 samples, 0.47%)</title><rect x="650.7" y="195.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="653.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.43%)</title><rect x="651.2" y="179.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="654.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.12%)</title><rect x="654.6" y="163.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="657.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="655.4" y="147.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="658.4" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="655.4" y="131.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="658.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="656.3" y="195.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="659.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (22 samples, 0.45%)</title><rect x="656.8" y="259.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="659.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (21 samples, 0.43%)</title><rect x="656.8" y="243.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="659.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (19 samples, 0.39%)</title><rect x="657.3" y="227.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="660.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (16 samples, 0.33%)</title><rect x="658.0" y="211.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="661.0" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="658.0" y="195.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="661.0" y="206.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="658.0" y="179.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="661.0" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="658.0" y="163.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="661.0" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="658.0" y="147.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="661.0" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="658.0" y="131.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="661.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (14 samples, 0.29%)</title><rect x="658.5" y="195.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="661.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="658.8" y="179.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="661.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.23%)</title><rect x="659.3" y="179.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="662.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.21%)</title><rect x="659.5" y="163.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="662.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.10%)</title><rect x="660.7" y="147.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="663.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.08%)</title><rect x="660.7" y="131.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="663.7" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="661.2" y="115.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="664.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (172 samples, 3.55%)</title><rect x="662.2" y="259.0" width="41.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="665.2" y="270.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (171 samples, 3.53%)</title><rect x="662.4" y="243.0" width="41.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="665.4" y="254.0">roc..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (6 samples, 0.12%)</title><rect x="664.6" y="227.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="667.6" y="238.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.12%)</title><rect x="664.6" y="211.0" width="1.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="667.6" y="222.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.08%)</title><rect x="664.9" y="195.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="667.9" y="206.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="665.1" y="179.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="668.1" y="190.0"></text>
</g>
<g>
<title>xdrrec_ops (155 samples, 3.20%)</title><rect x="666.3" y="227.0" width="37.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="669.3" y="238.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (13 samples, 0.27%)</title><rect x="704.3" y="259.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="707.3" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.25%)</title><rect x="704.5" y="243.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="707.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.23%)</title><rect x="704.5" y="227.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="707.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (61 samples, 1.26%)</title><rect x="707.4" y="259.0" width="14.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="710.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (61 samples, 1.26%)</title><rect x="707.4" y="243.0" width="14.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="710.4" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (50 samples, 1.03%)</title><rect x="708.4" y="227.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="711.4" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (39 samples, 0.80%)</title><rect x="708.4" y="211.0" width="9.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="711.4" y="222.0"></text>
</g>
<g>
<title>_pthread_cond_wait (10 samples, 0.21%)</title><rect x="718.1" y="211.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="721.1" y="222.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (9 samples, 0.19%)</title><rect x="718.4" y="195.0" width="2.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="721.4" y="206.0"></text>
</g>
<g>
<title>__psynch_mutexwait (9 samples, 0.19%)</title><rect x="718.4" y="179.0" width="2.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="721.4" y="190.0"></text>
</g>
<g>
<title>xdrrec_ops (6 samples, 0.12%)</title><rect x="720.8" y="227.0" width="1.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="723.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (14 samples, 0.29%)</title><rect x="722.3" y="259.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="725.3" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.21%)</title><rect x="722.3" y="243.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="725.3" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.21%)</title><rect x="722.3" y="227.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="725.3" y="238.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (4 samples, 0.08%)</title><rect x="724.7" y="243.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="727.7" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.08%)</title><rect x="724.7" y="227.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="727.7" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.08%)</title><rect x="724.7" y="211.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="727.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (3 samples, 0.06%)</title><rect x="727.6" y="291.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="730.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="727.6" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="730.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="728.4" y="291.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="731.4" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="728.4" y="275.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="731.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (4 samples, 0.08%)</title><rect x="729.6" y="387.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.08%)</title><rect x="729.6" y="371.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="732.6" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.08%)</title><rect x="729.6" y="355.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="732.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="729.6" y="339.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="732.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="729.6" y="323.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="732.6" y="334.0"></text>
</g>
<g>
<title>[worker tid=35331] (919 samples, 18.95%)</title><rect x="730.6" y="547.0" width="223.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="733.6" y="558.0">[worker tid=35331]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.10%)</title><rect x="730.8" y="531.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="733.8" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.10%)</title><rect x="730.8" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="733.8" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.08%)</title><rect x="731.0" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="734.0" y="510.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.06%)</title><rect x="732.0" y="531.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="735.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (908 samples, 18.73%)</title><rect x="733.2" y="531.0" width="221.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.2" y="542.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (908 samples, 18.73%)</title><rect x="733.2" y="515.0" width="221.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="736.2" y="526.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (908 samples, 18.73%)</title><rect x="733.2" y="499.0" width="221.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="736.2" y="510.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.06%)</title><rect x="734.0" y="483.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="734.0" y="467.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="737.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (197 samples, 4.06%)</title><rect x="734.9" y="483.0" width="48.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="737.9" y="494.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (196 samples, 4.04%)</title><rect x="735.2" y="467.0" width="47.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="738.2" y="478.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (176 samples, 3.63%)</title><rect x="735.4" y="451.0" width="42.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.4" y="462.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.04%)</title><rect x="735.9" y="435.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="738.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="735.9" y="419.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="738.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.04%)</title><rect x="735.9" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.04%)</title><rect x="735.9" y="387.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="738.9" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.04%)</title><rect x="735.9" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.9" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="735.9" y="355.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="738.9" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="735.9" y="339.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="738.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (172 samples, 3.55%)</title><rect x="736.4" y="435.0" width="41.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.4" y="446.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (172 samples, 3.55%)</title><rect x="736.4" y="419.0" width="41.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="739.4" y="430.0">jdk..</text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.04%)</title><rect x="737.9" y="403.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="740.9" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (162 samples, 3.34%)</title><rect x="738.8" y="403.0" width="39.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="741.8" y="414.0">Uns..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.08%)</title><rect x="739.8" y="387.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.8" y="398.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (2 samples, 0.04%)</title><rect x="740.0" y="371.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="743.0" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (145 samples, 2.99%)</title><rect x="741.0" y="387.0" width="35.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="744.0" y="398.0">Par..</text>
</g>
<g>
<title>__psynch_cvwait (140 samples, 2.89%)</title><rect x="741.8" y="371.0" width="34.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="744.8" y="382.0">__..</text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (3 samples, 0.06%)</title><rect x="776.3" y="387.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="779.3" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.06%)</title><rect x="777.3" y="387.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="780.3" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="777.5" y="371.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="780.5" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="777.5" y="355.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="780.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 0.35%)</title><rect x="778.7" y="451.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="781.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 0.35%)</title><rect x="778.7" y="435.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 0.35%)</title><rect x="778.7" y="419.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="781.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 0.35%)</title><rect x="778.7" y="403.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="781.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (17 samples, 0.35%)</title><rect x="778.7" y="387.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="781.7" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (17 samples, 0.35%)</title><rect x="778.7" y="371.0" width="4.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="781.7" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.29%)</title><rect x="779.5" y="355.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="782.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (704 samples, 14.52%)</title><rect x="782.9" y="483.0" width="171.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="785.9" y="494.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (703 samples, 14.50%)</title><rect x="783.1" y="467.0" width="171.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="786.1" y="478.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (176 samples, 3.63%)</title><rect x="783.4" y="451.0" width="42.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="786.4" y="462.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (169 samples, 3.49%)</title><rect x="783.9" y="435.0" width="41.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="786.9" y="446.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.06%)</title><rect x="783.9" y="419.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="786.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title><rect x="784.1" y="403.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.1" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="784.1" y="387.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="787.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (166 samples, 3.42%)</title><rect x="784.6" y="419.0" width="40.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.6" y="430.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (165 samples, 3.40%)</title><rect x="784.8" y="403.0" width="40.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="787.8" y="414.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (165 samples, 3.40%)</title><rect x="784.8" y="387.0" width="40.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.8" y="398.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (165 samples, 3.40%)</title><rect x="784.8" y="371.0" width="40.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="787.8" y="382.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="784.8" y="355.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="784.8" y="339.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="784.8" y="323.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="787.8" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="784.8" y="307.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="787.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (163 samples, 3.36%)</title><rect x="785.3" y="355.0" width="39.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="788.3" y="366.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.16%)</title><rect x="785.3" y="339.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="788.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.14%)</title><rect x="785.6" y="323.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="788.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.14%)</title><rect x="785.6" y="307.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="788.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.14%)</title><rect x="785.6" y="291.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.12%)</title><rect x="785.8" y="275.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="788.8" y="286.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="785.8" y="259.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="788.8" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="786.5" y="259.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="789.5" y="270.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="786.5" y="243.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="789.5" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="786.5" y="227.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="789.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (155 samples, 3.20%)</title><rect x="787.3" y="339.0" width="37.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="790.3" y="350.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (154 samples, 3.18%)</title><rect x="787.5" y="323.0" width="37.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="790.5" y="334.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (9 samples, 0.19%)</title><rect x="787.5" y="307.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="790.5" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (9 samples, 0.19%)</title><rect x="787.5" y="291.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="790.5" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.19%)</title><rect x="787.5" y="275.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.19%)</title><rect x="787.5" y="259.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.5" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.19%)</title><rect x="787.5" y="243.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="790.5" y="254.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.04%)</title><rect x="788.0" y="227.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="791.0" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.08%)</title><rect x="788.7" y="227.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="791.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (145 samples, 2.99%)</title><rect x="789.7" y="307.0" width="35.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="792.7" y="318.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (145 samples, 2.99%)</title><rect x="789.7" y="291.0" width="35.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.7" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (145 samples, 2.99%)</title><rect x="789.7" y="275.0" width="35.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="792.7" y="286.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.06%)</title><rect x="791.6" y="259.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="794.6" y="270.0"></text>
</g>
<g>
<title>write (133 samples, 2.74%)</title><rect x="792.6" y="259.0" width="32.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="795.6" y="270.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.08%)</title><rect x="825.0" y="435.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="828.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="825.2" y="419.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="828.2" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="825.5" y="403.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="828.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$91/1990120482.act (526 samples, 10.85%)</title><rect x="826.2" y="451.0" width="128.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="829.2" y="462.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$3 (525 samples, 10.83%)</title><rect x="826.4" y="435.0" width="127.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.4" y="446.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.delete (525 samples, 10.83%)</title><rect x="826.4" y="419.0" width="127.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="829.4" y="430.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (523 samples, 10.79%)</title><rect x="826.9" y="403.0" width="127.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="829.9" y="414.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (520 samples, 10.72%)</title><rect x="826.9" y="387.0" width="126.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.9" y="398.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (519 samples, 10.70%)</title><rect x="827.2" y="371.0" width="126.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.2" y="382.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (512 samples, 10.56%)</title><rect x="828.9" y="355.0" width="124.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="831.9" y="366.0">Java_org_rocksd..</text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (507 samples, 10.46%)</title><rect x="830.1" y="339.0" width="123.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.1" y="350.0">rocksdb_delete_..</text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="830.6" y="323.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="833.6" y="334.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="831.5" y="323.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="834.5" y="334.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.06%)</title><rect x="832.0" y="323.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="835.0" y="334.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="832.0" y="307.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="835.0" y="318.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="832.0" y="291.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="835.0" y="302.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="832.0" y="275.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="835.0" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="832.0" y="259.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="835.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (496 samples, 10.23%)</title><rect x="832.8" y="323.0" width="120.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.8" y="334.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (496 samples, 10.23%)</title><rect x="832.8" y="307.0" width="120.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="835.8" y="318.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (489 samples, 10.08%)</title><rect x="832.8" y="291.0" width="119.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="835.8" y="302.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (484 samples, 9.98%)</title><rect x="832.8" y="275.0" width="117.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="835.8" y="286.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="836.9" y="259.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (140 samples, 2.89%)</title><rect x="837.4" y="259.0" width="34.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.4" y="270.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (139 samples, 2.87%)</title><rect x="837.4" y="243.0" width="33.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="840.4" y="254.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (137 samples, 2.83%)</title><rect x="837.9" y="227.0" width="33.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="840.9" y="238.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.08%)</title><rect x="838.1" y="211.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="841.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (132 samples, 2.72%)</title><rect x="839.1" y="211.0" width="32.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="842.1" y="222.0">ro..</text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (2 samples, 0.04%)</title><rect x="839.1" y="195.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="842.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="840.1" y="195.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="843.1" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="840.1" y="179.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="843.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (126 samples, 2.60%)</title><rect x="840.6" y="195.0" width="30.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="843.6" y="206.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (122 samples, 2.52%)</title><rect x="841.5" y="179.0" width="29.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.5" y="190.0">ro..</text>
</g>
<g>
<title>write (121 samples, 2.50%)</title><rect x="841.8" y="163.0" width="29.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="844.8" y="174.0">wr..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (31 samples, 0.64%)</title><rect x="871.9" y="259.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="874.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (30 samples, 0.62%)</title><rect x="872.2" y="243.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="875.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.60%)</title><rect x="872.4" y="227.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.58%)</title><rect x="872.7" y="211.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="875.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (24 samples, 0.49%)</title><rect x="873.2" y="195.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="874.4" y="179.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="877.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.33%)</title><rect x="875.1" y="179.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="878.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.08%)</title><rect x="877.1" y="163.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="880.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="877.5" y="147.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="880.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.08%)</title><rect x="878.0" y="163.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="881.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.08%)</title><rect x="878.0" y="147.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="879.0" y="195.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (29 samples, 0.60%)</title><rect x="879.5" y="259.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (24 samples, 0.49%)</title><rect x="880.7" y="243.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="883.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.47%)</title><rect x="880.9" y="227.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="883.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (21 samples, 0.43%)</title><rect x="881.4" y="211.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="884.4" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.10%)</title><rect x="881.7" y="195.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="884.7" y="206.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.10%)</title><rect x="881.7" y="179.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="884.7" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.10%)</title><rect x="881.7" y="163.0" width="1.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="884.7" y="174.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.04%)</title><rect x="881.7" y="147.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="884.7" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="882.2" y="147.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="885.2" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="882.2" y="131.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="885.2" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="882.2" y="115.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="885.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (15 samples, 0.31%)</title><rect x="882.9" y="195.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="885.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.29%)</title><rect x="883.1" y="179.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="886.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.23%)</title><rect x="883.9" y="163.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.08%)</title><rect x="885.1" y="147.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="885.6" y="131.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="886.1" y="147.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="889.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (153 samples, 3.16%)</title><rect x="886.8" y="259.0" width="37.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="889.8" y="270.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (153 samples, 3.16%)</title><rect x="886.8" y="243.0" width="37.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="889.8" y="254.0">roc..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="887.8" y="227.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="890.8" y="238.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="887.8" y="211.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="890.8" y="222.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="887.8" y="195.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="890.8" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.06%)</title><rect x="888.2" y="227.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="891.2" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="888.2" y="211.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="891.2" y="222.0"></text>
</g>
<g>
<title>xdrrec_ops (144 samples, 2.97%)</title><rect x="889.0" y="227.0" width="35.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="892.0" y="238.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (11 samples, 0.23%)</title><rect x="924.3" y="259.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.3" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.14%)</title><rect x="924.7" y="243.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.7" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.14%)</title><rect x="924.7" y="227.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="927.7" y="238.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="926.5" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="929.5" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="926.5" y="227.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="929.5" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="926.5" y="211.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="929.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (77 samples, 1.59%)</title><rect x="926.9" y="259.0" width="18.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="929.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (76 samples, 1.57%)</title><rect x="927.2" y="243.0" width="18.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="930.2" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (68 samples, 1.40%)</title><rect x="928.2" y="227.0" width="16.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="931.2" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (51 samples, 1.05%)</title><rect x="928.2" y="211.0" width="12.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="931.2" y="222.0"></text>
</g>
<g>
<title>_pthread_cond_wait (17 samples, 0.35%)</title><rect x="940.6" y="211.0" width="4.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="943.6" y="222.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (15 samples, 0.31%)</title><rect x="940.8" y="195.0" width="3.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="943.8" y="206.0"></text>
</g>
<g>
<title>__psynch_mutexwait (15 samples, 0.31%)</title><rect x="940.8" y="179.0" width="3.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="943.8" y="190.0"></text>
</g>
<g>
<title>xdrrec_ops (4 samples, 0.08%)</title><rect x="944.7" y="227.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="947.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (18 samples, 0.37%)</title><rect x="945.7" y="259.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="948.7" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (14 samples, 0.29%)</title><rect x="945.9" y="243.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.29%)</title><rect x="945.9" y="227.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="948.9" y="238.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.06%)</title><rect x="949.3" y="243.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="952.3" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.06%)</title><rect x="949.3" y="227.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="952.3" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="949.6" y="211.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="952.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.04%)</title><rect x="950.5" y="275.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (2 samples, 0.04%)</title><rect x="951.0" y="275.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="954.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="951.8" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.08%)</title><rect x="952.2" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="955.2" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.06%)</title><rect x="952.5" y="275.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="955.5" y="286.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.04%)</title><rect x="952.5" y="259.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="955.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (3 samples, 0.06%)</title><rect x="953.5" y="387.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="956.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (3 samples, 0.06%)</title><rect x="953.5" y="371.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="956.5" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.06%)</title><rect x="953.5" y="355.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="956.5" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="953.5" y="339.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="956.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="953.5" y="323.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.5" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="953.7" y="307.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="956.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="953.7" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="956.7" y="302.0"></text>
</g>
<g>
<title>[worker tid=36099] (969 samples, 19.98%)</title><rect x="954.2" y="547.0" width="235.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="957.2" y="558.0">[worker tid=36099]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.14%)</title><rect x="954.4" y="531.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="957.4" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.10%)</title><rect x="954.7" y="515.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.7" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.08%)</title><rect x="954.7" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="957.7" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="955.2" y="483.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="958.2" y="494.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.04%)</title><rect x="956.1" y="531.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="959.1" y="542.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="956.6" y="531.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="959.6" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="956.6" y="515.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="959.6" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (957 samples, 19.74%)</title><rect x="957.1" y="531.0" width="232.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="960.1" y="542.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (957 samples, 19.74%)</title><rect x="957.1" y="515.0" width="232.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="960.1" y="526.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (957 samples, 19.74%)</title><rect x="957.1" y="499.0" width="232.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="960.1" y="510.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.04%)</title><rect x="957.4" y="483.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="960.4" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.04%)</title><rect x="957.4" y="467.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="960.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.04%)</title><rect x="957.8" y="483.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="960.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="957.8" y="467.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="960.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (218 samples, 4.50%)</title><rect x="958.3" y="483.0" width="53.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="961.3" y="494.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (215 samples, 4.43%)</title><rect x="958.3" y="467.0" width="52.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="961.3" y="478.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (196 samples, 4.04%)</title><rect x="958.3" y="451.0" width="47.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="961.3" y="462.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (194 samples, 4.00%)</title><rect x="958.8" y="435.0" width="47.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.8" y="446.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (194 samples, 4.00%)</title><rect x="958.8" y="419.0" width="47.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="961.8" y="430.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (188 samples, 3.88%)</title><rect x="960.3" y="403.0" width="45.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="963.3" y="414.0">Unsa..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="961.5" y="387.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="964.5" y="398.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="961.5" y="371.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="964.5" y="382.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="961.5" y="355.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.5" y="366.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (175 samples, 3.61%)</title><rect x="962.0" y="387.0" width="42.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.0" y="398.0">Park..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.06%)</title><rect x="962.2" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="965.2" y="382.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.04%)</title><rect x="962.5" y="355.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.5" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (169 samples, 3.49%)</title><rect x="963.0" y="371.0" width="41.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="966.0" y="382.0">__p..</text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.04%)</title><rect x="1005.1" y="387.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1008.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 0.37%)</title><rect x="1006.3" y="451.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1009.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 0.37%)</title><rect x="1006.3" y="435.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1009.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 0.37%)</title><rect x="1006.3" y="419.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1009.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 0.37%)</title><rect x="1006.3" y="403.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1009.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 0.37%)</title><rect x="1006.3" y="387.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1009.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (17 samples, 0.35%)</title><rect x="1006.5" y="371.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1009.5" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (17 samples, 0.35%)</title><rect x="1006.5" y="355.0" width="4.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1009.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.04%)</title><rect x="1010.9" y="467.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1013.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (734 samples, 15.14%)</title><rect x="1011.4" y="483.0" width="178.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1014.4" y="494.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (734 samples, 15.14%)</title><rect x="1011.4" y="467.0" width="178.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1014.4" y="478.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (213 samples, 4.39%)</title><rect x="1011.9" y="451.0" width="51.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1014.9" y="462.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (209 samples, 4.31%)</title><rect x="1012.6" y="435.0" width="50.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1015.6" y="446.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.21%)</title><rect x="1012.6" y="419.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1015.6" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.14%)</title><rect x="1013.3" y="403.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1016.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.06%)</title><rect x="1013.6" y="387.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1016.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="1013.8" y="371.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1016.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.06%)</title><rect x="1014.3" y="387.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1017.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.06%)</title><rect x="1014.3" y="371.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1017.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (199 samples, 4.10%)</title><rect x="1015.0" y="419.0" width="48.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1018.0" y="430.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (199 samples, 4.10%)</title><rect x="1015.0" y="403.0" width="48.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.0" y="414.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (198 samples, 4.08%)</title><rect x="1015.3" y="387.0" width="48.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1018.3" y="398.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (198 samples, 4.08%)</title><rect x="1015.3" y="371.0" width="48.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1018.3" y="382.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.19%)</title><rect x="1015.3" y="355.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1018.3" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.19%)</title><rect x="1015.3" y="339.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1018.3" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.19%)</title><rect x="1015.3" y="323.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1018.3" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.19%)</title><rect x="1015.3" y="307.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1018.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.08%)</title><rect x="1015.8" y="291.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.08%)</title><rect x="1015.8" y="275.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1018.8" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.06%)</title><rect x="1016.0" y="259.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1019.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="1016.7" y="291.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1019.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="1016.7" y="275.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1019.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (189 samples, 3.90%)</title><rect x="1017.5" y="355.0" width="46.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1020.5" y="366.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.25%)</title><rect x="1017.5" y="339.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1020.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.19%)</title><rect x="1018.2" y="323.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1021.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.19%)</title><rect x="1018.2" y="307.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1021.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.19%)</title><rect x="1018.2" y="291.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1021.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (7 samples, 0.14%)</title><rect x="1018.4" y="275.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1021.4" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.10%)</title><rect x="1018.9" y="259.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.9" y="270.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="1019.2" y="243.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1022.2" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="1019.7" y="243.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1022.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (177 samples, 3.65%)</title><rect x="1020.4" y="339.0" width="43.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1023.4" y="350.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (177 samples, 3.65%)</title><rect x="1020.4" y="323.0" width="43.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1023.4" y="334.0">sun/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (11 samples, 0.23%)</title><rect x="1020.4" y="307.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (11 samples, 0.23%)</title><rect x="1020.4" y="291.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1023.4" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.12%)</title><rect x="1020.4" y="275.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.12%)</title><rect x="1020.4" y="259.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1023.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.12%)</title><rect x="1020.4" y="243.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1023.4" y="254.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (3 samples, 0.06%)</title><rect x="1020.6" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.6" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="1021.4" y="227.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1024.4" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.10%)</title><rect x="1021.8" y="275.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1024.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (5 samples, 0.10%)</title><rect x="1021.8" y="259.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1024.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (5 samples, 0.10%)</title><rect x="1021.8" y="243.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1024.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (5 samples, 0.10%)</title><rect x="1021.8" y="227.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1024.8" y="238.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.04%)</title><rect x="1022.6" y="211.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1025.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (166 samples, 3.42%)</title><rect x="1023.1" y="307.0" width="40.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1026.1" y="318.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (166 samples, 3.42%)</title><rect x="1023.1" y="291.0" width="40.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1026.1" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (166 samples, 3.42%)</title><rect x="1023.1" y="275.0" width="40.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1026.1" y="286.0">sun..</text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.04%)</title><rect x="1023.8" y="259.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1026.8" y="270.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="1024.3" y="259.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1027.3" y="270.0"></text>
</g>
<g>
<title>write (157 samples, 3.24%)</title><rect x="1025.3" y="259.0" width="38.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1028.3" y="270.0">write</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$91/1990120482.act (519 samples, 10.70%)</title><rect x="1063.7" y="451.0" width="126.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1066.7" y="462.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$3 (519 samples, 10.70%)</title><rect x="1063.7" y="435.0" width="126.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1066.7" y="446.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.delete (519 samples, 10.70%)</title><rect x="1063.7" y="419.0" width="126.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1066.7" y="430.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (517 samples, 10.66%)</title><rect x="1064.2" y="403.0" width="125.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1067.2" y="414.0">ru/mail/polis/d..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (513 samples, 10.58%)</title><rect x="1064.4" y="387.0" width="124.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1067.4" y="398.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (513 samples, 10.58%)</title><rect x="1064.4" y="371.0" width="124.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1067.4" y="382.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (511 samples, 10.54%)</title><rect x="1064.9" y="355.0" width="124.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1067.9" y="366.0">Java_org_rocksd..</text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (509 samples, 10.50%)</title><rect x="1065.4" y="339.0" width="123.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.4" y="350.0">rocksdb_delete_..</text>
</g>
<g>
<title>free (4 samples, 0.08%)</title><rect x="1066.1" y="323.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1069.1" y="334.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.08%)</title><rect x="1066.1" y="307.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1069.1" y="318.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="1067.1" y="323.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1070.1" y="334.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.06%)</title><rect x="1068.1" y="323.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1071.1" y="334.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="1068.1" y="307.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1071.1" y="318.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="1068.1" y="291.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1071.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (491 samples, 10.13%)</title><rect x="1068.8" y="323.0" width="119.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.8" y="334.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (487 samples, 10.04%)</title><rect x="1069.3" y="307.0" width="118.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.3" y="318.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (481 samples, 9.92%)</title><rect x="1069.3" y="291.0" width="117.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.3" y="302.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (478 samples, 9.86%)</title><rect x="1069.3" y="275.0" width="116.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.3" y="286.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (133 samples, 2.74%)</title><rect x="1072.0" y="259.0" width="32.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.0" y="270.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (133 samples, 2.74%)</title><rect x="1072.0" y="243.0" width="32.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.0" y="254.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (132 samples, 2.72%)</title><rect x="1072.2" y="227.0" width="32.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.2" y="238.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.06%)</title><rect x="1072.2" y="211.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (129 samples, 2.66%)</title><rect x="1072.9" y="211.0" width="31.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.9" y="222.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="1073.2" y="195.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (126 samples, 2.60%)</title><rect x="1073.7" y="195.0" width="30.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.7" y="206.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (124 samples, 2.56%)</title><rect x="1074.2" y="179.0" width="30.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.2" y="190.0">ro..</text>
</g>
<g>
<title>write (121 samples, 2.50%)</title><rect x="1074.9" y="163.0" width="29.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1077.9" y="174.0">wr..</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.06%)</title><rect x="1104.3" y="259.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.3" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="1104.6" y="243.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1107.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (37 samples, 0.76%)</title><rect x="1105.3" y="259.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (30 samples, 0.62%)</title><rect x="1106.8" y="243.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.54%)</title><rect x="1107.7" y="227.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1110.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.04%)</title><rect x="1108.0" y="211.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.47%)</title><rect x="1108.5" y="211.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (22 samples, 0.45%)</title><rect x="1108.5" y="195.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.04%)</title><rect x="1109.7" y="179.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.31%)</title><rect x="1110.2" y="179.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.14%)</title><rect x="1112.1" y="163.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="1113.1" y="147.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.1" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="1113.3" y="131.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1116.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (30 samples, 0.62%)</title><rect x="1114.3" y="259.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (23 samples, 0.47%)</title><rect x="1115.8" y="243.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.47%)</title><rect x="1115.8" y="227.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.45%)</title><rect x="1116.0" y="211.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.0" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.08%)</title><rect x="1116.0" y="195.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1119.0" y="206.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.08%)</title><rect x="1116.0" y="179.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1119.0" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.08%)</title><rect x="1116.0" y="163.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1119.0" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="1116.5" y="147.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1119.5" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="1116.5" y="131.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1119.5" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="1116.5" y="115.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1119.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (18 samples, 0.37%)</title><rect x="1117.0" y="195.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.35%)</title><rect x="1117.2" y="179.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="1117.7" y="163.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="1117.7" y="147.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.25%)</title><rect x="1118.5" y="163.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.5" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1118.9" y="147.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1121.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 0.16%)</title><rect x="1119.4" y="147.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="1120.4" y="131.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.4" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="1120.4" y="115.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1123.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (132 samples, 2.72%)</title><rect x="1121.6" y="259.0" width="32.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.6" y="270.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (131 samples, 2.70%)</title><rect x="1121.6" y="243.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.6" y="254.0">ro..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="1122.1" y="227.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.1" y="238.0"></text>
</g>
<g>
<title>xdrrec_ops (127 samples, 2.62%)</title><rect x="1122.6" y="227.0" width="30.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1125.6" y="238.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (14 samples, 0.29%)</title><rect x="1154.0" y="259.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.0" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.12%)</title><rect x="1154.2" y="243.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.12%)</title><rect x="1154.2" y="227.0" width="1.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1157.2" y="238.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (7 samples, 0.14%)</title><rect x="1155.7" y="243.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.7" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (7 samples, 0.14%)</title><rect x="1155.7" y="227.0" width="1.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1158.7" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (7 samples, 0.14%)</title><rect x="1155.7" y="211.0" width="1.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1158.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (88 samples, 1.81%)</title><rect x="1157.4" y="259.0" width="21.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.4" y="270.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (85 samples, 1.75%)</title><rect x="1157.9" y="243.0" width="20.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.9" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (69 samples, 1.42%)</title><rect x="1159.1" y="227.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.1" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (59 samples, 1.22%)</title><rect x="1159.1" y="211.0" width="14.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1162.1" y="222.0"></text>
</g>
<g>
<title>_pthread_cond_wait (10 samples, 0.21%)</title><rect x="1173.5" y="211.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1176.5" y="222.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.21%)</title><rect x="1173.5" y="195.0" width="2.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1176.5" y="206.0"></text>
</g>
<g>
<title>__psynch_mutexwait (10 samples, 0.21%)</title><rect x="1173.5" y="179.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1176.5" y="190.0"></text>
</g>
<g>
<title>xdrrec_ops (10 samples, 0.21%)</title><rect x="1176.1" y="227.0" width="2.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1179.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (24 samples, 0.49%)</title><rect x="1178.8" y="259.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (17 samples, 0.35%)</title><rect x="1179.0" y="243.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.33%)</title><rect x="1179.0" y="227.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1182.0" y="238.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (6 samples, 0.12%)</title><rect x="1183.2" y="243.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (6 samples, 0.12%)</title><rect x="1183.2" y="227.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1186.2" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (6 samples, 0.12%)</title><rect x="1183.2" y="211.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1186.2" y="222.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="1184.9" y="259.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="1186.3" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.3" y="302.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.06%)</title><rect x="1188.3" y="323.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1191.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (3 samples, 0.06%)</title><rect x="1189.3" y="387.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1192.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (3 samples, 0.06%)</title><rect x="1189.3" y="371.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1192.3" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.04%)</title><rect x="1189.5" y="355.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.5" y="366.0"></text>
</g>
</g>
</svg>
