<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1173"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1173"> </text>
<g id="frames">
<g>
<title>all (3,750 samples, 100.00%)</title><rect x="10.0" y="1139.0" width="1180.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="1150.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=25347] (366 samples, 9.76%)</title><rect x="10.0" y="1123.0" width="115.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="1134.0">[NIO Selector ..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.03%)</title><rect x="10.0" y="1107.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="1091.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="1075.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="1059.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.03%)</title><rect x="10.0" y="1043.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>bool TieredThresholdPolicy::call_predicate_helper&lt;(CompLevel)3&gt;(int, int, double, Method*) (1 samples, 0.03%)</title><rect x="10.0" y="1027.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.05%)</title><rect x="10.3" y="1107.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.3" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="10.6" y="1091.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.6" y="1102.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="10.6" y="1075.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="10.9" y="1107.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$83/1668797410.get$Lambda (1 samples, 0.03%)</title><rect x="10.9" y="1091.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.9" y="1102.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (362 samples, 9.65%)</title><rect x="11.3" y="1107.0" width="113.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.3" y="1118.0">one/nio/server..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="11.9" y="1091.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.9" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.05%)</title><rect x="11.9" y="1075.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.9" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="11.9" y="1059.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.9" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="12.2" y="1059.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.2" y="1070.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="12.2" y="1043.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="15.2" y="1054.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="12.2" y="1027.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="15.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.05%)</title><rect x="12.5" y="1091.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.5" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1 samples, 0.03%)</title><rect x="12.8" y="1075.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.8" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.03%)</title><rect x="13.1" y="1091.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.03%)</title><rect x="13.1" y="1075.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.03%)</title><rect x="13.1" y="1059.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (225 samples, 6.00%)</title><rect x="13.5" y="1091.0" width="70.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.5" y="1102.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.11%)</title><rect x="13.5" y="1075.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.11%)</title><rect x="13.5" y="1059.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.11%)</title><rect x="13.5" y="1043.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="13.5" y="1027.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.5" y="1011.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.5" y="995.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.08%)</title><rect x="13.8" y="1027.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.05%)</title><rect x="14.7" y="1075.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.03%)</title><rect x="15.0" y="1059.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.03%)</title><rect x="15.0" y="1043.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="15.0" y="1027.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.0" y="1038.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="15.0" y="1011.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="18.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (219 samples, 5.84%)</title><rect x="15.3" y="1075.0" width="69.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.3" y="1086.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (219 samples, 5.84%)</title><rect x="15.3" y="1059.0" width="69.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.3" y="1070.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (216 samples, 5.76%)</title><rect x="16.3" y="1043.0" width="68.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.3" y="1054.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (213 samples, 5.68%)</title><rect x="16.3" y="1027.0" width="67.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1038.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="18.2" y="1011.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="21.2" y="1022.0"></text>
</g>
<g>
<title>kevent (206 samples, 5.49%)</title><rect x="18.5" y="1011.0" width="64.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="21.5" y="1022.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="83.3" y="1027.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.3" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="83.3" y="1011.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.3" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (1 samples, 0.03%)</title><rect x="83.3" y="995.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="86.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="83.6" y="1027.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="83.6" y="1011.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="83.6" y="995.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="83.6" y="979.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.6" y="990.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="83.6" y="963.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="86.6" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="83.9" y="1027.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.03%)</title><rect x="83.9" y="1011.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (130 samples, 3.47%)</title><rect x="84.3" y="1091.0" width="40.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.3" y="1102.0">one..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="84.3" y="1075.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="87.3" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (127 samples, 3.39%)</title><rect x="84.6" y="1075.0" width="39.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.6" y="1086.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (70 samples, 1.87%)</title><rect x="84.9" y="1059.0" width="22.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.9" y="1070.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (62 samples, 1.65%)</title><rect x="85.5" y="1043.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.5" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (62 samples, 1.65%)</title><rect x="85.5" y="1027.0" width="19.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.5" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.03%)</title><rect x="85.5" y="1011.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="85.5" y="995.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="85.5" y="979.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.5" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.03%)</title><rect x="85.8" y="1011.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="85.8" y="995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="85.8" y="979.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.8" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (60 samples, 1.60%)</title><rect x="86.1" y="1011.0" width="18.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="86.1" y="995.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="86.1" y="979.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="89.1" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (59 samples, 1.57%)</title><rect x="86.5" y="995.0" width="18.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.findMethodHandleType (1 samples, 0.03%)</title><rect x="86.5" y="979.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.5" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType.makeImpl (1 samples, 0.03%)</title><rect x="86.5" y="963.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.5" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType$ConcurrentWeakInternSet.get (1 samples, 0.03%)</title><rect x="86.5" y="947.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.5" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType$ConcurrentWeakInternSet.expungeStaleElements (1 samples, 0.03%)</title><rect x="86.5" y="931.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (1 samples, 0.03%)</title><rect x="86.5" y="915.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (1 samples, 0.03%)</title><rect x="86.5" y="899.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.5" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.03%)</title><rect x="86.5" y="883.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="89.5" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="86.5" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="89.5" y="878.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="86.5" y="851.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="89.5" y="862.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.03%)</title><rect x="86.5" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="89.5" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="86.5" y="819.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="89.5" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="86.5" y="803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="89.5" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="86.5" y="787.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="89.5" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="86.5" y="771.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="89.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.05%)</title><rect x="86.8" y="979.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.8" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="86.8" y="963.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="89.8" y="974.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="87.1" y="963.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.1" y="974.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="87.1" y="947.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.1" y="958.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="87.1" y="931.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.1" y="942.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="87.1" y="915.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.1" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (55 samples, 1.47%)</title><rect x="87.4" y="979.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (55 samples, 1.47%)</title><rect x="87.4" y="963.0" width="17.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (55 samples, 1.47%)</title><rect x="87.4" y="947.0" width="17.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (53 samples, 1.41%)</title><rect x="87.4" y="931.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.16%)</title><rect x="87.4" y="915.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.16%)</title><rect x="87.4" y="899.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.16%)</title><rect x="87.4" y="883.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (6 samples, 0.16%)</title><rect x="87.4" y="867.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (6 samples, 0.16%)</title><rect x="87.4" y="851.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.4" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="89.0" y="835.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (47 samples, 1.25%)</title><rect x="89.3" y="915.0" width="14.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (47 samples, 1.25%)</title><rect x="89.3" y="899.0" width="14.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (47 samples, 1.25%)</title><rect x="89.3" y="883.0" width="14.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (47 samples, 1.25%)</title><rect x="89.3" y="867.0" width="14.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.3" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (47 samples, 1.25%)</title><rect x="89.3" y="851.0" width="14.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="92.3" y="862.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="90.2" y="835.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="93.2" y="846.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (43 samples, 1.15%)</title><rect x="90.6" y="835.0" width="13.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="93.6" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="90.6" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="93.6" y="830.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="90.9" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="93.9" y="830.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="91.2" y="819.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="94.2" y="830.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="91.5" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="94.5" y="830.0"></text>
</g>
<g>
<title>__psynch_cvsignal (34 samples, 0.91%)</title><rect x="91.8" y="819.0" width="10.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="94.8" y="830.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="102.5" y="819.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="105.5" y="830.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="102.5" y="803.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="105.5" y="814.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np (1 samples, 0.03%)</title><rect x="102.8" y="819.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="105.8" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.08%)</title><rect x="103.1" y="819.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="106.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="104.1" y="931.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="104.1" y="915.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="104.1" y="899.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="104.4" y="883.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="107.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="104.4" y="867.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.4" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="104.4" y="851.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.4" y="862.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="104.4" y="835.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="107.4" y="846.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="104.4" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="107.4" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="104.4" y="803.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="107.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Nodes.primaryFor (1 samples, 0.03%)</title><rect x="104.7" y="979.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.7" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="104.7" y="963.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.7" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.16%)</title><rect x="105.0" y="1043.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.0" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.05%)</title><rect x="105.3" y="1027.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="108.3" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.05%)</title><rect x="105.3" y="1011.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.3" y="1022.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.03%)</title><rect x="105.7" y="995.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="108.7" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.08%)</title><rect x="106.0" y="1027.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="109.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="106.3" y="1011.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.3" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (1 samples, 0.03%)</title><rect x="106.6" y="1011.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.6" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (56 samples, 1.49%)</title><rect x="106.9" y="1059.0" width="17.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="109.9" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (56 samples, 1.49%)</title><rect x="106.9" y="1043.0" width="17.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="106.9" y="1027.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="106.9" y="1011.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="109.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="106.9" y="995.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (55 samples, 1.47%)</title><rect x="107.2" y="1027.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.21%)</title><rect x="107.5" y="1011.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.21%)</title><rect x="107.5" y="995.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (8 samples, 0.21%)</title><rect x="107.5" y="979.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (3 samples, 0.08%)</title><rect x="107.9" y="963.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.9" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="108.5" y="947.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (3 samples, 0.08%)</title><rect x="108.8" y="963.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.08%)</title><rect x="108.8" y="947.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="111.8" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (3 samples, 0.08%)</title><rect x="108.8" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.03%)</title><rect x="109.7" y="963.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="112.7" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="109.7" y="947.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (46 samples, 1.23%)</title><rect x="110.1" y="1011.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="113.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (46 samples, 1.23%)</title><rect x="110.1" y="995.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.1" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (45 samples, 1.20%)</title><rect x="110.4" y="979.0" width="14.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="113.4" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (44 samples, 1.17%)</title><rect x="110.7" y="963.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.7" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (44 samples, 1.17%)</title><rect x="110.7" y="947.0" width="13.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.7" y="958.0"></text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.03%)</title><rect x="110.7" y="931.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="113.7" y="942.0"></text>
</g>
<g>
<title>read (43 samples, 1.15%)</title><rect x="111.0" y="931.0" width="13.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="114.0" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="124.5" y="1075.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="127.5" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="124.5" y="1059.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="127.5" y="1070.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="124.5" y="1043.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="127.5" y="1054.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="124.5" y="1027.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="127.5" y="1038.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="124.9" y="1059.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="127.9" y="1070.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=39171] (378 samples, 10.08%)</title><rect x="125.2" y="1123.0" width="118.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="128.2" y="1134.0">[NIO Selector ..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="125.2" y="1107.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="128.2" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="125.2" y="1091.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="128.2" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="125.2" y="1075.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="128.2" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="125.2" y="1059.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="128.2" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="125.2" y="1043.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="128.2" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="125.2" y="1027.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="128.2" y="1038.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="125.2" y="1011.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="128.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="125.5" y="1011.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="128.5" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="125.5" y="995.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="128.5" y="1006.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="125.5" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="128.5" y="990.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.05%)</title><rect x="125.8" y="1107.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="128.8" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="126.1" y="1091.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="129.1" y="1102.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="126.1" y="1075.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="129.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (373 samples, 9.95%)</title><rect x="126.4" y="1107.0" width="117.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="129.4" y="1118.0">one/nio/server..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.13%)</title><rect x="126.4" y="1091.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="129.4" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (5 samples, 0.13%)</title><rect x="126.4" y="1075.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="129.4" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.11%)</title><rect x="126.4" y="1059.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="129.4" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="127.7" y="1059.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="130.7" y="1070.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="127.7" y="1043.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="130.7" y="1054.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (1 samples, 0.03%)</title><rect x="127.7" y="1027.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="130.7" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.05%)</title><rect x="128.0" y="1091.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.0" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (241 samples, 6.43%)</title><rect x="128.6" y="1091.0" width="75.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="131.6" y="1102.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (10 samples, 0.27%)</title><rect x="128.6" y="1075.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="131.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.05%)</title><rect x="128.9" y="1059.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.05%)</title><rect x="128.9" y="1043.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.9" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (7 samples, 0.19%)</title><rect x="129.6" y="1059.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="132.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (7 samples, 0.19%)</title><rect x="129.6" y="1043.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.05%)</title><rect x="130.2" y="1027.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="133.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="130.5" y="1011.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="130.5" y="995.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.08%)</title><rect x="130.8" y="1027.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="133.8" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (11 samples, 0.29%)</title><rect x="131.8" y="1075.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="131.8" y="1059.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (8 samples, 0.21%)</title><rect x="132.1" y="1059.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (6 samples, 0.16%)</title><rect x="132.7" y="1043.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="135.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (4 samples, 0.11%)</title><rect x="132.7" y="1027.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.7" y="1038.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="132.7" y="1011.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="135.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.03%)</title><rect x="133.0" y="1011.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="136.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="133.3" y="1011.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="136.3" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="133.7" y="1011.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="136.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.05%)</title><rect x="134.0" y="1027.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (2 samples, 0.05%)</title><rect x="134.0" y="1011.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="137.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.getSelectableChannel (2 samples, 0.05%)</title><rect x="134.6" y="1059.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="137.6" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (220 samples, 5.87%)</title><rect x="135.2" y="1075.0" width="69.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="138.2" y="1086.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (220 samples, 5.87%)</title><rect x="135.2" y="1059.0" width="69.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="138.2" y="1070.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (217 samples, 5.79%)</title><rect x="136.2" y="1043.0" width="68.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.2" y="1054.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (215 samples, 5.73%)</title><rect x="136.2" y="1027.0" width="67.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.2" y="1038.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.05%)</title><rect x="140.6" y="1011.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="143.6" y="1022.0"></text>
</g>
<g>
<title>kevent (199 samples, 5.31%)</title><rect x="141.2" y="1011.0" width="62.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="144.2" y="1022.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="203.8" y="1027.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.8" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="203.8" y="1011.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="203.8" y="995.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="203.8" y="979.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="203.8" y="963.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.8" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="204.1" y="1027.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="204.1" y="1011.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="204.1" y="995.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="207.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="204.1" y="979.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.1" y="990.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="204.1" y="963.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="207.1" y="974.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="204.1" y="947.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="207.1" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (125 samples, 3.33%)</title><rect x="204.5" y="1091.0" width="39.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.5" y="1102.0">one..</text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.03%)</title><rect x="205.1" y="1075.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="208.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (120 samples, 3.20%)</title><rect x="205.4" y="1075.0" width="37.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.4" y="1086.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (83 samples, 2.21%)</title><rect x="205.4" y="1059.0" width="26.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.4" y="1070.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (71 samples, 1.89%)</title><rect x="206.7" y="1043.0" width="22.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.7" y="1054.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (71 samples, 1.89%)</title><rect x="206.7" y="1027.0" width="22.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="209.7" y="1038.0">o..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (71 samples, 1.89%)</title><rect x="206.7" y="1011.0" width="22.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.7" y="1022.0">r..</text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.05%)</title><rect x="206.7" y="995.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.05%)</title><rect x="206.7" y="979.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.7" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (69 samples, 1.84%)</title><rect x="207.3" y="995.0" width="21.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="210.3" y="1006.0">r..</text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.findMethodHandleType (1 samples, 0.03%)</title><rect x="207.6" y="979.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.6" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType.makeImpl (1 samples, 0.03%)</title><rect x="207.6" y="963.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.6" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType$ConcurrentWeakInternSet.get (1 samples, 0.03%)</title><rect x="207.6" y="947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="210.6" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType$ConcurrentWeakInternSet.expungeStaleElements (1 samples, 0.03%)</title><rect x="207.6" y="931.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (1 samples, 0.03%)</title><rect x="207.6" y="915.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (1 samples, 0.03%)</title><rect x="207.6" y="899.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.6" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.19%)</title><rect x="207.9" y="979.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="208.9" y="963.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.9" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="208.9" y="947.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.9" y="958.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="208.9" y="931.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.9" y="942.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="209.5" y="963.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="212.5" y="974.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="209.8" y="963.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.8" y="974.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="209.8" y="947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="212.8" y="958.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="209.8" y="931.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="209.8" y="915.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.8" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (59 samples, 1.57%)</title><rect x="210.1" y="979.0" width="18.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="213.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (59 samples, 1.57%)</title><rect x="210.1" y="963.0" width="18.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (59 samples, 1.57%)</title><rect x="210.1" y="947.0" width="18.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (59 samples, 1.57%)</title><rect x="210.1" y="931.0" width="18.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.16%)</title><rect x="210.1" y="915.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.16%)</title><rect x="210.1" y="899.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.16%)</title><rect x="210.1" y="883.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (6 samples, 0.16%)</title><rect x="210.1" y="867.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (6 samples, 0.16%)</title><rect x="210.1" y="851.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.1" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="211.4" y="835.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="214.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="212.0" y="915.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="212.0" y="899.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="215.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="212.0" y="883.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="212.0" y="867.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="212.0" y="851.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.0" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="212.0" y="835.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.0" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="212.0" y="819.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (52 samples, 1.39%)</title><rect x="212.3" y="915.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (52 samples, 1.39%)</title><rect x="212.3" y="899.0" width="16.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (52 samples, 1.39%)</title><rect x="212.3" y="883.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (52 samples, 1.39%)</title><rect x="212.3" y="867.0" width="16.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.3" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (52 samples, 1.39%)</title><rect x="212.3" y="851.0" width="16.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.3" y="862.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.05%)</title><rect x="214.2" y="835.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="217.2" y="846.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (43 samples, 1.15%)</title><rect x="214.8" y="835.0" width="13.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="217.8" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.05%)</title><rect x="214.8" y="819.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="217.8" y="830.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="215.2" y="803.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="218.2" y="814.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="215.2" y="787.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="218.2" y="798.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="215.2" y="771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="218.2" y="782.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="215.5" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="218.5" y="830.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="215.8" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="218.8" y="830.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="215.8" y="803.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="218.8" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::ThreadStateTransition(JavaThread*) (1 samples, 0.03%)</title><rect x="216.1" y="819.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="219.1" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="216.4" y="819.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="219.4" y="830.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="216.4" y="803.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="219.4" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.08%)</title><rect x="216.7" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="219.7" y="830.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="217.1" y="803.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="220.1" y="814.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="217.4" y="803.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="220.4" y="814.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="217.7" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.7" y="830.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="217.7" y="803.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="220.7" y="814.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="218.0" y="819.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="221.0" y="830.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="218.0" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="221.0" y="814.0"></text>
</g>
<g>
<title>__psynch_cvsignal (31 samples, 0.83%)</title><rect x="218.3" y="819.0" width="9.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="221.3" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="228.1" y="819.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="231.1" y="830.0"></text>
</g>
<g>
<title>os::verify_stack_alignment() (1 samples, 0.03%)</title><rect x="228.4" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="231.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Nodes.primaryFor (1 samples, 0.03%)</title><rect x="228.7" y="979.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.7" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="228.7" y="963.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.7" y="974.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.03%)</title><rect x="228.7" y="947.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.7" y="958.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8 samples, 0.21%)</title><rect x="229.0" y="1043.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.0" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.16%)</title><rect x="229.0" y="1027.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.0" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.16%)</title><rect x="229.0" y="1011.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.05%)</title><rect x="230.9" y="1027.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.9" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (37 samples, 0.99%)</title><rect x="231.5" y="1059.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.5" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 0.99%)</title><rect x="231.5" y="1043.0" width="11.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.5" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (37 samples, 0.99%)</title><rect x="231.5" y="1027.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.11%)</title><rect x="231.5" y="1011.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.11%)</title><rect x="231.5" y="995.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.08%)</title><rect x="231.5" y="979.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="234.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.03%)</title><rect x="231.8" y="963.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="231.8" y="947.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.8" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.03%)</title><rect x="231.8" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.8" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="232.2" y="963.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="235.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="232.5" y="979.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="232.5" y="963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="232.5" y="947.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.5" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 0.88%)</title><rect x="232.8" y="1011.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.8" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 0.88%)</title><rect x="232.8" y="995.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.8" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (33 samples, 0.88%)</title><rect x="232.8" y="979.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.8" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (33 samples, 0.88%)</title><rect x="232.8" y="963.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.8" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (33 samples, 0.88%)</title><rect x="232.8" y="947.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.8" y="958.0"></text>
</g>
<g>
<title>read (33 samples, 0.88%)</title><rect x="232.8" y="931.0" width="10.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="235.8" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="243.2" y="1075.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="246.2" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="243.2" y="1059.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="246.2" y="1070.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="243.2" y="1043.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="246.2" y="1054.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="243.2" y="1027.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="246.2" y="1038.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="243.5" y="1059.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="246.5" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="243.8" y="1107.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="246.8" y="1118.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=26115] (620 samples, 16.53%)</title><rect x="244.1" y="1123.0" width="195.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="247.1" y="1134.0">[NIO Selector #2 tid=26115]</text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.16%)</title><rect x="244.1" y="1107.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="247.1" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.08%)</title><rect x="245.1" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="248.1" y="1102.0"></text>
</g>
<g>
<title>_res (3 samples, 0.08%)</title><rect x="245.1" y="1075.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="248.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (614 samples, 16.37%)</title><rect x="246.0" y="1107.0" width="193.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.0" y="1118.0">one/nio/server/SelectorTh..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="246.9" y="1091.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="249.9" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="246.9" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="249.9" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="246.9" y="1059.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="249.9" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.03%)</title><rect x="247.3" y="1091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.3" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.03%)</title><rect x="247.3" y="1075.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.3" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (387 samples, 10.32%)</title><rect x="247.6" y="1091.0" width="121.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.6" y="1102.0">one/nio/net/Jav..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.11%)</title><rect x="247.9" y="1075.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.05%)</title><rect x="248.2" y="1059.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.03%)</title><rect x="248.5" y="1043.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="251.5" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.03%)</title><rect x="248.8" y="1059.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="248.8" y="1043.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.03%)</title><rect x="248.8" y="1027.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.8" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (12 samples, 0.32%)</title><rect x="249.1" y="1075.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="249.5" y="1059.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (10 samples, 0.27%)</title><rect x="249.8" y="1059.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (9 samples, 0.24%)</title><rect x="250.1" y="1043.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (6 samples, 0.16%)</title><rect x="250.1" y="1027.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (4 samples, 0.11%)</title><rect x="250.1" y="1011.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.1" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="251.3" y="1011.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="254.3" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="251.7" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="254.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.08%)</title><rect x="252.0" y="1027.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (3 samples, 0.08%)</title><rect x="252.0" y="1011.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.03%)</title><rect x="252.6" y="995.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.6" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (368 samples, 9.81%)</title><rect x="252.9" y="1075.0" width="115.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.9" y="1086.0">sun/nio/ch/Sel..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (368 samples, 9.81%)</title><rect x="252.9" y="1059.0" width="115.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.9" y="1070.0">sun/nio/ch/Sel..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (362 samples, 9.65%)</title><rect x="254.8" y="1043.0" width="113.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="257.8" y="1054.0">sun/nio/ch/KQu..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (356 samples, 9.49%)</title><rect x="254.8" y="1027.0" width="112.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.8" y="1038.0">sun/nio/ch/KQu..</text>
</g>
<g>
<title>kevent (346 samples, 9.23%)</title><rect x="258.0" y="1011.0" width="108.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="261.0" y="1022.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.08%)</title><rect x="366.8" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.8" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.08%)</title><rect x="366.8" y="1011.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.08%)</title><rect x="366.8" y="995.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.08%)</title><rect x="366.8" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.08%)</title><rect x="366.8" y="963.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.8" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.08%)</title><rect x="367.8" y="1027.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.8" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.08%)</title><rect x="367.8" y="1011.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.8" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1 samples, 0.03%)</title><rect x="368.4" y="995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.4" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (2 samples, 0.05%)</title><rect x="368.7" y="1075.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="371.7" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (222 samples, 5.92%)</title><rect x="369.3" y="1091.0" width="69.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.3" y="1102.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (214 samples, 5.71%)</title><rect x="370.6" y="1075.0" width="67.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="373.6" y="1086.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (147 samples, 3.92%)</title><rect x="370.6" y="1059.0" width="46.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.6" y="1070.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (126 samples, 3.36%)</title><rect x="372.5" y="1043.0" width="39.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="375.5" y="1054.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (126 samples, 3.36%)</title><rect x="372.5" y="1027.0" width="39.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.5" y="1038.0">one..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.05%)</title><rect x="372.8" y="1011.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="373.1" y="995.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="376.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="373.1" y="979.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.1" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="373.1" y="963.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.1" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5 samples, 0.13%)</title><rect x="373.4" y="1011.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.11%)</title><rect x="373.8" y="995.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="376.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.11%)</title><rect x="373.8" y="979.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.8" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="374.7" y="963.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="377.7" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (118 samples, 3.15%)</title><rect x="375.0" y="1011.0" width="37.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.0" y="1022.0">ru/..</text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.08%)</title><rect x="375.0" y="995.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="375.6" y="979.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.6" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.05%)</title><rect x="376.0" y="995.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="376.0" y="979.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.0" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="376.0" y="963.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.0" y="974.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="376.0" y="947.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.0" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="376.3" y="947.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.3" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (113 samples, 3.01%)</title><rect x="376.6" y="995.0" width="35.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="379.6" y="1006.0">ru/..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="376.6" y="979.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="379.6" y="990.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.03%)</title><rect x="376.6" y="963.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.6" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title><rect x="376.9" y="979.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.9" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title><rect x="376.9" y="963.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.9" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="376.9" y="947.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.9" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="376.9" y="931.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="379.9" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.13%)</title><rect x="377.5" y="979.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.5" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="377.8" y="963.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="380.8" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="377.8" y="947.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="380.8" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="377.8" y="931.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="380.8" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="377.8" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="380.8" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="377.8" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="380.8" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="377.8" y="883.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="380.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="378.2" y="963.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="381.2" y="974.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="378.5" y="963.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.5" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="378.5" y="947.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.5" y="958.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="378.8" y="931.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.8" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (105 samples, 2.80%)</title><rect x="379.1" y="979.0" width="33.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.1" y="990.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (105 samples, 2.80%)</title><rect x="379.1" y="963.0" width="33.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.1" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (104 samples, 2.77%)</title><rect x="379.4" y="947.0" width="32.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="382.4" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (102 samples, 2.72%)</title><rect x="379.4" y="931.0" width="32.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="382.4" y="942.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (9 samples, 0.24%)</title><rect x="379.4" y="915.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="382.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (9 samples, 0.24%)</title><rect x="379.4" y="899.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (9 samples, 0.24%)</title><rect x="379.4" y="883.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (9 samples, 0.24%)</title><rect x="379.4" y="867.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (9 samples, 0.24%)</title><rect x="379.4" y="851.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.4" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="381.9" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="384.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (93 samples, 2.48%)</title><rect x="382.3" y="915.0" width="29.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.3" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (93 samples, 2.48%)</title><rect x="382.3" y="899.0" width="29.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="385.3" y="910.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (92 samples, 2.45%)</title><rect x="382.6" y="883.0" width="28.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.6" y="894.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (92 samples, 2.45%)</title><rect x="382.6" y="867.0" width="28.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.6" y="878.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (92 samples, 2.45%)</title><rect x="382.6" y="851.0" width="28.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.6" y="862.0">jd..</text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.05%)</title><rect x="383.8" y="835.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="386.8" y="846.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="384.5" y="835.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="387.5" y="846.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="384.8" y="835.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="387.8" y="846.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (84 samples, 2.24%)</title><rect x="385.1" y="835.0" width="26.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="388.1" y="846.0">U..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="385.1" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="388.1" y="830.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="385.1" y="803.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="388.1" y="814.0"></text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (1 samples, 0.03%)</title><rect x="385.4" y="819.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="388.4" y="830.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.05%)</title><rect x="385.7" y="819.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="388.7" y="830.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.05%)</title><rect x="385.7" y="803.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="388.7" y="814.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.05%)</title><rect x="385.7" y="787.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="388.7" y="798.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="385.7" y="771.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="388.7" y="782.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="385.7" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="388.7" y="766.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="386.0" y="771.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="389.0" y="782.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.03%)</title><rect x="386.3" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="389.3" y="830.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="386.7" y="819.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="389.7" y="830.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="387.0" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="390.0" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="387.0" y="803.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="390.0" y="814.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="387.3" y="819.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="390.3" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="387.6" y="819.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="390.6" y="830.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="387.6" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="390.6" y="814.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="387.6" y="787.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="390.6" y="798.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.03%)</title><rect x="387.6" y="771.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="390.6" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="387.9" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="390.9" y="830.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="387.9" y="803.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="390.9" y="814.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.13%)</title><rect x="388.2" y="819.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="391.2" y="830.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.03%)</title><rect x="389.5" y="803.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="392.5" y="814.0"></text>
</g>
<g>
<title>__psynch_cvsignal (62 samples, 1.65%)</title><rect x="389.8" y="819.0" width="19.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="392.8" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="409.3" y="819.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="412.3" y="830.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.08%)</title><rect x="409.6" y="819.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="412.6" y="830.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.05%)</title><rect x="409.9" y="803.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="412.9" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.08%)</title><rect x="410.6" y="819.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="413.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.05%)</title><rect x="411.5" y="931.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="411.8" y="915.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="414.8" y="926.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.27%)</title><rect x="412.1" y="1043.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.1" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="412.5" y="1027.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="412.5" y="1011.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="415.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="412.5" y="995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="412.5" y="979.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="415.5" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.13%)</title><rect x="412.8" y="1027.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="415.8" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.13%)</title><rect x="412.8" y="1011.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="415.8" y="1022.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.03%)</title><rect x="414.0" y="995.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.0" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.08%)</title><rect x="414.3" y="1027.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="417.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="414.7" y="1011.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="417.7" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="415.3" y="1043.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="415.3" y="1027.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="415.3" y="1011.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="418.3" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.08%)</title><rect x="415.9" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="418.9" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.08%)</title><rect x="415.9" y="1027.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.9" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (67 samples, 1.79%)</title><rect x="416.9" y="1059.0" width="21.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.9" y="1070.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (67 samples, 1.79%)</title><rect x="416.9" y="1043.0" width="21.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.9" y="1054.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (67 samples, 1.79%)</title><rect x="416.9" y="1027.0" width="21.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="419.9" y="1038.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.16%)</title><rect x="417.5" y="1011.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="420.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.16%)</title><rect x="417.5" y="995.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="420.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (6 samples, 0.16%)</title><rect x="417.5" y="979.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="420.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="417.8" y="963.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.05%)</title><rect x="418.1" y="963.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="421.1" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.05%)</title><rect x="418.1" y="947.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="421.1" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.05%)</title><rect x="418.1" y="931.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="421.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.03%)</title><rect x="418.8" y="963.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="418.8" y="947.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="421.8" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="418.8" y="931.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="421.8" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="419.1" y="963.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="422.1" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (59 samples, 1.57%)</title><rect x="419.4" y="1011.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.4" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (59 samples, 1.57%)</title><rect x="419.4" y="995.0" width="18.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="422.4" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (58 samples, 1.55%)</title><rect x="419.4" y="979.0" width="18.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.4" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (58 samples, 1.55%)</title><rect x="419.4" y="963.0" width="18.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.4" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (58 samples, 1.55%)</title><rect x="419.4" y="947.0" width="18.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.4" y="958.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.05%)</title><rect x="420.3" y="931.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="423.3" y="942.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.05%)</title><rect x="420.3" y="915.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="423.3" y="926.0"></text>
</g>
<g>
<title>read (53 samples, 1.41%)</title><rect x="421.0" y="931.0" width="16.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="424.0" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="437.6" y="979.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="440.6" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="437.6" y="963.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.6" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.11%)</title><rect x="437.9" y="1075.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="440.9" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="437.9" y="1059.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="440.9" y="1070.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.08%)</title><rect x="438.3" y="1059.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="441.3" y="1070.0"></text>
</g>
<g>
<title>[tid=12035] (3 samples, 0.08%)</title><rect x="439.2" y="1123.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="442.2" y="1134.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.08%)</title><rect x="439.2" y="1107.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="442.2" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.08%)</title><rect x="439.2" y="1091.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="442.2" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.08%)</title><rect x="439.2" y="1075.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="442.2" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.08%)</title><rect x="439.2" y="1059.0" width="0.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="442.2" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.08%)</title><rect x="439.2" y="1043.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="442.2" y="1054.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.08%)</title><rect x="439.2" y="1027.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="442.2" y="1038.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.05%)</title><rect x="439.2" y="1011.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="442.2" y="1022.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.05%)</title><rect x="439.2" y="995.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="442.2" y="1006.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.03%)</title><rect x="439.8" y="1011.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="442.8" y="1022.0"></text>
</g>
<g>
<title>[tid=19203] (6 samples, 0.16%)</title><rect x="440.1" y="1123.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="443.1" y="1134.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.16%)</title><rect x="440.1" y="1107.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="443.1" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.16%)</title><rect x="440.1" y="1091.0" width="1.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="443.1" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.16%)</title><rect x="440.1" y="1075.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="443.1" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.16%)</title><rect x="440.1" y="1059.0" width="1.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="443.1" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.16%)</title><rect x="440.1" y="1043.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="443.1" y="1054.0"></text>
</g>
<g>
<title>VMThread::run() (6 samples, 0.16%)</title><rect x="440.1" y="1027.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="443.1" y="1038.0"></text>
</g>
<g>
<title>VMThread::loop() (6 samples, 0.16%)</title><rect x="440.1" y="1011.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="443.1" y="1022.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.08%)</title><rect x="440.1" y="995.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="443.1" y="1006.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.08%)</title><rect x="440.1" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="443.1" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.08%)</title><rect x="440.1" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="443.1" y="974.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="440.1" y="947.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="443.1" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.08%)</title><rect x="441.1" y="995.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="444.1" y="1006.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.05%)</title><rect x="441.4" y="979.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="444.4" y="990.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::ParallelSPCleanupTask(unsigned int, DeflateMonitorCounters*) (1 samples, 0.03%)</title><rect x="441.4" y="963.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="444.4" y="974.0"></text>
</g>
<g>
<title>SubTasksDone::SubTasksDone(unsigned int) (1 samples, 0.03%)</title><rect x="441.4" y="947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="444.4" y="958.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="441.4" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="444.4" y="942.0"></text>
</g>
<g>
<title>MallocTracker::record_malloc(void*, unsigned long, MemoryType, NativeCallStack const&amp;, NMT_TrackingLevel) (1 samples, 0.03%)</title><rect x="441.4" y="915.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="444.4" y="926.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.03%)</title><rect x="441.7" y="963.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="444.7" y="974.0"></text>
</g>
<g>
<title>[tid=19971] (2 samples, 0.05%)</title><rect x="442.0" y="1123.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="445.0" y="1134.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.05%)</title><rect x="442.0" y="1107.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="445.0" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.05%)</title><rect x="442.0" y="1091.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="445.0" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.05%)</title><rect x="442.0" y="1075.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="445.0" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.05%)</title><rect x="442.0" y="1059.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="445.0" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.05%)</title><rect x="442.0" y="1043.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="445.0" y="1054.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.05%)</title><rect x="442.0" y="1027.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="445.0" y="1038.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.05%)</title><rect x="442.0" y="1011.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="445.0" y="1022.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.03%)</title><rect x="442.0" y="995.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="445.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="442.0" y="979.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="445.0" y="990.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="442.0" y="963.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="445.0" y="974.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="442.0" y="947.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="445.0" y="958.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.03%)</title><rect x="442.0" y="931.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="445.0" y="942.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.03%)</title><rect x="442.0" y="915.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="445.0" y="926.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.03%)</title><rect x="442.4" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="445.4" y="1006.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="442.4" y="979.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="445.4" y="990.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="442.4" y="963.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="445.4" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="442.4" y="947.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="445.4" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="442.4" y="931.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="445.4" y="942.0"></text>
</g>
<g>
<title>[tid=22019] (196 samples, 5.23%)</title><rect x="442.7" y="1123.0" width="61.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="445.7" y="1134.0">[tid=2..</text>
</g>
<g>
<title>thread_start (196 samples, 5.23%)</title><rect x="442.7" y="1107.0" width="61.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="445.7" y="1118.0">thread..</text>
</g>
<g>
<title>_pthread_start (196 samples, 5.23%)</title><rect x="442.7" y="1091.0" width="61.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="445.7" y="1102.0">_pthre..</text>
</g>
<g>
<title>_pthread_body (196 samples, 5.23%)</title><rect x="442.7" y="1075.0" width="61.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="445.7" y="1086.0">_pthre..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (196 samples, 5.23%)</title><rect x="442.7" y="1059.0" width="61.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="445.7" y="1070.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (196 samples, 5.23%)</title><rect x="442.7" y="1043.0" width="61.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="445.7" y="1054.0">Thread..</text>
</g>
<g>
<title>JavaThread::run() (196 samples, 5.23%)</title><rect x="442.7" y="1027.0" width="61.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="445.7" y="1038.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (196 samples, 5.23%)</title><rect x="442.7" y="1011.0" width="61.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="445.7" y="1022.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (196 samples, 5.23%)</title><rect x="442.7" y="995.0" width="61.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="445.7" y="1006.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (195 samples, 5.20%)</title><rect x="442.7" y="979.0" width="61.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="445.7" y="990.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (195 samples, 5.20%)</title><rect x="442.7" y="963.0" width="61.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="445.7" y="974.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (195 samples, 5.20%)</title><rect x="442.7" y="947.0" width="61.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="445.7" y="958.0">Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.03%)</title><rect x="442.7" y="931.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="445.7" y="942.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="442.7" y="915.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="445.7" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="442.7" y="899.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="445.7" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="442.7" y="883.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="445.7" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="442.7" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="445.7" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="442.7" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="445.7" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="442.7" y="835.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="445.7" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="442.7" y="819.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="445.7" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="442.7" y="803.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="445.7" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="442.7" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="445.7" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="442.7" y="771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="445.7" y="782.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.03%)</title><rect x="442.7" y="755.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="445.7" y="766.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="442.7" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="445.7" y="750.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="442.7" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="445.7" y="734.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="442.7" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="445.7" y="718.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="442.7" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="445.7" y="702.0"></text>
</g>
<g>
<title>Reflection::verify_member_access(Klass const*, Klass const*, Klass const*, AccessFlags, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="442.7" y="675.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="445.7" y="686.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="442.7" y="659.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="445.7" y="670.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (113 samples, 3.01%)</title><rect x="443.0" y="931.0" width="35.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="446.0" y="942.0">Com..</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.16%)</title><rect x="443.0" y="915.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="446.0" y="926.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (5 samples, 0.13%)</title><rect x="443.0" y="899.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="446.0" y="910.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.03%)</title><rect x="444.2" y="883.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="447.2" y="894.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.03%)</title><rect x="444.6" y="899.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="447.6" y="910.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.03%)</title><rect x="444.6" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="447.6" y="894.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.03%)</title><rect x="444.6" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="447.6" y="878.0"></text>
</g>
<g>
<title>MachPrologNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="444.6" y="851.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="447.6" y="862.0"></text>
</g>
<g>
<title>MacroAssembler::verified_entry(int, int, bool, bool) (1 samples, 0.03%)</title><rect x="444.6" y="835.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="447.6" y="846.0"></text>
</g>
<g>
<title>AbstractAssembler::generate_stack_overflow_check(int) (1 samples, 0.03%)</title><rect x="444.6" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="447.6" y="830.0"></text>
</g>
<g>
<title>Assembler::movl(Address, RegisterImpl*) (1 samples, 0.03%)</title><rect x="444.6" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="447.6" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.13%)</title><rect x="444.9" y="915.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="447.9" y="926.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.03%)</title><rect x="445.5" y="899.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="448.5" y="910.0"></text>
</g>
<g>
<title>convI2L_reg_regNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="445.8" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="448.8" y="910.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*) const (1 samples, 0.03%)</title><rect x="445.8" y="883.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="448.8" y="894.0"></text>
</g>
<g>
<title>indOffset32Oper::disp(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.03%)</title><rect x="446.1" y="899.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="449.1" y="910.0"></text>
</g>
<g>
<title>Matcher::Matcher() (1 samples, 0.03%)</title><rect x="446.4" y="915.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="449.4" y="926.0"></text>
</g>
<g>
<title>Arena::Arena(MemoryType, unsigned long) (1 samples, 0.03%)</title><rect x="446.4" y="899.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="449.4" y="910.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="446.4" y="883.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="449.4" y="894.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.16%)</title><rect x="446.8" y="915.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="449.8" y="926.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.03%)</title><rect x="446.8" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="449.8" y="910.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.03%)</title><rect x="447.1" y="899.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="450.1" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.11%)</title><rect x="447.4" y="899.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="450.4" y="910.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.03%)</title><rect x="447.4" y="883.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="450.4" y="894.0"></text>
</g>
<g>
<title>LoadNode::bottom_type() const (1 samples, 0.03%)</title><rect x="447.7" y="883.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="450.7" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.05%)</title><rect x="448.0" y="883.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="451.0" y="894.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.03%)</title><rect x="448.6" y="915.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="451.6" y="926.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.03%)</title><rect x="448.6" y="899.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="451.6" y="910.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.03%)</title><rect x="448.6" y="883.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="451.6" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.05%)</title><rect x="449.0" y="915.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="452.0" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (2 samples, 0.05%)</title><rect x="449.0" y="899.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="452.0" y="910.0"></text>
</g>
<g>
<title>Block::Block(Arena*, Node*) (2 samples, 0.05%)</title><rect x="449.0" y="883.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="452.0" y="894.0"></text>
</g>
<g>
<title>Block_Array::Block_Array(Arena*) (1 samples, 0.03%)</title><rect x="449.3" y="867.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="452.3" y="878.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="449.3" y="851.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="452.3" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (14 samples, 0.37%)</title><rect x="449.6" y="915.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="452.6" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (14 samples, 0.37%)</title><rect x="449.6" y="899.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="452.6" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.05%)</title><rect x="449.6" y="883.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="452.6" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.08%)</title><rect x="450.2" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="453.2" y="894.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.05%)</title><rect x="450.2" y="867.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="453.2" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.03%)</title><rect x="450.8" y="867.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="453.8" y="878.0"></text>
</g>
<g>
<title>TypeRawPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="450.8" y="851.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="453.8" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.05%)</title><rect x="451.2" y="883.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="454.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_exit_block_pressure(Block*) (1 samples, 0.03%)</title><rect x="451.5" y="867.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="454.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="451.5" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="454.5" y="862.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="451.5" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="454.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.05%)</title><rect x="451.8" y="883.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="454.8" y="894.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.03%)</title><rect x="451.8" y="867.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="454.8" y="878.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.03%)</title><rect x="452.1" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="455.1" y="878.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="452.1" y="851.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="455.1" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (1 samples, 0.03%)</title><rect x="452.4" y="883.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="455.4" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.11%)</title><rect x="452.7" y="883.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="455.7" y="894.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.03%)</title><rect x="453.1" y="867.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="456.1" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.03%)</title><rect x="453.4" y="867.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="456.4" y="878.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="453.4" y="851.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="456.4" y="862.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="453.4" y="835.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="456.4" y="846.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.03%)</title><rect x="453.4" y="819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="456.4" y="830.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.03%)</title><rect x="453.7" y="867.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="456.7" y="878.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.03%)</title><rect x="453.7" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="456.7" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (78 samples, 2.08%)</title><rect x="454.0" y="915.0" width="24.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="457.0" y="926.0">P..</text>
</g>
<g>
<title>LRG::score() const (1 samples, 0.03%)</title><rect x="454.0" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="457.0" y="910.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.03%)</title><rect x="454.3" y="899.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="457.3" y="910.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.05%)</title><rect x="454.6" y="899.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="457.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.13%)</title><rect x="455.3" y="899.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="458.3" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.08%)</title><rect x="455.3" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="458.3" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.05%)</title><rect x="456.2" y="883.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="459.2" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="456.2" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="459.2" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="456.5" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="459.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.03%)</title><rect x="456.8" y="899.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="459.8" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.03%)</title><rect x="456.8" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="459.8" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="456.8" y="867.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="459.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.29%)</title><rect x="457.1" y="899.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="460.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 0.35%)</title><rect x="460.6" y="899.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="463.6" y="910.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.03%)</title><rect x="461.9" y="883.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="464.9" y="894.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="461.9" y="867.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="464.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.05%)</title><rect x="462.2" y="883.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="465.2" y="894.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.03%)</title><rect x="462.5" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="465.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.05%)</title><rect x="462.8" y="883.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="465.8" y="894.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="462.8" y="867.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="465.8" y="878.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="462.8" y="851.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="465.8" y="862.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="463.1" y="867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="466.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="463.4" y="883.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="466.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.08%)</title><rect x="463.7" y="883.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="466.7" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.05%)</title><rect x="463.7" y="867.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="466.7" y="878.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.03%)</title><rect x="464.4" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="467.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.08%)</title><rect x="464.7" y="899.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="467.7" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="464.7" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="467.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.05%)</title><rect x="465.0" y="883.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="468.0" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.03%)</title><rect x="465.6" y="899.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="468.6" y="910.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.03%)</title><rect x="465.6" y="883.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="468.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.21%)</title><rect x="466.0" y="899.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="469.0" y="910.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (2 samples, 0.05%)</title><rect x="467.2" y="883.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="470.2" y="894.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.03%)</title><rect x="467.8" y="883.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="470.8" y="894.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.03%)</title><rect x="468.2" y="883.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="471.2" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="468.2" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="471.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (12 samples, 0.32%)</title><rect x="468.5" y="899.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="471.5" y="910.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="470.4" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="473.4" y="894.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="470.4" y="867.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="473.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.11%)</title><rect x="470.7" y="883.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="473.7" y="894.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.03%)</title><rect x="471.9" y="883.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="474.9" y="894.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.03%)</title><rect x="471.9" y="867.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="474.9" y="878.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.11%)</title><rect x="472.2" y="899.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="475.2" y="910.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.03%)</title><rect x="472.2" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="475.2" y="894.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.03%)</title><rect x="472.2" y="867.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="475.2" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.08%)</title><rect x="472.6" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="475.6" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.05%)</title><rect x="472.9" y="867.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="475.9" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.05%)</title><rect x="472.9" y="851.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="475.9" y="862.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.05%)</title><rect x="472.9" y="835.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="475.9" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.05%)</title><rect x="473.5" y="899.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="476.5" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.05%)</title><rect x="473.5" y="883.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="476.5" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="473.5" y="867.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="476.5" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="473.8" y="867.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="476.8" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.05%)</title><rect x="474.1" y="899.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="477.1" y="910.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="474.1" y="883.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="477.1" y="894.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="474.1" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="477.1" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="474.4" y="883.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="477.4" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.03%)</title><rect x="474.8" y="899.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="477.8" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.29%)</title><rect x="475.1" y="899.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="478.1" y="910.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.03%)</title><rect x="476.7" y="883.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="479.7" y="894.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="476.7" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="479.7" y="878.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="476.7" y="851.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="479.7" y="862.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="477.0" y="883.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="480.0" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="477.3" y="883.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="480.3" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.08%)</title><rect x="477.6" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="480.6" y="894.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.05%)</title><rect x="477.9" y="867.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="480.9" y="878.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="478.2" y="851.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="481.2" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (53 samples, 1.41%)</title><rect x="478.5" y="931.0" width="16.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="481.5" y="942.0"></text>
</g>
<g>
<title>CallNode::bottom_type() const (1 samples, 0.03%)</title><rect x="478.5" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="481.5" y="926.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (16 samples, 0.43%)</title><rect x="478.9" y="915.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="481.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (16 samples, 0.43%)</title><rect x="478.9" y="899.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="481.9" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.05%)</title><rect x="478.9" y="883.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="481.9" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="478.9" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="481.9" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="478.9" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="481.9" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="478.9" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="481.9" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="478.9" y="819.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="481.9" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="478.9" y="803.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="481.9" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="478.9" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="481.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.03%)</title><rect x="478.9" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="481.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="478.9" y="755.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="481.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.03%)</title><rect x="478.9" y="739.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="481.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.03%)</title><rect x="478.9" y="723.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="481.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.03%)</title><rect x="479.2" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="482.2" y="878.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.03%)</title><rect x="479.2" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="482.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.03%)</title><rect x="479.5" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="482.5" y="894.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.03%)</title><rect x="479.5" y="867.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="482.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.03%)</title><rect x="479.8" y="883.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="482.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.16%)</title><rect x="480.1" y="883.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="483.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (6 samples, 0.16%)</title><rect x="480.1" y="867.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="483.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.05%)</title><rect x="480.1" y="851.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="483.1" y="862.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="480.1" y="835.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="483.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.03%)</title><rect x="480.4" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="483.4" y="846.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="480.4" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="483.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.11%)</title><rect x="480.7" y="851.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="483.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.11%)</title><rect x="480.7" y="835.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="483.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (4 samples, 0.11%)</title><rect x="480.7" y="819.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="483.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (4 samples, 0.11%)</title><rect x="480.7" y="803.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="483.7" y="814.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (3 samples, 0.08%)</title><rect x="481.1" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="484.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.05%)</title><rect x="482.0" y="883.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="485.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.05%)</title><rect x="482.0" y="867.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="485.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.05%)</title><rect x="482.6" y="883.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="485.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.03%)</title><rect x="482.6" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="485.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.03%)</title><rect x="482.9" y="867.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="485.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.03%)</title><rect x="482.9" y="851.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="485.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.03%)</title><rect x="482.9" y="835.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="485.9" y="846.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="482.9" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="485.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.03%)</title><rect x="483.3" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="486.3" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.03%)</title><rect x="483.3" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="486.3" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="483.3" y="851.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="486.3" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="483.3" y="835.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="486.3" y="846.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="483.3" y="819.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="486.3" y="830.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="483.3" y="803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="486.3" y="814.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="483.3" y="787.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="486.3" y="798.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.03%)</title><rect x="483.3" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="486.3" y="782.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.03%)</title><rect x="483.3" y="755.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="486.3" y="766.0"></text>
</g>
<g>
<title>SuperWord::transform_loop(IdealLoopTree*, bool) (1 samples, 0.03%)</title><rect x="483.6" y="883.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="486.6" y="894.0"></text>
</g>
<g>
<title>SuperWord::SLP_extract() (1 samples, 0.03%)</title><rect x="483.6" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="486.6" y="878.0"></text>
</g>
<g>
<title>SuperWord::dependence_graph() (1 samples, 0.03%)</title><rect x="483.6" y="851.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="486.6" y="862.0"></text>
</g>
<g>
<title>DepGraph::make_node(Node*) (1 samples, 0.03%)</title><rect x="483.6" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="486.6" y="846.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="483.6" y="819.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="486.6" y="830.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="483.6" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="486.6" y="814.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.03%)</title><rect x="483.6" y="787.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="486.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.08%)</title><rect x="483.9" y="915.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="486.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.08%)</title><rect x="483.9" y="899.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="486.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="483.9" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="486.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.03%)</title><rect x="483.9" y="867.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="486.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.03%)</title><rect x="484.2" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="487.2" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.03%)</title><rect x="484.2" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="487.2" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.03%)</title><rect x="484.2" y="851.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="487.2" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.03%)</title><rect x="484.2" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="487.2" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.03%)</title><rect x="484.2" y="819.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="487.2" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.2" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="487.2" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="484.2" y="787.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="487.2" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="484.2" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="487.2" y="782.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.03%)</title><rect x="484.2" y="755.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="487.2" y="766.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="484.2" y="739.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="487.2" y="750.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="484.2" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="487.2" y="734.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="484.2" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="487.2" y="718.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="484.2" y="691.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="487.2" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="484.2" y="675.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="487.2" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="484.2" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="487.2" y="670.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="484.2" y="643.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="487.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="487.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="487.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="851.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="487.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="487.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="487.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="803.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="487.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="787.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="487.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="487.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="487.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.03%)</title><rect x="484.5" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="487.5" y="750.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.03%)</title><rect x="484.5" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="487.5" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.05%)</title><rect x="484.8" y="915.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="487.8" y="926.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="484.8" y="899.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="487.8" y="910.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.03%)</title><rect x="485.1" y="899.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="488.1" y="910.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="485.1" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="488.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (19 samples, 0.51%)</title><rect x="485.5" y="915.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="488.5" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="485.5" y="899.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="488.5" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="485.5" y="883.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="488.5" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="485.5" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="488.5" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="485.5" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="488.5" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="485.5" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="488.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_maximally_unroll(IdealLoopTree*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="485.5" y="819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="488.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_peeling(IdealLoopTree*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="485.5" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="488.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.03%)</title><rect x="485.5" y="787.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="488.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_outer_loop(LoopNode*, PhaseIdealLoop::CloneLoopMode, IdealLoopTree*, IdealLoopTree*, int, Node_List&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="485.5" y="771.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="488.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.03%)</title><rect x="485.5" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="488.5" y="766.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="485.5" y="739.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="488.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.03%)</title><rect x="485.8" y="899.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="488.8" y="910.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.03%)</title><rect x="485.8" y="883.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="488.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.03%)</title><rect x="486.1" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="489.1" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.24%)</title><rect x="486.4" y="899.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="489.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (6 samples, 0.16%)</title><rect x="487.3" y="883.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="490.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="487.3" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="490.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.03%)</title><rect x="487.3" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="490.3" y="862.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="487.3" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="490.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.08%)</title><rect x="487.7" y="867.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="490.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.08%)</title><rect x="487.7" y="851.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="490.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.03%)</title><rect x="488.0" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.03%)</title><rect x="488.3" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="491.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.03%)</title><rect x="488.3" y="819.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="491.3" y="830.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="488.3" y="803.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="491.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.05%)</title><rect x="488.6" y="867.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="491.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.03%)</title><rect x="489.2" y="899.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="492.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.05%)</title><rect x="489.6" y="899.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="492.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.03%)</title><rect x="489.9" y="883.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="492.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="489.9" y="867.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="492.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.03%)</title><rect x="489.9" y="851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="492.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.05%)</title><rect x="490.2" y="899.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="493.2" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.05%)</title><rect x="490.2" y="883.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="493.2" y="894.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="490.2" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="493.2" y="878.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.03%)</title><rect x="490.2" y="851.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="493.2" y="862.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="490.2" y="835.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="493.2" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="490.2" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="493.2" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="490.2" y="803.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="493.2" y="814.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.03%)</title><rect x="490.5" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="493.5" y="878.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.03%)</title><rect x="490.8" y="899.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="493.8" y="910.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="491.1" y="899.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="494.1" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.24%)</title><rect x="491.4" y="915.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="494.4" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.24%)</title><rect x="491.4" y="899.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="494.4" y="910.0"></text>
</g>
<g>
<title>CMoveNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="491.4" y="883.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="494.4" y="894.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="491.4" y="867.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="494.4" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="491.4" y="851.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="494.4" y="862.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="491.4" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="494.4" y="846.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="491.8" y="883.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="494.8" y="894.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="491.8" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="494.8" y="878.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="491.8" y="851.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="494.8" y="862.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.03%)</title><rect x="491.8" y="835.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="494.8" y="846.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="492.1" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="495.1" y="894.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.03%)</title><rect x="492.1" y="867.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="495.1" y="878.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="492.4" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="495.4" y="894.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="492.7" y="883.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="495.7" y="894.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.03%)</title><rect x="492.7" y="867.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.7" y="878.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="492.7" y="851.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="495.7" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="492.7" y="835.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="495.7" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="492.7" y="819.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="495.7" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="492.7" y="803.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="495.7" y="814.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.03%)</title><rect x="492.7" y="787.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="495.7" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="493.0" y="883.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="496.0" y="894.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.03%)</title><rect x="493.3" y="883.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="496.3" y="894.0"></text>
</g>
<g>
<title>ProjNode::proj_type(Type const*) const (1 samples, 0.03%)</title><rect x="493.6" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="496.6" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.03%)</title><rect x="494.0" y="883.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="497.0" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.03%)</title><rect x="494.3" y="915.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="497.3" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.03%)</title><rect x="494.3" y="899.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="497.3" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.03%)</title><rect x="494.3" y="883.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="497.3" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="494.3" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="497.3" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="494.3" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="497.3" y="862.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="494.3" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.3" y="846.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="494.3" y="819.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="497.3" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.05%)</title><rect x="494.6" y="915.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="497.6" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.05%)</title><rect x="494.6" y="899.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.6" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.05%)</title><rect x="494.6" y="883.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="497.6" y="894.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.03%)</title><rect x="494.6" y="867.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="497.6" y="878.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.03%)</title><rect x="494.6" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="497.6" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.03%)</title><rect x="494.6" y="835.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="497.6" y="846.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.03%)</title><rect x="494.6" y="819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="497.6" y="830.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.03%)</title><rect x="494.6" y="803.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="497.6" y="814.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="494.9" y="867.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="497.9" y="878.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="494.9" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.9" y="862.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.05%)</title><rect x="495.2" y="931.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="498.2" y="942.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (2 samples, 0.05%)</title><rect x="495.2" y="915.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="498.2" y="926.0"></text>
</g>
<g>
<title>GraphKit::replace_call(CallNode*, Node*, bool) (1 samples, 0.03%)</title><rect x="495.2" y="899.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="498.2" y="910.0"></text>
</g>
<g>
<title>Compile::gvn_replace_by(Node*, Node*) (1 samples, 0.03%)</title><rect x="495.2" y="883.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="498.2" y="894.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="495.2" y="867.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="498.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="495.5" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="498.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="495.5" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="498.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="495.5" y="867.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="498.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="495.5" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="498.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="495.5" y="835.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="498.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="495.5" y="819.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="498.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="495.5" y="803.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="498.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="495.5" y="787.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="498.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="495.5" y="771.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="498.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="495.5" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="498.5" y="766.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="495.5" y="739.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="498.5" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="495.5" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="498.5" y="734.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="495.5" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="498.5" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="495.5" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="498.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.03%)</title><rect x="495.5" y="675.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="498.5" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.03%)</title><rect x="495.5" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="498.5" y="670.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.03%)</title><rect x="495.5" y="643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="498.5" y="654.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.03%)</title><rect x="495.5" y="627.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="498.5" y="638.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (4 samples, 0.11%)</title><rect x="495.8" y="931.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="498.8" y="942.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.03%)</title><rect x="497.1" y="931.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="500.1" y="942.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.03%)</title><rect x="497.1" y="915.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="500.1" y="926.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="497.1" y="899.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="500.1" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.51%)</title><rect x="497.4" y="931.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="500.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.51%)</title><rect x="497.4" y="915.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="500.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 0.51%)</title><rect x="497.4" y="899.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="500.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 0.51%)</title><rect x="497.4" y="883.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="500.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (19 samples, 0.51%)</title><rect x="497.4" y="867.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="500.4" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.05%)</title><rect x="497.4" y="851.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="500.4" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="497.7" y="835.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="500.7" y="846.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="497.7" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="500.7" y="830.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="497.7" y="803.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="500.7" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="497.7" y="787.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="500.7" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="497.7" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="500.7" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="497.7" y="755.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="500.7" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="497.7" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="500.7" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="497.7" y="723.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="500.7" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="497.7" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="500.7" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="497.7" y="691.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="500.7" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="497.7" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="500.7" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="497.7" y="659.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="500.7" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="497.7" y="643.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="500.7" y="654.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="497.7" y="627.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="500.7" y="638.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="497.7" y="611.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="500.7" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="497.7" y="595.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="500.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 0.45%)</title><rect x="498.0" y="851.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="501.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 0.45%)</title><rect x="498.0" y="835.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="501.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 0.45%)</title><rect x="498.0" y="819.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="501.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 0.45%)</title><rect x="498.0" y="803.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="501.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 0.43%)</title><rect x="498.0" y="787.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="501.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.40%)</title><rect x="498.0" y="771.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="501.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.40%)</title><rect x="498.0" y="755.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="501.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.37%)</title><rect x="498.0" y="739.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="501.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.37%)</title><rect x="498.0" y="723.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="501.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.35%)</title><rect x="498.0" y="707.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="501.0" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="498.0" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="501.0" y="702.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.03%)</title><rect x="498.0" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="501.0" y="686.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.03%)</title><rect x="498.0" y="659.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="501.0" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="498.0" y="643.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="501.0" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="498.0" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="501.0" y="638.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="498.0" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="501.0" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="498.0" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="501.0" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="498.0" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="501.0" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="498.0" y="563.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="501.0" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::push_translate(ciType*) (1 samples, 0.03%)</title><rect x="498.0" y="547.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="501.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.29%)</title><rect x="498.4" y="691.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="501.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.29%)</title><rect x="498.4" y="675.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="501.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.29%)</title><rect x="498.4" y="659.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="501.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.29%)</title><rect x="498.4" y="643.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="501.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.27%)</title><rect x="498.4" y="627.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="501.4" y="638.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="498.4" y="611.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="501.4" y="622.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="498.4" y="595.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="501.4" y="606.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="498.4" y="579.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="501.4" y="590.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.03%)</title><rect x="498.4" y="563.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="501.4" y="574.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.03%)</title><rect x="498.4" y="547.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="501.4" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.03%)</title><rect x="498.4" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="501.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.24%)</title><rect x="498.7" y="611.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="501.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.24%)</title><rect x="498.7" y="595.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="501.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.24%)</title><rect x="498.7" y="579.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="501.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.24%)</title><rect x="498.7" y="563.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="501.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.24%)</title><rect x="498.7" y="547.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="501.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.24%)</title><rect x="498.7" y="531.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="501.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.24%)</title><rect x="498.7" y="515.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="501.7" y="526.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.03%)</title><rect x="498.7" y="499.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="501.7" y="510.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.03%)</title><rect x="498.7" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="501.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.03%)</title><rect x="498.7" y="467.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="501.7" y="478.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.03%)</title><rect x="498.7" y="451.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="501.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.19%)</title><rect x="499.0" y="499.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="502.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.19%)</title><rect x="499.0" y="483.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="502.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.11%)</title><rect x="499.0" y="467.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="502.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="499.0" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="502.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="499.0" y="435.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="502.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="499.0" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="502.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="499.0" y="403.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="502.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="499.0" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="502.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="499.0" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="502.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="499.0" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="502.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="499.0" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="502.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="499.0" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="502.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="499.0" y="307.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="502.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="499.0" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="502.0" y="302.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="499.0" y="275.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="502.0" y="286.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="499.0" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="502.0" y="270.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="499.0" y="243.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="502.0" y="254.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="499.0" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="502.0" y="238.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.03%)</title><rect x="499.0" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="502.0" y="222.0"></text>
</g>
<g>
<title>BarrierSetC2::identity_node(PhaseGVN*, Node*) const (1 samples, 0.03%)</title><rect x="499.0" y="195.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="502.0" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="499.3" y="451.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="502.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="499.3" y="435.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="502.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="499.3" y="419.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="502.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="499.3" y="403.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="502.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="499.3" y="387.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="502.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="499.3" y="371.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="502.3" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="499.3" y="355.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="502.3" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="499.3" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="502.3" y="350.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="499.3" y="323.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="502.3" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="499.3" y="307.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="502.3" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="499.3" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="502.3" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="499.3" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="502.3" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="499.3" y="259.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="502.3" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="499.3" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="502.3" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="499.3" y="227.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="502.3" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="499.3" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="502.3" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="499.3" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="502.3" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="499.3" y="179.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="502.3" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="499.3" y="163.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="502.3" y="174.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="499.3" y="147.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="502.3" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="499.3" y="131.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="502.3" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="499.3" y="115.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="502.3" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="499.3" y="99.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="502.3" y="110.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="499.3" y="83.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="502.3" y="94.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="499.3" y="67.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="502.3" y="78.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="499.3" y="51.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="502.3" y="62.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="499.3" y="35.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="502.3" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="499.6" y="355.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="502.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="499.6" y="339.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="502.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="499.6" y="323.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="502.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="499.6" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="502.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="499.6" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="502.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="499.6" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="502.6" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="499.6" y="259.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="502.6" y="270.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="499.6" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="502.6" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="499.6" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="502.6" y="238.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="499.6" y="211.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="502.6" y="222.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="499.6" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="502.6" y="206.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="499.6" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="502.6" y="190.0"></text>
</g>
<g>
<title>TypePtr::eq(Type const*) const (1 samples, 0.03%)</title><rect x="499.6" y="163.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="502.6" y="174.0"></text>
</g>
<g>
<title>TypePtr::eq_speculative(TypePtr const*) const (1 samples, 0.03%)</title><rect x="499.6" y="147.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="502.6" y="158.0"></text>
</g>
<g>
<title>TypePtr::speculative() const (1 samples, 0.03%)</title><rect x="499.6" y="131.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="502.6" y="142.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="499.9" y="451.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="502.9" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="499.9" y="435.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="502.9" y="446.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.03%)</title><rect x="499.9" y="419.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="502.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="500.3" y="467.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="503.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="500.3" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="503.3" y="462.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="500.3" y="435.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="503.3" y="446.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="500.3" y="419.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="503.3" y="430.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="500.3" y="403.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="503.3" y="414.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.03%)</title><rect x="500.3" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="503.3" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="500.3" y="371.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="503.3" y="382.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="500.3" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="503.3" y="366.0"></text>
</g>
<g>
<title>InitializeNode::capture_store(StoreNode*, long, PhaseTransform*, bool) (1 samples, 0.03%)</title><rect x="500.3" y="339.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="503.3" y="350.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="500.3" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="503.3" y="334.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="500.3" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="503.3" y="318.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="500.3" y="291.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="503.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="500.6" y="467.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="503.6" y="478.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="500.6" y="451.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="503.6" y="462.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.03%)</title><rect x="500.9" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="503.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="501.2" y="499.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="504.2" y="510.0"></text>
</g>
<g>
<title>AllocateNode::compute_MemBar_redundancy(ciMethod*) (1 samples, 0.03%)</title><rect x="501.2" y="483.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="504.2" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.03%)</title><rect x="501.2" y="467.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="504.2" y="478.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.03%)</title><rect x="501.2" y="451.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="504.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="501.5" y="627.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="504.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="501.5" y="611.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="504.5" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="501.5" y="595.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="504.5" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="504.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="504.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="501.8" y="659.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="504.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="501.8" y="643.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="504.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="501.8" y="627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="504.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="501.8" y="611.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="504.8" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="504.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="579.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="504.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="501.8" y="563.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="504.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="501.8" y="547.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="504.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="501.8" y="531.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="504.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="501.8" y="515.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="504.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="499.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="504.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="501.8" y="483.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="504.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="501.8" y="467.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="504.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="501.8" y="451.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="504.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="501.8" y="435.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="504.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="419.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="504.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="501.8" y="403.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="504.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="501.8" y="387.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="504.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="501.8" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="504.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="501.8" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="504.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="504.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="501.8" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="504.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="501.8" y="307.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="504.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="501.8" y="291.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="504.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="501.8" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="504.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="259.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="504.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="501.8" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="504.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="501.8" y="227.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="504.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="501.8" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="504.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="501.8" y="195.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="504.8" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="179.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="504.8" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="501.8" y="163.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="504.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="501.8" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="504.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="501.8" y="131.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="504.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="501.8" y="115.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="504.8" y="126.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.03%)</title><rect x="501.8" y="99.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="504.8" y="110.0"></text>
</g>
<g>
<title>LibraryCallKit::LibraryCallKit(JVMState*, LibraryIntrinsic*) (1 samples, 0.03%)</title><rect x="501.8" y="83.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="504.8" y="94.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="501.8" y="67.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="504.8" y="78.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="501.8" y="51.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="504.8" y="62.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="501.8" y="35.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="504.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="502.1" y="707.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="505.1" y="718.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.03%)</title><rect x="502.1" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="505.1" y="702.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.03%)</title><rect x="502.1" y="675.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="505.1" y="686.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="502.1" y="659.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="505.1" y="670.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.03%)</title><rect x="502.1" y="643.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="505.1" y="654.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.03%)</title><rect x="502.5" y="739.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="505.5" y="750.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.03%)</title><rect x="502.5" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="505.5" y="734.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.03%)</title><rect x="502.5" y="707.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="505.5" y="718.0"></text>
</g>
<g>
<title>VirtualCallTypeData::VirtualCallTypeData(DataLayout*) (1 samples, 0.03%)</title><rect x="502.5" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="505.5" y="702.0"></text>
</g>
<g>
<title>VirtualCallTypeData::cell_count() const (1 samples, 0.03%)</title><rect x="502.5" y="675.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="505.5" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="502.8" y="771.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="505.8" y="782.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="502.8" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="505.8" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="502.8" y="739.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="505.8" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="502.8" y="723.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="505.8" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="502.8" y="707.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="505.8" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="502.8" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="505.8" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="502.8" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="505.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="503.1" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="506.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="503.1" y="771.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="506.1" y="782.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="503.1" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="506.1" y="766.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="503.1" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="506.1" y="750.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="503.1" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="506.1" y="734.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="503.1" y="707.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="506.1" y="718.0"></text>
</g>
<g>
<title>GraphKit::sync_kit(IdealKit&amp;) (1 samples, 0.03%)</title><rect x="503.1" y="691.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="506.1" y="702.0"></text>
</g>
<g>
<title>PhaseTransform::set_type_bottom(Node const*) (1 samples, 0.03%)</title><rect x="503.1" y="675.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="506.1" y="686.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="503.4" y="931.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="506.4" y="942.0"></text>
</g>
<g>
<title>NodeHash::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.03%)</title><rect x="503.4" y="915.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="506.4" y="926.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.03%)</title><rect x="503.7" y="931.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="506.7" y="942.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="503.7" y="915.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="506.7" y="926.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="503.7" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="506.7" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::copy_to(nmethod*) (1 samples, 0.03%)</title><rect x="503.7" y="883.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="506.7" y="894.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="503.7" y="867.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="506.7" y="878.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.03%)</title><rect x="504.0" y="979.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="507.0" y="990.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="504.0" y="963.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="507.0" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="504.0" y="947.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="507.0" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="504.0" y="931.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="507.0" y="942.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="504.0" y="915.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="507.0" y="926.0"></text>
</g>
<g>
<title>[tid=28163] (2 samples, 0.05%)</title><rect x="504.3" y="1123.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="507.3" y="1134.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.05%)</title><rect x="504.3" y="1107.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="507.3" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.05%)</title><rect x="504.3" y="1091.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="507.3" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.05%)</title><rect x="504.3" y="1075.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="507.3" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.05%)</title><rect x="504.3" y="1059.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="507.3" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.05%)</title><rect x="504.3" y="1043.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="507.3" y="1054.0"></text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.05%)</title><rect x="504.3" y="1027.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="507.3" y="1038.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="504.3" y="1011.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="507.3" y="1022.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.03%)</title><rect x="504.3" y="995.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="507.3" y="1006.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="504.7" y="1011.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="507.7" y="1022.0"></text>
</g>
<g>
<title>[tid=37123] (2 samples, 0.05%)</title><rect x="505.0" y="1123.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="508.0" y="1134.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.05%)</title><rect x="505.0" y="1107.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="508.0" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.05%)</title><rect x="505.0" y="1091.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="508.0" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.05%)</title><rect x="505.0" y="1075.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="508.0" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.05%)</title><rect x="505.0" y="1059.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="508.0" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.05%)</title><rect x="505.0" y="1043.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="508.0" y="1054.0"></text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.05%)</title><rect x="505.0" y="1027.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="508.0" y="1038.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="505.0" y="1011.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="508.0" y="1022.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="505.0" y="995.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="508.0" y="1006.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.03%)</title><rect x="505.0" y="979.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="508.0" y="990.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.03%)</title><rect x="505.0" y="963.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="508.0" y="974.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="505.3" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="508.3" y="1022.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.03%)</title><rect x="505.3" y="995.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="508.3" y="1006.0"></text>
</g>
<g>
<title>[tid=37379] (3 samples, 0.08%)</title><rect x="505.6" y="1123.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="508.6" y="1134.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.08%)</title><rect x="505.6" y="1107.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="508.6" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.08%)</title><rect x="505.6" y="1091.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="508.6" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.08%)</title><rect x="505.6" y="1075.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="508.6" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.08%)</title><rect x="505.6" y="1059.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="508.6" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.08%)</title><rect x="505.6" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="508.6" y="1054.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.08%)</title><rect x="505.6" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="508.6" y="1038.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="505.6" y="1011.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="508.6" y="1022.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="505.6" y="995.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="508.6" y="1006.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="505.6" y="979.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="508.6" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="505.6" y="963.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="508.6" y="974.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="505.6" y="947.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="508.6" y="958.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.05%)</title><rect x="505.9" y="1011.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="508.9" y="1022.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.05%)</title><rect x="505.9" y="995.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="508.9" y="1006.0"></text>
</g>
<g>
<title>[tid=41219] (10 samples, 0.27%)</title><rect x="506.5" y="1123.0" width="3.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="509.5" y="1134.0"></text>
</g>
<g>
<title>thread_start (10 samples, 0.27%)</title><rect x="506.5" y="1107.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="509.5" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (10 samples, 0.27%)</title><rect x="506.5" y="1091.0" width="3.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="509.5" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (10 samples, 0.27%)</title><rect x="506.5" y="1075.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="509.5" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.27%)</title><rect x="506.5" y="1059.0" width="3.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="509.5" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (10 samples, 0.27%)</title><rect x="506.5" y="1043.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="509.5" y="1054.0"></text>
</g>
<g>
<title>VMError::is_error_reported() (1 samples, 0.03%)</title><rect x="506.5" y="1027.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="509.5" y="1038.0"></text>
</g>
<g>
<title>WatcherThread::run() (9 samples, 0.24%)</title><rect x="506.9" y="1027.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="509.9" y="1038.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.03%)</title><rect x="506.9" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="509.9" y="1022.0"></text>
</g>
<g>
<title>ChunkPool::free_all_but(unsigned long) (1 samples, 0.03%)</title><rect x="506.9" y="995.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="509.9" y="1006.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (8 samples, 0.21%)</title><rect x="507.2" y="1011.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="510.2" y="1022.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.19%)</title><rect x="507.2" y="995.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="510.2" y="1006.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 0.19%)</title><rect x="507.2" y="979.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="510.2" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.19%)</title><rect x="507.2" y="963.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="510.2" y="974.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.19%)</title><rect x="507.2" y="947.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="510.2" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="509.4" y="995.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="512.4" y="1006.0"></text>
</g>
<g>
<title>[tid=41475] (4 samples, 0.11%)</title><rect x="509.7" y="1123.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="512.7" y="1134.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.11%)</title><rect x="509.7" y="1107.0" width="1.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="512.7" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.11%)</title><rect x="509.7" y="1091.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="512.7" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.11%)</title><rect x="509.7" y="1075.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="512.7" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.11%)</title><rect x="509.7" y="1059.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="512.7" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.11%)</title><rect x="509.7" y="1043.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.7" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.11%)</title><rect x="509.7" y="1027.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="512.7" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.11%)</title><rect x="509.7" y="1011.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="512.7" y="1022.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (4 samples, 0.11%)</title><rect x="509.7" y="995.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="512.7" y="1006.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.05%)</title><rect x="509.7" y="979.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="512.7" y="990.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.05%)</title><rect x="509.7" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="512.7" y="974.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.05%)</title><rect x="509.7" y="947.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="512.7" y="958.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.03%)</title><rect x="509.7" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="512.7" y="942.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(CompiledMethod const*, int, int, bool, bool, bool) (1 samples, 0.03%)</title><rect x="509.7" y="915.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="512.7" y="926.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.03%)</title><rect x="510.0" y="931.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="513.0" y="942.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.03%)</title><rect x="510.0" y="915.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="513.0" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="510.0" y="899.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="513.0" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.05%)</title><rect x="510.3" y="979.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="513.3" y="990.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.05%)</title><rect x="510.3" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="513.3" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.05%)</title><rect x="510.3" y="947.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="513.3" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="510.3" y="931.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="513.3" y="942.0"></text>
</g>
<g>
<title>[tid=42243] (2 samples, 0.05%)</title><rect x="510.9" y="1123.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="513.9" y="1134.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.05%)</title><rect x="510.9" y="1107.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="513.9" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.05%)</title><rect x="510.9" y="1091.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="513.9" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.05%)</title><rect x="510.9" y="1075.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="513.9" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.05%)</title><rect x="510.9" y="1059.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="513.9" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.05%)</title><rect x="510.9" y="1043.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="513.9" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.05%)</title><rect x="510.9" y="1027.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="513.9" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.05%)</title><rect x="510.9" y="1011.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="513.9" y="1022.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (2 samples, 0.05%)</title><rect x="510.9" y="995.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="513.9" y="1006.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="510.9" y="979.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="513.9" y="990.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="510.9" y="963.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="513.9" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="510.9" y="947.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="513.9" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="510.9" y="931.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="513.9" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.03%)</title><rect x="511.3" y="979.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="514.3" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.03%)</title><rect x="511.3" y="963.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="514.3" y="974.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 0.03%)</title><rect x="511.3" y="947.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="514.3" y="958.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches(bool) (1 samples, 0.03%)</title><rect x="511.3" y="931.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="514.3" y="942.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool) (1 samples, 0.03%)</title><rect x="511.3" y="915.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="514.3" y="926.0"></text>
</g>
<g>
<title>[tid=42755] (14 samples, 0.37%)</title><rect x="511.6" y="1123.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="514.6" y="1134.0"></text>
</g>
<g>
<title>thread_start (14 samples, 0.37%)</title><rect x="511.6" y="1107.0" width="4.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="514.6" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (14 samples, 0.37%)</title><rect x="511.6" y="1091.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="514.6" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (14 samples, 0.37%)</title><rect x="511.6" y="1075.0" width="4.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="514.6" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (14 samples, 0.37%)</title><rect x="511.6" y="1059.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="514.6" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (14 samples, 0.37%)</title><rect x="511.6" y="1043.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="514.6" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (14 samples, 0.37%)</title><rect x="511.6" y="1027.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="514.6" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (14 samples, 0.37%)</title><rect x="511.6" y="1011.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="514.6" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (14 samples, 0.37%)</title><rect x="511.6" y="995.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="514.6" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (12 samples, 0.32%)</title><rect x="511.6" y="979.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="514.6" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (12 samples, 0.32%)</title><rect x="511.6" y="963.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="514.6" y="974.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (12 samples, 0.32%)</title><rect x="511.6" y="947.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="514.6" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_method() (12 samples, 0.32%)</title><rect x="511.6" y="931.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="514.6" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (12 samples, 0.32%)</title><rect x="511.6" y="915.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="514.6" y="926.0"></text>
</g>
<g>
<title>Compilation::build_hir() (7 samples, 0.19%)</title><rect x="511.6" y="899.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="514.6" y="910.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.03%)</title><rect x="511.6" y="883.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="514.6" y="894.0"></text>
</g>
<g>
<title>GlobalValueNumbering::substitute(Instruction*) (1 samples, 0.03%)</title><rect x="511.6" y="867.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="514.6" y="878.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.03%)</title><rect x="511.6" y="851.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="514.6" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (6 samples, 0.16%)</title><rect x="511.9" y="883.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.9" y="894.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (6 samples, 0.16%)</title><rect x="511.9" y="867.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="514.9" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (6 samples, 0.16%)</title><rect x="511.9" y="851.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="514.9" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (6 samples, 0.16%)</title><rect x="511.9" y="835.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="514.9" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (6 samples, 0.16%)</title><rect x="511.9" y="819.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="514.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="511.9" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="514.9" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.03%)</title><rect x="511.9" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="514.9" y="798.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="511.9" y="771.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="514.9" y="782.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="511.9" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="514.9" y="766.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="511.9" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="514.9" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 0.13%)</title><rect x="512.2" y="803.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="515.2" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.11%)</title><rect x="512.2" y="787.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="515.2" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.11%)</title><rect x="512.2" y="771.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="515.2" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.11%)</title><rect x="512.2" y="755.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="515.2" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.11%)</title><rect x="512.2" y="739.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="515.2" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.11%)</title><rect x="512.2" y="723.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="515.2" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.05%)</title><rect x="512.2" y="707.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="515.2" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.2" y="691.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="515.2" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="512.2" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="515.2" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="512.2" y="659.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="515.2" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="512.2" y="643.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="515.2" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.2" y="627.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.2" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.2" y="611.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="515.2" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="512.2" y="595.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="515.2" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="512.2" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="515.2" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="512.2" y="563.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.2" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.2" y="547.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="515.2" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.2" y="531.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="515.2" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="512.2" y="515.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="515.2" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="512.2" y="499.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="515.2" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="512.2" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="515.2" y="494.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.03%)</title><rect x="512.2" y="467.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="515.2" y="478.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.03%)</title><rect x="512.2" y="451.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="515.2" y="462.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.03%)</title><rect x="512.2" y="435.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="515.2" y="446.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::is_witness(Klass*) (1 samples, 0.03%)</title><rect x="512.2" y="419.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="515.2" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Symbol const*, Symbol const*, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="512.2" y="403.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="515.2" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="512.2" y="387.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.2" y="398.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="512.2" y="371.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="515.2" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.03%)</title><rect x="512.5" y="691.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.5" y="675.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="515.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.5" y="659.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="512.5" y="643.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="515.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="512.5" y="627.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="515.5" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="512.5" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="515.5" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.5" y="595.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="515.5" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.03%)</title><rect x="512.5" y="579.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.5" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.5" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="515.5" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.5" y="547.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="515.5" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="512.5" y="531.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.5" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="512.5" y="515.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="515.5" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="512.5" y="499.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="515.5" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.5" y="483.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="515.5" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.03%)</title><rect x="512.5" y="467.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="515.5" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.5" y="451.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="515.5" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.5" y="435.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="515.5" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="512.5" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="515.5" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="512.5" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="515.5" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="512.5" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="515.5" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="512.5" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="515.5" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.03%)</title><rect x="512.5" y="355.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="515.5" y="366.0"></text>
</g>
<g>
<title>InstanceConstant::exact_type() const (1 samples, 0.03%)</title><rect x="512.5" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="515.5" y="350.0"></text>
</g>
<g>
<title>ciObject::klass() (1 samples, 0.03%)</title><rect x="512.5" y="323.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="515.5" y="334.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="512.5" y="307.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="515.5" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="512.8" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="515.8" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="512.8" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="515.8" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="512.8" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="515.8" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="512.8" y="659.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="515.8" y="670.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="512.8" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="515.8" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="512.8" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="515.8" y="638.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.03%)</title><rect x="512.8" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="515.8" y="622.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.03%)</title><rect x="513.2" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="516.2" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="513.5" y="787.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="516.5" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.03%)</title><rect x="513.5" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="516.5" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (5 samples, 0.13%)</title><rect x="513.8" y="899.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="516.8" y="910.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.03%)</title><rect x="513.8" y="883.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="516.8" y="894.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="513.8" y="867.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="516.8" y="878.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.03%)</title><rect x="513.8" y="851.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="516.8" y="862.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.03%)</title><rect x="513.8" y="835.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="516.8" y="846.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.03%)</title><rect x="513.8" y="819.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="516.8" y="830.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::raw_at_put_grow(int, ResolveNode* const&amp;, ResolveNode* const&amp;) (1 samples, 0.03%)</title><rect x="513.8" y="803.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="516.8" y="814.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (4 samples, 0.11%)</title><rect x="514.1" y="883.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="517.1" y="894.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.03%)</title><rect x="514.1" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="517.1" y="878.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.03%)</title><rect x="514.1" y="851.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="517.1" y="862.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.03%)</title><rect x="514.1" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="517.1" y="846.0"></text>
</g>
<g>
<title>LinearScanWalker::insert_move(int, Interval*, Interval*) (1 samples, 0.03%)</title><rect x="514.1" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="517.1" y="830.0"></text>
</g>
<g>
<title>MoveResolver::move_insert_position(LIR_List*, int) (1 samples, 0.03%)</title><rect x="514.1" y="803.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="517.1" y="814.0"></text>
</g>
<g>
<title>MoveResolver::resolve_mappings() (1 samples, 0.03%)</title><rect x="514.1" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="517.1" y="798.0"></text>
</g>
<g>
<title>LIR_InsertionBuffer::append(int, LIR_Op*) (1 samples, 0.03%)</title><rect x="514.1" y="771.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="517.1" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::append(int const&amp;) (1 samples, 0.03%)</title><rect x="514.1" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="517.1" y="766.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (3 samples, 0.08%)</title><rect x="514.4" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="517.4" y="878.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.03%)</title><rect x="514.4" y="851.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="517.4" y="862.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.03%)</title><rect x="514.4" y="835.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="517.4" y="846.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.03%)</title><rect x="514.4" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="517.4" y="830.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="514.4" y="803.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="517.4" y="814.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="514.4" y="787.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="517.4" y="798.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.03%)</title><rect x="514.7" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="517.7" y="862.0"></text>
</g>
<g>
<title>Interval::add_range(int, int) (1 samples, 0.03%)</title><rect x="514.7" y="835.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="517.7" y="846.0"></text>
</g>
<g>
<title>LinearScan::use_kind_of_input_operand(LIR_Op*, LIR_OprDesc*) (1 samples, 0.03%)</title><rect x="515.0" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="518.0" y="862.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (1 samples, 0.03%)</title><rect x="515.4" y="979.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="518.4" y="990.0"></text>
</g>
<g>
<title>_block_invoke.modules (1 samples, 0.03%)</title><rect x="515.4" y="963.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="518.4" y="974.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.03%)</title><rect x="515.7" y="979.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="518.7" y="990.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="515.7" y="963.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="518.7" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="515.7" y="947.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="518.7" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="515.7" y="931.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="518.7" y="942.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="515.7" y="915.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="518.7" y="926.0"></text>
</g>
<g>
<title>[worker tid=29187] (556 samples, 14.83%)</title><rect x="516.0" y="1123.0" width="174.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="519.0" y="1134.0">[worker tid=29187]</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="516.0" y="1107.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="519.0" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="516.0" y="1091.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="519.0" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="516.0" y="1075.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="519.0" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="516.0" y="1059.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="519.0" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="516.0" y="1043.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="519.0" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="516.0" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="519.0" y="1038.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="516.0" y="1011.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="519.0" y="1022.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.03%)</title><rect x="516.0" y="995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="519.0" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="516.3" y="1107.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="519.3" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="516.3" y="1091.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="519.3" y="1102.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (1 samples, 0.03%)</title><rect x="516.6" y="1107.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="519.6" y="1118.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.03%)</title><rect x="516.6" y="1091.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="519.6" y="1102.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.03%)</title><rect x="516.6" y="1075.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="519.6" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (21 samples, 0.56%)</title><rect x="516.9" y="1107.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="519.9" y="1118.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (21 samples, 0.56%)</title><rect x="516.9" y="1091.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="519.9" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (5 samples, 0.13%)</title><rect x="517.2" y="1075.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="520.2" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="517.2" y="1059.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="520.2" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.11%)</title><rect x="517.6" y="1059.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="520.6" y="1070.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.03%)</title><rect x="517.6" y="1043.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="520.6" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="517.9" y="1043.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="520.9" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (15 samples, 0.40%)</title><rect x="518.8" y="1075.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="521.8" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (11 samples, 0.29%)</title><rect x="520.1" y="1059.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="523.1" y="1070.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.11%)</title><rect x="523.5" y="1107.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="526.5" y="1118.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.11%)</title><rect x="524.8" y="1107.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="527.8" y="1118.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (1 samples, 0.03%)</title><rect x="525.1" y="1091.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="528.1" y="1102.0"></text>
</g>
<g>
<title>caller_is_deopted() (1 samples, 0.03%)</title><rect x="525.1" y="1075.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="528.1" y="1086.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="525.1" y="1059.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="528.1" y="1070.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="525.1" y="1043.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="528.1" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="525.1" y="1027.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="528.1" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="525.1" y="1011.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="528.1" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.05%)</title><rect x="525.4" y="1091.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="528.4" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="525.7" y="1075.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="528.7" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="525.7" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="528.7" y="1070.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.16%)</title><rect x="526.1" y="1107.0" width="1.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="529.1" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.08%)</title><rect x="527.0" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="530.0" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.08%)</title><rect x="527.0" y="1075.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="530.0" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.08%)</title><rect x="527.0" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="530.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.run (517 samples, 13.79%)</title><rect x="527.9" y="1107.0" width="162.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="530.9" y="1118.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (517 samples, 13.79%)</title><rect x="527.9" y="1091.0" width="162.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="530.9" y="1102.0">java/util/concurrent/..</text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="527.9" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="530.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (516 samples, 13.76%)</title><rect x="528.3" y="1075.0" width="162.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="531.3" y="1086.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.05%)</title><rect x="532.3" y="1059.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="535.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.05%)</title><rect x="532.3" y="1043.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="535.3" y="1054.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="532.3" y="1027.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="535.3" y="1038.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="532.7" y="1027.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="535.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.beforeExecute (1 samples, 0.03%)</title><rect x="533.0" y="1059.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (303 samples, 8.08%)</title><rect x="533.3" y="1059.0" width="95.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="536.3" y="1070.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (302 samples, 8.05%)</title><rect x="533.6" y="1043.0" width="95.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="536.6" y="1054.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (256 samples, 6.83%)</title><rect x="533.6" y="1027.0" width="80.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="536.6" y="1038.0">java/util..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="533.6" y="1011.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="536.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.05%)</title><rect x="533.9" y="1011.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="536.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="534.2" y="995.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="537.2" y="1006.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="534.2" y="979.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="537.2" y="990.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="534.2" y="963.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="537.2" y="974.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="534.2" y="947.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="537.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.05%)</title><rect x="534.5" y="1011.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="537.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.05%)</title><rect x="535.2" y="1011.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="538.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.05%)</title><rect x="535.2" y="995.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="538.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.05%)</title><rect x="535.2" y="979.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="538.2" y="990.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="535.2" y="963.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="538.2" y="974.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="535.5" y="963.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="538.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="535.8" y="1011.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="538.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="535.8" y="995.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="538.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="535.8" y="979.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="538.8" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="535.8" y="963.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="538.8" y="974.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="535.8" y="947.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="538.8" y="958.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="535.8" y="931.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="538.8" y="942.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="535.8" y="915.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="538.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.27%)</title><rect x="536.1" y="1011.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="539.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.27%)</title><rect x="536.1" y="995.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="539.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.24%)</title><rect x="536.4" y="979.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.24%)</title><rect x="536.4" y="963.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.4" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.24%)</title><rect x="536.4" y="947.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.4" y="958.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (9 samples, 0.24%)</title><rect x="536.4" y="931.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="539.4" y="942.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="536.4" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="539.4" y="926.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.21%)</title><rect x="536.8" y="915.0" width="2.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="539.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (238 samples, 6.35%)</title><rect x="539.3" y="1011.0" width="74.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.3" y="1022.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (238 samples, 6.35%)</title><rect x="539.3" y="995.0" width="74.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="542.3" y="1006.0">jdk/inte..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (231 samples, 6.16%)</title><rect x="541.5" y="979.0" width="72.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="544.5" y="990.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="541.8" y="963.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.8" y="974.0"></text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.05%)</title><rect x="542.1" y="963.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="545.1" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.05%)</title><rect x="542.7" y="963.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="545.7" y="974.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.05%)</title><rect x="542.7" y="947.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="545.7" y="958.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.11%)</title><rect x="543.4" y="963.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="546.4" y="974.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="543.4" y="947.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="546.4" y="958.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.03%)</title><rect x="543.4" y="931.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="546.4" y="942.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.03%)</title><rect x="543.7" y="947.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="546.7" y="958.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (2 samples, 0.05%)</title><rect x="544.0" y="947.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="547.0" y="958.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="544.3" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="547.3" y="942.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="544.6" y="963.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="547.6" y="974.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="544.9" y="963.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="547.9" y="974.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.03%)</title><rect x="544.9" y="947.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="547.9" y="958.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (204 samples, 5.44%)</title><rect x="545.2" y="963.0" width="64.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="548.2" y="974.0">Parker:..</text>
</g>
<g>
<title>__psynch_cvwait (200 samples, 5.33%)</title><rect x="545.2" y="947.0" width="63.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="548.2" y="958.0">__psyn..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.08%)</title><rect x="608.2" y="947.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="611.2" y="958.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="609.1" y="947.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="612.1" y="958.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="609.4" y="963.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="612.4" y="974.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="609.8" y="963.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="612.8" y="974.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.03%)</title><rect x="610.1" y="963.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="613.1" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.13%)</title><rect x="610.4" y="963.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="613.4" y="974.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.08%)</title><rect x="610.7" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="613.7" y="958.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="610.7" y="931.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="613.7" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.05%)</title><rect x="611.0" y="931.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="614.0" y="942.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="611.0" y="915.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="614.0" y="926.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="611.0" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="614.0" y="910.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="611.3" y="915.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="614.3" y="926.0"></text>
</g>
<g>
<title>SafepointMechanism::should_block(Thread*) (1 samples, 0.03%)</title><rect x="611.6" y="947.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="614.6" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="611.6" y="931.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="614.6" y="942.0"></text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.05%)</title><rect x="612.0" y="963.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="615.0" y="974.0"></text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.03%)</title><rect x="612.6" y="963.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="615.6" y="974.0"></text>
</g>
<g>
<title>pthread_cond_wait (3 samples, 0.08%)</title><rect x="612.9" y="963.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="615.9" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="613.8" y="963.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="616.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="614.2" y="1027.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 0.37%)</title><rect x="614.5" y="1027.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="617.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (14 samples, 0.37%)</title><rect x="614.5" y="1011.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="617.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.05%)</title><rect x="614.5" y="995.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.05%)</title><rect x="614.5" y="979.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.5" y="990.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="614.5" y="963.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="617.5" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="614.5" y="947.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="617.5" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="614.5" y="931.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="617.5" y="942.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="614.5" y="915.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="617.5" y="926.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="614.5" y="899.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="617.5" y="910.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="614.5" y="883.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="617.5" y="894.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="614.5" y="867.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="617.5" y="878.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="614.8" y="963.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="617.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (10 samples, 0.27%)</title><rect x="615.1" y="995.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.21%)</title><rect x="615.1" y="979.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="618.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.21%)</title><rect x="615.1" y="963.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="618.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.03%)</title><rect x="615.1" y="947.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.1" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.19%)</title><rect x="615.4" y="947.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="618.4" y="958.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.19%)</title><rect x="615.4" y="931.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="618.4" y="942.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.19%)</title><rect x="615.4" y="915.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="618.4" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.19%)</title><rect x="615.4" y="899.0" width="2.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="618.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.05%)</title><rect x="617.6" y="979.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="620.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.05%)</title><rect x="618.3" y="995.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="618.6" y="979.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="621.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (31 samples, 0.83%)</title><rect x="618.9" y="1027.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="621.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (31 samples, 0.83%)</title><rect x="618.9" y="1011.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="621.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (31 samples, 0.83%)</title><rect x="618.9" y="995.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (31 samples, 0.83%)</title><rect x="618.9" y="979.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.9" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (31 samples, 0.83%)</title><rect x="618.9" y="963.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.9" y="974.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="619.2" y="947.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="622.2" y="958.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (29 samples, 0.77%)</title><rect x="619.5" y="947.0" width="9.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="622.5" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="619.5" y="931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="622.5" y="942.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.03%)</title><rect x="619.5" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="622.5" y="926.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="619.5" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="622.5" y="910.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="619.8" y="931.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="622.8" y="942.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="619.8" y="915.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="622.8" y="926.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="619.8" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="622.8" y="910.0"></text>
</g>
<g>
<title>__psynch_cvsignal (25 samples, 0.67%)</title><rect x="620.1" y="931.0" width="7.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="623.1" y="942.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.05%)</title><rect x="628.0" y="931.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="631.0" y="942.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="628.3" y="915.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="631.3" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (197 samples, 5.25%)</title><rect x="628.6" y="1059.0" width="62.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.6" y="1070.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (197 samples, 5.25%)</title><rect x="628.6" y="1043.0" width="62.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="631.6" y="1054.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (150 samples, 4.00%)</title><rect x="628.9" y="1027.0" width="47.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="631.9" y="1038.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (141 samples, 3.76%)</title><rect x="629.6" y="1011.0" width="44.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="632.6" y="1022.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.16%)</title><rect x="629.6" y="995.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="632.6" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.11%)</title><rect x="630.2" y="979.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="633.2" y="990.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="630.2" y="963.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="633.2" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.08%)</title><rect x="630.5" y="963.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="633.5" y="974.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="631.2" y="947.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.2" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (135 samples, 3.60%)</title><rect x="631.5" y="995.0" width="42.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.5" y="1006.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (135 samples, 3.60%)</title><rect x="631.5" y="979.0" width="42.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.5" y="990.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (135 samples, 3.60%)</title><rect x="631.5" y="963.0" width="42.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.5" y="974.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (135 samples, 3.60%)</title><rect x="631.5" y="947.0" width="42.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="634.5" y="958.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (135 samples, 3.60%)</title><rect x="631.5" y="931.0" width="42.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.5" y="942.0">sun/..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (1 samples, 0.03%)</title><rect x="631.5" y="915.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.19%)</title><rect x="631.8" y="915.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="634.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.13%)</title><rect x="632.4" y="899.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="635.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.13%)</title><rect x="632.4" y="883.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.13%)</title><rect x="632.4" y="867.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="635.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.08%)</title><rect x="632.7" y="851.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.7" y="862.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.03%)</title><rect x="632.7" y="835.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="635.7" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="633.0" y="835.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="636.0" y="846.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="633.0" y="819.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="636.0" y="830.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="633.0" y="803.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="636.0" y="814.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="633.4" y="803.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="636.4" y="814.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="633.4" y="787.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="636.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="633.7" y="851.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="636.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (127 samples, 3.39%)</title><rect x="634.0" y="915.0" width="39.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="637.0" y="926.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (127 samples, 3.39%)</title><rect x="634.0" y="899.0" width="39.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="637.0" y="910.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (7 samples, 0.19%)</title><rect x="634.0" y="883.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.0" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (7 samples, 0.19%)</title><rect x="634.0" y="867.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="637.0" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.16%)</title><rect x="634.0" y="851.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.0" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.16%)</title><rect x="634.0" y="835.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="637.0" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.16%)</title><rect x="634.0" y="819.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.0" y="830.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="634.3" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="637.3" y="814.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="634.6" y="803.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="637.6" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.08%)</title><rect x="634.9" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="637.9" y="814.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.05%)</title><rect x="634.9" y="787.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="637.9" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (2 samples, 0.05%)</title><rect x="634.9" y="771.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="637.9" y="782.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="635.6" y="787.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="638.6" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="635.9" y="851.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.9" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="635.9" y="835.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.9" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="635.9" y="819.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.9" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.03%)</title><rect x="635.9" y="803.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.03%)</title><rect x="635.9" y="787.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (119 samples, 3.17%)</title><rect x="636.2" y="883.0" width="37.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="639.2" y="894.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (119 samples, 3.17%)</title><rect x="636.2" y="867.0" width="37.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.2" y="878.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (119 samples, 3.17%)</title><rect x="636.2" y="851.0" width="37.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.2" y="862.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.05%)</title><rect x="639.0" y="835.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="642.0" y="846.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="639.6" y="835.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="642.6" y="846.0"></text>
</g>
<g>
<title>write (107 samples, 2.85%)</title><rect x="640.0" y="835.0" width="33.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="643.0" y="846.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="673.6" y="883.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="676.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="673.6" y="867.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="673.6" y="851.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="676.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="673.9" y="1011.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="673.9" y="995.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="676.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="673.9" y="979.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="676.9" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getMethod (1 samples, 0.03%)</title><rect x="674.6" y="1011.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.6" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.05%)</title><rect x="674.9" y="1011.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="677.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.05%)</title><rect x="675.5" y="1011.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="678.5" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$83/1668797410.act (46 samples, 1.23%)</title><rect x="676.1" y="1027.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.1" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (45 samples, 1.20%)</title><rect x="676.5" y="1011.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.5" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (45 samples, 1.20%)</title><rect x="676.5" y="995.0" width="14.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (13 samples, 0.35%)</title><rect x="676.8" y="979.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="679.8" y="990.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.05%)</title><rect x="676.8" y="963.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="679.8" y="974.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="676.8" y="947.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="679.8" y="958.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="676.8" y="931.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="679.8" y="942.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="677.1" y="947.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="680.1" y="958.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack(unsigned char*) (3 samples, 0.08%)</title><rect x="677.4" y="963.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="680.4" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (5 samples, 0.13%)</title><rect x="678.4" y="963.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="681.4" y="974.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.03%)</title><rect x="679.0" y="947.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="682.0" y="958.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.03%)</title><rect x="679.0" y="931.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="682.0" y="942.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (2 samples, 0.05%)</title><rect x="679.3" y="947.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="682.3" y="958.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="679.9" y="963.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="682.9" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.05%)</title><rect x="680.2" y="963.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="683.2" y="974.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.05%)</title><rect x="680.2" y="947.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="683.2" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="680.9" y="979.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="683.9" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (30 samples, 0.80%)</title><rect x="681.2" y="979.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="684.2" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="681.5" y="963.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="684.5" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1632492873.invoke (1 samples, 0.03%)</title><rect x="681.5" y="947.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="684.5" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="681.5" y="931.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="684.5" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.03%)</title><rect x="681.5" y="915.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="684.5" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (7 samples, 0.19%)</title><rect x="681.8" y="963.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.8" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (4 samples, 0.11%)</title><rect x="682.4" y="947.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.4" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.11%)</title><rect x="682.4" y="931.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.4" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.03%)</title><rect x="682.4" y="915.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="685.4" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.05%)</title><rect x="682.8" y="915.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="685.8" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="683.4" y="915.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="686.4" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.03%)</title><rect x="683.7" y="947.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.7" y="958.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (13 samples, 0.35%)</title><rect x="684.0" y="963.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="687.0" y="974.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (13 samples, 0.35%)</title><rect x="684.0" y="947.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="687.0" y="958.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (12 samples, 0.32%)</title><rect x="684.3" y="931.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="687.3" y="942.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="684.3" y="915.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="687.3" y="926.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (11 samples, 0.29%)</title><rect x="684.6" y="915.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="687.6" y="926.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="684.6" y="899.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="687.6" y="910.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="685.0" y="899.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="688.0" y="910.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (1 samples, 0.03%)</title><rect x="685.0" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="688.0" y="894.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="685.3" y="899.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="688.3" y="910.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="685.3" y="883.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="688.3" y="894.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="685.3" y="867.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="688.3" y="878.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="685.3" y="851.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="688.3" y="862.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (8 samples, 0.21%)</title><rect x="685.6" y="899.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="688.6" y="910.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.03%)</title><rect x="685.6" y="883.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="688.6" y="894.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.19%)</title><rect x="685.9" y="883.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="688.9" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (7 samples, 0.19%)</title><rect x="685.9" y="867.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="688.9" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (6 samples, 0.16%)</title><rect x="685.9" y="851.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="688.9" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="686.5" y="835.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="689.5" y="846.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="686.8" y="835.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="689.8" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.03%)</title><rect x="686.8" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="689.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.05%)</title><rect x="687.2" y="835.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="690.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="687.8" y="851.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="690.8" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (7 samples, 0.19%)</title><rect x="688.1" y="963.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="691.1" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.11%)</title><rect x="689.1" y="947.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.1" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.05%)</title><rect x="689.1" y="931.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="692.1" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.05%)</title><rect x="689.1" y="915.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.1" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="689.1" y="899.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.1" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="689.4" y="899.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="692.4" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.05%)</title><rect x="689.7" y="931.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="692.7" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="689.7" y="915.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="692.7" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="689.7" y="899.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.7" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/NoSuchElementLite.&lt;init&gt; (1 samples, 0.03%)</title><rect x="690.3" y="963.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="693.3" y="974.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="690.3" y="947.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="693.3" y="958.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="690.3" y="931.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="693.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="690.3" y="915.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="693.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="690.3" y="899.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="693.3" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="690.6" y="1107.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="693.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.makeConcatWithConstants (1 samples, 0.03%)</title><rect x="690.6" y="1091.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="693.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.doStringConcat (1 samples, 0.03%)</title><rect x="690.6" y="1075.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="693.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.generate (1 samples, 0.03%)</title><rect x="690.6" y="1059.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="693.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.generate (1 samples, 0.03%)</title><rect x="690.6" y="1043.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.6" y="1054.0"></text>
</g>
<g>
<title>[worker tid=34819] (464 samples, 12.37%)</title><rect x="690.9" y="1123.0" width="146.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="693.9" y="1134.0">[worker tid=34819]</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.03%)</title><rect x="690.9" y="1107.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="693.9" y="1118.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="690.9" y="1091.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="693.9" y="1102.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="690.9" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="693.9" y="1086.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="690.9" y="1059.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="693.9" y="1070.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="690.9" y="1043.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="693.9" y="1054.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.03%)</title><rect x="690.9" y="1027.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="693.9" y="1038.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.03%)</title><rect x="690.9" y="1011.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="693.9" y="1022.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.03%)</title><rect x="690.9" y="995.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="693.9" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (21 samples, 0.56%)</title><rect x="691.3" y="1107.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="694.3" y="1118.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (21 samples, 0.56%)</title><rect x="691.3" y="1091.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="694.3" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (6 samples, 0.16%)</title><rect x="691.3" y="1075.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="694.3" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="691.3" y="1059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="694.3" y="1070.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="691.3" y="1043.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="694.3" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.13%)</title><rect x="691.6" y="1059.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="694.6" y="1070.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.13%)</title><rect x="691.6" y="1043.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="694.6" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (4 samples, 0.11%)</title><rect x="693.1" y="1075.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="696.1" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.27%)</title><rect x="694.4" y="1075.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="697.4" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (7 samples, 0.19%)</title><rect x="695.3" y="1059.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="698.3" y="1070.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="697.5" y="1075.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="700.5" y="1086.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="697.9" y="1107.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="700.9" y="1118.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.11%)</title><rect x="698.2" y="1107.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="701.2" y="1118.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.11%)</title><rect x="699.4" y="1107.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="702.4" y="1118.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="699.4" y="1091.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="702.4" y="1102.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (3 samples, 0.08%)</title><rect x="699.7" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="702.7" y="1102.0"></text>
</g>
<g>
<title>caller_is_deopted() (3 samples, 0.08%)</title><rect x="699.7" y="1075.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="702.7" y="1086.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="700.1" y="1059.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="703.1" y="1070.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="700.1" y="1043.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="703.1" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="700.1" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="703.1" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="700.4" y="1059.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="703.4" y="1070.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.03%)</title><rect x="700.4" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="703.4" y="1054.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.16%)</title><rect x="700.7" y="1107.0" width="1.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="703.7" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.08%)</title><rect x="701.3" y="1091.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="704.3" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.08%)</title><rect x="701.3" y="1075.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="704.3" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.08%)</title><rect x="701.3" y="1059.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="704.3" y="1070.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (1 samples, 0.03%)</title><rect x="702.3" y="1091.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="705.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (426 samples, 11.36%)</title><rect x="702.6" y="1107.0" width="134.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.6" y="1118.0">java/lang/Thread...</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (426 samples, 11.36%)</title><rect x="702.6" y="1091.0" width="134.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="705.6" y="1102.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (426 samples, 11.36%)</title><rect x="702.6" y="1075.0" width="134.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.6" y="1086.0">java/util/concurr..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="707.3" y="1059.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="710.3" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::OSR_migration_begin(JavaThread*) (1 samples, 0.03%)</title><rect x="707.6" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="710.6" y="1070.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="707.6" y="1043.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="710.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.11%)</title><rect x="707.9" y="1059.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="710.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.11%)</title><rect x="707.9" y="1043.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.9" y="1054.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.08%)</title><rect x="707.9" y="1027.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="710.9" y="1038.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="707.9" y="1011.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="710.9" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="708.2" y="1011.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="711.2" y="1022.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="708.2" y="995.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="711.2" y="1006.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="708.2" y="979.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="711.2" y="990.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="708.6" y="1011.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="711.6" y="1022.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="708.9" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="711.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.03%)</title><rect x="709.2" y="1059.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="712.2" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="709.2" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="712.2" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="709.2" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="712.2" y="1038.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="709.2" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="712.2" y="1022.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="709.2" y="995.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="712.2" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="709.2" y="979.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="712.2" y="990.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="709.2" y="963.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="712.2" y="974.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.03%)</title><rect x="709.2" y="947.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="712.2" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="709.2" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="712.2" y="942.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="709.2" y="915.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="712.2" y="926.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="709.2" y="899.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="712.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.afterExecute (1 samples, 0.03%)</title><rect x="709.5" y="1059.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (267 samples, 7.12%)</title><rect x="709.8" y="1059.0" width="84.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.8" y="1070.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (267 samples, 7.12%)</title><rect x="709.8" y="1043.0" width="84.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.8" y="1054.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (1 samples, 0.03%)</title><rect x="709.8" y="1027.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="712.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (237 samples, 6.32%)</title><rect x="710.1" y="1027.0" width="74.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="713.1" y="1038.0">java/uti..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.05%)</title><rect x="710.1" y="1011.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="710.4" y="995.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="713.4" y="1006.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="710.4" y="979.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="713.4" y="990.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="710.4" y="963.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="713.4" y="974.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="710.4" y="947.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="713.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.05%)</title><rect x="710.8" y="1011.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.03%)</title><rect x="711.4" y="1011.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="714.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="711.4" y="995.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="714.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="711.7" y="1011.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="714.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="711.7" y="995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="711.7" y="979.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="714.7" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="711.7" y="963.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="714.7" y="974.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="711.7" y="947.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="714.7" y="958.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="711.7" y="931.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="714.7" y="942.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="711.7" y="915.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="714.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="712.0" y="995.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="715.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="712.0" y="979.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="715.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="712.0" y="963.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="715.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.27%)</title><rect x="712.3" y="1011.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="715.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.27%)</title><rect x="712.3" y="995.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="715.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.27%)</title><rect x="712.3" y="979.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="715.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.03%)</title><rect x="712.3" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="715.3" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="712.3" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="715.3" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="712.3" y="931.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="715.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.03%)</title><rect x="712.3" y="915.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="715.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.24%)</title><rect x="712.7" y="963.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="715.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.24%)</title><rect x="712.7" y="947.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="715.7" y="958.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="713.0" y="931.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="716.0" y="942.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.19%)</title><rect x="713.3" y="931.0" width="2.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="716.3" y="942.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.19%)</title><rect x="713.3" y="915.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="716.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="715.5" y="1011.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="718.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (219 samples, 5.84%)</title><rect x="715.8" y="1011.0" width="68.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="718.8" y="1022.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (219 samples, 5.84%)</title><rect x="715.8" y="995.0" width="68.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="718.8" y="1006.0">jdk/int..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="718.3" y="979.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="721.3" y="990.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="718.6" y="979.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="721.6" y="990.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="718.9" y="979.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="721.9" y="990.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (208 samples, 5.55%)</title><rect x="719.3" y="979.0" width="65.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="722.3" y="990.0">Unsafe_..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="719.3" y="963.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="722.3" y="974.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="719.3" y="947.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="722.3" y="958.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="719.3" y="931.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="722.3" y="942.0"></text>
</g>
<g>
<title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="719.3" y="915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="722.3" y="926.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="719.6" y="963.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="722.6" y="974.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.03%)</title><rect x="719.6" y="947.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="722.6" y="958.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="719.9" y="963.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="722.9" y="974.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.03%)</title><rect x="719.9" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="722.9" y="958.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.05%)</title><rect x="720.2" y="963.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="723.2" y="974.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="720.8" y="963.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="723.8" y="974.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (198 samples, 5.28%)</title><rect x="721.1" y="963.0" width="62.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="724.1" y="974.0">Parker..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="721.5" y="947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="724.5" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (190 samples, 5.07%)</title><rect x="721.8" y="947.0" width="59.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="724.8" y="958.0">__psyn..</text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.11%)</title><rect x="781.6" y="947.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="784.6" y="958.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (3 samples, 0.08%)</title><rect x="781.9" y="931.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="784.9" y="942.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.05%)</title><rect x="782.8" y="947.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="785.8" y="958.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="783.5" y="963.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.5" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="783.8" y="963.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="786.8" y="974.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="783.8" y="947.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="786.8" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="783.8" y="931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="786.8" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="783.8" y="915.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="786.8" y="926.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="783.8" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="786.8" y="910.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="783.8" y="883.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="786.8" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="784.1" y="963.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="787.1" y="974.0"></text>
</g>
<g>
<title>JavaThread::is_suspend_after_native() const (1 samples, 0.03%)</title><rect x="784.1" y="947.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="787.1" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="784.4" y="963.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="787.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 0.37%)</title><rect x="784.7" y="1027.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (14 samples, 0.37%)</title><rect x="784.7" y="1011.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="787.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="784.7" y="995.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="784.7" y="979.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.7" y="990.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="784.7" y="963.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="787.7" y="974.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="784.7" y="947.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="787.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (12 samples, 0.32%)</title><rect x="785.0" y="995.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="788.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (11 samples, 0.29%)</title><rect x="785.0" y="979.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 0.29%)</title><rect x="785.0" y="963.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.0" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (11 samples, 0.29%)</title><rect x="785.0" y="947.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="788.0" y="958.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (10 samples, 0.27%)</title><rect x="785.3" y="931.0" width="3.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="788.3" y="942.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.27%)</title><rect x="785.3" y="915.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="788.3" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.27%)</title><rect x="785.3" y="899.0" width="3.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="788.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.03%)</title><rect x="788.5" y="979.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="788.8" y="995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="788.8" y="979.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="791.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="788.8" y="963.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="788.8" y="947.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.8" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="788.8" y="931.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 0.40%)</title><rect x="789.1" y="1027.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="792.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 0.40%)</title><rect x="789.1" y="1011.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="792.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 0.40%)</title><rect x="789.1" y="995.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 0.40%)</title><rect x="789.1" y="979.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.1" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (15 samples, 0.40%)</title><rect x="789.1" y="963.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="792.1" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (13 samples, 0.35%)</title><rect x="789.7" y="947.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="792.7" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="789.7" y="931.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="792.7" y="942.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="789.7" y="915.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="792.7" y="926.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="789.7" y="899.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="792.7" y="910.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="789.7" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="792.7" y="894.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="789.7" y="867.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="792.7" y="878.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.32%)</title><rect x="790.1" y="931.0" width="3.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="793.1" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (136 samples, 3.63%)</title><rect x="793.8" y="1059.0" width="42.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.8" y="1070.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (136 samples, 3.63%)</title><rect x="793.8" y="1043.0" width="42.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.8" y="1054.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (92 samples, 2.45%)</title><rect x="793.8" y="1027.0" width="29.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="796.8" y="1038.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (89 samples, 2.37%)</title><rect x="793.8" y="1011.0" width="28.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.8" y="1022.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="793.8" y="995.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="796.8" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="793.8" y="979.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="796.8" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (88 samples, 2.35%)</title><rect x="794.1" y="995.0" width="27.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.1" y="1006.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (87 samples, 2.32%)</title><rect x="794.5" y="979.0" width="27.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.5" y="990.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (87 samples, 2.32%)</title><rect x="794.5" y="963.0" width="27.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="797.5" y="974.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (87 samples, 2.32%)</title><rect x="794.5" y="947.0" width="27.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="797.5" y="958.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.08%)</title><rect x="794.5" y="931.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="797.5" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="794.5" y="915.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.5" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="794.5" y="899.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="797.5" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="794.5" y="883.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.5" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="794.8" y="867.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="797.8" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="794.8" y="851.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="797.8" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="794.8" y="835.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="797.8" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="794.8" y="819.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="797.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="795.1" y="867.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="798.1" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="795.1" y="851.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="798.1" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="795.1" y="835.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="798.1" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (84 samples, 2.24%)</title><rect x="795.4" y="931.0" width="26.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="798.4" y="942.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.16%)</title><rect x="795.4" y="915.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="798.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.16%)</title><rect x="795.4" y="899.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="798.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.16%)</title><rect x="795.4" y="883.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="798.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.16%)</title><rect x="795.4" y="867.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="798.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.16%)</title><rect x="795.4" y="851.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="798.4" y="862.0"></text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.05%)</title><rect x="795.4" y="835.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="798.4" y="846.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="796.0" y="835.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="799.0" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="796.7" y="835.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="799.7" y="846.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="796.7" y="819.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="799.7" y="830.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="796.7" y="803.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="799.7" y="814.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="797.0" y="819.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="800.0" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (78 samples, 2.08%)</title><rect x="797.3" y="915.0" width="24.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="800.3" y="926.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (78 samples, 2.08%)</title><rect x="797.3" y="899.0" width="24.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.3" y="910.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (78 samples, 2.08%)</title><rect x="797.3" y="883.0" width="24.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="800.3" y="894.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (78 samples, 2.08%)</title><rect x="797.3" y="867.0" width="24.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="800.3" y="878.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (78 samples, 2.08%)</title><rect x="797.3" y="851.0" width="24.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="800.3" y="862.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.08%)</title><rect x="797.9" y="835.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="800.9" y="846.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.05%)</title><rect x="798.2" y="819.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="801.2" y="830.0"></text>
</g>
<g>
<title>write (73 samples, 1.95%)</title><rect x="798.9" y="835.0" width="22.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="801.9" y="846.0">w..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.08%)</title><rect x="821.8" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="822.5" y="995.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="825.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="822.5" y="979.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="825.5" y="990.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="822.5" y="963.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="825.5" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$83/1668797410.act (44 samples, 1.17%)</title><rect x="822.8" y="1027.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.8" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (43 samples, 1.15%)</title><rect x="823.1" y="1011.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.1" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (43 samples, 1.15%)</title><rect x="823.1" y="995.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="826.1" y="1006.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="823.1" y="979.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.1" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (4 samples, 0.11%)</title><rect x="823.4" y="979.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="826.4" y="990.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="823.4" y="963.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="826.4" y="974.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="823.4" y="947.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="826.4" y="958.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="823.4" y="931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.4" y="942.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="823.4" y="915.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="826.4" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (3 samples, 0.08%)</title><rect x="823.7" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="826.7" y="974.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.03%)</title><rect x="824.4" y="947.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="827.4" y="958.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.03%)</title><rect x="824.4" y="931.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="827.4" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.05%)</title><rect x="824.7" y="979.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.7" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (36 samples, 0.96%)</title><rect x="825.3" y="979.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="828.3" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (6 samples, 0.16%)</title><rect x="825.6" y="963.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="828.6" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (5 samples, 0.13%)</title><rect x="825.9" y="947.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="828.9" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.13%)</title><rect x="825.9" y="931.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="828.9" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.03%)</title><rect x="826.2" y="915.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="829.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.08%)</title><rect x="826.6" y="915.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.6" y="926.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (22 samples, 0.59%)</title><rect x="827.5" y="963.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="830.5" y="974.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (22 samples, 0.59%)</title><rect x="827.5" y="947.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="830.5" y="958.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (22 samples, 0.59%)</title><rect x="827.5" y="931.0" width="6.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="830.5" y="942.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.03%)</title><rect x="827.5" y="915.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="830.5" y="926.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="827.8" y="915.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="830.8" y="926.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.03%)</title><rect x="828.1" y="915.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="831.1" y="926.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="828.4" y="915.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="831.4" y="926.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="828.8" y="915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.8" y="926.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (17 samples, 0.45%)</title><rect x="829.1" y="915.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="832.1" y="926.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="829.1" y="899.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="832.1" y="910.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="829.4" y="899.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="832.4" y="910.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.13%)</title><rect x="829.7" y="899.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="832.7" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="830.3" y="883.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="833.3" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="830.7" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.7" y="878.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="830.7" y="851.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.7" y="862.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="830.7" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.7" y="846.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="830.7" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="833.7" y="830.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="830.7" y="803.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.7" y="814.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="831.0" y="883.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="834.0" y="894.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="831.3" y="899.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="834.3" y="910.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (8 samples, 0.21%)</title><rect x="831.6" y="899.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="834.6" y="910.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (8 samples, 0.21%)</title><rect x="831.6" y="883.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="834.6" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (8 samples, 0.21%)</title><rect x="831.6" y="867.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="834.6" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (8 samples, 0.21%)</title><rect x="831.6" y="851.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.6" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="831.9" y="835.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="834.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.03%)</title><rect x="832.2" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="835.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="832.2" y="819.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="835.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="832.2" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="835.2" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="832.5" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="835.5" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="832.5" y="819.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="835.5" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="832.9" y="835.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="835.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (3 samples, 0.08%)</title><rect x="833.2" y="835.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="836.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (2 samples, 0.05%)</title><rect x="833.2" y="819.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="836.2" y="830.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="833.5" y="803.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="836.5" y="814.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="833.8" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="836.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.03%)</title><rect x="834.1" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="837.1" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (6 samples, 0.16%)</title><rect x="834.4" y="963.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="837.4" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (6 samples, 0.16%)</title><rect x="834.4" y="947.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="837.4" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.03%)</title><rect x="834.4" y="931.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="837.4" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="834.4" y="915.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="837.4" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="834.4" y="899.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="837.4" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.13%)</title><rect x="834.7" y="931.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.7" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="834.7" y="915.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="837.7" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="834.7" y="899.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="837.7" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="835.1" y="883.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.1" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="835.1" y="867.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="838.1" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="835.1" y="851.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="838.1" y="862.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (3 samples, 0.08%)</title><rect x="835.4" y="915.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="838.4" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/NoSuchElementLite.&lt;init&gt; (1 samples, 0.03%)</title><rect x="836.3" y="963.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="839.3" y="974.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="836.3" y="947.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="839.3" y="958.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="836.3" y="931.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="839.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="836.3" y="915.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="836.3" y="899.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="839.3" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="836.6" y="1107.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.makeConcatWithConstants (1 samples, 0.03%)</title><rect x="836.6" y="1091.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="839.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.doStringConcat (1 samples, 0.03%)</title><rect x="836.6" y="1075.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.generate (1 samples, 0.03%)</title><rect x="836.6" y="1059.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="839.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.generate (1 samples, 0.03%)</title><rect x="836.6" y="1043.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="839.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.filterArgumentsWithCombiner (1 samples, 0.03%)</title><rect x="836.6" y="1027.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="839.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.argumentsWithCombiner (1 samples, 0.03%)</title><rect x="836.6" y="1011.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle$Species_LLLL.copyWithExtendL (1 samples, 0.03%)</title><rect x="836.6" y="995.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="839.6" y="1006.0"></text>
</g>
<g>
<title>[worker tid=35331] (530 samples, 14.13%)</title><rect x="836.9" y="1123.0" width="166.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="839.9" y="1134.0">[worker tid=35331]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (24 samples, 0.64%)</title><rect x="836.9" y="1107.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="839.9" y="1118.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.03%)</title><rect x="836.9" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.9" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (23 samples, 0.61%)</title><rect x="837.3" y="1091.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="840.3" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (5 samples, 0.13%)</title><rect x="837.6" y="1075.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="840.6" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="837.6" y="1059.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="840.6" y="1070.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="837.6" y="1043.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="840.6" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.11%)</title><rect x="837.9" y="1059.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="840.9" y="1070.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.11%)</title><rect x="837.9" y="1043.0" width="1.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="840.9" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title><rect x="839.1" y="1075.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="842.1" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (15 samples, 0.40%)</title><rect x="839.8" y="1075.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="842.8" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (7 samples, 0.19%)</title><rect x="842.3" y="1059.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="845.3" y="1070.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.11%)</title><rect x="844.5" y="1107.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="847.5" y="1118.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.11%)</title><rect x="845.8" y="1107.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="848.8" y="1118.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.03%)</title><rect x="846.1" y="1091.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="849.1" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.05%)</title><rect x="846.4" y="1091.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="849.4" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="846.7" y="1075.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="849.7" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="846.7" y="1059.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="849.7" y="1070.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.13%)</title><rect x="847.0" y="1107.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="850.0" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.08%)</title><rect x="847.6" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="850.6" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.08%)</title><rect x="847.6" y="1075.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="850.6" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.08%)</title><rect x="847.6" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="850.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.run (493 samples, 13.15%)</title><rect x="848.6" y="1107.0" width="155.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.6" y="1118.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (493 samples, 13.15%)</title><rect x="848.6" y="1091.0" width="155.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.6" y="1102.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (492 samples, 13.12%)</title><rect x="848.6" y="1075.0" width="154.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="851.6" y="1086.0">java/util/concurrent..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="852.4" y="1059.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="855.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.05%)</title><rect x="852.7" y="1059.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="855.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.05%)</title><rect x="852.7" y="1043.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="855.7" y="1054.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.05%)</title><rect x="852.7" y="1027.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="855.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (309 samples, 8.24%)</title><rect x="853.3" y="1059.0" width="97.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="856.3" y="1070.0">java/util/c..</text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.03%)</title><rect x="854.3" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="857.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (305 samples, 8.13%)</title><rect x="854.6" y="1043.0" width="95.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="857.6" y="1054.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (269 samples, 7.17%)</title><rect x="854.6" y="1027.0" width="84.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="857.6" y="1038.0">java/util/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="855.2" y="1011.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="858.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="855.2" y="995.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="858.2" y="1006.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="855.2" y="979.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="858.2" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="855.2" y="963.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="858.2" y="974.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="855.2" y="947.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="858.2" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="855.2" y="931.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="858.2" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="855.2" y="915.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="858.2" y="926.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="855.2" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="858.2" y="910.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="855.2" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="858.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.03%)</title><rect x="855.5" y="1011.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="858.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="855.5" y="995.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="858.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="855.5" y="979.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="858.5" y="990.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="855.5" y="963.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="858.5" y="974.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="855.5" y="947.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.13%)</title><rect x="855.8" y="1011.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.08%)</title><rect x="856.5" y="995.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="859.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.08%)</title><rect x="856.5" y="979.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="859.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.08%)</title><rect x="856.5" y="963.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="859.5" y="974.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.05%)</title><rect x="856.8" y="947.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="859.8" y="958.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="856.8" y="931.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="859.8" y="942.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="856.8" y="915.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="859.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.21%)</title><rect x="857.4" y="1011.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="860.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="857.4" y="995.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="860.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.19%)</title><rect x="857.7" y="995.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="860.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.19%)</title><rect x="857.7" y="979.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="860.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.19%)</title><rect x="857.7" y="963.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="860.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.19%)</title><rect x="857.7" y="947.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="860.7" y="958.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.19%)</title><rect x="857.7" y="931.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="860.7" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="857.7" y="915.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.7" y="926.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="857.7" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="860.7" y="910.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.16%)</title><rect x="858.0" y="915.0" width="1.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="861.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (252 samples, 6.72%)</title><rect x="859.9" y="1011.0" width="79.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="862.9" y="1022.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (252 samples, 6.72%)</title><rect x="859.9" y="995.0" width="79.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="862.9" y="1006.0">jdk/inter..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="862.1" y="979.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="865.1" y="990.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="862.4" y="979.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="865.4" y="990.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (243 samples, 6.48%)</title><rect x="862.7" y="979.0" width="76.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="865.7" y="990.0">Unsafe_P..</text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="862.7" y="963.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="865.7" y="974.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.03%)</title><rect x="863.1" y="963.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="866.1" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="863.4" y="963.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="866.4" y="974.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="863.4" y="947.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="866.4" y="958.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="863.4" y="931.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.4" y="942.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="863.4" y="915.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="866.4" y="926.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="863.4" y="899.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.4" y="910.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="863.4" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.4" y="894.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="863.4" y="867.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="866.4" y="878.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="863.7" y="963.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="866.7" y="974.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="863.7" y="947.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="866.7" y="958.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="863.7" y="931.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.7" y="942.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="864.0" y="963.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="867.0" y="974.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.03%)</title><rect x="864.0" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="867.0" y="958.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.05%)</title><rect x="864.3" y="963.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="867.3" y="974.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.03%)</title><rect x="864.3" y="947.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="867.3" y="958.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="864.3" y="931.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="867.3" y="942.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="864.6" y="947.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.6" y="958.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (229 samples, 6.11%)</title><rect x="864.9" y="963.0" width="72.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="867.9" y="974.0">Parker::..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.05%)</title><rect x="865.3" y="947.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="868.3" y="958.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="865.3" y="931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="868.3" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="865.6" y="931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="868.6" y="942.0"></text>
</g>
<g>
<title>__psynch_cvwait (219 samples, 5.84%)</title><rect x="865.9" y="947.0" width="68.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="868.9" y="958.0">__psync..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.05%)</title><rect x="934.8" y="947.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="937.8" y="958.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="935.1" y="931.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="938.1" y="942.0"></text>
</g>
<g>
<title>_pthread_testcancel (3 samples, 0.08%)</title><rect x="935.4" y="947.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="938.4" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.05%)</title><rect x="936.4" y="947.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="939.4" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="937.0" y="963.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="940.0" y="974.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="937.0" y="947.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.0" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="937.0" y="931.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="940.0" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="937.0" y="915.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.0" y="926.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="937.0" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="940.0" y="910.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="937.0" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.0" y="894.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="937.0" y="867.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="940.0" y="878.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="937.3" y="931.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.3" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="937.6" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.6" y="974.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.03%)</title><rect x="937.6" y="947.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="940.6" y="958.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="938.0" y="963.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="941.0" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="938.3" y="963.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="941.3" y="974.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="938.6" y="963.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="941.6" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="938.9" y="963.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="941.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="939.2" y="1027.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="942.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="939.2" y="1011.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="942.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 0.32%)</title><rect x="939.5" y="1027.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="942.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.32%)</title><rect x="939.5" y="1011.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (11 samples, 0.29%)</title><rect x="939.5" y="995.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (11 samples, 0.29%)</title><rect x="939.5" y="979.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="942.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 0.29%)</title><rect x="939.5" y="963.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.03%)</title><rect x="939.5" y="947.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="942.5" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (10 samples, 0.27%)</title><rect x="939.8" y="947.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="942.8" y="958.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (10 samples, 0.27%)</title><rect x="939.8" y="931.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="942.8" y="942.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.24%)</title><rect x="940.2" y="915.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="943.2" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.24%)</title><rect x="940.2" y="899.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="943.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="943.0" y="995.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="946.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="943.0" y="979.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="946.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="943.0" y="963.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="946.0" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="943.0" y="947.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="946.0" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="943.0" y="931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="946.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.03%)</title><rect x="943.0" y="915.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="946.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 0.61%)</title><rect x="943.3" y="1027.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="946.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.61%)</title><rect x="943.3" y="1011.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 0.61%)</title><rect x="943.3" y="995.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="946.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.61%)</title><rect x="943.3" y="979.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="946.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.61%)</title><rect x="943.3" y="963.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="946.3" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (20 samples, 0.53%)</title><rect x="944.2" y="947.0" width="6.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="947.2" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="944.9" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.9" y="942.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="944.9" y="915.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="947.9" y="926.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="944.9" y="899.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="947.9" y="910.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="944.9" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="947.9" y="894.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="944.9" y="867.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.9" y="878.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="944.9" y="851.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.9" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="945.2" y="899.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.2" y="910.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.35%)</title><rect x="945.5" y="931.0" width="4.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="948.5" y="942.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="949.6" y="931.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="952.6" y="942.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="949.9" y="931.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="952.9" y="942.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="950.2" y="931.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="953.2" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (168 samples, 4.48%)</title><rect x="950.5" y="1059.0" width="52.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="953.5" y="1070.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (168 samples, 4.48%)</title><rect x="950.5" y="1043.0" width="52.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="953.5" y="1054.0">ru/ma..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (115 samples, 3.07%)</title><rect x="950.5" y="1027.0" width="36.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="953.5" y="1038.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (112 samples, 2.99%)</title><rect x="950.9" y="1011.0" width="35.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="953.9" y="1022.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.11%)</title><rect x="950.9" y="995.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="953.9" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="951.8" y="979.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="954.8" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="951.8" y="963.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="954.8" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="951.8" y="947.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="954.8" y="958.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="951.8" y="931.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="954.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="951.8" y="915.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="954.8" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (108 samples, 2.88%)</title><rect x="952.1" y="995.0" width="34.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="955.1" y="1006.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (107 samples, 2.85%)</title><rect x="952.4" y="979.0" width="33.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="955.4" y="990.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (107 samples, 2.85%)</title><rect x="952.4" y="963.0" width="33.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="955.4" y="974.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (107 samples, 2.85%)</title><rect x="952.4" y="947.0" width="33.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="955.4" y="958.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.08%)</title><rect x="953.1" y="931.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.1" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="953.1" y="915.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.1" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="953.1" y="899.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.1" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="953.1" y="883.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="956.1" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="953.4" y="867.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="956.4" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="953.4" y="851.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="956.4" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="953.4" y="835.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="956.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.03%)</title><rect x="953.4" y="819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.4" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="953.7" y="867.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.7" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="953.7" y="851.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.7" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="953.7" y="835.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (102 samples, 2.72%)</title><rect x="954.0" y="931.0" width="32.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="957.0" y="942.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.08%)</title><rect x="954.0" y="915.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="957.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="954.6" y="899.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="954.6" y="883.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="954.6" y="867.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="957.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="954.6" y="851.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.6" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="954.6" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="957.6" y="846.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="954.6" y="819.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="957.6" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (99 samples, 2.64%)</title><rect x="954.9" y="915.0" width="31.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="957.9" y="926.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (99 samples, 2.64%)</title><rect x="954.9" y="899.0" width="31.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="957.9" y="910.0">su..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.08%)</title><rect x="954.9" y="883.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.9" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.08%)</title><rect x="954.9" y="867.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="957.9" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.05%)</title><rect x="954.9" y="851.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="957.9" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="954.9" y="835.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="957.9" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="954.9" y="819.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="957.9" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="954.9" y="803.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="957.9" y="814.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="954.9" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="957.9" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="955.3" y="787.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.3" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.03%)</title><rect x="955.3" y="771.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="955.6" y="851.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="958.6" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="955.6" y="835.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="958.6" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="955.6" y="819.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="958.6" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.03%)</title><rect x="955.6" y="803.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="958.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.03%)</title><rect x="955.6" y="787.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="958.6" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (96 samples, 2.56%)</title><rect x="955.9" y="883.0" width="30.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.9" y="894.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (96 samples, 2.56%)</title><rect x="955.9" y="867.0" width="30.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="958.9" y="878.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (96 samples, 2.56%)</title><rect x="955.9" y="851.0" width="30.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="958.9" y="862.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.08%)</title><rect x="957.5" y="835.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="960.5" y="846.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="958.4" y="835.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="961.4" y="846.0"></text>
</g>
<g>
<title>write (87 samples, 2.32%)</title><rect x="958.7" y="835.0" width="27.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="961.7" y="846.0">w..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="986.1" y="1011.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="989.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="986.1" y="995.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="989.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="986.1" y="979.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="989.1" y="990.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="986.1" y="963.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.1" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="986.4" y="1011.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="989.4" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$83/1668797410.act (53 samples, 1.41%)</title><rect x="986.7" y="1027.0" width="16.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="989.7" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (53 samples, 1.41%)</title><rect x="986.7" y="1011.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="989.7" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (53 samples, 1.41%)</title><rect x="986.7" y="995.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="989.7" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (4 samples, 0.11%)</title><rect x="987.0" y="979.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.0" y="990.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (1 samples, 0.03%)</title><rect x="987.0" y="963.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="990.0" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (2 samples, 0.05%)</title><rect x="987.4" y="963.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="990.4" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="988.0" y="963.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.0" y="974.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.03%)</title><rect x="988.0" y="947.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="991.0" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="988.3" y="979.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="991.3" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (45 samples, 1.20%)</title><rect x="988.6" y="979.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="991.6" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.08%)</title><rect x="988.6" y="963.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="991.6" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1632492873.invoke (3 samples, 0.08%)</title><rect x="988.6" y="947.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="991.6" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.08%)</title><rect x="988.6" y="931.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="991.6" y="942.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (1 samples, 0.03%)</title><rect x="988.9" y="915.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="991.9" y="926.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.checkOverflow (1 samples, 0.03%)</title><rect x="988.9" y="899.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="991.9" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$Stringifiers$ObjectStringifier.valueOf (1 samples, 0.03%)</title><rect x="989.2" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="992.2" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (6 samples, 0.16%)</title><rect x="989.6" y="963.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="992.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.03%)</title><rect x="989.9" y="947.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="992.9" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (4 samples, 0.11%)</title><rect x="990.2" y="947.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="993.2" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.11%)</title><rect x="990.2" y="931.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="993.2" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.03%)</title><rect x="990.2" y="915.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="993.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.08%)</title><rect x="990.5" y="915.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="993.5" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="991.1" y="899.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="994.1" y="910.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (31 samples, 0.83%)</title><rect x="991.4" y="963.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="994.4" y="974.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (31 samples, 0.83%)</title><rect x="991.4" y="947.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="994.4" y="958.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (31 samples, 0.83%)</title><rect x="991.4" y="931.0" width="9.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="994.4" y="942.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="991.4" y="915.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="994.4" y="926.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.08%)</title><rect x="991.8" y="915.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="994.8" y="926.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="992.7" y="915.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="995.7" y="926.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.03%)</title><rect x="993.0" y="915.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="996.0" y="926.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (25 samples, 0.67%)</title><rect x="993.3" y="915.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="926.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="993.3" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.3" y="910.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="993.6" y="899.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="996.6" y="910.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="993.6" y="883.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="996.6" y="894.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="994.0" y="899.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="997.0" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="994.0" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="997.0" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="994.0" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.0" y="878.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="994.0" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.0" y="862.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="994.0" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.0" y="846.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="994.0" y="819.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="997.0" y="830.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="994.0" y="803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.0" y="814.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.05%)</title><rect x="994.3" y="899.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="997.3" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="994.3" y="883.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.3" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="994.3" y="867.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.3" y="878.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="994.3" y="851.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="997.3" y="862.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.03%)</title><rect x="994.6" y="867.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="997.6" y="878.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.05%)</title><rect x="994.9" y="899.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="997.9" y="910.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.05%)</title><rect x="994.9" y="883.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="997.9" y="894.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.05%)</title><rect x="994.9" y="867.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="997.9" y="878.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (18 samples, 0.48%)</title><rect x="995.5" y="899.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.5" y="910.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (18 samples, 0.48%)</title><rect x="995.5" y="883.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="998.5" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (18 samples, 0.48%)</title><rect x="995.5" y="867.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.5" y="878.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="995.5" y="851.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="998.5" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (15 samples, 0.40%)</title><rect x="995.9" y="851.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.9" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="997.1" y="835.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1000.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.03%)</title><rect x="997.4" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1000.4" y="846.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.03%)</title><rect x="997.7" y="835.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1000.7" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="997.7" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="998.1" y="835.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="998.4" y="835.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.4" y="846.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="998.4" y="819.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1001.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.05%)</title><rect x="998.7" y="835.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.7" y="846.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (3 samples, 0.08%)</title><rect x="999.3" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1002.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (2 samples, 0.05%)</title><rect x="999.3" y="819.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.3" y="830.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="999.3" y="803.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1002.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="999.9" y="819.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1002.9" y="830.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="1000.3" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="1000.6" y="851.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1003.6" y="862.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="1000.9" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1003.9" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (5 samples, 0.13%)</title><rect x="1001.2" y="963.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1004.2" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.11%)</title><rect x="1001.5" y="947.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1004.5" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.03%)</title><rect x="1001.8" y="931.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1004.8" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="1001.8" y="915.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1004.8" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1001.8" y="899.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1004.8" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.05%)</title><rect x="1002.1" y="931.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1005.1" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1002.1" y="915.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1005.1" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1002.1" y="899.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1005.1" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1002.5" y="883.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1005.5" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1002.5" y="867.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1005.5" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1002.5" y="851.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1005.5" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1002.5" y="835.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1005.5" y="846.0"></text>
</g>
<g>
<title>unwind_exception Runtime1 stub (2 samples, 0.05%)</title><rect x="1002.8" y="979.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1005.8" y="990.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (1 samples, 0.03%)</title><rect x="1003.4" y="1075.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1006.4" y="1086.0"></text>
</g>
<g>
<title>[worker tid=36099] (592 samples, 15.79%)</title><rect x="1003.7" y="1123.0" width="186.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1006.7" y="1134.0">[worker tid=36099]</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="1003.7" y="1107.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1006.7" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (17 samples, 0.45%)</title><rect x="1004.0" y="1107.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.0" y="1118.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (16 samples, 0.43%)</title><rect x="1004.0" y="1091.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1007.0" y="1102.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.03%)</title><rect x="1004.0" y="1075.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1007.0" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.11%)</title><rect x="1004.3" y="1075.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1007.3" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.05%)</title><rect x="1004.3" y="1059.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1007.3" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.05%)</title><rect x="1005.0" y="1059.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1008.0" y="1070.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="1005.0" y="1043.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1008.0" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="1005.6" y="1075.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.6" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.27%)</title><rect x="1005.9" y="1075.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1008.9" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (9 samples, 0.24%)</title><rect x="1006.2" y="1059.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.2" y="1070.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="1009.1" y="1091.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1012.1" y="1102.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="1009.1" y="1075.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1012.1" y="1086.0"></text>
</g>
<g>
<title>[not_walkable] (5 samples, 0.13%)</title><rect x="1009.4" y="1107.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1012.4" y="1118.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.05%)</title><rect x="1011.0" y="1107.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1014.0" y="1118.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.03%)</title><rect x="1011.0" y="1091.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1014.0" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="1011.3" y="1091.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.3" y="1102.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="1011.3" y="1075.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.3" y="1086.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.08%)</title><rect x="1011.6" y="1107.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1014.6" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.05%)</title><rect x="1011.9" y="1091.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.9" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.05%)</title><rect x="1011.9" y="1075.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.9" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.05%)</title><rect x="1011.9" y="1059.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1014.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.run (563 samples, 15.01%)</title><rect x="1012.5" y="1107.0" width="177.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1015.5" y="1118.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (563 samples, 15.01%)</title><rect x="1012.5" y="1091.0" width="177.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1015.5" y="1102.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (563 samples, 15.01%)</title><rect x="1012.5" y="1075.0" width="177.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1015.5" y="1086.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.13%)</title><rect x="1014.4" y="1059.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1017.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.08%)</title><rect x="1015.0" y="1043.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1018.0" y="1054.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.05%)</title><rect x="1015.0" y="1027.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1018.0" y="1038.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1015.4" y="1011.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1018.4" y="1022.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="1015.4" y="995.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.4" y="1006.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="1015.7" y="1027.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1018.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.03%)</title><rect x="1016.0" y="1059.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1019.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (313 samples, 8.35%)</title><rect x="1016.3" y="1059.0" width="98.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1019.3" y="1070.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (313 samples, 8.35%)</title><rect x="1016.3" y="1043.0" width="98.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1019.3" y="1054.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (253 samples, 6.75%)</title><rect x="1016.6" y="1027.0" width="79.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1019.6" y="1038.0">java/util..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="1016.6" y="1011.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.03%)</title><rect x="1016.9" y="1011.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1019.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1016.9" y="995.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1019.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="1016.9" y="979.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1019.9" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.03%)</title><rect x="1016.9" y="963.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1019.9" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.03%)</title><rect x="1016.9" y="947.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1019.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.05%)</title><rect x="1017.2" y="1011.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1020.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="1017.2" y="995.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="1017.2" y="979.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1020.2" y="990.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="1017.2" y="963.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1020.2" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="1017.6" y="995.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1020.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.08%)</title><rect x="1017.9" y="1011.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1020.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.05%)</title><rect x="1018.2" y="995.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.05%)</title><rect x="1018.2" y="979.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1021.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (2 samples, 0.05%)</title><rect x="1018.2" y="963.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1021.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.27%)</title><rect x="1018.8" y="1011.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1021.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.27%)</title><rect x="1018.8" y="995.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1021.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.24%)</title><rect x="1018.8" y="979.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1021.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.24%)</title><rect x="1018.8" y="963.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1021.8" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.24%)</title><rect x="1018.8" y="947.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1021.8" y="958.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.19%)</title><rect x="1019.1" y="931.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1022.1" y="942.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.13%)</title><rect x="1019.1" y="915.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1022.1" y="926.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="1020.7" y="915.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1023.7" y="926.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="1020.7" y="899.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1023.7" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1021.0" y="915.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1024.0" y="926.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.03%)</title><rect x="1021.3" y="931.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1024.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="1021.7" y="979.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1024.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (236 samples, 6.29%)</title><rect x="1022.0" y="1011.0" width="74.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1025.0" y="1022.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (236 samples, 6.29%)</title><rect x="1022.0" y="995.0" width="74.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.0" y="1006.0">jdk/inte..</text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="1022.6" y="979.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1025.6" y="990.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (233 samples, 6.21%)</title><rect x="1022.9" y="979.0" width="73.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1025.9" y="990.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="1023.5" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.5" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.08%)</title><rect x="1023.9" y="963.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1026.9" y="974.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="1023.9" y="947.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.9" y="958.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1023.9" y="931.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.9" y="942.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="1023.9" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.9" y="926.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="1023.9" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1026.9" y="910.0"></text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.03%)</title><rect x="1024.2" y="947.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1027.2" y="958.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1024.5" y="947.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1027.5" y="958.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (2 samples, 0.05%)</title><rect x="1024.8" y="963.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.8" y="974.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (218 samples, 5.81%)</title><rect x="1025.4" y="963.0" width="68.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.4" y="974.0">Parker:..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.05%)</title><rect x="1027.0" y="947.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1030.0" y="958.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1027.3" y="931.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.3" y="942.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1027.3" y="915.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.3" y="926.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="1027.3" y="899.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.3" y="910.0"></text>
</g>
<g>
<title>__psynch_cvwait (210 samples, 5.60%)</title><rect x="1027.6" y="947.0" width="66.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1030.6" y="958.0">__psync..</text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="1093.7" y="947.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1096.7" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.08%)</title><rect x="1094.0" y="963.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="974.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="1094.3" y="947.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.3" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.05%)</title><rect x="1094.3" y="931.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.3" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.05%)</title><rect x="1094.3" y="915.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.3" y="926.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.05%)</title><rect x="1094.3" y="899.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.3" y="910.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="1094.3" y="883.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.3" y="894.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="1094.7" y="883.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.7" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="1095.0" y="963.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.0" y="974.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="1095.0" y="947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.0" y="958.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.03%)</title><rect x="1095.3" y="963.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1098.3" y="974.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="1095.6" y="963.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1098.6" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="1095.9" y="963.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1098.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (10 samples, 0.27%)</title><rect x="1096.2" y="1027.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1099.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (10 samples, 0.27%)</title><rect x="1096.2" y="1011.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1099.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="1096.2" y="995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1099.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="1096.2" y="979.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1099.2" y="990.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.03%)</title><rect x="1096.2" y="963.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1099.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.24%)</title><rect x="1096.5" y="995.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1099.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.21%)</title><rect x="1096.5" y="979.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1099.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.21%)</title><rect x="1096.5" y="963.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1099.5" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.21%)</title><rect x="1096.5" y="947.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1099.5" y="958.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.21%)</title><rect x="1096.5" y="931.0" width="2.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1099.5" y="942.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.21%)</title><rect x="1096.5" y="915.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.5" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.21%)</title><rect x="1096.5" y="899.0" width="2.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1099.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.03%)</title><rect x="1099.1" y="979.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1102.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (49 samples, 1.31%)</title><rect x="1099.4" y="1027.0" width="15.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1102.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (49 samples, 1.31%)</title><rect x="1099.4" y="1011.0" width="15.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1102.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (49 samples, 1.31%)</title><rect x="1099.4" y="995.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1102.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (49 samples, 1.31%)</title><rect x="1099.4" y="979.0" width="15.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1102.4" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (49 samples, 1.31%)</title><rect x="1099.4" y="963.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1102.4" y="974.0"></text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="1100.0" y="947.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.0" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="1100.3" y="947.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.3" y="958.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="1100.6" y="947.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.6" y="958.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (44 samples, 1.17%)</title><rect x="1100.9" y="947.0" width="13.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1103.9" y="958.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="1101.3" y="931.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.3" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="1101.6" y="931.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.6" y="942.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1101.6" y="915.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.6" y="926.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1101.6" y="899.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.6" y="910.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1101.6" y="883.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.6" y="894.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="1101.6" y="867.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1104.6" y="878.0"></text>
</g>
<g>
<title>__psynch_cvsignal (40 samples, 1.07%)</title><rect x="1101.9" y="931.0" width="12.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1104.9" y="942.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="1114.5" y="931.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1117.5" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/730605718.run (238 samples, 6.35%)</title><rect x="1114.8" y="1059.0" width="74.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1117.8" y="1070.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$4 (238 samples, 6.35%)</title><rect x="1114.8" y="1043.0" width="74.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.8" y="1054.0">ru/mail/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (160 samples, 4.27%)</title><rect x="1114.8" y="1027.0" width="50.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1117.8" y="1038.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (154 samples, 4.11%)</title><rect x="1114.8" y="1011.0" width="48.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1117.8" y="1022.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.11%)</title><rect x="1114.8" y="995.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1117.8" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.08%)</title><rect x="1115.1" y="979.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1118.1" y="990.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="1115.1" y="963.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1118.1" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.05%)</title><rect x="1115.4" y="963.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1118.4" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (150 samples, 4.00%)</title><rect x="1116.1" y="995.0" width="47.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1119.1" y="1006.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (150 samples, 4.00%)</title><rect x="1116.1" y="979.0" width="47.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1119.1" y="990.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (150 samples, 4.00%)</title><rect x="1116.1" y="963.0" width="47.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1119.1" y="974.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (150 samples, 4.00%)</title><rect x="1116.1" y="947.0" width="47.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.1" y="958.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.13%)</title><rect x="1116.1" y="931.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1119.1" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.13%)</title><rect x="1116.1" y="915.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1119.1" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="1116.4" y="899.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1119.4" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="1116.7" y="883.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1119.7" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="1116.7" y="867.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1119.7" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="1116.7" y="851.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1119.7" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.05%)</title><rect x="1116.7" y="835.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1119.7" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="1116.7" y="819.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1119.7" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1117.3" y="867.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.3" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1117.3" y="851.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1120.3" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1117.3" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.3" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (145 samples, 3.87%)</title><rect x="1117.6" y="931.0" width="45.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1120.6" y="942.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.13%)</title><rect x="1117.6" y="915.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1120.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.11%)</title><rect x="1117.9" y="899.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1120.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.11%)</title><rect x="1117.9" y="883.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1120.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.11%)</title><rect x="1117.9" y="867.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1120.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.08%)</title><rect x="1117.9" y="851.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1120.9" y="862.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.03%)</title><rect x="1117.9" y="835.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1120.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="1118.3" y="835.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.3" y="846.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.03%)</title><rect x="1118.3" y="819.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1121.3" y="830.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1118.6" y="819.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1121.6" y="830.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="1118.6" y="803.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1121.6" y="814.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="1118.6" y="787.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1121.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="1118.9" y="851.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1121.9" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (140 samples, 3.73%)</title><rect x="1119.2" y="915.0" width="44.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1122.2" y="926.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (140 samples, 3.73%)</title><rect x="1119.2" y="899.0" width="44.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1122.2" y="910.0">sun/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (9 samples, 0.24%)</title><rect x="1119.2" y="883.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1122.2" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="1119.2" y="867.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1122.2" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (8 samples, 0.21%)</title><rect x="1119.5" y="867.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1122.5" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.08%)</title><rect x="1119.8" y="851.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1122.8" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.08%)</title><rect x="1119.8" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1122.8" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.08%)</title><rect x="1119.8" y="819.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1122.8" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="1120.1" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.1" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="1120.5" y="803.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.5" y="814.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="1120.5" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.5" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.11%)</title><rect x="1120.8" y="851.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1123.8" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.11%)</title><rect x="1120.8" y="835.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1123.8" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.11%)</title><rect x="1120.8" y="819.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1123.8" y="830.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.03%)</title><rect x="1120.8" y="803.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1123.8" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.03%)</title><rect x="1121.1" y="803.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1124.1" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.05%)</title><rect x="1121.4" y="803.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1124.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.05%)</title><rect x="1121.4" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1124.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (131 samples, 3.49%)</title><rect x="1122.0" y="883.0" width="41.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1125.0" y="894.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (131 samples, 3.49%)</title><rect x="1122.0" y="867.0" width="41.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1125.0" y="878.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (131 samples, 3.49%)</title><rect x="1122.0" y="851.0" width="41.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1125.0" y="862.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="1125.2" y="835.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1128.2" y="846.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1125.2" y="819.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1128.2" y="830.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1125.5" y="835.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1128.5" y="846.0"></text>
</g>
<g>
<title>write (119 samples, 3.17%)</title><rect x="1125.8" y="835.0" width="37.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1128.8" y="846.0">write</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.13%)</title><rect x="1163.3" y="1011.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1166.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.13%)</title><rect x="1163.3" y="995.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1166.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.13%)</title><rect x="1163.3" y="979.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1166.3" y="990.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="1164.2" y="963.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1167.2" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="1164.8" y="1011.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1167.8" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$83/1668797410.act (78 samples, 2.08%)</title><rect x="1165.1" y="1027.0" width="24.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1168.1" y="1038.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (78 samples, 2.08%)</title><rect x="1165.1" y="1011.0" width="24.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1168.1" y="1022.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (78 samples, 2.08%)</title><rect x="1165.1" y="995.0" width="24.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1168.1" y="1006.0">r..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.05%)</title><rect x="1166.1" y="979.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (10 samples, 0.27%)</title><rect x="1166.7" y="979.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.7" y="990.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1166.7" y="963.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="974.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.05%)</title><rect x="1167.0" y="963.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.0" y="974.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.05%)</title><rect x="1167.0" y="947.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.0" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="1167.0" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.0" y="942.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="1167.3" y="931.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.3" y="942.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack() (1 samples, 0.03%)</title><rect x="1167.7" y="963.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (5 samples, 0.13%)</title><rect x="1168.0" y="963.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.0" y="974.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1168.3" y="947.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="958.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.03%)</title><rect x="1168.6" y="947.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.6" y="958.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.05%)</title><rect x="1168.9" y="947.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1169.5" y="963.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="974.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1169.5" y="947.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.5" y="958.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.03%)</title><rect x="1169.5" y="931.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.5" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (1 samples, 0.03%)</title><rect x="1169.9" y="979.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.9" y="990.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1170.2" y="979.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.08%)</title><rect x="1170.5" y="979.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1173.5" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1171.1" y="963.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1174.1" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (58 samples, 1.55%)</title><rect x="1171.4" y="979.0" width="18.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1174.4" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.08%)</title><rect x="1172.4" y="963.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1175.4" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1632492873.invoke (2 samples, 0.05%)</title><rect x="1172.4" y="947.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1175.4" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="1172.4" y="931.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1175.4" y="942.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.03%)</title><rect x="1172.7" y="915.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1175.7" y="926.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="1172.7" y="899.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1175.7" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1172.7" y="883.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1175.7" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.03%)</title><rect x="1173.0" y="947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1176.0" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (10 samples, 0.27%)</title><rect x="1173.3" y="963.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1176.3" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (10 samples, 0.27%)</title><rect x="1173.3" y="947.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1176.3" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.27%)</title><rect x="1173.3" y="931.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1176.3" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.13%)</title><rect x="1173.6" y="915.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1176.6" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.03%)</title><rect x="1175.2" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1178.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.05%)</title><rect x="1175.5" y="915.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1178.5" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1176.2" y="915.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1179.2" y="926.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (34 samples, 0.91%)</title><rect x="1176.5" y="963.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1179.5" y="974.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (34 samples, 0.91%)</title><rect x="1176.5" y="947.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1179.5" y="958.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (34 samples, 0.91%)</title><rect x="1176.5" y="931.0" width="10.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1179.5" y="942.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="1176.5" y="915.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1179.5" y="926.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="1176.8" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="926.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (32 samples, 0.85%)</title><rect x="1177.1" y="915.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="926.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="1177.1" y="899.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="910.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1177.4" y="899.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="910.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.03%)</title><rect x="1177.7" y="899.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1180.7" y="910.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.03%)</title><rect x="1178.0" y="899.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1181.0" y="910.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (2 samples, 0.05%)</title><rect x="1178.4" y="899.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1181.4" y="910.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1179.0" y="899.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1182.0" y="910.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="1179.0" y="883.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1182.0" y="894.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.08%)</title><rect x="1179.3" y="899.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1182.3" y="910.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="1180.2" y="899.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1183.2" y="910.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="1180.2" y="883.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="894.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.08%)</title><rect x="1180.6" y="899.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1183.6" y="910.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1181.2" y="883.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1184.2" y="894.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.11%)</title><rect x="1181.5" y="899.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1184.5" y="910.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.11%)</title><rect x="1181.5" y="883.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1184.5" y="894.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.11%)</title><rect x="1181.5" y="867.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1184.5" y="878.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.08%)</title><rect x="1181.8" y="851.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1184.8" y="862.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.08%)</title><rect x="1181.8" y="835.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (13 samples, 0.35%)</title><rect x="1182.8" y="899.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="910.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (12 samples, 0.32%)</title><rect x="1182.8" y="883.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (12 samples, 0.32%)</title><rect x="1182.8" y="867.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (12 samples, 0.32%)</title><rect x="1182.8" y="851.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.05%)</title><rect x="1183.7" y="835.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1186.7" y="846.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.03%)</title><rect x="1184.3" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.03%)</title><rect x="1184.3" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="1184.7" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.7" y="846.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="1185.0" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="1185.3" y="835.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (1 samples, 0.03%)</title><rect x="1185.6" y="835.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.6" y="846.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.05%)</title><rect x="1185.9" y="835.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.03%)</title><rect x="1186.5" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.5" y="894.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="1186.9" y="899.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.9" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (8 samples, 0.21%)</title><rect x="1187.2" y="963.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1190.2" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (5 samples, 0.13%)</title><rect x="1188.1" y="947.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1191.1" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.08%)</title><rect x="1188.1" y="931.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1191.1" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.05%)</title><rect x="1188.4" y="915.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1191.4" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1188.4" y="899.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1191.4" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1188.4" y="883.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1191.4" y="894.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="1188.7" y="899.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1191.7" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.05%)</title><rect x="1189.1" y="931.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1192.1" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1189.1" y="915.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.1" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1189.1" y="899.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1192.1" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1189.1" y="883.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1192.1" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="1189.1" y="867.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.1" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1189.4" y="851.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1192.4" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1189.4" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.4" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="1189.7" y="1107.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.makeConcatWithConstants (1 samples, 0.03%)</title><rect x="1189.7" y="1091.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.doStringConcat (1 samples, 0.03%)</title><rect x="1189.7" y="1075.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1192.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.generate (1 samples, 0.03%)</title><rect x="1189.7" y="1059.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1192.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.generate (1 samples, 0.03%)</title><rect x="1189.7" y="1043.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1192.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.filterArgumentsWithCombiner (1 samples, 0.03%)</title><rect x="1189.7" y="1027.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1192.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.argumentsWithCombiner (1 samples, 0.03%)</title><rect x="1189.7" y="1011.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle.editor (1 samples, 0.03%)</title><rect x="1189.7" y="995.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm.editor (1 samples, 0.03%)</title><rect x="1189.7" y="979.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.7" y="990.0"></text>
</g>
</g>
</svg>
