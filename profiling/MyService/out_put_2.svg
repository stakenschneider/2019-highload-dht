<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="885"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="885"> </text>
<g id="frames">
<g>
<title>all (5,826 samples, 100.00%)</title><rect x="10.0" y="851.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="862.0">all</text>
</g>
<g>
<title>[NIO Acceptor 0.0.0.0:8080 tid=38147] (2 samples, 0.03%)</title><rect x="10.0" y="835.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (2 samples, 0.03%)</title><rect x="10.0" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=24835] (2,729 samples, 46.84%)</title><rect x="10.4" y="835.0" width="552.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.4" y="846.0">[NIO Selector #0 tid=24835]</text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.09%)</title><rect x="11.6" y="819.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="14.6" y="830.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,715 samples, 46.60%)</title><rect x="12.6" y="819.0" width="549.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.6" y="830.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.05%)</title><rect x="14.3" y="803.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.3" y="814.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (236 samples, 4.05%)</title><rect x="15.3" y="803.0" width="47.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.3" y="814.0">one/..</text>
</g>
<g>
<title>_res (3 samples, 0.05%)</title><rect x="15.5" y="787.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="18.5" y="798.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (15 samples, 0.26%)</title><rect x="16.1" y="787.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (5 samples, 0.09%)</title><rect x="17.1" y="771.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.05%)</title><rect x="17.5" y="755.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.07%)</title><rect x="18.1" y="771.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.07%)</title><rect x="18.1" y="755.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="18.3" y="739.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (214 samples, 3.67%)</title><rect x="19.3" y="787.0" width="43.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.3" y="798.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (214 samples, 3.67%)</title><rect x="19.3" y="771.0" width="43.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.3" y="782.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (214 samples, 3.67%)</title><rect x="19.3" y="755.0" width="43.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.3" y="766.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (198 samples, 3.40%)</title><rect x="19.7" y="739.0" width="40.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.7" y="750.0">sun..</text>
</g>
<g>
<title>kevent (190 samples, 3.26%)</title><rect x="21.3" y="723.0" width="38.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="24.3" y="734.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 0.14%)</title><rect x="59.8" y="739.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="60.2" y="723.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="60.2" y="707.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="63.2" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.07%)</title><rect x="60.6" y="723.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.07%)</title><rect x="60.6" y="707.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.05%)</title><rect x="60.8" y="691.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.05%)</title><rect x="60.8" y="675.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.09%)</title><rect x="61.4" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.4" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (5 samples, 0.09%)</title><rect x="61.4" y="723.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="64.4" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.03%)</title><rect x="62.7" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.7" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,465 samples, 42.31%)</title><rect x="63.3" y="803.0" width="499.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.3" y="814.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,461 samples, 42.24%)</title><rect x="63.5" y="787.0" width="498.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.5" y="798.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,308 samples, 39.62%)</title><rect x="63.9" y="771.0" width="467.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.9" y="782.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,203 samples, 37.81%)</title><rect x="65.9" y="755.0" width="446.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.9" y="766.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.03%)</title><rect x="66.7" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.05%)</title><rect x="67.1" y="739.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,194 samples, 37.66%)</title><rect x="67.7" y="739.0" width="444.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.7" y="750.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,132 samples, 36.59%)</title><rect x="67.7" y="723.0" width="431.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.7" y="734.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (633 samples, 10.87%)</title><rect x="67.7" y="707.0" width="128.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.7" y="718.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (630 samples, 10.81%)</title><rect x="67.7" y="691.0" width="127.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.7" y="702.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (24 samples, 0.41%)</title><rect x="67.9" y="675.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.9" y="686.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (20 samples, 0.34%)</title><rect x="68.7" y="659.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.7" y="670.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.05%)</title><rect x="68.7" y="643.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="71.7" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.10%)</title><rect x="69.3" y="643.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="70.2" y="627.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="70.2" y="611.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.2" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.19%)</title><rect x="70.6" y="643.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="73.6" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.19%)</title><rect x="70.6" y="627.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.10%)</title><rect x="71.6" y="611.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.6" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (605 samples, 10.38%)</title><rect x="72.8" y="675.0" width="122.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.8" y="686.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session.write (605 samples, 10.38%)</title><rect x="72.8" y="659.0" width="122.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.8" y="670.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (603 samples, 10.35%)</title><rect x="73.0" y="643.0" width="122.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.0" y="654.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (603 samples, 10.35%)</title><rect x="73.0" y="627.0" width="122.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.0" y="638.0">one/nio/net/Jav..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (603 samples, 10.35%)</title><rect x="73.0" y="611.0" width="122.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.0" y="622.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.07%)</title><rect x="73.4" y="595.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="73.8" y="579.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="73.8" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="73.8" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (595 samples, 10.21%)</title><rect x="74.2" y="595.0" width="120.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.2" y="606.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (595 samples, 10.21%)</title><rect x="74.2" y="579.0" width="120.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.2" y="590.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.07%)</title><rect x="74.4" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.4" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.07%)</title><rect x="74.4" y="547.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.4" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.07%)</title><rect x="74.4" y="531.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.4" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.03%)</title><rect x="74.4" y="515.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="74.8" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.8" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="74.8" y="499.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (577 samples, 9.90%)</title><rect x="75.2" y="563.0" width="116.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.2" y="574.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (577 samples, 9.90%)</title><rect x="75.2" y="547.0" width="116.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.2" y="558.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (577 samples, 9.90%)</title><rect x="75.2" y="531.0" width="116.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.2" y="542.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (12 samples, 0.21%)</title><rect x="77.2" y="515.0" width="2.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="80.2" y="526.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.07%)</title><rect x="78.9" y="499.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="81.9" y="510.0"></text>
</g>
<g>
<title>write (554 samples, 9.51%)</title><rect x="79.9" y="515.0" width="112.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="82.9" y="526.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.19%)</title><rect x="192.1" y="563.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.1" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.05%)</title><rect x="192.1" y="547.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.1" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.03%)</title><rect x="192.3" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.3" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="192.3" y="515.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="195.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (8 samples, 0.14%)</title><rect x="192.7" y="547.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.03%)</title><rect x="194.3" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (2 samples, 0.03%)</title><rect x="194.7" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.7" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="195.3" y="691.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.3" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10 samples, 0.17%)</title><rect x="195.9" y="707.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="196.5" y="691.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.5" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="196.5" y="675.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.5" y="686.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.09%)</title><rect x="196.9" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.9" y="702.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="197.1" y="675.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.1" y="686.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="197.1" y="659.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.1" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.07%)</title><rect x="197.1" y="643.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (1,489 samples, 25.56%)</title><rect x="198.0" y="707.0" width="301.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.0" y="718.0">ru/mail/polis/service/stakenschneider/MyS..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="198.0" y="691.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.0" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.09%)</title><rect x="198.4" y="691.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.09%)</title><rect x="198.4" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.4" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="198.4" y="659.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.4" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="198.6" y="643.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="201.6" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="198.6" y="627.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.6" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="198.8" y="611.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.8" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="198.8" y="595.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="201.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.doAction (1,482 samples, 25.44%)</title><rect x="199.4" y="691.0" width="300.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.4" y="702.0">ru/mail/polis/service/stakenschneider/My..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.put (1,482 samples, 25.44%)</title><rect x="199.4" y="675.0" width="300.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.4" y="686.0">ru/mail/polis/service/stakenschneider/My..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.09%)</title><rect x="199.6" y="659.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (1,476 samples, 25.33%)</title><rect x="200.6" y="659.0" width="298.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="203.6" y="670.0">ru/mail/polis/dao/RockDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,470 samples, 25.23%)</title><rect x="200.6" y="643.0" width="297.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.6" y="654.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,469 samples, 25.21%)</title><rect x="200.8" y="627.0" width="297.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.8" y="638.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,460 samples, 25.06%)</title><rect x="202.6" y="611.0" width="295.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="205.6" y="622.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.03%)</title><rect x="203.6" y="595.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="206.6" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.07%)</title><rect x="204.2" y="595.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="207.2" y="606.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.07%)</title><rect x="205.2" y="595.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="208.2" y="606.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.05%)</title><rect x="206.1" y="595.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="209.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.05%)</title><rect x="206.7" y="595.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="209.7" y="606.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,437 samples, 24.67%)</title><rect x="207.3" y="595.0" width="291.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="210.3" y="606.0">rocksdb_put_helper(JNIEnv_*, rocksdb::D..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.05%)</title><rect x="208.3" y="579.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="211.3" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.05%)</title><rect x="209.5" y="579.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="212.5" y="590.0"></text>
</g>
<g>
<title>free (4 samples, 0.07%)</title><rect x="210.7" y="579.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="213.7" y="590.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.07%)</title><rect x="210.7" y="563.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="213.7" y="574.0"></text>
</g>
<g>
<title>free_tiny (10 samples, 0.17%)</title><rect x="211.5" y="579.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="214.5" y="590.0"></text>
</g>
<g>
<title>tiny_free_no_lock (6 samples, 0.10%)</title><rect x="212.3" y="563.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="215.3" y="574.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (2 samples, 0.03%)</title><rect x="213.1" y="547.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="216.1" y="558.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (13 samples, 0.22%)</title><rect x="213.6" y="579.0" width="2.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="216.6" y="590.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.05%)</title><rect x="214.0" y="563.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="217.0" y="574.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="214.6" y="563.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="217.6" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.10%)</title><rect x="215.0" y="563.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="218.0" y="574.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.09%)</title><rect x="215.2" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="218.2" y="558.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.07%)</title><rect x="215.4" y="531.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="218.4" y="542.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.05%)</title><rect x="215.6" y="515.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="218.6" y="526.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.05%)</title><rect x="215.6" y="499.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="218.6" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (22 samples, 0.38%)</title><rect x="216.2" y="579.0" width="4.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="219.2" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.17%)</title><rect x="218.0" y="563.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="221.0" y="574.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (9 samples, 0.15%)</title><rect x="218.2" y="547.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="221.2" y="558.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.14%)</title><rect x="218.2" y="531.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="221.2" y="542.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.12%)</title><rect x="218.4" y="515.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="221.4" y="526.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.12%)</title><rect x="218.4" y="499.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="221.4" y="510.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (2 samples, 0.03%)</title><rect x="218.6" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="221.6" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="219.4" y="483.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="222.4" y="494.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="219.4" y="467.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="222.4" y="478.0"></text>
</g>
<g>
<title>operator new(unsigned long) (17 samples, 0.29%)</title><rect x="220.6" y="579.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="223.6" y="590.0"></text>
</g>
<g>
<title>malloc (17 samples, 0.29%)</title><rect x="220.6" y="563.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="223.6" y="574.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.03%)</title><rect x="220.6" y="547.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="223.6" y="558.0"></text>
</g>
<g>
<title>malloc_zone_malloc (15 samples, 0.26%)</title><rect x="221.0" y="547.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="224.0" y="558.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (12 samples, 0.21%)</title><rect x="221.7" y="531.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="224.7" y="542.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.14%)</title><rect x="222.5" y="515.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="225.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,352 samples, 23.21%)</title><rect x="224.1" y="579.0" width="273.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="227.1" y="590.0">rocksdb::CompactedDBImpl::Open(rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,351 samples, 23.19%)</title><rect x="224.3" y="563.0" width="273.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="227.3" y="574.0">rocksdb::DBImpl::Put(rocksdb::WriteOp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,348 samples, 23.14%)</title><rect x="224.3" y="547.0" width="273.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="227.3" y="558.0">rocksdb::DB::Put(rocksdb::WriteOption..</text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="225.5" y="531.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="228.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (3 samples, 0.05%)</title><rect x="226.1" y="531.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="229.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,291 samples, 22.16%)</title><rect x="226.7" y="531.0" width="261.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="229.7" y="542.0">rocksdb::DBImpl::Write(rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,275 samples, 21.88%)</title><rect x="227.1" y="515.0" width="258.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="230.1" y="526.0">rocksdb::DBImpl::WriteImpl(rocksdb..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.10%)</title><rect x="233.6" y="499.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="236.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.03%)</title><rect x="235.0" y="499.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="238.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (360 samples, 6.18%)</title><rect x="235.4" y="499.0" width="72.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="238.4" y="510.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (353 samples, 6.06%)</title><rect x="236.0" y="483.0" width="71.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="239.0" y="494.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (352 samples, 6.04%)</title><rect x="236.2" y="467.0" width="71.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="239.2" y="478.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.05%)</title><rect x="236.8" y="451.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="239.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (346 samples, 5.94%)</title><rect x="237.5" y="451.0" width="70.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="240.5" y="462.0">rocksdb:..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="238.3" y="435.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="241.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (2 samples, 0.03%)</title><rect x="238.7" y="435.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="241.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (335 samples, 5.75%)</title><rect x="239.7" y="435.0" width="67.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="242.7" y="446.0">rocksdb..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.07%)</title><rect x="240.3" y="419.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="243.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="241.3" y="419.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="244.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (324 samples, 5.56%)</title><rect x="241.9" y="419.0" width="65.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="244.9" y="430.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="242.5" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="245.5" y="414.0"></text>
</g>
<g>
<title>write (319 samples, 5.48%)</title><rect x="242.9" y="403.0" width="64.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="245.9" y="414.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.03%)</title><rect x="307.5" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="310.5" y="494.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="307.5" y="467.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="310.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="308.3" y="499.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="311.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (7 samples, 0.12%)</title><rect x="308.7" y="499.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="311.7" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.07%)</title><rect x="308.7" y="483.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="311.7" y="494.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="309.8" y="483.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="312.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (81 samples, 1.39%)</title><rect x="310.2" y="499.0" width="16.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="313.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (76 samples, 1.30%)</title><rect x="311.0" y="483.0" width="15.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="314.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.03%)</title><rect x="311.6" y="467.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="314.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (71 samples, 1.22%)</title><rect x="312.0" y="467.0" width="14.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="315.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (69 samples, 1.18%)</title><rect x="312.4" y="451.0" width="14.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="315.4" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (63 samples, 1.08%)</title><rect x="313.4" y="435.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="316.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (59 samples, 1.01%)</title><rect x="314.2" y="419.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="317.2" y="430.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="319.9" y="403.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="322.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (23 samples, 0.39%)</title><rect x="320.7" y="403.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="323.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.14%)</title><rect x="323.5" y="387.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="326.5" y="398.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.10%)</title><rect x="323.9" y="371.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="326.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.05%)</title><rect x="325.4" y="403.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="328.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (51 samples, 0.88%)</title><rect x="326.6" y="499.0" width="10.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="329.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (48 samples, 0.82%)</title><rect x="327.2" y="483.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="330.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (47 samples, 0.81%)</title><rect x="327.4" y="467.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="330.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (47 samples, 0.81%)</title><rect x="327.4" y="451.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="330.4" y="462.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.09%)</title><rect x="328.2" y="435.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="331.2" y="446.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.09%)</title><rect x="328.2" y="419.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="331.2" y="430.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.07%)</title><rect x="328.4" y="403.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="331.4" y="414.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="328.6" y="387.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="331.6" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="328.8" y="371.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="331.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (35 samples, 0.60%)</title><rect x="329.2" y="435.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="332.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (31 samples, 0.53%)</title><rect x="330.0" y="419.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="333.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (29 samples, 0.50%)</title><rect x="330.4" y="403.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="333.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (12 samples, 0.21%)</title><rect x="333.9" y="387.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="336.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.10%)</title><rect x="334.9" y="371.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="337.9" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.07%)</title><rect x="335.3" y="355.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="338.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.03%)</title><rect x="336.5" y="435.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="339.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (201 samples, 3.45%)</title><rect x="336.9" y="499.0" width="40.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="339.9" y="510.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (200 samples, 3.43%)</title><rect x="336.9" y="483.0" width="40.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="339.9" y="494.0">roc..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.03%)</title><rect x="338.5" y="467.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="341.5" y="478.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.05%)</title><rect x="338.9" y="467.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="341.9" y="478.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.05%)</title><rect x="338.9" y="451.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="341.9" y="462.0"></text>
</g>
<g>
<title>xdrrec_ops (187 samples, 3.21%)</title><rect x="339.5" y="467.0" width="37.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="342.5" y="478.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.03%)</title><rect x="377.8" y="499.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="380.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.07%)</title><rect x="378.2" y="499.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="381.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (517 samples, 8.87%)</title><rect x="379.0" y="499.0" width="104.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="382.0" y="510.0">rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (511 samples, 8.77%)</title><rect x="379.4" y="483.0" width="103.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="382.4" y="494.0">rocksdb::Wri..</text>
</g>
<g>
<title>sched_yield (8 samples, 0.14%)</title><rect x="382.7" y="467.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="385.7" y="478.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (10 samples, 0.17%)</title><rect x="384.3" y="467.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="387.3" y="478.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.12%)</title><rect x="384.3" y="451.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="387.3" y="462.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.07%)</title><rect x="384.5" y="435.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="387.5" y="446.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="384.5" y="419.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="387.5" y="430.0"></text>
</g>
<g>
<title>mach_timebase_info (2 samples, 0.03%)</title><rect x="384.9" y="419.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="387.9" y="430.0"></text>
</g>
<g>
<title>mach_timebase_info (2 samples, 0.03%)</title><rect x="385.3" y="435.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="388.3" y="446.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.05%)</title><rect x="385.7" y="451.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="388.7" y="462.0"></text>
</g>
<g>
<title>xdrrec_ops (476 samples, 8.17%)</title><rect x="386.5" y="467.0" width="96.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="389.5" y="478.0">xdrrec_ops</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.05%)</title><rect x="483.1" y="483.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="486.1" y="494.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (6 samples, 0.10%)</title><rect x="483.7" y="499.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="486.7" y="510.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.03%)</title><rect x="485.0" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="488.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (3 samples, 0.05%)</title><rect x="485.4" y="515.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="488.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.05%)</title><rect x="486.0" y="515.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="489.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (3 samples, 0.05%)</title><rect x="486.6" y="515.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="489.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (2 samples, 0.03%)</title><rect x="487.4" y="515.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="490.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.10%)</title><rect x="488.4" y="531.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="491.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="488.6" y="515.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="491.6" y="526.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back(char) (2 samples, 0.03%)</title><rect x="488.8" y="499.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="491.8" y="510.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="489.2" y="515.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="492.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (22 samples, 0.38%)</title><rect x="489.6" y="531.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="492.6" y="542.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="489.8" y="515.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="492.8" y="526.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (11 samples, 0.19%)</title><rect x="490.2" y="515.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="493.2" y="526.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.15%)</title><rect x="490.6" y="499.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="493.6" y="510.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.15%)</title><rect x="490.6" y="483.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="493.6" y="494.0"></text>
</g>
<g>
<title>malloc_zone_malloc (9 samples, 0.15%)</title><rect x="490.6" y="467.0" width="1.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="493.6" y="478.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.14%)</title><rect x="490.8" y="451.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="493.8" y="462.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.14%)</title><rect x="490.8" y="435.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="493.8" y="446.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.07%)</title><rect x="491.6" y="419.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="494.6" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (6 samples, 0.10%)</title><rect x="492.5" y="515.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="495.5" y="526.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (5 samples, 0.09%)</title><rect x="492.7" y="499.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="495.7" y="510.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (4 samples, 0.07%)</title><rect x="492.9" y="483.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="495.9" y="494.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (2 samples, 0.03%)</title><rect x="493.7" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="496.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (10 samples, 0.17%)</title><rect x="494.1" y="531.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="497.1" y="542.0"></text>
</g>
<g>
<title>free (5 samples, 0.09%)</title><rect x="494.5" y="515.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="497.5" y="526.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.05%)</title><rect x="494.9" y="499.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="497.9" y="510.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.05%)</title><rect x="495.5" y="515.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="498.5" y="526.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.03%)</title><rect x="496.1" y="531.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="499.1" y="542.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="496.5" y="531.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="499.5" y="542.0"></text>
</g>
<g>
<title>szone_free_definite_size (2 samples, 0.03%)</title><rect x="496.9" y="531.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="499.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.03%)</title><rect x="497.3" y="547.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="500.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.07%)</title><rect x="498.3" y="643.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="501.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.03%)</title><rect x="498.3" y="627.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.3" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="498.3" y="611.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="501.3" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (2 samples, 0.03%)</title><rect x="498.3" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="501.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="498.7" y="627.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.7" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="498.7" y="611.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.7" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="498.7" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="501.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.03%)</title><rect x="499.1" y="643.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.1" y="654.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (39 samples, 0.67%)</title><rect x="499.7" y="723.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (39 samples, 0.67%)</title><rect x="499.7" y="707.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.14%)</title><rect x="500.1" y="691.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.1" y="702.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.10%)</title><rect x="500.4" y="675.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.4" y="686.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="501.2" y="659.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="504.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (29 samples, 0.50%)</title><rect x="501.8" y="691.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (29 samples, 0.50%)</title><rect x="501.8" y="675.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.8" y="686.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="502.4" y="659.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.4" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (21 samples, 0.36%)</title><rect x="502.8" y="659.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.8" y="670.0"></text>
</g>
<g>
<title>__cxx_global_var_init (3 samples, 0.05%)</title><rect x="503.0" y="643.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="506.0" y="654.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.12%)</title><rect x="503.6" y="643.0" width="1.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="506.6" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.17%)</title><rect x="505.0" y="643.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="508.0" y="654.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.09%)</title><rect x="505.0" y="627.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="508.0" y="638.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="505.6" y="611.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="508.6" y="622.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.09%)</title><rect x="506.0" y="627.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="509.0" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="507.0" y="659.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="510.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (22 samples, 0.38%)</title><rect x="507.6" y="723.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="510.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (22 samples, 0.38%)</title><rect x="507.6" y="707.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="510.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (18 samples, 0.31%)</title><rect x="507.8" y="691.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="510.8" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="510.7" y="675.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="513.7" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.05%)</title><rect x="511.5" y="691.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="511.5" y="675.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="514.5" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (22 samples, 0.38%)</title><rect x="512.1" y="755.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (17 samples, 0.29%)</title><rect x="512.1" y="739.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (15 samples, 0.26%)</title><rect x="512.5" y="723.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="515.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (15 samples, 0.26%)</title><rect x="512.5" y="707.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.5" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (14 samples, 0.24%)</title><rect x="512.7" y="691.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.7" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.09%)</title><rect x="515.5" y="739.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="518.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.09%)</title><rect x="515.5" y="723.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="518.5" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (11 samples, 0.19%)</title><rect x="516.6" y="755.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.14%)</title><rect x="517.0" y="739.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.14%)</title><rect x="517.0" y="723.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.05%)</title><rect x="517.2" y="707.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="520.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="517.8" y="707.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="520.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="518.2" y="707.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="521.2" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.03%)</title><rect x="518.8" y="755.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="521.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (46 samples, 0.79%)</title><rect x="519.2" y="755.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="522.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.05%)</title><rect x="520.0" y="739.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="523.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.05%)</title><rect x="520.0" y="723.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (34 samples, 0.58%)</title><rect x="520.6" y="739.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="523.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="521.8" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="524.8" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (24 samples, 0.41%)</title><rect x="522.2" y="723.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="525.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (12 samples, 0.21%)</title><rect x="523.2" y="707.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="526.2" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (11 samples, 0.19%)</title><rect x="523.4" y="691.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.4" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (9 samples, 0.15%)</title><rect x="523.4" y="675.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.4" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4 samples, 0.07%)</title><rect x="524.2" y="659.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="527.2" y="670.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.03%)</title><rect x="525.3" y="675.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="528.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (7 samples, 0.12%)</title><rect x="525.7" y="707.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="528.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.09%)</title><rect x="526.1" y="691.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="529.1" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.05%)</title><rect x="526.3" y="675.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="529.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="526.5" y="659.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="529.5" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.09%)</title><rect x="527.5" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="530.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.05%)</title><rect x="527.7" y="723.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="527.7" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="530.7" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.24%)</title><rect x="528.5" y="755.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.24%)</title><rect x="528.5" y="739.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="531.5" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (151 samples, 2.59%)</title><rect x="531.3" y="771.0" width="30.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="534.3" y="782.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (149 samples, 2.56%)</title><rect x="531.3" y="755.0" width="30.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="534.3" y="766.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.15%)</title><rect x="531.3" y="739.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="534.3" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="531.7" y="723.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.7" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="531.7" y="707.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.7" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="532.1" y="691.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="535.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="532.6" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="535.6" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (140 samples, 2.40%)</title><rect x="533.2" y="739.0" width="28.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="536.2" y="750.0">su..</text>
</g>
<g>
<title>java/util/Objects.requireNonNull (2 samples, 0.03%)</title><rect x="533.8" y="723.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="536.8" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="533.8" y="707.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="536.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.15%)</title><rect x="534.2" y="723.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.15%)</title><rect x="534.2" y="707.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.15%)</title><rect x="534.2" y="691.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="537.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.15%)</title><rect x="534.2" y="675.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="537.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.07%)</title><rect x="535.2" y="659.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="538.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (125 samples, 2.15%)</title><rect x="536.0" y="723.0" width="25.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.0" y="734.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (125 samples, 2.15%)</title><rect x="536.0" y="707.0" width="25.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="539.0" y="718.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.03%)</title><rect x="536.2" y="691.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.2" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (120 samples, 2.06%)</title><rect x="536.6" y="691.0" width="24.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.6" y="702.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (118 samples, 2.03%)</title><rect x="537.0" y="675.0" width="23.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="540.0" y="686.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (118 samples, 2.03%)</title><rect x="537.0" y="659.0" width="23.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.0" y="670.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.07%)</title><rect x="538.8" y="643.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="541.8" y="654.0"></text>
</g>
<g>
<title>read (105 samples, 1.80%)</title><rect x="539.6" y="643.0" width="21.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="542.6" y="654.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.03%)</title><rect x="560.9" y="691.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="563.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.03%)</title><rect x="561.5" y="755.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="564.5" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="561.9" y="787.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="564.9" y="798.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="562.7" y="819.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="565.7" y="830.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25859] (2,727 samples, 46.81%)</title><rect x="563.1" y="835.0" width="552.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="566.1" y="846.0">[NIO Selector #2 tid=25859]</text>
</g>
<g>
<title>[unknown_Java] (9 samples, 0.15%)</title><rect x="563.3" y="819.0" width="1.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="566.3" y="830.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,711 samples, 46.53%)</title><rect x="565.2" y="819.0" width="549.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="568.2" y="830.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.07%)</title><rect x="567.2" y="803.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="570.2" y="814.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.03%)</title><rect x="568.0" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.0" y="814.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.03%)</title><rect x="568.0" y="787.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="571.0" y="798.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (228 samples, 3.91%)</title><rect x="568.4" y="803.0" width="46.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="571.4" y="814.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (11 samples, 0.19%)</title><rect x="569.8" y="787.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.05%)</title><rect x="570.2" y="771.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="573.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.09%)</title><rect x="570.8" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="573.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.09%)</title><rect x="570.8" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="573.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="571.0" y="739.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="574.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.03%)</title><rect x="571.4" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="574.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.03%)</title><rect x="572.0" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.03%)</title><rect x="572.0" y="771.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="575.0" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (205 samples, 3.52%)</title><rect x="572.7" y="787.0" width="41.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="575.7" y="798.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (205 samples, 3.52%)</title><rect x="572.7" y="771.0" width="41.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="575.7" y="782.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (205 samples, 3.52%)</title><rect x="572.7" y="755.0" width="41.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="575.7" y="766.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (186 samples, 3.19%)</title><rect x="572.7" y="739.0" width="37.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="575.7" y="750.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.05%)</title><rect x="573.5" y="723.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="576.5" y="734.0"></text>
</g>
<g>
<title>kevent (179 samples, 3.07%)</title><rect x="574.1" y="723.0" width="36.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="577.1" y="734.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.15%)</title><rect x="610.3" y="739.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="613.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.07%)</title><rect x="611.3" y="723.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="614.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.05%)</title><rect x="611.3" y="707.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="614.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.05%)</title><rect x="611.3" y="691.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.05%)</title><rect x="611.3" y="675.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="614.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.07%)</title><rect x="612.2" y="739.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="615.2" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (4 samples, 0.07%)</title><rect x="612.2" y="723.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="615.2" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.05%)</title><rect x="613.0" y="739.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.0" y="750.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.05%)</title><rect x="613.0" y="723.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.03%)</title><rect x="613.0" y="707.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="616.0" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="613.8" y="739.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.8" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (2 samples, 0.03%)</title><rect x="614.2" y="787.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="617.2" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,467 samples, 42.34%)</title><rect x="614.6" y="803.0" width="499.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="617.6" y="814.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,464 samples, 42.29%)</title><rect x="615.0" y="787.0" width="499.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="618.0" y="798.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,302 samples, 39.51%)</title><rect x="615.2" y="771.0" width="466.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.2" y="782.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,204 samples, 37.83%)</title><rect x="616.2" y="755.0" width="446.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="619.2" y="766.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.05%)</title><rect x="616.4" y="739.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="619.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,200 samples, 37.76%)</title><rect x="617.0" y="739.0" width="445.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="620.0" y="750.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,155 samples, 36.99%)</title><rect x="617.4" y="723.0" width="436.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="620.4" y="734.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (629 samples, 10.80%)</title><rect x="617.4" y="707.0" width="127.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="620.4" y="718.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (624 samples, 10.71%)</title><rect x="617.6" y="691.0" width="126.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="620.6" y="702.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (25 samples, 0.43%)</title><rect x="618.2" y="675.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="621.2" y="686.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.03%)</title><rect x="619.2" y="659.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="622.2" y="670.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (18 samples, 0.31%)</title><rect x="619.6" y="659.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.6" y="670.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.03%)</title><rect x="620.1" y="643.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.1" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.05%)</title><rect x="620.5" y="643.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="623.5" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.19%)</title><rect x="621.1" y="643.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.1" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.19%)</title><rect x="621.1" y="627.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="624.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.charAt (9 samples, 0.15%)</title><rect x="621.5" y="611.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.5" y="622.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (4 samples, 0.07%)</title><rect x="622.3" y="595.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="625.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (596 samples, 10.23%)</title><rect x="623.3" y="675.0" width="120.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="626.3" y="686.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session.write (596 samples, 10.23%)</title><rect x="623.3" y="659.0" width="120.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="626.3" y="670.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (595 samples, 10.21%)</title><rect x="623.5" y="643.0" width="120.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="626.5" y="654.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (595 samples, 10.21%)</title><rect x="623.5" y="627.0" width="120.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="626.5" y="638.0">one/nio/net/Jav..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (594 samples, 10.20%)</title><rect x="623.7" y="611.0" width="120.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="626.7" y="622.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (2 samples, 0.03%)</title><rect x="623.9" y="595.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.05%)</title><rect x="624.5" y="595.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.05%)</title><rect x="624.5" y="579.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="627.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="624.7" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (586 samples, 10.06%)</title><rect x="625.1" y="595.0" width="118.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="628.1" y="606.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (586 samples, 10.06%)</title><rect x="625.1" y="579.0" width="118.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.1" y="590.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.09%)</title><rect x="625.7" y="563.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="628.7" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.09%)</title><rect x="625.7" y="547.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.09%)</title><rect x="625.7" y="531.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="628.7" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.03%)</title><rect x="625.7" y="515.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="628.7" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.05%)</title><rect x="626.1" y="515.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="629.1" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.05%)</title><rect x="626.1" y="499.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="629.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (568 samples, 9.75%)</title><rect x="626.7" y="563.0" width="115.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="629.7" y="574.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (567 samples, 9.73%)</title><rect x="626.9" y="547.0" width="114.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="629.9" y="558.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (567 samples, 9.73%)</title><rect x="626.9" y="531.0" width="114.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.9" y="542.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.09%)</title><rect x="630.4" y="515.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="633.4" y="526.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="631.0" y="499.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="634.0" y="510.0"></text>
</g>
<g>
<title>write (545 samples, 9.35%)</title><rect x="631.4" y="515.0" width="110.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="634.4" y="526.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (10 samples, 0.17%)</title><rect x="741.8" y="563.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="744.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.07%)</title><rect x="741.8" y="547.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="744.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.10%)</title><rect x="742.6" y="547.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="745.6" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.07%)</title><rect x="744.0" y="691.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="744.2" y="675.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="747.2" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.05%)</title><rect x="744.2" y="659.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="747.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.21%)</title><rect x="744.8" y="707.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.05%)</title><rect x="745.6" y="691.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="748.6" y="702.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="746.2" y="691.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="749.2" y="702.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.05%)</title><rect x="746.6" y="691.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="749.6" y="702.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="746.6" y="675.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="749.6" y="686.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="746.6" y="659.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="749.6" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.05%)</title><rect x="746.6" y="643.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.6" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (1,514 samples, 25.99%)</title><rect x="747.2" y="707.0" width="306.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="750.2" y="718.0">ru/mail/polis/service/stakenschneider/MyS..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="747.2" y="691.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="750.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="747.2" y="675.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="750.2" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="747.2" y="659.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="750.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.doAction (1,512 samples, 25.95%)</title><rect x="747.7" y="691.0" width="306.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="750.7" y="702.0">ru/mail/polis/service/stakenschneider/MyS..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.put (1,512 samples, 25.95%)</title><rect x="747.7" y="675.0" width="306.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="750.7" y="686.0">ru/mail/polis/service/stakenschneider/MyS..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="747.7" y="659.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="750.7" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="747.7" y="643.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="750.7" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="747.7" y="627.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="750.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="747.7" y="611.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="750.7" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="747.7" y="595.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="750.7" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="747.9" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="750.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.09%)</title><rect x="748.3" y="659.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="751.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.03%)</title><rect x="748.7" y="643.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="751.7" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.03%)</title><rect x="748.7" y="627.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (1,504 samples, 25.82%)</title><rect x="749.3" y="659.0" width="304.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.3" y="670.0">ru/mail/polis/dao/RockDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,495 samples, 25.66%)</title><rect x="749.3" y="643.0" width="302.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.3" y="654.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,495 samples, 25.66%)</title><rect x="749.3" y="627.0" width="302.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="752.3" y="638.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,488 samples, 25.54%)</title><rect x="750.7" y="611.0" width="301.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="753.7" y="622.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="751.1" y="595.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="754.1" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="751.5" y="595.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="754.5" y="606.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,477 samples, 25.35%)</title><rect x="752.9" y="595.0" width="299.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="755.9" y="606.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.09%)</title><rect x="753.1" y="579.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="756.1" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.09%)</title><rect x="754.1" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="757.1" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="755.1" y="579.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="758.1" y="590.0"></text>
</g>
<g>
<title>free_tiny (9 samples, 0.15%)</title><rect x="756.2" y="579.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="759.2" y="590.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (3 samples, 0.05%)</title><rect x="756.6" y="563.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="759.6" y="574.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.07%)</title><rect x="757.2" y="563.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="760.2" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.07%)</title><rect x="758.0" y="579.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="761.0" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.07%)</title><rect x="758.0" y="563.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="761.0" y="574.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.05%)</title><rect x="758.2" y="547.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="761.2" y="558.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="758.4" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="761.4" y="542.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (2 samples, 0.03%)</title><rect x="758.4" y="515.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="761.4" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (30 samples, 0.51%)</title><rect x="758.8" y="579.0" width="6.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="761.8" y="590.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (2 samples, 0.03%)</title><rect x="760.2" y="563.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="763.2" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (14 samples, 0.24%)</title><rect x="760.6" y="563.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="763.6" y="574.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (6 samples, 0.10%)</title><rect x="760.8" y="547.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="763.8" y="558.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.12%)</title><rect x="762.0" y="547.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="765.0" y="558.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.12%)</title><rect x="762.0" y="531.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="765.0" y="542.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.12%)</title><rect x="762.0" y="515.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="765.0" y="526.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.12%)</title><rect x="762.0" y="499.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="765.0" y="510.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.05%)</title><rect x="762.8" y="483.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="765.8" y="494.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="763.0" y="467.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="766.0" y="478.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="763.5" y="563.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="766.5" y="574.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="764.1" y="563.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="767.1" y="574.0"></text>
</g>
<g>
<title>operator new(unsigned long) (18 samples, 0.31%)</title><rect x="765.1" y="579.0" width="3.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="768.1" y="590.0"></text>
</g>
<g>
<title>malloc (18 samples, 0.31%)</title><rect x="765.1" y="563.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="768.1" y="574.0"></text>
</g>
<g>
<title>malloc_zone_malloc (14 samples, 0.24%)</title><rect x="765.5" y="547.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="768.5" y="558.0"></text>
</g>
<g>
<title>default_zone_malloc (4 samples, 0.07%)</title><rect x="765.5" y="531.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="768.5" y="542.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (10 samples, 0.17%)</title><rect x="766.3" y="531.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="769.3" y="542.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (10 samples, 0.17%)</title><rect x="766.3" y="515.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="769.3" y="526.0"></text>
</g>
<g>
<title>__ulock_wait (3 samples, 0.05%)</title><rect x="767.3" y="499.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="770.3" y="510.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="768.3" y="547.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="771.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,396 samples, 23.96%)</title><rect x="768.7" y="579.0" width="282.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="771.7" y="590.0">rocksdb::CompactedDBImpl::Open(rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,395 samples, 23.94%)</title><rect x="768.9" y="563.0" width="282.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="771.9" y="574.0">rocksdb::DBImpl::Put(rocksdb::WriteOpt..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,391 samples, 23.88%)</title><rect x="768.9" y="547.0" width="281.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="771.9" y="558.0">rocksdb::DB::Put(rocksdb::WriteOptions..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,347 samples, 23.12%)</title><rect x="769.5" y="531.0" width="272.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="772.5" y="542.0">rocksdb::DBImpl::Write(rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,337 samples, 22.95%)</title><rect x="769.9" y="515.0" width="270.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="772.9" y="526.0">rocksdb::DBImpl::WriteImpl(rocksdb::..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.05%)</title><rect x="775.8" y="499.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="778.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.07%)</title><rect x="777.0" y="499.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="780.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (364 samples, 6.25%)</title><rect x="777.8" y="499.0" width="73.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="780.8" y="510.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (358 samples, 6.14%)</title><rect x="778.4" y="483.0" width="72.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="781.4" y="494.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (355 samples, 6.09%)</title><rect x="778.8" y="467.0" width="71.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="781.8" y="478.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.05%)</title><rect x="779.5" y="451.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="782.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (349 samples, 5.99%)</title><rect x="780.1" y="451.0" width="70.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.1" y="462.0">rocksdb:..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="780.9" y="435.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="783.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (6 samples, 0.10%)</title><rect x="781.7" y="435.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (335 samples, 5.75%)</title><rect x="782.9" y="435.0" width="67.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="785.9" y="446.0">rocksdb..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.09%)</title><rect x="783.5" y="419.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="786.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize() (2 samples, 0.03%)</title><rect x="784.5" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="787.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (325 samples, 5.58%)</title><rect x="784.9" y="419.0" width="65.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="787.9" y="430.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (4 samples, 0.07%)</title><rect x="785.7" y="403.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="788.7" y="414.0"></text>
</g>
<g>
<title>write (317 samples, 5.44%)</title><rect x="786.5" y="403.0" width="64.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="789.5" y="414.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (3 samples, 0.05%)</title><rect x="850.9" y="483.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="853.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.05%)</title><rect x="851.6" y="499.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="854.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (4 samples, 0.07%)</title><rect x="852.2" y="499.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.2" y="510.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="852.6" y="483.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="855.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (76 samples, 1.30%)</title><rect x="853.0" y="499.0" width="15.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="856.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (72 samples, 1.24%)</title><rect x="853.8" y="483.0" width="14.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="856.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (68 samples, 1.17%)</title><rect x="854.6" y="467.0" width="13.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="857.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (65 samples, 1.12%)</title><rect x="855.2" y="451.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="858.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (3 samples, 0.05%)</title><rect x="855.8" y="435.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="858.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (55 samples, 0.94%)</title><rect x="856.6" y="435.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="859.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (44 samples, 0.76%)</title><rect x="858.8" y="419.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="861.8" y="430.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.07%)</title><rect x="863.3" y="403.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="866.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.05%)</title><rect x="864.1" y="403.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.05%)</title><rect x="864.1" y="387.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="867.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (15 samples, 0.26%)</title><rect x="864.7" y="403.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="867.7" y="414.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="865.9" y="387.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="868.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.12%)</title><rect x="866.3" y="387.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="869.3" y="398.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.09%)</title><rect x="866.7" y="371.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="869.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="868.0" y="435.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="871.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (33 samples, 0.57%)</title><rect x="868.4" y="499.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.4" y="510.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.05%)</title><rect x="868.6" y="483.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="871.6" y="494.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="868.8" y="467.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="871.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (26 samples, 0.45%)</title><rect x="869.4" y="483.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="872.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.45%)</title><rect x="869.4" y="467.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="872.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (25 samples, 0.43%)</title><rect x="869.6" y="451.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="872.6" y="462.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="870.0" y="435.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="873.0" y="446.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="870.0" y="419.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="873.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (20 samples, 0.34%)</title><rect x="870.4" y="435.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="873.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.34%)</title><rect x="870.4" y="419.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="873.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="870.4" y="403.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="873.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (18 samples, 0.31%)</title><rect x="870.8" y="403.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="873.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.09%)</title><rect x="873.4" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="876.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.05%)</title><rect x="873.6" y="371.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.6" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="873.8" y="355.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="876.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="874.6" y="483.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (2 samples, 0.03%)</title><rect x="875.3" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="878.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (255 samples, 4.38%)</title><rect x="875.7" y="499.0" width="51.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="878.7" y="510.0">rocks..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (253 samples, 4.34%)</title><rect x="875.9" y="483.0" width="51.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="878.9" y="494.0">rocks..</text>
</g>
<g>
<title>sched_yield (3 samples, 0.05%)</title><rect x="877.7" y="467.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="880.7" y="478.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (7 samples, 0.12%)</title><rect x="878.3" y="467.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="881.3" y="478.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.12%)</title><rect x="878.3" y="451.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="881.3" y="462.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.07%)</title><rect x="878.5" y="435.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="881.5" y="446.0"></text>
</g>
<g>
<title>_res (3 samples, 0.05%)</title><rect x="878.5" y="419.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="881.5" y="430.0"></text>
</g>
<g>
<title>mach_timebase_info (2 samples, 0.03%)</title><rect x="879.3" y="435.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="882.3" y="446.0"></text>
</g>
<g>
<title>xdrrec_ops (233 samples, 4.00%)</title><rect x="879.9" y="467.0" width="47.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="882.9" y="478.0">xdrr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.07%)</title><rect x="927.5" y="499.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="930.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (548 samples, 9.41%)</title><rect x="928.3" y="499.0" width="111.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="931.3" y="510.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (543 samples, 9.32%)</title><rect x="928.9" y="483.0" width="110.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="931.9" y="494.0">rocksdb::Writ..</text>
</g>
<g>
<title>sched_yield (6 samples, 0.10%)</title><rect x="933.0" y="467.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="936.0" y="478.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (10 samples, 0.17%)</title><rect x="934.2" y="467.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="937.2" y="478.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.12%)</title><rect x="934.2" y="451.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="937.2" y="462.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.07%)</title><rect x="934.6" y="435.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="937.6" y="446.0"></text>
</g>
<g>
<title>_res (3 samples, 0.05%)</title><rect x="934.8" y="419.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="937.8" y="430.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.05%)</title><rect x="935.6" y="451.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="938.6" y="462.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.05%)</title><rect x="936.2" y="467.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="939.2" y="478.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.05%)</title><rect x="936.2" y="451.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="939.2" y="462.0"></text>
</g>
<g>
<title>xdrrec_ops (504 samples, 8.65%)</title><rect x="936.8" y="467.0" width="102.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="939.8" y="478.0">xdrrec_ops</text>
</g>
<g>
<title>sched_yield (2 samples, 0.03%)</title><rect x="1038.9" y="483.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1041.9" y="494.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="1039.7" y="499.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1042.7" y="510.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (3 samples, 0.05%)</title><rect x="1040.1" y="499.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1043.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.05%)</title><rect x="1040.1" y="483.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1043.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.03%)</title><rect x="1040.9" y="515.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1043.9" y="526.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="1041.5" y="515.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1044.5" y="526.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.03%)</title><rect x="1041.9" y="515.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1044.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (4 samples, 0.07%)</title><rect x="1042.3" y="531.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1045.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 0.17%)</title><rect x="1043.2" y="531.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 0.14%)</title><rect x="1043.4" y="515.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1046.4" y="526.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1043.6" y="499.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1046.6" y="510.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.05%)</title><rect x="1044.2" y="499.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (14 samples, 0.24%)</title><rect x="1045.2" y="531.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.2" y="542.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="1045.2" y="515.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1048.2" y="526.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.09%)</title><rect x="1045.6" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.6" y="526.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.07%)</title><rect x="1045.8" y="499.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1048.8" y="510.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.07%)</title><rect x="1045.8" y="483.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1048.8" y="494.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.07%)</title><rect x="1045.8" y="467.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1048.8" y="478.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.07%)</title><rect x="1045.8" y="451.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1048.8" y="462.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.07%)</title><rect x="1045.8" y="435.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1048.8" y="446.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (7 samples, 0.12%)</title><rect x="1046.6" y="515.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1049.6" y="526.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (7 samples, 0.12%)</title><rect x="1046.6" y="499.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.6" y="510.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (5 samples, 0.09%)</title><rect x="1047.0" y="483.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1050.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.09%)</title><rect x="1048.0" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.0" y="542.0"></text>
</g>
<g>
<title>free (4 samples, 0.07%)</title><rect x="1048.2" y="515.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1051.2" y="526.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.03%)</title><rect x="1048.6" y="499.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1051.6" y="510.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.05%)</title><rect x="1049.0" y="531.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1052.0" y="542.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.07%)</title><rect x="1049.6" y="531.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="1051.1" y="547.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1054.1" y="558.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.03%)</title><rect x="1051.7" y="579.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.07%)</title><rect x="1052.1" y="643.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.1" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.05%)</title><rect x="1052.1" y="627.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1055.1" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.05%)</title><rect x="1052.1" y="611.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1055.1" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (3 samples, 0.05%)</title><rect x="1052.1" y="595.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (5 samples, 0.09%)</title><rect x="1052.9" y="643.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1055.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (5 samples, 0.09%)</title><rect x="1052.9" y="627.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1055.9" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.03%)</title><rect x="1052.9" y="611.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1055.9" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.05%)</title><rect x="1053.3" y="611.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1056.3" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1053.3" y="595.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1056.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1053.5" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1056.5" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1053.5" y="563.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1056.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="1053.5" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1056.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (21 samples, 0.36%)</title><rect x="1054.1" y="723.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1057.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (19 samples, 0.33%)</title><rect x="1054.5" y="707.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1057.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.09%)</title><rect x="1054.7" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.05%)</title><rect x="1054.9" y="675.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1057.9" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (13 samples, 0.22%)</title><rect x="1055.7" y="691.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1058.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (13 samples, 0.22%)</title><rect x="1055.7" y="675.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1058.7" y="686.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.05%)</title><rect x="1056.1" y="659.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1059.1" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1056.3" y="643.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1059.3" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (7 samples, 0.12%)</title><rect x="1056.7" y="659.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1059.7" y="670.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="1056.7" y="643.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1059.7" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.07%)</title><rect x="1057.3" y="643.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.3" y="654.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="1057.7" y="627.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1060.7" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (21 samples, 0.36%)</title><rect x="1058.3" y="723.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1061.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (21 samples, 0.36%)</title><rect x="1058.3" y="707.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1061.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (16 samples, 0.27%)</title><rect x="1058.3" y="691.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1061.3" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.03%)</title><rect x="1060.2" y="675.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1063.2" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="1060.8" y="675.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1063.8" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.09%)</title><rect x="1061.6" y="691.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1064.6" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.09%)</title><rect x="1061.6" y="675.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1064.6" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOStatus.normalize (5 samples, 0.09%)</title><rect x="1061.6" y="659.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1064.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (22 samples, 0.38%)</title><rect x="1062.6" y="755.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1065.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (14 samples, 0.24%)</title><rect x="1063.0" y="739.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1066.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (14 samples, 0.24%)</title><rect x="1063.0" y="723.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1066.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (14 samples, 0.24%)</title><rect x="1063.0" y="707.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1066.0" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (13 samples, 0.22%)</title><rect x="1063.2" y="691.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1066.2" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.10%)</title><rect x="1065.8" y="739.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1068.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.10%)</title><rect x="1065.8" y="723.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1068.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (12 samples, 0.21%)</title><rect x="1067.1" y="755.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1070.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.14%)</title><rect x="1067.7" y="739.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1070.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.14%)</title><rect x="1067.7" y="723.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1070.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.05%)</title><rect x="1067.7" y="707.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1070.7" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.05%)</title><rect x="1067.7" y="691.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.05%)</title><rect x="1068.3" y="707.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1071.3" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1068.9" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1071.9" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.05%)</title><rect x="1069.5" y="755.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1072.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (45 samples, 0.77%)</title><rect x="1070.1" y="755.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1073.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (31 samples, 0.53%)</title><rect x="1071.7" y="739.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1074.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (25 samples, 0.43%)</title><rect x="1072.7" y="723.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1075.7" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (15 samples, 0.26%)</title><rect x="1073.3" y="707.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1076.3" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (14 samples, 0.24%)</title><rect x="1073.5" y="691.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1076.5" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (13 samples, 0.22%)</title><rect x="1073.5" y="675.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1076.5" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (8 samples, 0.14%)</title><rect x="1074.6" y="659.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1077.6" y="670.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (7 samples, 0.12%)</title><rect x="1076.4" y="707.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1079.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.10%)</title><rect x="1076.4" y="691.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1079.4" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.07%)</title><rect x="1076.8" y="675.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1079.8" y="686.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.07%)</title><rect x="1076.8" y="659.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1079.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.10%)</title><rect x="1078.0" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1081.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.07%)</title><rect x="1078.4" y="723.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1081.4" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.05%)</title><rect x="1078.6" y="707.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1081.6" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.19%)</title><rect x="1079.2" y="755.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1082.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.19%)</title><rect x="1079.2" y="739.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1082.2" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (161 samples, 2.76%)</title><rect x="1081.4" y="771.0" width="32.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1084.4" y="782.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (161 samples, 2.76%)</title><rect x="1081.4" y="755.0" width="32.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1084.4" y="766.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.17%)</title><rect x="1081.4" y="739.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1084.4" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.15%)</title><rect x="1081.4" y="723.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1084.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.15%)</title><rect x="1081.4" y="707.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1084.4" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1082.0" y="691.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1085.0" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="1082.2" y="675.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1085.2" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="1082.2" y="659.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1085.2" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="1082.5" y="643.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1085.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.03%)</title><rect x="1082.9" y="691.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1085.9" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (151 samples, 2.59%)</title><rect x="1083.5" y="739.0" width="30.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1086.5" y="750.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.07%)</title><rect x="1083.9" y="723.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1086.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.07%)</title><rect x="1083.9" y="707.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1086.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.07%)</title><rect x="1083.9" y="691.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1086.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.07%)</title><rect x="1083.9" y="675.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1086.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="1084.3" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1087.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (145 samples, 2.49%)</title><rect x="1084.7" y="723.0" width="29.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1087.7" y="734.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (144 samples, 2.47%)</title><rect x="1084.9" y="707.0" width="29.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1087.9" y="718.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (11 samples, 0.19%)</title><rect x="1084.9" y="691.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1087.9" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.17%)</title><rect x="1085.1" y="675.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1088.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.14%)</title><rect x="1085.1" y="659.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1088.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (5 samples, 0.09%)</title><rect x="1085.3" y="643.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1088.3" y="654.0"></text>
</g>
<g>
<title>Copy::conjoint_memory_atomic(void const*, void*, unsigned long) (2 samples, 0.03%)</title><rect x="1085.5" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.5" y="638.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (2 samples, 0.03%)</title><rect x="1085.9" y="627.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1088.9" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="1086.3" y="643.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1089.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="1086.3" y="627.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1089.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.03%)</title><rect x="1086.3" y="611.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1089.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.03%)</title><rect x="1086.7" y="659.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1089.7" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (133 samples, 2.28%)</title><rect x="1087.1" y="691.0" width="26.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1090.1" y="702.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (133 samples, 2.28%)</title><rect x="1087.1" y="675.0" width="26.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1090.1" y="686.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (133 samples, 2.28%)</title><rect x="1087.1" y="659.0" width="26.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1090.1" y="670.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.09%)</title><rect x="1088.7" y="643.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1091.7" y="654.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="1089.3" y="627.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1092.3" y="638.0"></text>
</g>
<g>
<title>read (119 samples, 2.04%)</title><rect x="1089.9" y="643.0" width="24.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1092.9" y="654.0">r..</text>
</g>
<g>
<title>tiny_free_list_add_ptr (6 samples, 0.10%)</title><rect x="1114.2" y="819.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1117.2" y="830.0"></text>
</g>
<g>
<title>[tid=12035] (3 samples, 0.05%)</title><rect x="1115.5" y="835.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1118.5" y="846.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.05%)</title><rect x="1115.5" y="819.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1118.5" y="830.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.05%)</title><rect x="1115.5" y="803.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1118.5" y="814.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.05%)</title><rect x="1115.5" y="787.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1118.5" y="798.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.05%)</title><rect x="1115.5" y="771.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1118.5" y="782.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.05%)</title><rect x="1115.5" y="755.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.5" y="766.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.05%)</title><rect x="1115.5" y="739.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.5" y="750.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1115.5" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.5" y="734.0"></text>
</g>
<g>
<title>[tid=13571] (4 samples, 0.07%)</title><rect x="1116.1" y="835.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1119.1" y="846.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.07%)</title><rect x="1116.1" y="819.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1119.1" y="830.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.07%)</title><rect x="1116.1" y="803.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1119.1" y="814.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.07%)</title><rect x="1116.1" y="787.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1119.1" y="798.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.07%)</title><rect x="1116.1" y="771.0" width="0.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1119.1" y="782.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.07%)</title><rect x="1116.1" y="755.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.1" y="766.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.07%)</title><rect x="1116.1" y="739.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.1" y="750.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.07%)</title><rect x="1116.1" y="723.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.1" y="734.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (4 samples, 0.07%)</title><rect x="1116.1" y="707.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.1" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.05%)</title><rect x="1116.3" y="691.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.3" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.05%)</title><rect x="1116.3" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.3" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="1116.5" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.5" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="1116.5" y="643.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1119.5" y="654.0"></text>
</g>
<g>
<title>[tid=14339] (4 samples, 0.07%)</title><rect x="1116.9" y="835.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1119.9" y="846.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.07%)</title><rect x="1116.9" y="819.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1119.9" y="830.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.07%)</title><rect x="1116.9" y="803.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1119.9" y="814.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.07%)</title><rect x="1116.9" y="787.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1119.9" y="798.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.07%)</title><rect x="1116.9" y="771.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1119.9" y="782.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.07%)</title><rect x="1116.9" y="755.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.9" y="766.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.07%)</title><rect x="1116.9" y="739.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.9" y="750.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.07%)</title><rect x="1116.9" y="723.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.9" y="734.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.03%)</title><rect x="1117.1" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.1" y="718.0"></text>
</g>
<g>
<title>[tid=23043] (3 samples, 0.05%)</title><rect x="1117.9" y="835.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1120.9" y="846.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.05%)</title><rect x="1117.9" y="819.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1120.9" y="830.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.05%)</title><rect x="1117.9" y="803.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1120.9" y="814.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.05%)</title><rect x="1117.9" y="787.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1120.9" y="798.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.05%)</title><rect x="1117.9" y="771.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1120.9" y="782.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.05%)</title><rect x="1117.9" y="755.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.9" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.05%)</title><rect x="1117.9" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.9" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.05%)</title><rect x="1117.9" y="723.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.9" y="734.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.05%)</title><rect x="1117.9" y="707.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.9" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.03%)</title><rect x="1118.1" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.1" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.03%)</title><rect x="1118.1" y="675.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.1" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.03%)</title><rect x="1118.1" y="659.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.1" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="1118.1" y="643.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1121.1" y="654.0"></text>
</g>
<g>
<title>[tid=23555] (15 samples, 0.26%)</title><rect x="1118.5" y="835.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1121.5" y="846.0"></text>
</g>
<g>
<title>thread_start (15 samples, 0.26%)</title><rect x="1118.5" y="819.0" width="3.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1121.5" y="830.0"></text>
</g>
<g>
<title>_pthread_start (15 samples, 0.26%)</title><rect x="1118.5" y="803.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1121.5" y="814.0"></text>
</g>
<g>
<title>_pthread_body (15 samples, 0.26%)</title><rect x="1118.5" y="787.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1121.5" y="798.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (15 samples, 0.26%)</title><rect x="1118.5" y="771.0" width="3.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1121.5" y="782.0"></text>
</g>
<g>
<title>Thread::call_run() (15 samples, 0.26%)</title><rect x="1118.5" y="755.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.5" y="766.0"></text>
</g>
<g>
<title>WatcherThread::run() (15 samples, 0.26%)</title><rect x="1118.5" y="739.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.5" y="750.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (14 samples, 0.24%)</title><rect x="1118.7" y="723.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.7" y="734.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (14 samples, 0.24%)</title><rect x="1118.7" y="707.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.7" y="718.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (14 samples, 0.24%)</title><rect x="1118.7" y="691.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.7" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (13 samples, 0.22%)</title><rect x="1118.9" y="675.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.9" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.21%)</title><rect x="1118.9" y="659.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1121.9" y="670.0"></text>
</g>
<g>
<title>[tid=27651] (4 samples, 0.07%)</title><rect x="1121.5" y="835.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1124.5" y="846.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.07%)</title><rect x="1121.5" y="819.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1124.5" y="830.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.07%)</title><rect x="1121.5" y="803.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1124.5" y="814.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.07%)</title><rect x="1121.5" y="787.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1124.5" y="798.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.07%)</title><rect x="1121.5" y="771.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1124.5" y="782.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.07%)</title><rect x="1121.5" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.5" y="766.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.07%)</title><rect x="1121.5" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.5" y="750.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.05%)</title><rect x="1121.5" y="723.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.5" y="734.0"></text>
</g>
<g>
<title>[tid=27907] (3 samples, 0.05%)</title><rect x="1122.4" y="835.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1125.4" y="846.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.05%)</title><rect x="1122.4" y="819.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1125.4" y="830.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.05%)</title><rect x="1122.4" y="803.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1125.4" y="814.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.05%)</title><rect x="1122.4" y="787.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1125.4" y="798.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.05%)</title><rect x="1122.4" y="771.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1125.4" y="782.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.05%)</title><rect x="1122.4" y="755.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.4" y="766.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.05%)</title><rect x="1122.4" y="739.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.4" y="750.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1122.4" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.4" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.03%)</title><rect x="1122.4" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.4" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.03%)</title><rect x="1122.4" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.4" y="702.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.03%)</title><rect x="1122.4" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.4" y="686.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (2 samples, 0.03%)</title><rect x="1122.4" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.4" y="670.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (2 samples, 0.03%)</title><rect x="1122.4" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.4" y="654.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="1122.4" y="627.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.4" y="638.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (2 samples, 0.03%)</title><rect x="1122.4" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.4" y="622.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.03%)</title><rect x="1122.4" y="595.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.4" y="606.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.03%)</title><rect x="1122.4" y="579.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.4" y="590.0"></text>
</g>
<g>
<title>[tid=36867] (4 samples, 0.07%)</title><rect x="1123.0" y="835.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1126.0" y="846.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.07%)</title><rect x="1123.0" y="819.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1126.0" y="830.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.07%)</title><rect x="1123.0" y="803.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1126.0" y="814.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.07%)</title><rect x="1123.0" y="787.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1126.0" y="798.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.07%)</title><rect x="1123.0" y="771.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1126.0" y="782.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.07%)</title><rect x="1123.0" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.0" y="766.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.07%)</title><rect x="1123.0" y="739.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.0" y="750.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.05%)</title><rect x="1123.0" y="723.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.0" y="734.0"></text>
</g>
<g>
<title>[tid=42499] (16 samples, 0.27%)</title><rect x="1123.8" y="835.0" width="3.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1126.8" y="846.0"></text>
</g>
<g>
<title>thread_start (15 samples, 0.26%)</title><rect x="1124.0" y="819.0" width="3.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1127.0" y="830.0"></text>
</g>
<g>
<title>_pthread_start (15 samples, 0.26%)</title><rect x="1124.0" y="803.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1127.0" y="814.0"></text>
</g>
<g>
<title>_pthread_body (15 samples, 0.26%)</title><rect x="1124.0" y="787.0" width="3.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1127.0" y="798.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (15 samples, 0.26%)</title><rect x="1124.0" y="771.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1127.0" y="782.0"></text>
</g>
<g>
<title>Thread::call_run() (15 samples, 0.26%)</title><rect x="1124.0" y="755.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (15 samples, 0.26%)</title><rect x="1124.0" y="739.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.0" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (15 samples, 0.26%)</title><rect x="1124.0" y="723.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.0" y="734.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (15 samples, 0.26%)</title><rect x="1124.0" y="707.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.0" y="718.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (13 samples, 0.22%)</title><rect x="1124.0" y="691.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.0" y="702.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (12 samples, 0.21%)</title><rect x="1124.2" y="675.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.2" y="686.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (12 samples, 0.21%)</title><rect x="1124.2" y="659.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.2" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_method() (12 samples, 0.21%)</title><rect x="1124.2" y="643.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.2" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (10 samples, 0.17%)</title><rect x="1124.2" y="627.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.2" y="638.0"></text>
</g>
<g>
<title>Compilation::build_hir() (7 samples, 0.12%)</title><rect x="1124.2" y="611.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.2" y="622.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (3 samples, 0.05%)</title><rect x="1124.2" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.2" y="606.0"></text>
</g>
<g>
<title>ValueMap::ValueMap(ValueMap*) (2 samples, 0.03%)</title><rect x="1124.4" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.4" y="590.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.05%)</title><rect x="1124.8" y="595.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.8" y="606.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.05%)</title><rect x="1124.8" y="579.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.8" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.05%)</title><rect x="1124.8" y="563.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.8" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.05%)</title><rect x="1124.8" y="547.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.8" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.05%)</title><rect x="1124.8" y="531.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.8" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.05%)</title><rect x="1124.8" y="515.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.8" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.03%)</title><rect x="1124.8" y="499.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.8" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.03%)</title><rect x="1124.8" y="483.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.8" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.03%)</title><rect x="1124.8" y="467.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.8" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.03%)</title><rect x="1124.8" y="451.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.8" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.03%)</title><rect x="1124.8" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.8" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.03%)</title><rect x="1124.8" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.8" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.03%)</title><rect x="1124.8" y="403.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.8" y="414.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (2 samples, 0.03%)</title><rect x="1126.2" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="638.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (2 samples, 0.03%)</title><rect x="1126.2" y="611.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.2" y="622.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.03%)</title><rect x="1126.6" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.6" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.03%)</title><rect x="1126.6" y="675.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.6" y="686.0"></text>
</g>
<g>
<title>[tid=43267] (311 samples, 5.34%)</title><rect x="1127.0" y="835.0" width="63.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1130.0" y="846.0">[tid=4..</text>
</g>
<g>
<title>thread_start (311 samples, 5.34%)</title><rect x="1127.0" y="819.0" width="63.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1130.0" y="830.0">thread..</text>
</g>
<g>
<title>_pthread_start (311 samples, 5.34%)</title><rect x="1127.0" y="803.0" width="63.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1130.0" y="814.0">_pthre..</text>
</g>
<g>
<title>_pthread_body (311 samples, 5.34%)</title><rect x="1127.0" y="787.0" width="63.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1130.0" y="798.0">_pthre..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (311 samples, 5.34%)</title><rect x="1127.0" y="771.0" width="63.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1130.0" y="782.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (311 samples, 5.34%)</title><rect x="1127.0" y="755.0" width="63.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.0" y="766.0">Thread..</text>
</g>
<g>
<title>JavaThread::run() (311 samples, 5.34%)</title><rect x="1127.0" y="739.0" width="63.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.0" y="750.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (311 samples, 5.34%)</title><rect x="1127.0" y="723.0" width="63.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.0" y="734.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (311 samples, 5.34%)</title><rect x="1127.0" y="707.0" width="63.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.0" y="718.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (311 samples, 5.34%)</title><rect x="1127.0" y="691.0" width="63.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.0" y="702.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (311 samples, 5.34%)</title><rect x="1127.0" y="675.0" width="63.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.0" y="686.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (310 samples, 5.32%)</title><rect x="1127.2" y="659.0" width="62.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="670.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (157 samples, 2.69%)</title><rect x="1127.2" y="643.0" width="31.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.2" y="654.0">Co..</text>
</g>
<g>
<title>Compile::Output() (10 samples, 0.17%)</title><rect x="1127.2" y="627.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.2" y="638.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (5 samples, 0.09%)</title><rect x="1127.2" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.2" y="622.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (5 samples, 0.09%)</title><rect x="1128.2" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.2" y="622.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (5 samples, 0.09%)</title><rect x="1128.2" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.2" y="606.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (3 samples, 0.05%)</title><rect x="1128.2" y="579.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.2" y="590.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (8 samples, 0.14%)</title><rect x="1129.2" y="627.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.2" y="638.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.07%)</title><rect x="1129.4" y="611.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.4" y="622.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.03%)</title><rect x="1129.4" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.4" y="606.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (2 samples, 0.03%)</title><rect x="1130.5" y="611.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.5" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.19%)</title><rect x="1130.9" y="627.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.9" y="638.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.15%)</title><rect x="1131.3" y="611.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.3" y="622.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.03%)</title><rect x="1131.3" y="595.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.3" y="606.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.05%)</title><rect x="1131.9" y="595.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.9" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.03%)</title><rect x="1131.9" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.9" y="590.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.03%)</title><rect x="1132.7" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.7" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (20 samples, 0.34%)</title><rect x="1133.3" y="627.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.3" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (2 samples, 0.03%)</title><rect x="1133.3" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.3" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (2 samples, 0.03%)</title><rect x="1133.7" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.7" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (16 samples, 0.27%)</title><rect x="1134.1" y="611.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.1" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1134.3" y="595.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.3" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.05%)</title><rect x="1134.7" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.7" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.03%)</title><rect x="1135.7" y="595.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.10%)</title><rect x="1136.1" y="595.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.1" y="606.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.07%)</title><rect x="1136.3" y="579.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.3" y="590.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (2 samples, 0.03%)</title><rect x="1136.7" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.7" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (3 samples, 0.05%)</title><rect x="1137.3" y="627.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.3" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::move_to_end(Block*, unsigned int) (2 samples, 0.03%)</title><rect x="1137.5" y="611.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (103 samples, 1.77%)</title><rect x="1137.9" y="627.0" width="20.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.9" y="638.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.03%)</title><rect x="1138.1" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.1" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.10%)</title><rect x="1138.6" y="611.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.6" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 0.03%)</title><rect x="1139.2" y="595.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.03%)</title><rect x="1139.8" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1139.8" y="595.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.19%)</title><rect x="1140.2" y="611.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.2" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.03%)</title><rect x="1142.0" y="595.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (22 samples, 0.38%)</title><rect x="1142.4" y="611.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.4" y="622.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.03%)</title><rect x="1142.8" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.03%)</title><rect x="1143.2" y="595.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.03%)</title><rect x="1143.6" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.6" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (10 samples, 0.17%)</title><rect x="1144.0" y="595.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.0" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.07%)</title><rect x="1144.6" y="579.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.6" y="590.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.05%)</title><rect x="1145.4" y="579.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.07%)</title><rect x="1146.0" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.0" y="606.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.05%)</title><rect x="1146.3" y="579.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.3" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.03%)</title><rect x="1146.9" y="611.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.9" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.03%)</title><rect x="1146.9" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.9" y="606.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.03%)</title><rect x="1146.9" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (14 samples, 0.24%)</title><rect x="1147.5" y="611.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.5" y="622.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (2 samples, 0.03%)</title><rect x="1149.1" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.1" y="606.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (3 samples, 0.05%)</title><rect x="1149.5" y="595.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.5" y="606.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.05%)</title><rect x="1149.5" y="579.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 0.14%)</title><rect x="1150.5" y="611.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.05%)</title><rect x="1151.5" y="595.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.5" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.03%)</title><rect x="1152.1" y="611.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.1" y="622.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 0.14%)</title><rect x="1152.5" y="611.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.5" y="622.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 0.12%)</title><rect x="1152.7" y="595.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.7" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 0.10%)</title><rect x="1152.9" y="579.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.9" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.03%)</title><rect x="1153.5" y="563.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.5" y="574.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.03%)</title><rect x="1153.5" y="547.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.5" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.03%)</title><rect x="1154.2" y="611.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.2" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.03%)</title><rect x="1154.2" y="595.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.05%)</title><rect x="1154.6" y="611.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.6" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1154.8" y="595.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.8" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (17 samples, 0.29%)</title><rect x="1155.2" y="611.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.2" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (8 samples, 0.14%)</title><rect x="1157.0" y="595.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.0" y="606.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.07%)</title><rect x="1157.6" y="579.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.6" y="590.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.03%)</title><rect x="1158.0" y="563.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.0" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (129 samples, 2.21%)</title><rect x="1159.0" y="643.0" width="26.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="654.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.03%)</title><rect x="1159.0" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.0" y="638.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.03%)</title><rect x="1159.0" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="622.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (73 samples, 1.25%)</title><rect x="1159.4" y="627.0" width="14.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.4" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (73 samples, 1.25%)</title><rect x="1159.4" y="611.0" width="14.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.4" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.07%)</title><rect x="1159.4" y="595.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.4" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.07%)</title><rect x="1159.4" y="579.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.4" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.07%)</title><rect x="1159.4" y="563.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.07%)</title><rect x="1159.4" y="547.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.4" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.07%)</title><rect x="1159.4" y="531.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.4" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1159.4" y="515.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="526.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1159.4" y="499.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="510.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1159.4" y="483.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="494.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1159.4" y="467.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.4" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_maximally_unroll(IdealLoopTree*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1159.4" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (2 samples, 0.03%)</title><rect x="1159.4" y="435.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.4" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (2 samples, 0.03%)</title><rect x="1159.4" y="419.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="430.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.03%)</title><rect x="1159.4" y="403.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.4" y="414.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1159.8" y="515.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.8" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (2 samples, 0.03%)</title><rect x="1159.8" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.8" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (2 samples, 0.03%)</title><rect x="1159.8" y="483.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.8" y="494.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.03%)</title><rect x="1159.8" y="467.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.8" y="478.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (2 samples, 0.03%)</title><rect x="1159.8" y="451.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.8" y="462.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (2 samples, 0.03%)</title><rect x="1159.8" y="435.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.8" y="446.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.03%)</title><rect x="1159.8" y="419.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.8" y="430.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (2 samples, 0.03%)</title><rect x="1159.8" y="403.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.8" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.07%)</title><rect x="1160.4" y="595.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.4" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.12%)</title><rect x="1161.2" y="595.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (45 samples, 0.77%)</title><rect x="1162.7" y="595.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (41 samples, 0.70%)</title><rect x="1163.1" y="579.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (33 samples, 0.57%)</title><rect x="1163.3" y="563.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.05%)</title><rect x="1163.9" y="547.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (24 samples, 0.41%)</title><rect x="1165.1" y="547.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.1" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.10%)</title><rect x="1165.1" y="531.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.1" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (18 samples, 0.31%)</title><rect x="1166.3" y="531.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.3" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (18 samples, 0.31%)</title><rect x="1166.3" y="515.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="526.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (14 samples, 0.24%)</title><rect x="1167.1" y="499.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.05%)</title><rect x="1169.9" y="563.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.03%)</title><rect x="1170.2" y="547.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.2" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (3 samples, 0.05%)</title><rect x="1170.6" y="563.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.05%)</title><rect x="1170.6" y="547.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.6" y="558.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.03%)</title><rect x="1170.8" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.03%)</title><rect x="1171.4" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.4" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_intrinsify_fill() (2 samples, 0.03%)</title><rect x="1172.0" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (6 samples, 0.10%)</title><rect x="1172.4" y="595.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.4" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.07%)</title><rect x="1172.8" y="579.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.03%)</title><rect x="1173.0" y="563.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.0" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.03%)</title><rect x="1173.6" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (38 samples, 0.65%)</title><rect x="1175.0" y="627.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.03%)</title><rect x="1175.2" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.03%)</title><rect x="1175.2" y="595.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.03%)</title><rect x="1175.8" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="622.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.03%)</title><rect x="1175.8" y="595.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.07%)</title><rect x="1176.2" y="611.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.2" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 0.31%)</title><rect x="1177.0" y="611.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (14 samples, 0.24%)</title><rect x="1177.8" y="595.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.03%)</title><rect x="1178.1" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 0.15%)</title><rect x="1178.5" y="579.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.05%)</title><rect x="1178.5" y="563.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.03%)</title><rect x="1178.7" y="547.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.03%)</title><rect x="1178.7" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (5 samples, 0.09%)</title><rect x="1179.1" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (3 samples, 0.05%)</title><rect x="1179.3" y="547.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.05%)</title><rect x="1179.3" y="531.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="542.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.03%)</title><rect x="1179.5" y="515.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.03%)</title><rect x="1180.3" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.03%)</title><rect x="1180.3" y="563.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="574.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.03%)</title><rect x="1180.3" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.03%)</title><rect x="1180.7" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.14%)</title><rect x="1181.1" y="611.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.10%)</title><rect x="1181.3" y="595.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.15%)</title><rect x="1182.7" y="627.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.15%)</title><rect x="1182.7" y="611.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="622.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1183.5" y="595.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.5" y="606.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.03%)</title><rect x="1183.5" y="579.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.05%)</title><rect x="1184.5" y="627.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.05%)</title><rect x="1184.5" y="611.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.03%)</title><rect x="1184.5" y="595.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.33%)</title><rect x="1185.9" y="643.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.33%)</title><rect x="1185.9" y="627.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 0.33%)</title><rect x="1185.9" y="611.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 0.33%)</title><rect x="1185.9" y="595.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 0.31%)</title><rect x="1186.2" y="579.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.26%)</title><rect x="1186.2" y="563.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.26%)</title><rect x="1186.2" y="547.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.26%)</title><rect x="1186.2" y="531.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 0.26%)</title><rect x="1186.2" y="515.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.26%)</title><rect x="1186.2" y="499.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.22%)</title><rect x="1186.6" y="483.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.22%)</title><rect x="1186.6" y="467.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.21%)</title><rect x="1186.6" y="451.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.21%)</title><rect x="1186.6" y="435.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.19%)</title><rect x="1186.6" y="419.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.10%)</title><rect x="1186.6" y="403.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.10%)</title><rect x="1186.6" y="387.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1186.8" y="371.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1186.8" y="355.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="1186.8" y="339.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1186.8" y="323.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1186.8" y="307.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1187.0" y="291.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1187.0" y="275.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1187.0" y="259.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1187.0" y="243.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.0" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1187.0" y="227.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1187.0" y="211.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1187.0" y="195.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1187.0" y="179.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="190.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.03%)</title><rect x="1187.0" y="163.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1187.8" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1187.8" y="387.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1187.8" y="371.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1187.8" y="355.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1187.8" y="339.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="1187.8" y="323.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1187.8" y="307.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1187.8" y="291.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1187.8" y="275.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1187.8" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="1187.8" y="243.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1187.8" y="227.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1187.8" y="211.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1187.8" y="195.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1187.8" y="179.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1187.8" y="163.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1187.8" y="147.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1187.8" y="131.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1187.8" y="115.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1187.8" y="99.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1187.8" y="83.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1187.8" y="67.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="78.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1187.8" y="51.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="62.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1188.0" y="35.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1189.2" y="563.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1189.4" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.4" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1189.4" y="531.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1189.4" y="515.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1189.4" y="499.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1189.4" y="483.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1189.4" y="467.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1189.4" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1189.4" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1189.4" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1189.4" y="403.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.4" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.03%)</title><rect x="1189.4" y="387.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.4" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.03%)</title><rect x="1189.4" y="371.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.4" y="382.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.03%)</title><rect x="1189.4" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.4" y="366.0"></text>
</g>
</g>
</svg>
