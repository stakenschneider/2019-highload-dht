<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (7,081 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=24835] (1,937 samples, 27.35%)</title><rect x="10.0" y="499.0" width="322.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="13.0" y="510.0">[NIO Selector #0 tid=24835]</text>
</g>
<g>
<title>[unknown_Java] (8 samples, 0.11%)</title><rect x="10.2" y="483.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.2" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,927 samples, 27.21%)</title><rect x="11.5" y="483.0" width="321.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.5" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.06%)</title><rect x="12.2" y="467.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.2" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (500 samples, 7.06%)</title><rect x="12.8" y="467.0" width="83.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.8" y="478.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (6 samples, 0.08%)</title><rect x="12.8" y="451.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.8" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.03%)</title><rect x="13.0" y="435.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.04%)</title><rect x="13.3" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.04%)</title><rect x="13.3" y="419.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="13.3" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.3" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (12 samples, 0.17%)</title><rect x="13.8" y="451.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (12 samples, 0.17%)</title><rect x="13.8" y="435.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (9 samples, 0.13%)</title><rect x="14.3" y="419.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.3" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (9 samples, 0.13%)</title><rect x="14.3" y="403.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.3" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (6 samples, 0.08%)</title><rect x="14.5" y="387.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.5" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="15.5" y="387.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (482 samples, 6.81%)</title><rect x="15.8" y="451.0" width="80.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.8" y="462.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (482 samples, 6.81%)</title><rect x="15.8" y="435.0" width="80.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.8" y="446.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (482 samples, 6.81%)</title><rect x="15.8" y="419.0" width="80.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.8" y="430.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (476 samples, 6.72%)</title><rect x="15.8" y="403.0" width="79.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.8" y="414.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (7 samples, 0.10%)</title><rect x="20.0" y="387.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="23.0" y="398.0"></text>
</g>
<g>
<title>kevent (444 samples, 6.27%)</title><rect x="21.2" y="387.0" width="74.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="24.2" y="398.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.04%)</title><rect x="95.2" y="403.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.04%)</title><rect x="95.2" y="387.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.04%)</title><rect x="95.2" y="371.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.04%)</title><rect x="95.2" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.04%)</title><rect x="95.2" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="95.8" y="403.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,419 samples, 20.04%)</title><rect x="96.2" y="467.0" width="236.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.2" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,417 samples, 20.01%)</title><rect x="96.2" y="451.0" width="236.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.2" y="462.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,344 samples, 18.98%)</title><rect x="96.3" y="435.0" width="224.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.3" y="446.0">one/nio/http/HttpSession.proc..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,326 samples, 18.73%)</title><rect x="97.3" y="419.0" width="221.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.3" y="430.0">one/nio/http/HttpSession.hand..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,325 samples, 18.71%)</title><rect x="97.5" y="403.0" width="220.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.5" y="414.0">one/nio/http/HttpServer.handl..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,316 samples, 18.58%)</title><rect x="97.5" y="387.0" width="219.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="100.5" y="398.0">RequestHandler1_entity.handle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (395 samples, 5.58%)</title><rect x="97.7" y="371.0" width="65.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="100.7" y="382.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (388 samples, 5.48%)</title><rect x="98.2" y="355.0" width="64.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.2" y="366.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.16%)</title><rect x="98.2" y="339.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.11%)</title><rect x="98.7" y="323.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.06%)</title><rect x="98.8" y="307.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="99.2" y="291.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.2" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="99.5" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.5" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="99.5" y="291.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (377 samples, 5.32%)</title><rect x="100.0" y="339.0" width="62.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.0" y="350.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (375 samples, 5.30%)</title><rect x="100.3" y="323.0" width="62.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.3" y="334.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (370 samples, 5.23%)</title><rect x="100.7" y="307.0" width="61.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.7" y="318.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (369 samples, 5.21%)</title><rect x="100.8" y="291.0" width="61.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.8" y="302.0">one/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (368 samples, 5.20%)</title><rect x="101.0" y="275.0" width="61.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="104.0" y="286.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (366 samples, 5.17%)</title><rect x="101.3" y="259.0" width="61.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.3" y="270.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (366 samples, 5.17%)</title><rect x="101.3" y="243.0" width="61.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="104.3" y="254.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (359 samples, 5.07%)</title><rect x="101.5" y="227.0" width="59.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="104.5" y="238.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (359 samples, 5.07%)</title><rect x="101.5" y="211.0" width="59.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.5" y="222.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (359 samples, 5.07%)</title><rect x="101.5" y="195.0" width="59.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.5" y="206.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.04%)</title><rect x="102.8" y="179.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="105.8" y="190.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="103.0" y="163.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="106.0" y="174.0"></text>
</g>
<g>
<title>write (348 samples, 4.91%)</title><rect x="103.3" y="179.0" width="58.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="106.3" y="190.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.08%)</title><rect x="161.3" y="227.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="164.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.04%)</title><rect x="161.8" y="211.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="164.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.03%)</title><rect x="162.0" y="195.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="165.0" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="162.3" y="307.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="165.3" y="318.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="162.5" y="291.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="165.5" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.04%)</title><rect x="163.0" y="355.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="166.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.10%)</title><rect x="163.5" y="371.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="163.5" y="355.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="166.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.06%)</title><rect x="163.5" y="339.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="164.3" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="164.3" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="164.3" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="164.3" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="167.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (913 samples, 12.89%)</title><rect x="164.6" y="371.0" width="152.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.6" y="382.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.doAction (912 samples, 12.88%)</title><rect x="164.8" y="355.0" width="152.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.8" y="366.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.delete (907 samples, 12.81%)</title><rect x="164.8" y="339.0" width="151.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.8" y="350.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.07%)</title><rect x="164.8" y="323.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (902 samples, 12.74%)</title><rect x="165.6" y="323.0" width="150.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.6" y="334.0">ru/mail/polis/dao/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (899 samples, 12.70%)</title><rect x="165.6" y="307.0" width="149.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="168.6" y="318.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (899 samples, 12.70%)</title><rect x="165.6" y="291.0" width="149.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="168.6" y="302.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (891 samples, 12.58%)</title><rect x="167.0" y="275.0" width="148.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="170.0" y="286.0">Java_org_rocksdb_Ro..</text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="167.3" y="259.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="170.3" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="167.6" y="259.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="170.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.04%)</title><rect x="168.3" y="259.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="171.3" y="270.0"></text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (880 samples, 12.43%)</title><rect x="168.8" y="259.0" width="146.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="171.8" y="270.0">rocksdb_delete_hel..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.04%)</title><rect x="169.0" y="243.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="172.0" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="169.5" y="243.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="172.5" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="170.0" y="243.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="173.0" y="254.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="170.5" y="243.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="173.5" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.04%)</title><rect x="170.8" y="243.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="173.8" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="171.0" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="174.0" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (12 samples, 0.17%)</title><rect x="171.3" y="243.0" width="2.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="174.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.07%)</title><rect x="172.1" y="227.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="175.1" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.07%)</title><rect x="172.1" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="175.1" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.07%)</title><rect x="172.1" y="195.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="175.1" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.07%)</title><rect x="172.1" y="179.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="175.1" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.07%)</title><rect x="172.1" y="163.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="175.1" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.03%)</title><rect x="172.1" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="175.1" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="172.6" y="147.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="175.6" y="158.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.10%)</title><rect x="173.5" y="243.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="176.5" y="254.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.10%)</title><rect x="173.5" y="227.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="176.5" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.10%)</title><rect x="173.5" y="211.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="176.5" y="222.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.04%)</title><rect x="173.6" y="195.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="176.6" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="174.1" y="195.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="177.1" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="174.1" y="179.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="177.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (845 samples, 11.93%)</title><rect x="174.6" y="243.0" width="140.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="177.6" y="254.0">rocksdb::Compacted..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (842 samples, 11.89%)</title><rect x="174.6" y="227.0" width="140.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="177.6" y="238.0">rocksdb::DBImpl::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (825 samples, 11.65%)</title><rect x="175.1" y="211.0" width="137.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="178.1" y="222.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (819 samples, 11.57%)</title><rect x="175.5" y="195.0" width="136.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="178.5" y="206.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.07%)</title><rect x="178.6" y="179.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="181.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.04%)</title><rect x="179.6" y="179.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="182.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ScheduleFlushes(rocksdb::DBImpl::WriteContext*) (2 samples, 0.03%)</title><rect x="179.8" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="182.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::SwitchMemtable(rocksdb::ColumnFamilyData*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.03%)</title><rect x="179.8" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="182.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (188 samples, 2.65%)</title><rect x="180.1" y="179.0" width="31.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="183.1" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.03%)</title><rect x="180.3" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="183.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (2 samples, 0.03%)</title><rect x="180.3" y="147.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="183.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (183 samples, 2.58%)</title><rect x="180.6" y="163.0" width="30.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="183.6" y="174.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (183 samples, 2.58%)</title><rect x="180.6" y="147.0" width="30.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="183.6" y="158.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.06%)</title><rect x="180.8" y="131.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="183.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (178 samples, 2.51%)</title><rect x="181.5" y="131.0" width="29.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="184.5" y="142.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (177 samples, 2.50%)</title><rect x="181.6" y="115.0" width="29.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="184.6" y="126.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (176 samples, 2.49%)</title><rect x="181.8" y="99.0" width="29.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="184.8" y="110.0">ro..</text>
</g>
<g>
<title>write (174 samples, 2.46%)</title><rect x="182.1" y="83.0" width="29.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="185.1" y="94.0">wr..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (54 samples, 0.76%)</title><rect x="211.6" y="179.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="214.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (50 samples, 0.71%)</title><rect x="212.3" y="163.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="215.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (44 samples, 0.62%)</title><rect x="213.3" y="147.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="216.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (40 samples, 0.56%)</title><rect x="214.0" y="131.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="217.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (37 samples, 0.52%)</title><rect x="214.0" y="115.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="217.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (33 samples, 0.47%)</title><rect x="214.6" y="99.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="217.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.06%)</title><rect x="217.1" y="83.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="220.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.06%)</title><rect x="217.1" y="67.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="220.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (13 samples, 0.18%)</title><rect x="217.8" y="83.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="220.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.11%)</title><rect x="218.3" y="67.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="221.3" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.07%)</title><rect x="218.8" y="51.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="221.8" y="62.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="219.6" y="67.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="222.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.04%)</title><rect x="220.1" y="115.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="223.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (35 samples, 0.49%)</title><rect x="220.6" y="179.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="223.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (29 samples, 0.41%)</title><rect x="221.6" y="163.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="224.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.41%)</title><rect x="221.6" y="147.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="224.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.37%)</title><rect x="222.1" y="131.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="225.1" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="222.1" y="115.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="225.1" y="126.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="222.6" y="115.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="225.6" y="126.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="222.6" y="99.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="225.6" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="222.6" y="83.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="225.6" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="222.6" y="67.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="225.6" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="222.6" y="51.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="225.6" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (20 samples, 0.28%)</title><rect x="223.0" y="115.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="226.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.24%)</title><rect x="223.5" y="99.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="226.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (13 samples, 0.18%)</title><rect x="224.1" y="83.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="227.1" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="224.6" y="67.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="227.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 0.11%)</title><rect x="225.0" y="67.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="228.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.07%)</title><rect x="225.3" y="51.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="228.3" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.07%)</title><rect x="225.3" y="35.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="228.3" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (268 samples, 3.78%)</title><rect x="226.5" y="179.0" width="44.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="229.5" y="190.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (268 samples, 3.78%)</title><rect x="226.5" y="163.0" width="44.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="229.5" y="174.0">rock..</text>
</g>
<g>
<title>xdrrec_ops (264 samples, 3.73%)</title><rect x="227.1" y="147.0" width="44.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="230.1" y="158.0">xdrr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (16 samples, 0.23%)</title><rect x="271.1" y="179.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="274.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (13 samples, 0.18%)</title><rect x="271.6" y="163.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="274.6" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.16%)</title><rect x="272.0" y="147.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="275.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.16%)</title><rect x="272.0" y="131.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="275.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (12 samples, 0.17%)</title><rect x="273.8" y="179.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="276.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.13%)</title><rect x="274.3" y="163.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="277.3" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.11%)</title><rect x="274.5" y="147.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="277.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (208 samples, 2.94%)</title><rect x="275.8" y="179.0" width="34.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="278.8" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (205 samples, 2.90%)</title><rect x="276.0" y="163.0" width="34.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="279.0" y="174.0">ro..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.06%)</title><rect x="279.6" y="147.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="282.6" y="158.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.04%)</title><rect x="279.6" y="131.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="282.6" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="279.8" y="115.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="282.8" y="126.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="279.8" y="99.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="282.8" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (101 samples, 1.43%)</title><rect x="280.3" y="147.0" width="16.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="283.3" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (92 samples, 1.30%)</title><rect x="280.3" y="131.0" width="15.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="283.3" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.11%)</title><rect x="295.6" y="131.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="298.6" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.08%)</title><rect x="296.0" y="115.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="299.0" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.08%)</title><rect x="296.0" y="99.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="299.0" y="110.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (2 samples, 0.03%)</title><rect x="297.1" y="147.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="300.1" y="158.0"></text>
</g>
<g>
<title>xdrrec_ops (76 samples, 1.07%)</title><rect x="297.5" y="147.0" width="12.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="300.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (5 samples, 0.07%)</title><rect x="310.5" y="179.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="313.5" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.06%)</title><rect x="310.5" y="163.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="313.5" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.06%)</title><rect x="310.5" y="147.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="313.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (3 samples, 0.04%)</title><rect x="312.1" y="195.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="315.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="312.6" y="211.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="315.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (9 samples, 0.13%)</title><rect x="313.0" y="211.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="316.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.03%)</title><rect x="313.0" y="195.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="316.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (5 samples, 0.07%)</title><rect x="313.3" y="195.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="316.3" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.04%)</title><rect x="313.5" y="179.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="316.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.03%)</title><rect x="314.6" y="211.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="317.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.03%)</title><rect x="315.0" y="227.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="318.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (3 samples, 0.04%)</title><rect x="315.5" y="307.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="318.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.03%)</title><rect x="315.6" y="291.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="318.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.get (3 samples, 0.04%)</title><rect x="316.0" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.0" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.04%)</title><rect x="316.0" y="323.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="319.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.04%)</title><rect x="316.0" y="307.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.put (2 samples, 0.03%)</title><rect x="316.5" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.08%)</title><rect x="316.8" y="387.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.07%)</title><rect x="317.0" y="371.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.06%)</title><rect x="317.1" y="355.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="320.1" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.06%)</title><rect x="317.1" y="339.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="320.1" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.03%)</title><rect x="317.5" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.5" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.04%)</title><rect x="317.8" y="387.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="318.0" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.0" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="318.0" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="318.0" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.0" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="318.0" y="323.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="321.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8 samples, 0.11%)</title><rect x="318.3" y="419.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.3" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="318.8" y="403.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="318.8" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.04%)</title><rect x="319.1" y="403.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="319.6" y="419.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.6" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="320.0" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.0" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="320.0" y="403.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (72 samples, 1.02%)</title><rect x="320.3" y="435.0" width="12.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.3" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (72 samples, 1.02%)</title><rect x="320.3" y="419.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="320.3" y="403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="323.3" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="320.3" y="387.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="320.3" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.3" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="320.3" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (70 samples, 0.99%)</title><rect x="320.6" y="403.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.06%)</title><rect x="320.6" y="387.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.06%)</title><rect x="320.6" y="371.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.06%)</title><rect x="320.6" y="355.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.06%)</title><rect x="320.6" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="323.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="320.6" y="323.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="321.0" y="323.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.0" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="321.0" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (65 samples, 0.92%)</title><rect x="321.5" y="387.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (65 samples, 0.92%)</title><rect x="321.5" y="371.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (64 samples, 0.90%)</title><rect x="321.5" y="355.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (63 samples, 0.89%)</title><rect x="321.6" y="339.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (63 samples, 0.89%)</title><rect x="321.6" y="323.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.6" y="334.0"></text>
</g>
<g>
<title>read (58 samples, 0.82%)</title><rect x="322.5" y="307.0" width="9.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="325.5" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="332.3" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="335.3" y="462.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="332.3" y="435.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="335.3" y="446.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=38915] (2,529 samples, 35.72%)</title><rect x="332.8" y="499.0" width="421.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="335.8" y="510.0">[NIO Selector #1 tid=38915]</text>
</g>
<g>
<title>[unknown_Java] (11 samples, 0.16%)</title><rect x="332.8" y="483.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="335.8" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,517 samples, 35.55%)</title><rect x="334.6" y="483.0" width="419.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.6" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (7 samples, 0.10%)</title><rect x="334.8" y="467.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="337.8" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (2 samples, 0.03%)</title><rect x="336.0" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.0" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.03%)</title><rect x="336.0" y="451.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="339.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.03%)</title><rect x="336.0" y="435.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="339.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (359 samples, 5.07%)</title><rect x="336.3" y="467.0" width="59.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="339.3" y="478.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (15 samples, 0.21%)</title><rect x="336.3" y="451.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.3" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.06%)</title><rect x="336.6" y="435.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="339.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.04%)</title><rect x="336.8" y="419.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (9 samples, 0.13%)</title><rect x="337.3" y="435.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (9 samples, 0.13%)</title><rect x="337.3" y="419.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (6 samples, 0.08%)</title><rect x="337.3" y="403.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (6 samples, 0.08%)</title><rect x="337.3" y="387.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="340.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.08%)</title><rect x="337.3" y="371.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="340.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.04%)</title><rect x="338.3" y="403.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="341.3" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (19 samples, 0.27%)</title><rect x="338.8" y="451.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (19 samples, 0.27%)</title><rect x="338.8" y="435.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (18 samples, 0.25%)</title><rect x="339.0" y="419.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="342.0" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (17 samples, 0.24%)</title><rect x="339.0" y="403.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.0" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (15 samples, 0.21%)</title><rect x="339.0" y="387.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="342.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="341.1" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.1" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="341.5" y="387.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="344.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (325 samples, 4.59%)</title><rect x="342.0" y="451.0" width="54.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.0" y="462.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (325 samples, 4.59%)</title><rect x="342.0" y="435.0" width="54.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.0" y="446.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (325 samples, 4.59%)</title><rect x="342.0" y="419.0" width="54.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.0" y="430.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (322 samples, 4.55%)</title><rect x="342.0" y="403.0" width="53.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="345.0" y="414.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.03%)</title><rect x="344.3" y="387.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="347.3" y="398.0"></text>
</g>
<g>
<title>kevent (306 samples, 4.32%)</title><rect x="344.6" y="387.0" width="51.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="347.6" y="398.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="395.6" y="403.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="398.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="395.6" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="398.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="395.6" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="395.6" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.6" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="395.6" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="398.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,148 samples, 30.33%)</title><rect x="396.1" y="467.0" width="358.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="399.1" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,146 samples, 30.31%)</title><rect x="396.3" y="451.0" width="357.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="399.3" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,993 samples, 28.15%)</title><rect x="397.1" y="435.0" width="332.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.1" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,953 samples, 27.58%)</title><rect x="399.6" y="419.0" width="325.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="402.6" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,950 samples, 27.54%)</title><rect x="400.1" y="403.0" width="325.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.1" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,939 samples, 27.38%)</title><rect x="400.3" y="387.0" width="323.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.3" y="398.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (564 samples, 7.96%)</title><rect x="400.4" y="371.0" width="94.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.4" y="382.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (554 samples, 7.82%)</title><rect x="400.8" y="355.0" width="92.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.8" y="366.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (17 samples, 0.24%)</title><rect x="400.8" y="339.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.8" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="401.4" y="323.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="404.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.16%)</title><rect x="401.8" y="323.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.8" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.04%)</title><rect x="401.9" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.9" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.10%)</title><rect x="402.4" y="307.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.10%)</title><rect x="402.4" y="291.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.4" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (537 samples, 7.58%)</title><rect x="403.6" y="339.0" width="89.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.6" y="350.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session.write (536 samples, 7.57%)</title><rect x="403.8" y="323.0" width="89.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.8" y="334.0">one/nio/ne..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="404.3" y="307.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="407.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (526 samples, 7.43%)</title><rect x="404.8" y="307.0" width="87.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.8" y="318.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (526 samples, 7.43%)</title><rect x="404.8" y="291.0" width="87.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="407.8" y="302.0">one/nio/ne..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="404.8" y="275.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.8" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="404.9" y="259.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="404.9" y="243.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (523 samples, 7.39%)</title><rect x="405.3" y="275.0" width="87.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.3" y="286.0">sun/nio/ch..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="405.4" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="405.4" y="243.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="405.4" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="405.4" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="405.4" y="195.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.4" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="405.4" y="179.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.4" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="405.4" y="163.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.08%)</title><rect x="405.8" y="259.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.07%)</title><rect x="405.9" y="243.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.04%)</title><rect x="406.3" y="227.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.03%)</title><rect x="406.3" y="211.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="409.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (514 samples, 7.26%)</title><rect x="406.8" y="259.0" width="85.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.8" y="270.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (512 samples, 7.23%)</title><rect x="407.1" y="243.0" width="85.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.1" y="254.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (501 samples, 7.08%)</title><rect x="407.3" y="227.0" width="83.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.3" y="238.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (501 samples, 7.08%)</title><rect x="407.3" y="211.0" width="83.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.3" y="222.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (501 samples, 7.08%)</title><rect x="407.3" y="195.0" width="83.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.3" y="206.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (6 samples, 0.08%)</title><rect x="409.4" y="179.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="412.4" y="190.0"></text>
</g>
<g>
<title>convertReturnVal (5 samples, 0.07%)</title><rect x="410.4" y="179.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="413.4" y="190.0"></text>
</g>
<g>
<title>write (476 samples, 6.72%)</title><rect x="411.4" y="179.0" width="79.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="414.4" y="190.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (10 samples, 0.14%)</title><rect x="490.8" y="227.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="493.8" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.08%)</title><rect x="490.8" y="211.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.8" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.08%)</title><rect x="490.8" y="195.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.8" y="206.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="491.1" y="179.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="494.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.06%)</title><rect x="491.8" y="211.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.8" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.06%)</title><rect x="492.4" y="307.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="495.4" y="318.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="492.4" y="291.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="495.4" y="302.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="492.8" y="291.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="495.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="493.1" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (6 samples, 0.08%)</title><rect x="493.4" y="355.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.06%)</title><rect x="494.4" y="371.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="497.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="494.4" y="355.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="497.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="494.4" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="497.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.03%)</title><rect x="494.8" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="497.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="494.8" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="497.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="494.8" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="497.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (1,370 samples, 19.35%)</title><rect x="495.1" y="371.0" width="228.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="498.1" y="382.0">ru/mail/polis/service/stakensc..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="495.1" y="355.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="495.1" y="339.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.doAction (1,367 samples, 19.31%)</title><rect x="495.6" y="355.0" width="227.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.6" y="366.0">ru/mail/polis/service/stakensc..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.delete (1,359 samples, 19.19%)</title><rect x="495.6" y="339.0" width="226.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="498.6" y="350.0">ru/mail/polis/service/stakensc..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.08%)</title><rect x="495.6" y="323.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (1,353 samples, 19.11%)</title><rect x="496.6" y="323.0" width="225.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="499.6" y="334.0">ru/mail/polis/dao/RockDAO.remove</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,350 samples, 19.07%)</title><rect x="496.6" y="307.0" width="225.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.6" y="318.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,350 samples, 19.07%)</title><rect x="496.6" y="291.0" width="225.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="499.6" y="302.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1,343 samples, 18.97%)</title><rect x="497.8" y="275.0" width="223.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="500.8" y="286.0">Java_org_rocksdb_RocksDB_dele..</text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="498.6" y="259.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="501.6" y="270.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (4 samples, 0.06%)</title><rect x="498.9" y="259.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="501.9" y="270.0"></text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,332 samples, 18.81%)</title><rect x="499.6" y="259.0" width="222.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="502.6" y="270.0">rocksdb_delete_helper(JNIEnv_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="500.4" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="503.4" y="254.0"></text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.03%)</title><rect x="501.6" y="243.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="504.6" y="254.0"></text>
</g>
<g>
<title>free (4 samples, 0.06%)</title><rect x="502.1" y="243.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="505.1" y="254.0"></text>
</g>
<g>
<title>free_tiny (7 samples, 0.10%)</title><rect x="502.8" y="243.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="505.8" y="254.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="502.9" y="227.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="505.9" y="238.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.06%)</title><rect x="503.3" y="227.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="506.3" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.04%)</title><rect x="503.9" y="243.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="506.9" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="504.1" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="507.1" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="504.1" y="211.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="507.1" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="504.1" y="195.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="507.1" y="206.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (15 samples, 0.21%)</title><rect x="504.4" y="243.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="507.4" y="254.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (2 samples, 0.03%)</title><rect x="504.8" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="507.8" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="505.1" y="227.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="508.1" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.07%)</title><rect x="505.6" y="227.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="508.6" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.07%)</title><rect x="505.6" y="211.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="508.6" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title><rect x="505.6" y="195.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="508.6" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="505.6" y="179.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="508.6" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="505.6" y="163.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="508.6" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.03%)</title><rect x="505.6" y="147.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="508.6" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (2 samples, 0.03%)</title><rect x="506.1" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="509.1" y="206.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="506.6" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="509.6" y="238.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (2 samples, 0.03%)</title><rect x="506.6" y="211.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="509.6" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="507.1" y="243.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="510.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,281 samples, 18.09%)</title><rect x="507.4" y="243.0" width="213.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="510.4" y="254.0">rocksdb::CompactedDBImpl::Op..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1,276 samples, 18.02%)</title><rect x="507.6" y="227.0" width="212.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.6" y="238.0">rocksdb::DBImpl::Delete(rock..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (3 samples, 0.04%)</title><rect x="508.1" y="211.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="511.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,236 samples, 17.46%)</title><rect x="508.6" y="211.0" width="206.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="511.6" y="222.0">rocksdb::DBImpl::Write(rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,226 samples, 17.31%)</title><rect x="508.9" y="195.0" width="204.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="511.9" y="206.0">rocksdb::DBImpl::WriteImpl(..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.04%)</title><rect x="514.6" y="179.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="517.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (365 samples, 5.15%)</title><rect x="515.1" y="179.0" width="60.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="518.1" y="190.0">rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (6 samples, 0.08%)</title><rect x="515.3" y="163.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="518.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (3 samples, 0.04%)</title><rect x="515.6" y="147.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="518.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (356 samples, 5.03%)</title><rect x="516.3" y="163.0" width="59.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="519.3" y="174.0">rocksd..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (354 samples, 5.00%)</title><rect x="516.6" y="147.0" width="59.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="519.6" y="158.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (2 samples, 0.03%)</title><rect x="517.1" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="520.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (13 samples, 0.18%)</title><rect x="517.4" y="131.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="520.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (336 samples, 4.75%)</title><rect x="519.6" y="131.0" width="56.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="522.6" y="142.0">rocks..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (4 samples, 0.06%)</title><rect x="520.3" y="115.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="523.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (11 samples, 0.16%)</title><rect x="521.1" y="115.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="524.1" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.06%)</title><rect x="522.1" y="99.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="525.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (316 samples, 4.46%)</title><rect x="522.9" y="115.0" width="52.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="525.9" y="126.0">rocks..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="523.1" y="99.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="526.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (313 samples, 4.42%)</title><rect x="523.4" y="99.0" width="52.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="526.4" y="110.0">rocks..</text>
</g>
<g>
<title>write (306 samples, 4.32%)</title><rect x="524.6" y="83.0" width="51.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="527.6" y="94.0">write</text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.03%)</title><rect x="575.9" y="179.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="578.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (4 samples, 0.06%)</title><rect x="576.4" y="179.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.4" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="576.8" y="163.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="579.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (64 samples, 0.90%)</title><rect x="577.4" y="179.0" width="10.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="580.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (57 samples, 0.80%)</title><rect x="578.6" y="163.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="581.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (55 samples, 0.78%)</title><rect x="578.9" y="147.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="581.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.03%)</title><rect x="579.3" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="582.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (51 samples, 0.72%)</title><rect x="579.6" y="131.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="582.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (47 samples, 0.66%)</title><rect x="580.1" y="115.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="583.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="580.4" y="99.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="583.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.04%)</title><rect x="580.9" y="99.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="583.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (39 samples, 0.55%)</title><rect x="581.4" y="99.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="584.4" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="584.6" y="83.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="587.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.03%)</title><rect x="585.1" y="83.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="588.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (15 samples, 0.21%)</title><rect x="585.4" y="83.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="588.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.08%)</title><rect x="586.8" y="67.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="589.8" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.04%)</title><rect x="587.3" y="51.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="590.3" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (51 samples, 0.72%)</title><rect x="588.1" y="179.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="591.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (47 samples, 0.66%)</title><rect x="588.6" y="163.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="591.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (45 samples, 0.64%)</title><rect x="588.9" y="147.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="591.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (43 samples, 0.61%)</title><rect x="589.3" y="131.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="592.3" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="589.6" y="115.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="592.6" y="126.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="590.1" y="115.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="593.1" y="126.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="590.6" y="115.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="593.6" y="126.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="590.6" y="99.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="593.6" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="590.6" y="83.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="593.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (33 samples, 0.47%)</title><rect x="590.9" y="115.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="593.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (30 samples, 0.42%)</title><rect x="591.4" y="99.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="594.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (28 samples, 0.40%)</title><rect x="591.8" y="83.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="594.8" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="594.3" y="67.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="597.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.04%)</title><rect x="594.6" y="67.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="597.6" y="78.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="594.8" y="51.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="597.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.10%)</title><rect x="595.1" y="67.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="598.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="595.9" y="51.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="598.9" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="595.9" y="35.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="598.9" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long long) (2 samples, 0.03%)</title><rect x="596.6" y="179.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="599.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (234 samples, 3.30%)</title><rect x="596.9" y="179.0" width="39.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="599.9" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (230 samples, 3.25%)</title><rect x="597.1" y="163.0" width="38.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="600.1" y="174.0">roc..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.03%)</title><rect x="599.1" y="147.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="602.1" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (7 samples, 0.10%)</title><rect x="599.4" y="147.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="602.4" y="158.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.08%)</title><rect x="599.4" y="131.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="602.4" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="599.9" y="115.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="602.9" y="126.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="599.9" y="99.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="602.9" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (208 samples, 2.94%)</title><rect x="600.7" y="147.0" width="34.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="603.7" y="158.0">xd..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.03%)</title><rect x="635.6" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="638.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (5 samples, 0.07%)</title><rect x="635.9" y="179.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="638.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.07%)</title><rect x="635.9" y="163.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="638.9" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.04%)</title><rect x="636.1" y="147.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="639.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.04%)</title><rect x="636.1" y="131.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="639.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (16 samples, 0.23%)</title><rect x="636.7" y="179.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="639.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.17%)</title><rect x="637.2" y="163.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="640.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.16%)</title><rect x="637.2" y="147.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="640.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (425 samples, 6.00%)</title><rect x="639.4" y="179.0" width="70.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="642.4" y="190.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (420 samples, 5.93%)</title><rect x="639.4" y="163.0" width="70.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="642.4" y="174.0">rocksdb..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="644.4" y="147.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="647.4" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.06%)</title><rect x="645.2" y="147.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="648.2" y="158.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.06%)</title><rect x="645.2" y="131.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="648.2" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="645.4" y="115.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="648.4" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (228 samples, 3.22%)</title><rect x="645.9" y="147.0" width="38.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="648.9" y="158.0">std..</text>
</g>
<g>
<title>__psynch_cvwait (219 samples, 3.09%)</title><rect x="645.9" y="131.0" width="36.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="648.9" y="142.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.11%)</title><rect x="682.4" y="131.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="685.4" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.10%)</title><rect x="682.6" y="115.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="685.6" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (7 samples, 0.10%)</title><rect x="682.6" y="99.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="685.6" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (152 samples, 2.15%)</title><rect x="684.1" y="147.0" width="25.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="687.1" y="158.0">x..</text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.03%)</title><rect x="709.4" y="163.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="712.4" y="174.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.03%)</title><rect x="709.7" y="163.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="712.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (11 samples, 0.16%)</title><rect x="710.2" y="179.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="713.2" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.16%)</title><rect x="710.2" y="163.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="713.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.16%)</title><rect x="710.2" y="147.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="713.2" y="158.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.03%)</title><rect x="712.9" y="179.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="715.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="712.9" y="163.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="715.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.04%)</title><rect x="714.6" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="717.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (15 samples, 0.21%)</title><rect x="715.1" y="211.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="718.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.03%)</title><rect x="715.1" y="195.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="718.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (10 samples, 0.14%)</title><rect x="715.4" y="195.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="718.4" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (8 samples, 0.11%)</title><rect x="715.7" y="179.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="718.7" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (7 samples, 0.10%)</title><rect x="715.9" y="163.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="718.9" y="174.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="715.9" y="147.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="718.9" y="158.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.07%)</title><rect x="716.2" y="147.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="719.2" y="158.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.07%)</title><rect x="716.2" y="131.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="719.2" y="142.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.07%)</title><rect x="716.2" y="115.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="719.2" y="126.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.06%)</title><rect x="716.4" y="99.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="719.4" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.06%)</title><rect x="716.4" y="83.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="719.4" y="94.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="716.6" y="67.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="719.6" y="78.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="717.1" y="195.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="720.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.10%)</title><rect x="717.6" y="211.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="720.6" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (5 samples, 0.07%)</title><rect x="717.9" y="195.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="720.9" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.03%)</title><rect x="718.1" y="179.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="721.1" y="190.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (2 samples, 0.03%)</title><rect x="718.4" y="179.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="721.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.06%)</title><rect x="718.7" y="211.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="721.7" y="222.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.06%)</title><rect x="718.7" y="195.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="721.7" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="719.1" y="179.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="722.1" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.06%)</title><rect x="719.4" y="211.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="722.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.03%)</title><rect x="720.6" y="227.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="723.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (3 samples, 0.04%)</title><rect x="721.6" y="307.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="724.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (3 samples, 0.04%)</title><rect x="721.6" y="291.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="724.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.03%)</title><rect x="721.6" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="721.6" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="724.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.get (7 samples, 0.10%)</title><rect x="722.1" y="339.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="725.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (7 samples, 0.10%)</title><rect x="722.1" y="323.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.10%)</title><rect x="722.1" y="307.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="725.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="722.9" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.9" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="722.9" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="725.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.10%)</title><rect x="723.6" y="387.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="726.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.10%)</title><rect x="723.6" y="371.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="726.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.08%)</title><rect x="723.7" y="355.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="726.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.08%)</title><rect x="723.7" y="339.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="726.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="724.7" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="727.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (18 samples, 0.25%)</title><rect x="725.1" y="419.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="728.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="725.9" y="403.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="728.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="725.9" y="387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="728.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="725.9" y="371.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="728.9" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="725.9" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="728.9" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.10%)</title><rect x="726.2" y="403.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="729.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.10%)</title><rect x="726.2" y="387.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="729.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.06%)</title><rect x="727.4" y="403.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.03%)</title><rect x="728.1" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="731.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.04%)</title><rect x="728.4" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="731.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="728.9" y="419.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="731.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="728.9" y="403.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="731.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (148 samples, 2.09%)</title><rect x="729.2" y="435.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.2" y="446.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (148 samples, 2.09%)</title><rect x="729.2" y="419.0" width="24.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="732.2" y="430.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.10%)</title><rect x="729.2" y="403.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="732.2" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.10%)</title><rect x="729.2" y="387.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.10%)</title><rect x="729.2" y="371.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="732.2" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.10%)</title><rect x="729.2" y="355.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="732.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.06%)</title><rect x="729.7" y="339.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="732.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.06%)</title><rect x="729.7" y="323.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.7" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="730.1" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (141 samples, 1.99%)</title><rect x="730.4" y="403.0" width="23.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="733.4" y="414.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="730.9" y="387.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="733.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="730.9" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="733.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="730.9" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="730.9" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="733.9" y="350.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="731.4" y="387.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="734.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (132 samples, 1.86%)</title><rect x="731.7" y="387.0" width="22.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="734.7" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (132 samples, 1.86%)</title><rect x="731.7" y="371.0" width="22.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.7" y="382.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (128 samples, 1.81%)</title><rect x="731.9" y="355.0" width="21.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="734.9" y="366.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (128 samples, 1.81%)</title><rect x="731.9" y="339.0" width="21.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.9" y="350.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (128 samples, 1.81%)</title><rect x="731.9" y="323.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="734.9" y="334.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.04%)</title><rect x="733.1" y="307.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="736.1" y="318.0"></text>
</g>
<g>
<title>read (116 samples, 1.64%)</title><rect x="733.9" y="307.0" width="19.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="736.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.04%)</title><rect x="753.2" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="756.2" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25859] (2,551 samples, 36.03%)</title><rect x="754.2" y="499.0" width="425.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="757.2" y="510.0">[NIO Selector #2 tid=25859]</text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.08%)</title><rect x="754.4" y="483.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="757.4" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,541 samples, 35.88%)</title><rect x="755.4" y="483.0" width="423.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.4" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.03%)</title><rect x="756.2" y="467.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.2" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (339 samples, 4.79%)</title><rect x="756.7" y="467.0" width="56.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="759.7" y="478.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7 samples, 0.10%)</title><rect x="756.7" y="451.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="759.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.03%)</title><rect x="757.1" y="435.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="760.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.03%)</title><rect x="757.1" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="760.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.04%)</title><rect x="757.4" y="435.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.04%)</title><rect x="757.4" y="419.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.4" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.03%)</title><rect x="757.6" y="403.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="760.6" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (22 samples, 0.31%)</title><rect x="757.9" y="451.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (22 samples, 0.31%)</title><rect x="757.9" y="435.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="760.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (20 samples, 0.28%)</title><rect x="758.2" y="419.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="761.2" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (12 samples, 0.17%)</title><rect x="758.7" y="403.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="761.7" y="414.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="758.7" y="387.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="761.7" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (8 samples, 0.11%)</title><rect x="759.1" y="387.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="762.1" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="760.4" y="387.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="763.4" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.07%)</title><rect x="760.7" y="403.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="763.7" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (4 samples, 0.06%)</title><rect x="760.7" y="387.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="763.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (310 samples, 4.38%)</title><rect x="761.6" y="451.0" width="51.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="764.6" y="462.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (310 samples, 4.38%)</title><rect x="761.6" y="435.0" width="51.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.6" y="446.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (310 samples, 4.38%)</title><rect x="761.6" y="419.0" width="51.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="764.6" y="430.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (300 samples, 4.24%)</title><rect x="761.6" y="403.0" width="50.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.6" y="414.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.04%)</title><rect x="764.1" y="387.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="767.1" y="398.0"></text>
</g>
<g>
<title>kevent (282 samples, 3.98%)</title><rect x="764.6" y="387.0" width="47.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="767.6" y="398.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.06%)</title><rect x="811.6" y="403.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="814.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.04%)</title><rect x="811.7" y="387.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="814.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.04%)</title><rect x="811.7" y="371.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.04%)</title><rect x="811.7" y="355.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="814.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.04%)</title><rect x="811.7" y="339.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.07%)</title><rect x="812.4" y="403.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,194 samples, 30.98%)</title><rect x="813.2" y="467.0" width="365.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="816.2" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,192 samples, 30.96%)</title><rect x="813.4" y="451.0" width="365.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="816.4" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,046 samples, 28.89%)</title><rect x="813.9" y="435.0" width="340.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.9" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,017 samples, 28.48%)</title><rect x="815.1" y="419.0" width="336.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="818.1" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,015 samples, 28.46%)</title><rect x="815.4" y="403.0" width="335.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="818.4" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,993 samples, 28.15%)</title><rect x="816.2" y="387.0" width="332.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="819.2" y="398.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (525 samples, 7.41%)</title><rect x="816.2" y="371.0" width="87.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="819.2" y="382.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (516 samples, 7.29%)</title><rect x="816.7" y="355.0" width="86.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="819.7" y="366.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (17 samples, 0.24%)</title><rect x="816.7" y="339.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="819.7" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="817.9" y="323.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="820.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.11%)</title><rect x="818.2" y="323.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="821.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.07%)</title><rect x="818.4" y="307.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="819.2" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="822.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="819.2" y="291.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="822.2" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (499 samples, 7.05%)</title><rect x="819.6" y="339.0" width="83.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.6" y="350.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (498 samples, 7.03%)</title><rect x="819.7" y="323.0" width="83.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="822.7" y="334.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (486 samples, 6.86%)</title><rect x="820.2" y="307.0" width="81.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="823.2" y="318.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (486 samples, 6.86%)</title><rect x="820.2" y="291.0" width="81.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.2" y="302.0">one/nio/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (485 samples, 6.85%)</title><rect x="820.4" y="275.0" width="80.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.4" y="286.0">sun/nio/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="820.4" y="259.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="823.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="820.6" y="243.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="823.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="820.6" y="227.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="823.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="820.6" y="211.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.03%)</title><rect x="820.6" y="195.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (482 samples, 6.81%)</title><rect x="820.9" y="259.0" width="80.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="823.9" y="270.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (480 samples, 6.78%)</title><rect x="821.2" y="243.0" width="80.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="824.2" y="254.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (467 samples, 6.60%)</title><rect x="821.7" y="227.0" width="77.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.7" y="238.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (467 samples, 6.60%)</title><rect x="821.7" y="211.0" width="77.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="824.7" y="222.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (467 samples, 6.60%)</title><rect x="821.7" y="195.0" width="77.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="824.7" y="206.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.06%)</title><rect x="823.4" y="179.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="826.4" y="190.0"></text>
</g>
<g>
<title>write (452 samples, 6.38%)</title><rect x="824.2" y="179.0" width="75.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="827.2" y="190.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (10 samples, 0.14%)</title><rect x="899.5" y="227.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="902.5" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.04%)</title><rect x="899.7" y="211.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="902.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.08%)</title><rect x="900.2" y="211.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="903.2" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.13%)</title><rect x="901.2" y="307.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="904.2" y="318.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.06%)</title><rect x="901.4" y="291.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="904.4" y="302.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.06%)</title><rect x="902.0" y="291.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="905.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.06%)</title><rect x="902.7" y="355.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="905.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="903.0" y="339.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="906.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.03%)</title><rect x="903.4" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="906.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.13%)</title><rect x="903.7" y="371.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="906.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="903.7" y="355.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.06%)</title><rect x="903.7" y="339.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.04%)</title><rect x="904.4" y="355.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="907.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.04%)</title><rect x="904.4" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="907.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.04%)</title><rect x="904.4" y="323.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="907.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="904.9" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="907.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="904.9" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="907.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (1,459 samples, 20.60%)</title><rect x="905.2" y="371.0" width="243.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="908.2" y="382.0">ru/mail/polis/service/stakenschn..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="905.4" y="355.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="908.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="905.4" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="908.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.doAction (1,455 samples, 20.55%)</title><rect x="905.9" y="355.0" width="242.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="908.9" y="366.0">ru/mail/polis/service/stakenschn..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.delete (1,451 samples, 20.49%)</title><rect x="905.9" y="339.0" width="241.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="908.9" y="350.0">ru/mail/polis/service/stakenschn..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9 samples, 0.13%)</title><rect x="905.9" y="323.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="908.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="906.9" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="909.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (1,442 samples, 20.36%)</title><rect x="907.4" y="323.0" width="240.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="910.4" y="334.0">ru/mail/polis/dao/RockDAO.remove</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,440 samples, 20.34%)</title><rect x="907.4" y="307.0" width="239.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="910.4" y="318.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,440 samples, 20.34%)</title><rect x="907.4" y="291.0" width="239.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="910.4" y="302.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1,426 samples, 20.14%)</title><rect x="909.7" y="275.0" width="237.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="912.7" y="286.0">Java_org_rocksdb_RocksDB_delete..</text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.06%)</title><rect x="910.5" y="259.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="913.5" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.06%)</title><rect x="911.5" y="259.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="914.5" y="270.0"></text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,409 samples, 19.90%)</title><rect x="912.5" y="259.0" width="234.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="915.5" y="270.0">rocksdb_delete_helper(JNIEnv_*,..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="913.7" y="243.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.7" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.04%)</title><rect x="914.2" y="243.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="917.2" y="254.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="915.9" y="243.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="918.9" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.06%)</title><rect x="916.2" y="243.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="919.2" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="916.5" y="227.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.5" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="916.5" y="211.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="919.5" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="916.5" y="195.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="919.5" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="916.5" y="179.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="919.5" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="916.5" y="163.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="919.5" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="916.5" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="919.5" y="158.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (18 samples, 0.25%)</title><rect x="916.9" y="243.0" width="3.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="919.9" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.11%)</title><rect x="918.4" y="227.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.4" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.06%)</title><rect x="918.9" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="921.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.06%)</title><rect x="918.9" y="195.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.9" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="918.9" y="179.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.9" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="918.9" y="163.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.9" y="174.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="919.9" y="243.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="922.9" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.10%)</title><rect x="920.2" y="243.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="923.2" y="254.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.08%)</title><rect x="920.2" y="227.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="923.2" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.07%)</title><rect x="920.4" y="211.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="923.4" y="222.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.03%)</title><rect x="920.5" y="195.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="923.5" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="920.9" y="195.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="923.9" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="920.9" y="179.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="923.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,353 samples, 19.11%)</title><rect x="921.4" y="243.0" width="225.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="924.4" y="254.0">rocksdb::CompactedDBImpl::Open..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1,346 samples, 19.01%)</title><rect x="921.5" y="227.0" width="224.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.5" y="238.0">rocksdb::DBImpl::Delete(rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,315 samples, 18.57%)</title><rect x="922.2" y="211.0" width="219.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="925.2" y="222.0">rocksdb::DBImpl::Write(rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,293 samples, 18.26%)</title><rect x="923.4" y="195.0" width="215.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="926.4" y="206.0">rocksdb::DBImpl::WriteImpl(r..</text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (2 samples, 0.03%)</title><rect x="927.5" y="179.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="930.5" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (7 samples, 0.10%)</title><rect x="927.9" y="179.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="930.9" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (2 samples, 0.03%)</title><rect x="929.2" y="179.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="932.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.04%)</title><rect x="929.7" y="179.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="932.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (319 samples, 4.51%)</title><rect x="930.2" y="179.0" width="53.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="933.2" y="190.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (313 samples, 4.42%)</title><rect x="930.7" y="163.0" width="52.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.7" y="174.0">rocks..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (307 samples, 4.34%)</title><rect x="931.5" y="147.0" width="51.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="934.5" y="158.0">rocks..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (6 samples, 0.08%)</title><rect x="932.2" y="131.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="935.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (297 samples, 4.19%)</title><rect x="933.2" y="131.0" width="49.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="936.2" y="142.0">rocks..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (2 samples, 0.03%)</title><rect x="933.7" y="115.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="936.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (6 samples, 0.08%)</title><rect x="934.0" y="115.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="937.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (285 samples, 4.02%)</title><rect x="935.0" y="115.0" width="47.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.0" y="126.0">rock..</text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (2 samples, 0.03%)</title><rect x="935.9" y="99.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="938.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (278 samples, 3.93%)</title><rect x="936.2" y="99.0" width="46.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="939.2" y="110.0">rock..</text>
</g>
<g>
<title>write (275 samples, 3.88%)</title><rect x="936.7" y="83.0" width="45.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="939.7" y="94.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (70 samples, 0.99%)</title><rect x="983.7" y="179.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (66 samples, 0.93%)</title><rect x="984.4" y="163.0" width="11.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (60 samples, 0.85%)</title><rect x="985.4" y="147.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (57 samples, 0.80%)</title><rect x="985.9" y="131.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (52 samples, 0.73%)</title><rect x="986.0" y="115.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="986.7" y="99.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (45 samples, 0.64%)</title><rect x="987.2" y="99.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="990.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.04%)</title><rect x="992.0" y="83.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.16%)</title><rect x="992.5" y="83.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.10%)</title><rect x="993.0" y="67.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.0" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.08%)</title><rect x="993.2" y="51.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="996.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="994.4" y="83.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="997.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.06%)</title><rect x="994.7" y="115.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="997.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (46 samples, 0.65%)</title><rect x="995.4" y="179.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.4" y="190.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="995.9" y="163.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="998.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (40 samples, 0.56%)</title><rect x="996.4" y="163.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (38 samples, 0.54%)</title><rect x="996.7" y="147.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="999.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (34 samples, 0.48%)</title><rect x="997.4" y="131.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.4" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="997.5" y="115.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1000.5" y="126.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="997.5" y="99.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1000.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (29 samples, 0.41%)</title><rect x="998.0" y="115.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (26 samples, 0.37%)</title><rect x="998.5" y="99.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.30%)</title><rect x="999.4" y="83.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1002.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.06%)</title><rect x="1000.9" y="67.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1003.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="1001.0" y="51.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1004.0" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 0.11%)</title><rect x="1001.5" y="67.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1004.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="1002.4" y="51.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.4" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (252 samples, 3.56%)</title><rect x="1003.0" y="179.0" width="42.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1006.0" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (248 samples, 3.50%)</title><rect x="1003.4" y="163.0" width="41.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.4" y="174.0">roc..</text>
</g>
<g>
<title>sched_yield (3 samples, 0.04%)</title><rect x="1005.5" y="147.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1008.5" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (6 samples, 0.08%)</title><rect x="1006.0" y="147.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1009.0" y="158.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.08%)</title><rect x="1006.0" y="131.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1009.0" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.06%)</title><rect x="1006.4" y="115.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1009.4" y="126.0"></text>
</g>
<g>
<title>_res (3 samples, 0.04%)</title><rect x="1006.5" y="99.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1009.5" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.04%)</title><rect x="1007.0" y="147.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1010.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="1007.0" y="131.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1010.0" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (222 samples, 3.14%)</title><rect x="1007.7" y="147.0" width="37.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1010.7" y="158.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (14 samples, 0.20%)</title><rect x="1045.2" y="179.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.2" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.14%)</title><rect x="1045.7" y="163.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.7" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.14%)</title><rect x="1045.7" y="147.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1048.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (523 samples, 7.39%)</title><rect x="1047.5" y="179.0" width="87.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.5" y="190.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (3 samples, 0.04%)</title><rect x="1048.0" y="163.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (515 samples, 7.27%)</title><rect x="1048.5" y="163.0" width="85.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.5" y="174.0">rocksdb::W..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="1053.7" y="147.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1056.7" y="158.0"></text>
</g>
<g>
<title>sched_yield (2 samples, 0.03%)</title><rect x="1054.5" y="147.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1057.5" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.06%)</title><rect x="1054.9" y="147.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.9" y="158.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.06%)</title><rect x="1054.9" y="131.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1057.9" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.06%)</title><rect x="1054.9" y="115.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1057.9" y="126.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="1055.0" y="99.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1058.0" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (272 samples, 3.84%)</title><rect x="1055.5" y="147.0" width="45.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.5" y="158.0">std:..</text>
</g>
<g>
<title>__psynch_cvwait (261 samples, 3.69%)</title><rect x="1055.7" y="131.0" width="43.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1058.7" y="142.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.10%)</title><rect x="1099.2" y="131.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1102.2" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.07%)</title><rect x="1099.5" y="115.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1102.5" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.07%)</title><rect x="1099.5" y="99.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1102.5" y="110.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.03%)</title><rect x="1100.3" y="131.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1103.3" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (2 samples, 0.03%)</title><rect x="1100.8" y="147.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.8" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (2 samples, 0.03%)</title><rect x="1100.8" y="131.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1103.8" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (2 samples, 0.03%)</title><rect x="1100.8" y="115.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1103.8" y="126.0"></text>
</g>
<g>
<title>xdrrec_ops (199 samples, 2.81%)</title><rect x="1101.2" y="147.0" width="33.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1104.2" y="158.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (17 samples, 0.24%)</title><rect x="1134.7" y="179.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (16 samples, 0.23%)</title><rect x="1134.8" y="163.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.8" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (15 samples, 0.21%)</title><rect x="1134.8" y="147.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1137.8" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="1138.0" y="179.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.0" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.03%)</title><rect x="1138.5" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.03%)</title><rect x="1139.2" y="195.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.2" y="206.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (3 samples, 0.04%)</title><rect x="1140.0" y="195.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.0" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="1140.5" y="195.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.5" y="206.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.03%)</title><rect x="1141.0" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="1141.3" y="211.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (9 samples, 0.13%)</title><rect x="1141.7" y="211.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (5 samples, 0.07%)</title><rect x="1141.8" y="195.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.8" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (5 samples, 0.07%)</title><rect x="1141.8" y="179.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.8" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (2 samples, 0.03%)</title><rect x="1142.3" y="163.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.3" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="1142.7" y="195.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (8 samples, 0.11%)</title><rect x="1143.2" y="211.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.2" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (6 samples, 0.08%)</title><rect x="1143.5" y="195.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (3 samples, 0.04%)</title><rect x="1143.8" y="179.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.8" y="190.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="1143.8" y="163.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1146.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.04%)</title><rect x="1144.5" y="211.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.5" y="222.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="1144.5" y="195.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1147.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.03%)</title><rect x="1145.0" y="211.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.0" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.04%)</title><rect x="1145.3" y="211.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.03%)</title><rect x="1145.8" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="1146.2" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.2" y="238.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.03%)</title><rect x="1147.0" y="243.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1150.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.03%)</title><rect x="1147.3" y="307.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1150.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.03%)</title><rect x="1147.3" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1150.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.get (2 samples, 0.03%)</title><rect x="1147.7" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1150.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.03%)</title><rect x="1147.7" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1150.7" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="1147.7" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1150.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.put (2 samples, 0.03%)</title><rect x="1148.0" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1151.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1148.0" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1151.0" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1148.0" y="307.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1151.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (13 samples, 0.18%)</title><rect x="1148.3" y="387.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1151.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.17%)</title><rect x="1148.5" y="371.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1151.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.06%)</title><rect x="1148.7" y="355.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1151.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.04%)</title><rect x="1148.8" y="339.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1151.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.10%)</title><rect x="1149.3" y="355.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1152.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.07%)</title><rect x="1149.7" y="339.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1152.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.06%)</title><rect x="1150.5" y="387.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1153.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.06%)</title><rect x="1150.5" y="371.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1153.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.06%)</title><rect x="1150.5" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1153.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1150.5" y="339.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1153.5" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1150.8" y="323.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1153.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (14 samples, 0.20%)</title><rect x="1151.2" y="419.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1154.2" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.08%)</title><rect x="1151.7" y="403.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1154.7" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.07%)</title><rect x="1151.8" y="387.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1154.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.07%)</title><rect x="1152.7" y="403.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1155.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="1153.5" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1156.5" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.08%)</title><rect x="1153.8" y="419.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1156.8" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.08%)</title><rect x="1153.8" y="403.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1156.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (143 samples, 2.02%)</title><rect x="1154.8" y="435.0" width="23.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1157.8" y="446.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (143 samples, 2.02%)</title><rect x="1154.8" y="419.0" width="23.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1157.8" y="430.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="1155.3" y="403.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1158.3" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1155.3" y="387.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1158.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1155.3" y="371.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1158.3" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1155.5" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1158.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (136 samples, 1.92%)</title><rect x="1156.0" y="403.0" width="22.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1159.0" y="414.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="1156.3" y="387.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1159.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="1156.3" y="371.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1159.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="1156.3" y="355.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1159.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="1156.3" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1159.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="1156.3" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1159.3" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="1156.3" y="307.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1159.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (131 samples, 1.85%)</title><rect x="1156.7" y="387.0" width="21.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1159.7" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (131 samples, 1.85%)</title><rect x="1156.7" y="371.0" width="21.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1159.7" y="382.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (130 samples, 1.84%)</title><rect x="1156.7" y="355.0" width="21.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1159.7" y="366.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (129 samples, 1.82%)</title><rect x="1156.8" y="339.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1159.8" y="350.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (127 samples, 1.79%)</title><rect x="1157.2" y="323.0" width="21.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1160.2" y="334.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.07%)</title><rect x="1158.0" y="307.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1161.0" y="318.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.06%)</title><rect x="1158.2" y="291.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1161.2" y="302.0"></text>
</g>
<g>
<title>read (116 samples, 1.64%)</title><rect x="1159.0" y="307.0" width="19.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1162.0" y="318.0"></text>
</g>
<g>
<title>[tid=13571] (2 samples, 0.03%)</title><rect x="1179.3" y="499.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1182.3" y="510.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.03%)</title><rect x="1179.3" y="483.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1182.3" y="494.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.03%)</title><rect x="1179.3" y="467.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1182.3" y="478.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.03%)</title><rect x="1179.3" y="451.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1182.3" y="462.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.03%)</title><rect x="1179.3" y="435.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1182.3" y="446.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.03%)</title><rect x="1179.3" y="419.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="430.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.03%)</title><rect x="1179.3" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="414.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.03%)</title><rect x="1179.3" y="387.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="398.0"></text>
</g>
<g>
<title>[tid=22275] (2 samples, 0.03%)</title><rect x="1179.8" y="499.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.03%)</title><rect x="1179.8" y="483.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1182.8" y="494.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.03%)</title><rect x="1179.8" y="467.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1182.8" y="478.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.03%)</title><rect x="1179.8" y="451.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.03%)</title><rect x="1179.8" y="435.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1182.8" y="446.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.03%)</title><rect x="1179.8" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="430.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.03%)</title><rect x="1179.8" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="414.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.03%)</title><rect x="1179.8" y="387.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="398.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (2 samples, 0.03%)</title><rect x="1179.8" y="371.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="382.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.03%)</title><rect x="1179.8" y="355.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="366.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.03%)</title><rect x="1179.8" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="350.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (2 samples, 0.03%)</title><rect x="1179.8" y="323.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="334.0"></text>
</g>
<g>
<title>[tid=23555] (4 samples, 0.06%)</title><rect x="1180.2" y="499.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.06%)</title><rect x="1180.2" y="483.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.06%)</title><rect x="1180.2" y="467.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.06%)</title><rect x="1180.2" y="451.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1183.2" y="462.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.06%)</title><rect x="1180.2" y="435.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1183.2" y="446.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.06%)</title><rect x="1180.2" y="419.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="430.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.06%)</title><rect x="1180.2" y="403.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.06%)</title><rect x="1180.2" y="387.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="398.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.06%)</title><rect x="1180.2" y="371.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="382.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.06%)</title><rect x="1180.2" y="355.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.06%)</title><rect x="1180.2" y="339.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="1180.3" y="323.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1183.3" y="334.0"></text>
</g>
<g>
<title>[tid=24067] (55 samples, 0.78%)</title><rect x="1180.8" y="499.0" width="9.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1183.8" y="510.0"></text>
</g>
<g>
<title>thread_start (55 samples, 0.78%)</title><rect x="1180.8" y="483.0" width="9.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1183.8" y="494.0"></text>
</g>
<g>
<title>_pthread_start (55 samples, 0.78%)</title><rect x="1180.8" y="467.0" width="9.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1183.8" y="478.0"></text>
</g>
<g>
<title>_pthread_body (55 samples, 0.78%)</title><rect x="1180.8" y="451.0" width="9.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1183.8" y="462.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void* (*)(void*), rocksdb::BGThreadMetadata*&gt; &gt;(void*) (55 samples, 0.78%)</title><rect x="1180.8" y="435.0" width="9.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (55 samples, 0.78%)</title><rect x="1180.8" y="419.0" width="9.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (55 samples, 0.78%)</title><rect x="1180.8" y="403.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (55 samples, 0.78%)</title><rect x="1180.8" y="387.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (54 samples, 0.76%)</title><rect x="1181.0" y="371.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (54 samples, 0.76%)</title><rect x="1181.0" y="355.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;&amp;, unsigned long long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (54 samples, 0.76%)</title><rect x="1181.0" y="339.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*) (54 samples, 0.76%)</title><rect x="1181.0" y="323.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::WriteLevel0Table() (53 samples, 0.75%)</title><rect x="1181.0" y="307.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt; &gt; &gt;, rocksdb::FileMetaData*, rocksdb::InternalKeyComparator const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::__1::default_delete&lt;rocksdb::IntTblPropCollector (52 samples, 0.73%)</title><rect x="1181.0" y="291.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (19 samples, 0.27%)</title><rect x="1181.2" y="275.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (16 samples, 0.23%)</title><rect x="1181.5" y="259.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (16 samples, 0.23%)</title><rect x="1181.5" y="243.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (15 samples, 0.21%)</title><rect x="1181.5" y="227.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (15 samples, 0.21%)</title><rect x="1181.5" y="211.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="222.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (15 samples, 0.21%)</title><rect x="1181.5" y="195.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="206.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (15 samples, 0.21%)</title><rect x="1181.5" y="179.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="190.0"></text>
</g>
<g>
<title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (15 samples, 0.21%)</title><rect x="1181.5" y="163.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="174.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (9 samples, 0.13%)</title><rect x="1182.5" y="147.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.5" y="158.0"></text>
</g>
<g>
<title>snappy::Bits::FindLSBSetNonZero64(unsigned long long) (2 samples, 0.03%)</title><rect x="1183.7" y="131.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (31 samples, 0.44%)</title><rect x="1184.3" y="275.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (30 samples, 0.42%)</title><rect x="1184.3" y="259.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (15 samples, 0.21%)</title><rect x="1186.3" y="243.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="1188.8" y="243.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="254.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="1189.0" y="227.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1192.0" y="238.0"></text>
</g>
</g>
</svg>
