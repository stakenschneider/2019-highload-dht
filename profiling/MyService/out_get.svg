<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="821"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="821"> </text>
<g id="frames">
<g>
<title>all (4,891 samples, 100.00%)</title><rect x="10.0" y="787.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="798.0">all</text>
</g>
<g>
<title>[NIO Selector #1 tid=39939] (2,257 samples, 46.15%)</title><rect x="10.2" y="771.0" width="544.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.2" y="782.0">[NIO Selector #1 tid=39939]</text>
</g>
<g>
<title>[unknown_Java] (10 samples, 0.20%)</title><rect x="10.7" y="755.0" width="2.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.7" y="766.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="12.7" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.7" y="750.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="12.7" y="723.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="15.7" y="734.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,244 samples, 45.88%)</title><rect x="13.1" y="755.0" width="541.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.1" y="766.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (957 samples, 19.57%)</title><rect x="14.1" y="739.0" width="230.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.1" y="750.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>_res (3 samples, 0.06%)</title><rect x="14.3" y="723.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="17.3" y="734.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (13 samples, 0.27%)</title><rect x="15.1" y="723.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="16.0" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title><rect x="16.0" y="691.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.0" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (7 samples, 0.14%)</title><rect x="16.5" y="707.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (7 samples, 0.14%)</title><rect x="16.5" y="691.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.08%)</title><rect x="17.2" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.04%)</title><rect x="18.2" y="723.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.2" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (937 samples, 19.16%)</title><rect x="18.9" y="723.0" width="226.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="21.9" y="734.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (937 samples, 19.16%)</title><rect x="18.9" y="707.0" width="226.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.9" y="718.0">sun/nio/ch/SelectorImpl.lockAn..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (934 samples, 19.10%)</title><rect x="19.7" y="691.0" width="225.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.7" y="702.0">sun/nio/ch/KQueueSelectorImpl...</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (903 samples, 18.46%)</title><rect x="19.9" y="675.0" width="217.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.9" y="686.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.08%)</title><rect x="26.2" y="659.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="29.2" y="670.0"></text>
</g>
<g>
<title>kevent (873 samples, 17.85%)</title><rect x="27.1" y="659.0" width="210.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="30.1" y="670.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 0.16%)</title><rect x="237.7" y="675.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.7" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 0.16%)</title><rect x="237.7" y="659.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.16%)</title><rect x="237.7" y="643.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.16%)</title><rect x="237.7" y="627.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 0.16%)</title><rect x="237.7" y="611.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (21 samples, 0.43%)</title><rect x="239.9" y="675.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.9" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (10 samples, 0.20%)</title><rect x="242.6" y="659.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (9 samples, 0.18%)</title><rect x="242.6" y="643.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.08%)</title><rect x="243.8" y="627.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.06%)</title><rect x="243.8" y="611.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.8" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,283 samples, 26.23%)</title><rect x="245.0" y="739.0" width="309.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.0" y="750.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,279 samples, 26.15%)</title><rect x="245.0" y="723.0" width="308.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.0" y="734.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,054 samples, 21.55%)</title><rect x="245.2" y="707.0" width="254.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.2" y="718.0">one/nio/http/HttpSession.processHt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (978 samples, 20.00%)</title><rect x="246.9" y="691.0" width="236.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.9" y="702.0">one/nio/http/HttpSession.handle..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (974 samples, 19.91%)</title><rect x="247.9" y="675.0" width="235.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.9" y="686.0">one/nio/http/HttpServer.handleR..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (961 samples, 19.65%)</title><rect x="247.9" y="659.0" width="231.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.9" y="670.0">RequestHandler1_entity.handleRe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (718 samples, 14.68%)</title><rect x="247.9" y="643.0" width="173.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.9" y="654.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (706 samples, 14.43%)</title><rect x="248.8" y="627.0" width="170.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.8" y="638.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (27 samples, 0.55%)</title><rect x="248.8" y="611.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (23 samples, 0.47%)</title><rect x="249.8" y="595.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.8" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (8 samples, 0.16%)</title><rect x="250.1" y="579.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.1" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (14 samples, 0.29%)</title><rect x="252.0" y="579.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.0" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (13 samples, 0.27%)</title><rect x="252.2" y="563.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.2" y="574.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (2 samples, 0.04%)</title><rect x="254.9" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.9" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (679 samples, 13.88%)</title><rect x="255.4" y="611.0" width="163.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.4" y="622.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session.write (679 samples, 13.88%)</title><rect x="255.4" y="595.0" width="163.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.4" y="606.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>gettimeofday (4 samples, 0.08%)</title><rect x="256.3" y="579.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="259.3" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (659 samples, 13.47%)</title><rect x="257.3" y="579.0" width="159.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.3" y="590.0">one/nio/net/Session$..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (657 samples, 13.43%)</title><rect x="257.8" y="563.0" width="158.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.8" y="574.0">one/nio/net/JavaSock..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="257.8" y="547.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.8" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="258.0" y="531.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="258.0" y="515.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="261.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (654 samples, 13.37%)</title><rect x="258.5" y="547.0" width="157.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.5" y="558.0">sun/nio/ch/SocketCha..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="258.7" y="531.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="258.7" y="515.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="258.7" y="499.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="258.7" y="483.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="258.7" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (651 samples, 13.31%)</title><rect x="259.2" y="531.0" width="157.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.2" y="542.0">sun/nio/ch/IOUtil.wr..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (649 samples, 13.27%)</title><rect x="259.7" y="515.0" width="156.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="262.7" y="526.0">sun/nio/ch/IOUtil.wr..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (635 samples, 12.98%)</title><rect x="259.7" y="499.0" width="153.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.7" y="510.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (635 samples, 12.98%)</title><rect x="259.7" y="483.0" width="153.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.7" y="494.0">sun/nio/ch/SocketDi..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (635 samples, 12.98%)</title><rect x="259.7" y="467.0" width="153.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.7" y="478.0">sun/nio/ch/FileDisp..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (6 samples, 0.12%)</title><rect x="264.3" y="451.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="267.3" y="462.0"></text>
</g>
<g>
<title>write (610 samples, 12.47%)</title><rect x="265.7" y="451.0" width="147.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="268.7" y="462.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (14 samples, 0.29%)</title><rect x="412.9" y="499.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="415.9" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.12%)</title><rect x="412.9" y="483.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.9" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.06%)</title><rect x="413.6" y="467.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="416.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (8 samples, 0.16%)</title><rect x="414.4" y="483.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.4" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.08%)</title><rect x="415.1" y="467.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.1" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.08%)</title><rect x="415.1" y="451.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.1" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.08%)</title><rect x="415.1" y="435.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.1" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.08%)</title><rect x="415.1" y="419.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="418.1" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.25%)</title><rect x="416.3" y="579.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="419.3" y="590.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.14%)</title><rect x="416.5" y="563.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="419.5" y="574.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (7 samples, 0.14%)</title><rect x="416.5" y="547.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="419.5" y="558.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.08%)</title><rect x="418.2" y="563.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="421.2" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.08%)</title><rect x="419.2" y="627.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="422.2" y="638.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.04%)</title><rect x="420.6" y="627.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (2 samples, 0.04%)</title><rect x="420.6" y="611.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (16 samples, 0.33%)</title><rect x="421.1" y="643.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="424.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="421.6" y="627.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.06%)</title><rect x="421.6" y="611.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="424.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (6 samples, 0.12%)</title><rect x="422.3" y="627.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="422.6" y="611.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.6" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.06%)</title><rect x="423.0" y="611.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="426.0" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.10%)</title><rect x="423.8" y="627.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="426.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.10%)</title><rect x="423.8" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="426.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.10%)</title><rect x="423.8" y="595.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.8" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.10%)</title><rect x="423.8" y="579.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="426.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (227 samples, 4.64%)</title><rect x="425.0" y="643.0" width="54.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.0" y="654.0">ru/ma..</text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.08%)</title><rect x="425.2" y="627.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.2" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.08%)</title><rect x="425.2" y="611.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="428.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4 samples, 0.08%)</title><rect x="425.2" y="595.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="428.2" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="425.4" y="579.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="428.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.get (222 samples, 4.54%)</title><rect x="426.2" y="627.0" width="53.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="429.2" y="638.0">ru/ma..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.08%)</title><rect x="426.2" y="611.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="429.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (218 samples, 4.46%)</title><rect x="427.1" y="611.0" width="52.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="430.1" y="622.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (8 samples, 0.16%)</title><rect x="428.3" y="595.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.3" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/157456214.invoke (7 samples, 0.14%)</title><rect x="428.6" y="579.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.6" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (6 samples, 0.12%)</title><rect x="428.6" y="563.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.6" y="574.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2 samples, 0.04%)</title><rect x="428.6" y="547.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="431.6" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.04%)</title><rect x="429.1" y="547.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="432.1" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$Stringifiers$ObjectStringifier.valueOf (2 samples, 0.04%)</title><rect x="429.6" y="547.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="432.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (30 samples, 0.61%)</title><rect x="430.3" y="595.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.3" y="606.0"></text>
</g>
<g>
<title>java/lang/Class.getName (4 samples, 0.08%)</title><rect x="430.8" y="579.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.8" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.06%)</title><rect x="431.0" y="563.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.0" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (21 samples, 0.43%)</title><rect x="431.7" y="579.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.7" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 0.41%)</title><rect x="431.7" y="563.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="434.7" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.12%)</title><rect x="432.0" y="547.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.0" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="432.4" y="531.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="435.4" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="432.9" y="531.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="435.9" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (6 samples, 0.12%)</title><rect x="433.7" y="547.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="436.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.04%)</title><rect x="434.4" y="531.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="437.4" y="542.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.04%)</title><rect x="435.1" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.1" y="558.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (4 samples, 0.08%)</title><rect x="435.6" y="547.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.6" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="436.1" y="531.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="439.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (2 samples, 0.04%)</title><rect x="436.8" y="579.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="439.8" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (164 samples, 3.35%)</title><rect x="437.5" y="595.0" width="39.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="440.5" y="606.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (162 samples, 3.31%)</title><rect x="438.0" y="579.0" width="39.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.0" y="590.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (157 samples, 3.21%)</title><rect x="439.0" y="563.0" width="37.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="442.0" y="574.0">Jav..</text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="441.6" y="547.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="444.6" y="558.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="442.8" y="547.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="445.8" y="558.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.04%)</title><rect x="443.3" y="547.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="446.3" y="558.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (136 samples, 2.78%)</title><rect x="444.0" y="547.0" width="32.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="447.0" y="558.0">ro..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.06%)</title><rect x="446.7" y="531.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="449.7" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="447.4" y="531.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="450.4" y="542.0"></text>
</g>
<g>
<title>free (4 samples, 0.08%)</title><rect x="448.9" y="531.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="451.9" y="542.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.06%)</title><rect x="449.1" y="515.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="452.1" y="526.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.08%)</title><rect x="449.8" y="531.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="452.8" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.12%)</title><rect x="450.8" y="531.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="453.8" y="542.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.04%)</title><rect x="451.5" y="515.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="454.5" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (24 samples, 0.49%)</title><rect x="452.2" y="531.0" width="5.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="455.2" y="542.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (2 samples, 0.04%)</title><rect x="454.2" y="515.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="457.2" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.20%)</title><rect x="455.1" y="515.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="458.1" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (9 samples, 0.18%)</title><rect x="455.1" y="499.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="458.1" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.14%)</title><rect x="455.4" y="483.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="458.4" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.10%)</title><rect x="455.8" y="467.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="458.8" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.10%)</title><rect x="455.8" y="451.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="458.8" y="462.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="456.6" y="435.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="459.6" y="446.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.04%)</title><rect x="457.5" y="515.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="460.5" y="526.0"></text>
</g>
<g>
<title>operator new(unsigned long) (10 samples, 0.20%)</title><rect x="458.0" y="531.0" width="2.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="461.0" y="542.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.20%)</title><rect x="458.0" y="515.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="461.0" y="526.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.14%)</title><rect x="458.5" y="499.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="461.5" y="510.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.08%)</title><rect x="459.0" y="483.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="462.0" y="494.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.08%)</title><rect x="459.0" y="467.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="462.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (67 samples, 1.37%)</title><rect x="460.4" y="531.0" width="16.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="463.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (65 samples, 1.33%)</title><rect x="460.9" y="515.0" width="15.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="463.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (64 samples, 1.31%)</title><rect x="460.9" y="499.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="463.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (54 samples, 1.10%)</title><rect x="461.2" y="483.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="464.2" y="494.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="464.8" y="467.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="467.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (6 samples, 0.12%)</title><rect x="465.5" y="467.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="468.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.04%)</title><rect x="466.0" y="451.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="469.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.04%)</title><rect x="466.5" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="469.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.04%)</title><rect x="466.5" y="435.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="469.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="467.4" y="467.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="470.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="467.9" y="467.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="470.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.04%)</title><rect x="468.4" y="467.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="471.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (19 samples, 0.39%)</title><rect x="469.1" y="467.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="472.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.04%)</title><rect x="471.5" y="451.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="474.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (5 samples, 0.10%)</title><rect x="472.0" y="451.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="475.0" y="462.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="472.5" y="435.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="475.5" y="446.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="473.7" y="467.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="476.7" y="478.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.06%)</title><rect x="474.2" y="483.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="477.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (4 samples, 0.08%)</title><rect x="474.9" y="483.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="477.9" y="494.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="475.9" y="483.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="478.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (9 samples, 0.18%)</title><rect x="477.1" y="595.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (8 samples, 0.16%)</title><rect x="477.3" y="579.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="480.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.08%)</title><rect x="478.3" y="563.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="478.5" y="547.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="478.5" y="531.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="481.5" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="478.8" y="515.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="481.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementLite.&lt;init&gt; (2 samples, 0.04%)</title><rect x="479.2" y="595.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.2" y="606.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (2 samples, 0.04%)</title><rect x="479.2" y="579.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.2" y="590.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (2 samples, 0.04%)</title><rect x="479.2" y="563.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (2 samples, 0.04%)</title><rect x="479.2" y="547.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.04%)</title><rect x="479.2" y="531.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.04%)</title><rect x="479.7" y="659.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.14%)</title><rect x="480.2" y="659.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.14%)</title><rect x="480.2" y="643.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.08%)</title><rect x="480.2" y="627.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.06%)</title><rect x="481.2" y="627.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.06%)</title><rect x="481.2" y="611.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="484.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.04%)</title><rect x="481.4" y="595.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="484.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.08%)</title><rect x="481.9" y="659.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="482.1" y="643.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.1" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="482.1" y="627.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.06%)</title><rect x="482.1" y="611.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.1" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="482.4" y="595.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="485.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (48 samples, 0.98%)</title><rect x="482.9" y="691.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.9" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (14 samples, 0.29%)</title><rect x="483.8" y="675.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="486.8" y="686.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (13 samples, 0.27%)</title><rect x="484.1" y="659.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="487.1" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (13 samples, 0.27%)</title><rect x="484.1" y="643.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.1" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (13 samples, 0.27%)</title><rect x="484.1" y="627.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="487.1" y="638.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (3 samples, 0.06%)</title><rect x="486.5" y="611.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.5" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 0.49%)</title><rect x="487.2" y="675.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.2" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 0.49%)</title><rect x="487.2" y="659.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="490.2" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.22%)</title><rect x="490.1" y="643.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.16%)</title><rect x="490.1" y="627.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="493.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (3 samples, 0.06%)</title><rect x="492.0" y="627.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="495.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (2 samples, 0.04%)</title><rect x="492.3" y="611.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.3" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.12%)</title><rect x="493.0" y="675.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.06%)</title><rect x="494.4" y="691.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="497.4" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.14%)</title><rect x="495.2" y="691.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.2" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.14%)</title><rect x="495.2" y="675.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="498.2" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.12%)</title><rect x="495.4" y="659.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.06%)</title><rect x="496.1" y="643.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.1" y="654.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.06%)</title><rect x="496.1" y="627.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.1" y="638.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.04%)</title><rect x="496.4" y="611.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="499.4" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.22%)</title><rect x="496.9" y="691.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.9" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.22%)</title><rect x="496.9" y="675.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="499.9" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.12%)</title><rect x="497.1" y="659.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.1" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.12%)</title><rect x="497.1" y="643.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.1" y="654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (4 samples, 0.08%)</title><rect x="498.6" y="659.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="501.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.08%)</title><rect x="498.6" y="643.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="501.6" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (224 samples, 4.58%)</title><rect x="499.5" y="707.0" width="54.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.5" y="718.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (222 samples, 4.54%)</title><rect x="499.8" y="691.0" width="53.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="502.8" y="702.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.14%)</title><rect x="500.2" y="675.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.2" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="500.5" y="659.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="500.5" y="643.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.5" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="501.4" y="627.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="504.4" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="501.4" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="501.4" y="595.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.4" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.04%)</title><rect x="501.4" y="579.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="504.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (213 samples, 4.35%)</title><rect x="501.9" y="675.0" width="51.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="504.9" y="686.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.06%)</title><rect x="502.2" y="659.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="502.2" y="643.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="505.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.06%)</title><rect x="502.2" y="627.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.06%)</title><rect x="502.2" y="611.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="505.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="502.2" y="595.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="505.2" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="502.2" y="579.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="505.2" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="502.2" y="563.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (207 samples, 4.23%)</title><rect x="503.1" y="659.0" width="50.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="506.1" y="670.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (206 samples, 4.21%)</title><rect x="503.4" y="643.0" width="49.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="506.4" y="654.0">sun/n..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.04%)</title><rect x="503.9" y="627.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="506.9" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (8 samples, 0.16%)</title><rect x="504.3" y="627.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.3" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.16%)</title><rect x="504.3" y="611.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.3" y="622.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="504.6" y="595.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.6" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="504.6" y="579.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.6" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="504.6" y="563.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="507.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.10%)</title><rect x="505.1" y="595.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="508.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.08%)</title><rect x="505.3" y="579.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.08%)</title><rect x="505.3" y="563.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="508.3" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (4 samples, 0.08%)</title><rect x="505.3" y="547.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.3" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.04%)</title><rect x="506.3" y="627.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="509.3" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.04%)</title><rect x="506.3" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="509.3" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (2 samples, 0.04%)</title><rect x="506.3" y="595.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="509.3" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.flip (2 samples, 0.04%)</title><rect x="506.3" y="579.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="509.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (189 samples, 3.86%)</title><rect x="506.8" y="627.0" width="45.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="509.8" y="638.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (187 samples, 3.82%)</title><rect x="507.2" y="611.0" width="45.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.2" y="622.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (187 samples, 3.82%)</title><rect x="507.2" y="595.0" width="45.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.2" y="606.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (9 samples, 0.18%)</title><rect x="511.3" y="579.0" width="2.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="514.3" y="590.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.06%)</title><rect x="512.8" y="563.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="515.8" y="574.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="513.5" y="579.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="516.5" y="590.0"></text>
</g>
<g>
<title>read (159 samples, 3.25%)</title><rect x="514.0" y="579.0" width="38.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="517.0" y="590.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.04%)</title><rect x="552.4" y="627.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.4" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.08%)</title><rect x="553.6" y="723.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="556.6" y="734.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="553.8" y="707.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="556.8" y="718.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="553.8" y="691.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="556.8" y="702.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=26883] (1,206 samples, 24.66%)</title><rect x="554.8" y="771.0" width="290.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="557.8" y="782.0">[NIO Selector #2 tid=26883]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.06%)</title><rect x="555.2" y="755.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="558.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.06%)</title><rect x="555.2" y="739.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="558.2" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.06%)</title><rect x="555.2" y="723.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="558.2" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.06%)</title><rect x="555.2" y="707.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="558.2" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.06%)</title><rect x="555.2" y="691.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="558.2" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.06%)</title><rect x="555.2" y="675.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="558.2" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (2 samples, 0.04%)</title><rect x="555.5" y="659.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="558.5" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.04%)</title><rect x="555.5" y="643.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="558.5" y="654.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="556.0" y="755.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="559.0" y="766.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.04%)</title><rect x="556.0" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="559.0" y="750.0"></text>
</g>
<g>
<title>[unknown_Java] (11 samples, 0.22%)</title><rect x="556.5" y="755.0" width="2.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="559.5" y="766.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.10%)</title><rect x="557.9" y="739.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="560.9" y="750.0"></text>
</g>
<g>
<title>_res (4 samples, 0.08%)</title><rect x="558.1" y="723.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="561.1" y="734.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,188 samples, 24.29%)</title><rect x="559.1" y="755.0" width="286.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="562.1" y="766.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.06%)</title><rect x="559.3" y="739.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (3 samples, 0.06%)</title><rect x="560.1" y="739.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="563.1" y="750.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (3 samples, 0.06%)</title><rect x="560.1" y="723.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="563.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.04%)</title><rect x="560.3" y="707.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="563.3" y="718.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (579 samples, 11.84%)</title><rect x="560.8" y="739.0" width="139.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="563.8" y="750.0">one/nio/net/JavaS..</text>
</g>
<g>
<title>_res (3 samples, 0.06%)</title><rect x="560.8" y="723.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="563.8" y="734.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (13 samples, 0.27%)</title><rect x="561.5" y="723.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="564.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (8 samples, 0.16%)</title><rect x="562.7" y="707.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="565.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (8 samples, 0.16%)</title><rect x="562.7" y="691.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="565.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.06%)</title><rect x="562.7" y="675.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="565.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="563.0" y="659.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="566.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="563.0" y="643.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="566.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (5 samples, 0.10%)</title><rect x="563.4" y="675.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="566.4" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (561 samples, 11.47%)</title><rect x="564.7" y="723.0" width="135.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="567.7" y="734.0">sun/nio/ch/Select..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (561 samples, 11.47%)</title><rect x="564.7" y="707.0" width="135.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.7" y="718.0">sun/nio/ch/Select..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (561 samples, 11.47%)</title><rect x="564.7" y="691.0" width="135.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="567.7" y="702.0">sun/nio/ch/KQueue..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (527 samples, 10.77%)</title><rect x="565.4" y="675.0" width="127.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="568.4" y="686.0">sun/nio/ch/KQueu..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (6 samples, 0.12%)</title><rect x="570.9" y="659.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="573.9" y="670.0"></text>
</g>
<g>
<title>kevent (498 samples, 10.18%)</title><rect x="572.4" y="659.0" width="120.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="575.4" y="670.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.10%)</title><rect x="692.5" y="675.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="695.5" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.10%)</title><rect x="692.5" y="659.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="695.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.10%)</title><rect x="692.5" y="643.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="695.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.10%)</title><rect x="692.5" y="627.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="695.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.10%)</title><rect x="692.5" y="611.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="695.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="693.7" y="675.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="696.7" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.06%)</title><rect x="694.2" y="675.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="697.2" y="686.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.06%)</title><rect x="694.2" y="659.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="697.2" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.06%)</title><rect x="694.2" y="643.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="697.2" y="654.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.06%)</title><rect x="694.2" y="627.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="697.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (21 samples, 0.43%)</title><rect x="694.9" y="675.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="697.9" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (7 samples, 0.14%)</title><rect x="698.3" y="659.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (6 samples, 0.12%)</title><rect x="698.6" y="643.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="701.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (6 samples, 0.12%)</title><rect x="698.6" y="627.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="701.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="698.8" y="611.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.06%)</title><rect x="699.3" y="611.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="702.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (2 samples, 0.04%)</title><rect x="700.0" y="723.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="703.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (2 samples, 0.04%)</title><rect x="700.0" y="707.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="703.0" y="718.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.04%)</title><rect x="700.0" y="691.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.0" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (602 samples, 12.31%)</title><rect x="700.5" y="739.0" width="145.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="703.5" y="750.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (599 samples, 12.25%)</title><rect x="701.2" y="723.0" width="144.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="704.2" y="734.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (453 samples, 9.26%)</title><rect x="701.2" y="707.0" width="109.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.2" y="718.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (413 samples, 8.44%)</title><rect x="702.2" y="691.0" width="99.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="705.2" y="702.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (408 samples, 8.34%)</title><rect x="703.4" y="675.0" width="98.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="706.4" y="686.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (401 samples, 8.20%)</title><rect x="703.4" y="659.0" width="96.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.4" y="670.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (276 samples, 5.64%)</title><rect x="703.6" y="643.0" width="66.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.6" y="654.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (270 samples, 5.52%)</title><rect x="704.3" y="627.0" width="65.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="707.3" y="638.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.33%)</title><rect x="704.3" y="611.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.3" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.29%)</title><rect x="704.8" y="595.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="707.8" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.12%)</title><rect x="704.8" y="579.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="707.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.16%)</title><rect x="706.3" y="579.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.16%)</title><rect x="706.3" y="563.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.3" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (254 samples, 5.19%)</title><rect x="708.2" y="611.0" width="61.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.2" y="622.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (254 samples, 5.19%)</title><rect x="708.2" y="595.0" width="61.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="711.2" y="606.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (249 samples, 5.09%)</title><rect x="708.9" y="579.0" width="60.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.9" y="590.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (249 samples, 5.09%)</title><rect x="708.9" y="563.0" width="60.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="711.9" y="574.0">one/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="708.9" y="547.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="711.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (247 samples, 5.05%)</title><rect x="709.4" y="547.0" width="59.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="712.4" y="558.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (244 samples, 4.99%)</title><rect x="710.1" y="531.0" width="58.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.1" y="542.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (241 samples, 4.93%)</title><rect x="710.9" y="515.0" width="58.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="713.9" y="526.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (236 samples, 4.83%)</title><rect x="711.1" y="499.0" width="56.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="714.1" y="510.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (236 samples, 4.83%)</title><rect x="711.1" y="483.0" width="56.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="714.1" y="494.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (236 samples, 4.83%)</title><rect x="711.1" y="467.0" width="56.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.1" y="478.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.08%)</title><rect x="712.5" y="451.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="715.5" y="462.0"></text>
</g>
<g>
<title>write (226 samples, 4.62%)</title><rect x="713.5" y="451.0" width="54.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="716.5" y="462.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.08%)</title><rect x="768.0" y="499.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="771.0" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.06%)</title><rect x="768.0" y="483.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.0" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="769.0" y="579.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="769.5" y="627.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="772.5" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.16%)</title><rect x="770.2" y="643.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="773.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.06%)</title><rect x="770.4" y="627.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.4" y="638.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.06%)</title><rect x="771.4" y="627.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="774.4" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="771.7" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="774.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="771.7" y="595.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="771.7" y="579.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="774.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (116 samples, 2.37%)</title><rect x="772.1" y="643.0" width="28.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="775.1" y="654.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.10%)</title><rect x="772.6" y="627.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="775.6" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.10%)</title><rect x="772.6" y="611.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="775.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.get (109 samples, 2.23%)</title><rect x="773.8" y="627.0" width="26.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.8" y="638.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (108 samples, 2.21%)</title><rect x="774.1" y="611.0" width="26.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="777.1" y="622.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.04%)</title><rect x="775.0" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="778.0" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/157456214.invoke (2 samples, 0.04%)</title><rect x="775.0" y="579.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="778.0" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="775.0" y="563.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="778.0" y="574.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (2 samples, 0.04%)</title><rect x="775.0" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="778.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="775.0" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="778.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (14 samples, 0.29%)</title><rect x="775.5" y="595.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="778.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (11 samples, 0.22%)</title><rect x="775.8" y="579.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="778.8" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.14%)</title><rect x="776.2" y="563.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="779.2" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.08%)</title><rect x="776.5" y="547.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="779.5" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="777.0" y="531.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="780.0" y="542.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (83 samples, 1.70%)</title><rect x="778.9" y="595.0" width="20.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="781.9" y="606.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (83 samples, 1.70%)</title><rect x="778.9" y="579.0" width="20.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="781.9" y="590.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (81 samples, 1.66%)</title><rect x="779.4" y="563.0" width="19.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="782.4" y="574.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (77 samples, 1.57%)</title><rect x="780.1" y="547.0" width="18.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="783.1" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.04%)</title><rect x="781.1" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.1" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="781.5" y="531.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="784.5" y="542.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="782.3" y="531.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="785.3" y="542.0"></text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="782.8" y="531.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="785.8" y="542.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.06%)</title><rect x="782.8" y="515.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="785.8" y="526.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.12%)</title><rect x="783.7" y="531.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="786.7" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.10%)</title><rect x="784.0" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="787.0" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.08%)</title><rect x="784.2" y="499.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="787.2" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.06%)</title><rect x="784.2" y="483.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="787.2" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="784.4" y="467.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="787.4" y="478.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (15 samples, 0.31%)</title><rect x="785.2" y="531.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="788.2" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.18%)</title><rect x="785.9" y="515.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="788.9" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.16%)</title><rect x="785.9" y="499.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="788.9" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.14%)</title><rect x="785.9" y="483.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.9" y="494.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="785.9" y="467.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="788.9" y="478.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.10%)</title><rect x="786.4" y="467.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="789.4" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.08%)</title><rect x="786.4" y="451.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="789.4" y="462.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (3 samples, 0.06%)</title><rect x="786.4" y="435.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="789.4" y="446.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="788.1" y="515.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="791.1" y="526.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.12%)</title><rect x="788.8" y="531.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="791.8" y="542.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.10%)</title><rect x="789.0" y="515.0" width="1.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="792.0" y="526.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.08%)</title><rect x="789.0" y="499.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="792.0" y="510.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.04%)</title><rect x="789.3" y="483.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="792.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (30 samples, 0.61%)</title><rect x="790.2" y="531.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="793.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (28 samples, 0.57%)</title><rect x="790.7" y="515.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="793.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (28 samples, 0.57%)</title><rect x="790.7" y="499.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="793.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (24 samples, 0.49%)</title><rect x="790.7" y="483.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="793.7" y="494.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (7 samples, 0.14%)</title><rect x="791.4" y="467.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="794.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.06%)</title><rect x="793.4" y="467.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="796.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.04%)</title><rect x="793.6" y="451.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="796.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.04%)</title><rect x="794.1" y="467.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="797.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (6 samples, 0.12%)</title><rect x="794.8" y="467.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="797.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (3 samples, 0.06%)</title><rect x="795.5" y="451.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="798.5" y="462.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="795.5" y="435.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="798.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="796.7" y="483.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="799.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.04%)</title><rect x="797.5" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="800.5" y="542.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.04%)</title><rect x="798.2" y="531.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="801.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (5 samples, 0.10%)</title><rect x="798.9" y="595.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.08%)</title><rect x="799.2" y="579.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.2" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.06%)</title><rect x="799.4" y="563.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="802.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.04%)</title><rect x="800.4" y="659.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.4" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.08%)</title><rect x="800.8" y="659.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="801.1" y="643.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="804.1" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="801.1" y="627.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.1" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (27 samples, 0.55%)</title><rect x="801.8" y="691.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="804.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (9 samples, 0.18%)</title><rect x="802.5" y="675.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="805.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.16%)</title><rect x="802.8" y="659.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="805.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.16%)</title><rect x="802.8" y="643.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="805.8" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.16%)</title><rect x="802.8" y="627.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.8" y="638.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (6 samples, 0.12%)</title><rect x="803.3" y="611.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="806.3" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.25%)</title><rect x="804.7" y="675.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.7" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.25%)</title><rect x="804.7" y="659.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.7" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.08%)</title><rect x="806.6" y="643.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.6" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.08%)</title><rect x="806.6" y="627.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.6" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.06%)</title><rect x="807.6" y="675.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="810.6" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.04%)</title><rect x="808.3" y="691.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.3" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.10%)</title><rect x="808.8" y="691.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="811.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.08%)</title><rect x="809.1" y="675.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="812.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.08%)</title><rect x="809.1" y="659.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="812.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.06%)</title><rect x="809.3" y="643.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.3" y="654.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.06%)</title><rect x="809.3" y="627.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="812.3" y="638.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.04%)</title><rect x="809.5" y="611.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.5" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="810.0" y="691.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.0" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="810.0" y="675.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="813.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (146 samples, 2.99%)</title><rect x="810.5" y="707.0" width="35.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="813.5" y="718.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (145 samples, 2.96%)</title><rect x="810.5" y="691.0" width="35.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="813.5" y="702.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="811.0" y="675.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="814.0" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="811.2" y="659.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (140 samples, 2.86%)</title><rect x="811.7" y="675.0" width="33.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="814.7" y="686.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (139 samples, 2.84%)</title><rect x="811.9" y="659.0" width="33.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="814.9" y="670.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (135 samples, 2.76%)</title><rect x="812.9" y="643.0" width="32.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="815.9" y="654.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (5 samples, 0.10%)</title><rect x="813.4" y="627.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.4" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.10%)</title><rect x="813.4" y="611.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.4" y="622.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="813.6" y="595.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.6" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="813.6" y="579.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="816.6" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="813.6" y="563.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="816.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.04%)</title><rect x="814.1" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (122 samples, 2.49%)</title><rect x="814.8" y="627.0" width="29.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.8" y="638.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (122 samples, 2.49%)</title><rect x="814.8" y="611.0" width="29.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.8" y="622.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (122 samples, 2.49%)</title><rect x="814.8" y="595.0" width="29.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.8" y="606.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.10%)</title><rect x="816.8" y="579.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="819.8" y="590.0"></text>
</g>
<g>
<title>read (109 samples, 2.23%)</title><rect x="818.0" y="579.0" width="26.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="821.0" y="590.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.10%)</title><rect x="844.3" y="627.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="847.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.06%)</title><rect x="844.3" y="611.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="847.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.04%)</title><rect x="845.0" y="611.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="848.0" y="622.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=27395] (1,252 samples, 25.60%)</title><rect x="845.7" y="771.0" width="302.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="848.7" y="782.0">[NIO Selector #3 tid=27395]</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="845.7" y="755.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="848.7" y="766.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.10%)</title><rect x="846.2" y="755.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="849.2" y="766.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,244 samples, 25.43%)</title><rect x="847.4" y="755.0" width="300.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="850.4" y="766.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.06%)</title><rect x="847.7" y="739.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="850.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.06%)</title><rect x="847.7" y="723.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="850.7" y="734.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (594 samples, 12.14%)</title><rect x="848.6" y="739.0" width="143.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="851.6" y="750.0">one/nio/net/JavaSe..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (9 samples, 0.18%)</title><rect x="849.3" y="723.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="852.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="849.6" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title><rect x="849.6" y="691.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.6" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (6 samples, 0.12%)</title><rect x="850.1" y="707.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="853.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (6 samples, 0.12%)</title><rect x="850.1" y="691.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="853.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="850.1" y="675.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="853.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.08%)</title><rect x="850.5" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="853.5" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (580 samples, 11.86%)</title><rect x="851.8" y="723.0" width="139.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.8" y="734.0">sun/nio/ch/Select..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (580 samples, 11.86%)</title><rect x="851.8" y="707.0" width="139.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="854.8" y="718.0">sun/nio/ch/Select..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (578 samples, 11.82%)</title><rect x="852.2" y="691.0" width="139.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.2" y="702.0">sun/nio/ch/KQueue..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (550 samples, 11.25%)</title><rect x="853.2" y="675.0" width="132.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="856.2" y="686.0">sun/nio/ch/KQueu..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.06%)</title><rect x="860.9" y="659.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="863.9" y="670.0"></text>
</g>
<g>
<title>kevent (515 samples, 10.53%)</title><rect x="861.6" y="659.0" width="124.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="864.6" y="670.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.08%)</title><rect x="985.9" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="988.9" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.08%)</title><rect x="985.9" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="988.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.08%)</title><rect x="985.9" y="643.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="988.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.08%)</title><rect x="985.9" y="627.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.08%)</title><rect x="985.9" y="611.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="988.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (19 samples, 0.39%)</title><rect x="987.1" y="675.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="990.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (7 samples, 0.14%)</title><rect x="990.0" y="659.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="993.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.08%)</title><rect x="990.0" y="643.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="993.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.06%)</title><rect x="990.2" y="627.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="993.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.06%)</title><rect x="990.2" y="611.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="993.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.06%)</title><rect x="991.0" y="643.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="994.0" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (645 samples, 13.19%)</title><rect x="991.9" y="739.0" width="155.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="994.9" y="750.0">one/nio/net/Session...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (644 samples, 13.17%)</title><rect x="991.9" y="723.0" width="155.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="994.9" y="734.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (511 samples, 10.45%)</title><rect x="992.4" y="707.0" width="123.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="995.4" y="718.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (472 samples, 9.65%)</title><rect x="993.9" y="691.0" width="113.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="996.9" y="702.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (470 samples, 9.61%)</title><rect x="994.3" y="675.0" width="113.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="997.3" y="686.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (463 samples, 9.47%)</title><rect x="994.3" y="659.0" width="111.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="997.3" y="670.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (311 samples, 6.36%)</title><rect x="994.6" y="643.0" width="75.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="997.6" y="654.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (308 samples, 6.30%)</title><rect x="994.6" y="627.0" width="74.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="997.6" y="638.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.33%)</title><rect x="994.6" y="611.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="997.6" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.25%)</title><rect x="995.5" y="595.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="998.5" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.12%)</title><rect x="995.8" y="579.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="998.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.10%)</title><rect x="997.2" y="579.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1000.2" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.10%)</title><rect x="997.2" y="563.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1000.2" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (292 samples, 5.97%)</title><rect x="998.4" y="611.0" width="70.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1001.4" y="622.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (292 samples, 5.97%)</title><rect x="998.4" y="595.0" width="70.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1001.4" y="606.0">one/nio/..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="998.4" y="579.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1001.4" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (285 samples, 5.83%)</title><rect x="998.9" y="579.0" width="68.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1001.9" y="590.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (285 samples, 5.83%)</title><rect x="998.9" y="563.0" width="68.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1001.9" y="574.0">one/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="998.9" y="547.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1001.9" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="999.4" y="531.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1002.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (281 samples, 5.75%)</title><rect x="999.9" y="547.0" width="67.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1002.9" y="558.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (279 samples, 5.70%)</title><rect x="1000.4" y="531.0" width="67.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1003.4" y="542.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (279 samples, 5.70%)</title><rect x="1000.4" y="515.0" width="67.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1003.4" y="526.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (268 samples, 5.48%)</title><rect x="1001.1" y="499.0" width="64.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1004.1" y="510.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (268 samples, 5.48%)</title><rect x="1001.1" y="483.0" width="64.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1004.1" y="494.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (268 samples, 5.48%)</title><rect x="1001.1" y="467.0" width="64.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1004.1" y="478.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="1004.2" y="451.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1007.2" y="462.0"></text>
</g>
<g>
<title>write (253 samples, 5.17%)</title><rect x="1004.7" y="451.0" width="61.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1007.7" y="462.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.16%)</title><rect x="1065.8" y="499.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1068.8" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.06%)</title><rect x="1065.8" y="483.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1068.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.04%)</title><rect x="1066.0" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1069.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.10%)</title><rect x="1066.5" y="483.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1069.5" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.10%)</title><rect x="1067.7" y="579.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.7" y="590.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.08%)</title><rect x="1067.7" y="563.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1070.7" y="574.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.08%)</title><rect x="1067.7" y="547.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1070.7" y="558.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="1068.2" y="531.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1071.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="1068.9" y="627.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1071.9" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.18%)</title><rect x="1069.6" y="643.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1072.6" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="1069.6" y="627.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1072.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="1069.6" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1072.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.04%)</title><rect x="1070.1" y="627.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1073.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="1070.6" y="627.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1073.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="1070.6" y="611.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1073.6" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="1071.3" y="627.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1074.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="1071.3" y="611.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1074.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="1071.3" y="595.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1074.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (142 samples, 2.90%)</title><rect x="1071.8" y="643.0" width="34.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1074.8" y="654.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.get (138 samples, 2.82%)</title><rect x="1072.7" y="627.0" width="33.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1075.7" y="638.0">ru..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.10%)</title><rect x="1072.7" y="611.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1075.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (133 samples, 2.72%)</title><rect x="1074.0" y="611.0" width="32.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1077.0" y="622.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.08%)</title><rect x="1074.0" y="595.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1077.0" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/157456214.invoke (4 samples, 0.08%)</title><rect x="1074.0" y="579.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1077.0" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.08%)</title><rect x="1074.0" y="563.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1077.0" y="574.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2 samples, 0.04%)</title><rect x="1074.0" y="547.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1077.0" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="1074.0" y="531.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1077.0" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.04%)</title><rect x="1074.4" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1077.4" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (2 samples, 0.04%)</title><rect x="1074.4" y="531.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1077.4" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (16 samples, 0.33%)</title><rect x="1074.9" y="595.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1077.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (15 samples, 0.31%)</title><rect x="1075.2" y="579.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1078.2" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 0.31%)</title><rect x="1075.2" y="563.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1078.2" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.06%)</title><rect x="1075.2" y="547.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1078.2" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (10 samples, 0.20%)</title><rect x="1076.1" y="547.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1079.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.04%)</title><rect x="1078.1" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.1" y="542.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (107 samples, 2.19%)</title><rect x="1078.8" y="595.0" width="25.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1081.8" y="606.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (107 samples, 2.19%)</title><rect x="1078.8" y="579.0" width="25.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1081.8" y="590.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (106 samples, 2.17%)</title><rect x="1079.0" y="563.0" width="25.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1082.0" y="574.0">J..</text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="1079.7" y="547.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1082.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.04%)</title><rect x="1080.7" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1083.7" y="558.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (97 samples, 1.98%)</title><rect x="1081.2" y="547.0" width="23.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.2" y="558.0">r..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.04%)</title><rect x="1082.2" y="531.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1085.2" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.04%)</title><rect x="1082.9" y="531.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.9" y="542.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.04%)</title><rect x="1083.4" y="531.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1086.4" y="542.0"></text>
</g>
<g>
<title>free (7 samples, 0.14%)</title><rect x="1084.1" y="531.0" width="1.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1087.1" y="542.0"></text>
</g>
<g>
<title>tiny_size (6 samples, 0.12%)</title><rect x="1084.3" y="515.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1087.3" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (15 samples, 0.31%)</title><rect x="1086.0" y="531.0" width="3.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1089.0" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.18%)</title><rect x="1086.7" y="515.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1089.7" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.14%)</title><rect x="1087.2" y="499.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.2" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.10%)</title><rect x="1087.7" y="483.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.7" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.08%)</title><rect x="1087.9" y="467.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.9" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.08%)</title><rect x="1087.9" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.9" y="462.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.04%)</title><rect x="1089.6" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.6" y="542.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.16%)</title><rect x="1090.1" y="531.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1093.1" y="542.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.16%)</title><rect x="1090.1" y="515.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1093.1" y="526.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.04%)</title><rect x="1090.1" y="499.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1093.1" y="510.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.12%)</title><rect x="1090.6" y="499.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1093.6" y="510.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.08%)</title><rect x="1091.1" y="483.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1094.1" y="494.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.08%)</title><rect x="1091.1" y="467.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1094.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (50 samples, 1.02%)</title><rect x="1092.0" y="531.0" width="12.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (47 samples, 0.96%)</title><rect x="1092.8" y="515.0" width="11.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (46 samples, 0.94%)</title><rect x="1092.8" y="499.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (39 samples, 0.80%)</title><rect x="1093.5" y="483.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.5" y="494.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.08%)</title><rect x="1095.4" y="467.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1098.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (8 samples, 0.16%)</title><rect x="1096.9" y="467.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (4 samples, 0.08%)</title><rect x="1097.6" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="1099.0" y="467.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (13 samples, 0.27%)</title><rect x="1099.5" y="467.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (5 samples, 0.10%)</title><rect x="1100.7" y="451.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.7" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1101.0" y="435.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1104.0" y="446.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1101.5" y="435.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1104.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (3 samples, 0.06%)</title><rect x="1101.9" y="451.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="1102.9" y="483.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="1103.4" y="483.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (4 samples, 0.08%)</title><rect x="1104.6" y="595.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1107.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (3 samples, 0.06%)</title><rect x="1104.8" y="579.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1107.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementLite.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1105.6" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1108.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.08%)</title><rect x="1106.0" y="659.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1109.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.06%)</title><rect x="1106.3" y="643.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1109.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.06%)</title><rect x="1106.3" y="627.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1109.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.06%)</title><rect x="1107.0" y="659.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1110.0" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="1107.0" y="643.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1110.0" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="1107.0" y="627.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1110.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1107.0" y="611.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1110.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21 samples, 0.43%)</title><rect x="1107.7" y="691.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1110.7" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (12 samples, 0.25%)</title><rect x="1108.5" y="675.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1111.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.20%)</title><rect x="1108.9" y="659.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1111.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.20%)</title><rect x="1108.9" y="643.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1111.9" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (9 samples, 0.18%)</title><rect x="1109.2" y="627.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1112.2" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="1111.3" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1114.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="1111.3" y="659.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1114.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1111.8" y="643.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1114.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1111.8" y="627.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1114.8" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.04%)</title><rect x="1112.3" y="675.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1115.3" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.04%)</title><rect x="1112.8" y="691.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1115.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.10%)</title><rect x="1113.3" y="691.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1116.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.10%)</title><rect x="1113.3" y="675.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1116.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="1113.5" y="659.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.5" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="1114.0" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1117.0" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.10%)</title><rect x="1114.5" y="691.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1117.5" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.10%)</title><rect x="1114.5" y="675.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1114.5" y="659.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1117.5" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1114.5" y="643.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.5" y="654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.04%)</title><rect x="1115.2" y="659.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1118.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.04%)</title><rect x="1115.2" y="643.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1118.2" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (131 samples, 2.68%)</title><rect x="1115.7" y="707.0" width="31.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1118.7" y="718.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (131 samples, 2.68%)</title><rect x="1115.7" y="691.0" width="31.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1118.7" y="702.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="1115.9" y="675.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1118.9" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1116.2" y="659.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1119.2" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1116.4" y="643.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1119.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (126 samples, 2.58%)</title><rect x="1116.9" y="675.0" width="30.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1119.9" y="686.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="1117.1" y="659.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1120.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="1117.1" y="643.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1120.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="1117.1" y="627.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="1117.1" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1120.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (123 samples, 2.51%)</title><rect x="1117.6" y="659.0" width="29.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1120.6" y="670.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (123 samples, 2.51%)</title><rect x="1117.6" y="643.0" width="29.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1120.6" y="654.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (9 samples, 0.18%)</title><rect x="1117.9" y="627.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1120.9" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (9 samples, 0.18%)</title><rect x="1117.9" y="611.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1120.9" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (2 samples, 0.04%)</title><rect x="1118.1" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1121.1" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.06%)</title><rect x="1118.6" y="595.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1121.6" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="1118.6" y="579.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1121.6" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.06%)</title><rect x="1118.6" y="563.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1121.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.06%)</title><rect x="1119.3" y="595.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1122.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.04%)</title><rect x="1119.6" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1122.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.04%)</title><rect x="1119.6" y="563.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1122.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.04%)</title><rect x="1119.6" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1122.6" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.04%)</title><rect x="1120.0" y="627.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.0" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.04%)</title><rect x="1120.0" y="611.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.0" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (2 samples, 0.04%)</title><rect x="1120.0" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1123.0" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.flip (2 samples, 0.04%)</title><rect x="1120.0" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1123.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (104 samples, 2.13%)</title><rect x="1120.5" y="627.0" width="25.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1123.5" y="638.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (101 samples, 2.07%)</title><rect x="1121.2" y="611.0" width="24.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1124.2" y="622.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (101 samples, 2.07%)</title><rect x="1121.2" y="595.0" width="24.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1124.2" y="606.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.04%)</title><rect x="1122.0" y="579.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1125.0" y="590.0"></text>
</g>
<g>
<title>read (96 samples, 1.96%)</title><rect x="1122.4" y="579.0" width="23.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1125.4" y="590.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.12%)</title><rect x="1145.6" y="627.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1148.6" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.10%)</title><rect x="1145.6" y="611.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1148.6" y="622.0"></text>
</g>
<g>
<title>[tid=13315] (4 samples, 0.08%)</title><rect x="1147.8" y="771.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1150.8" y="782.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.08%)</title><rect x="1147.8" y="755.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1150.8" y="766.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.08%)</title><rect x="1147.8" y="739.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1150.8" y="750.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.08%)</title><rect x="1147.8" y="723.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1150.8" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.08%)</title><rect x="1147.8" y="707.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1150.8" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.08%)</title><rect x="1147.8" y="691.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.8" y="702.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.08%)</title><rect x="1147.8" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.8" y="686.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.08%)</title><rect x="1147.8" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.8" y="670.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.06%)</title><rect x="1148.0" y="643.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.0" y="654.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.06%)</title><rect x="1148.0" y="627.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.0" y="638.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.06%)</title><rect x="1148.0" y="611.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.0" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="1148.0" y="595.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.0" y="606.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="1148.0" y="579.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1151.0" y="590.0"></text>
</g>
<g>
<title>[tid=13827] (4 samples, 0.08%)</title><rect x="1148.7" y="771.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1151.7" y="782.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.08%)</title><rect x="1148.7" y="755.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1151.7" y="766.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.08%)</title><rect x="1148.7" y="739.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1151.7" y="750.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.08%)</title><rect x="1148.7" y="723.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1151.7" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.08%)</title><rect x="1148.7" y="707.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1151.7" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.08%)</title><rect x="1148.7" y="691.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.7" y="702.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.08%)</title><rect x="1148.7" y="675.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.7" y="686.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.08%)</title><rect x="1148.7" y="659.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.7" y="670.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.04%)</title><rect x="1148.7" y="643.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.7" y="654.0"></text>
</g>
<g>
<title>[tid=20483] (4 samples, 0.08%)</title><rect x="1149.7" y="771.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1152.7" y="782.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.08%)</title><rect x="1149.7" y="755.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1152.7" y="766.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.08%)</title><rect x="1149.7" y="739.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1152.7" y="750.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.08%)</title><rect x="1149.7" y="723.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1152.7" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.08%)</title><rect x="1149.7" y="707.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1152.7" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.08%)</title><rect x="1149.7" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.7" y="702.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.08%)</title><rect x="1149.7" y="675.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.7" y="686.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 0.06%)</title><rect x="1149.7" y="659.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.7" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 0.06%)</title><rect x="1149.7" y="643.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.7" y="654.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (2 samples, 0.04%)</title><rect x="1150.0" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="638.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (2 samples, 0.04%)</title><rect x="1150.0" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.0" y="622.0"></text>
</g>
<g>
<title>[tid=22531] (9 samples, 0.18%)</title><rect x="1150.7" y="771.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1153.7" y="782.0"></text>
</g>
<g>
<title>thread_start (9 samples, 0.18%)</title><rect x="1150.7" y="755.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1153.7" y="766.0"></text>
</g>
<g>
<title>_pthread_start (9 samples, 0.18%)</title><rect x="1150.7" y="739.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1153.7" y="750.0"></text>
</g>
<g>
<title>_pthread_body (9 samples, 0.18%)</title><rect x="1150.7" y="723.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1153.7" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.18%)</title><rect x="1150.7" y="707.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1153.7" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.18%)</title><rect x="1150.7" y="691.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (9 samples, 0.18%)</title><rect x="1150.7" y="675.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.7" y="686.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (9 samples, 0.18%)</title><rect x="1150.7" y="659.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="670.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (9 samples, 0.18%)</title><rect x="1150.7" y="643.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.7" y="654.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (8 samples, 0.16%)</title><rect x="1150.7" y="627.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.7" y="638.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (8 samples, 0.16%)</title><rect x="1150.7" y="611.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="622.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (8 samples, 0.16%)</title><rect x="1150.7" y="595.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.7" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_method() (8 samples, 0.16%)</title><rect x="1150.7" y="579.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.7" y="590.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (8 samples, 0.16%)</title><rect x="1150.7" y="563.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.7" y="574.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.06%)</title><rect x="1150.7" y="547.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="558.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.06%)</title><rect x="1150.7" y="531.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.7" y="542.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.06%)</title><rect x="1150.7" y="515.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.7" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.06%)</title><rect x="1150.7" y="499.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.7" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.06%)</title><rect x="1150.7" y="483.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.7" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.06%)</title><rect x="1150.7" y="467.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.7" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.04%)</title><rect x="1150.9" y="451.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.9" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.04%)</title><rect x="1150.9" y="435.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.9" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.04%)</title><rect x="1150.9" y="419.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.9" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.04%)</title><rect x="1150.9" y="403.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.9" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.04%)</title><rect x="1150.9" y="387.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.9" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.04%)</title><rect x="1150.9" y="371.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.9" y="382.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 0.08%)</title><rect x="1151.6" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.6" y="558.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.04%)</title><rect x="1151.6" y="531.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.6" y="542.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.04%)</title><rect x="1151.6" y="515.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.6" y="526.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.04%)</title><rect x="1152.1" y="531.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="542.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (2 samples, 0.04%)</title><rect x="1152.1" y="515.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.1" y="526.0"></text>
</g>
<g>
<title>[tid=41219] (16 samples, 0.33%)</title><rect x="1153.1" y="771.0" width="3.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1156.1" y="782.0"></text>
</g>
<g>
<title>thread_start (16 samples, 0.33%)</title><rect x="1153.1" y="755.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1156.1" y="766.0"></text>
</g>
<g>
<title>_pthread_start (16 samples, 0.33%)</title><rect x="1153.1" y="739.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1156.1" y="750.0"></text>
</g>
<g>
<title>_pthread_body (16 samples, 0.33%)</title><rect x="1153.1" y="723.0" width="3.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1156.1" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (16 samples, 0.33%)</title><rect x="1153.1" y="707.0" width="3.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1156.1" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (16 samples, 0.33%)</title><rect x="1153.1" y="691.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="702.0"></text>
</g>
<g>
<title>WatcherThread::run() (16 samples, 0.33%)</title><rect x="1153.1" y="675.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.1" y="686.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (16 samples, 0.33%)</title><rect x="1153.1" y="659.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.1" y="670.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (15 samples, 0.31%)</title><rect x="1153.1" y="643.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.1" y="654.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (15 samples, 0.31%)</title><rect x="1153.1" y="627.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.1" y="638.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (15 samples, 0.31%)</title><rect x="1153.1" y="611.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.1" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.31%)</title><rect x="1153.1" y="595.0" width="3.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1156.1" y="606.0"></text>
</g>
<g>
<title>[tid=43267] (136 samples, 2.78%)</title><rect x="1157.2" y="771.0" width="32.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1160.2" y="782.0">[t..</text>
</g>
<g>
<title>thread_start (136 samples, 2.78%)</title><rect x="1157.2" y="755.0" width="32.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1160.2" y="766.0">th..</text>
</g>
<g>
<title>_pthread_start (136 samples, 2.78%)</title><rect x="1157.2" y="739.0" width="32.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1160.2" y="750.0">_p..</text>
</g>
<g>
<title>_pthread_body (136 samples, 2.78%)</title><rect x="1157.2" y="723.0" width="32.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1160.2" y="734.0">_p..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (136 samples, 2.78%)</title><rect x="1157.2" y="707.0" width="32.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1160.2" y="718.0">th..</text>
</g>
<g>
<title>Thread::call_run() (136 samples, 2.78%)</title><rect x="1157.2" y="691.0" width="32.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.2" y="702.0">Th..</text>
</g>
<g>
<title>JavaThread::run() (136 samples, 2.78%)</title><rect x="1157.2" y="675.0" width="32.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="686.0">Ja..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (136 samples, 2.78%)</title><rect x="1157.2" y="659.0" width="32.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="670.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (136 samples, 2.78%)</title><rect x="1157.2" y="643.0" width="32.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.2" y="654.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (136 samples, 2.78%)</title><rect x="1157.2" y="627.0" width="32.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.2" y="638.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (136 samples, 2.78%)</title><rect x="1157.2" y="611.0" width="32.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.2" y="622.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (136 samples, 2.78%)</title><rect x="1157.2" y="595.0" width="32.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.2" y="606.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (69 samples, 1.41%)</title><rect x="1157.2" y="579.0" width="16.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.2" y="590.0"></text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.12%)</title><rect x="1157.2" y="563.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.2" y="574.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.04%)</title><rect x="1157.2" y="547.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.2" y="558.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (4 samples, 0.08%)</title><rect x="1157.7" y="547.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.7" y="558.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.06%)</title><rect x="1157.9" y="531.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.9" y="542.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (3 samples, 0.06%)</title><rect x="1157.9" y="515.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.9" y="526.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.16%)</title><rect x="1158.9" y="563.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="574.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.12%)</title><rect x="1159.4" y="547.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.4" y="558.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.08%)</title><rect x="1159.4" y="531.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.4" y="542.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.04%)</title><rect x="1159.6" y="515.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.6" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (9 samples, 0.18%)</title><rect x="1160.8" y="563.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.18%)</title><rect x="1160.8" y="547.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.8" y="558.0"></text>
</g>
<g>
<title>CProjNode::out_RegMask() const (2 samples, 0.04%)</title><rect x="1160.8" y="531.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.8" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.04%)</title><rect x="1161.8" y="531.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.8" y="542.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.06%)</title><rect x="1162.3" y="531.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.3" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (43 samples, 0.88%)</title><rect x="1163.2" y="563.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.10%)</title><rect x="1163.7" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.7" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.18%)</title><rect x="1164.9" y="547.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.9" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.06%)</title><rect x="1165.9" y="531.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.04%)</title><rect x="1166.1" y="515.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.1" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.04%)</title><rect x="1167.1" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.04%)</title><rect x="1167.1" y="531.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.1" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.04%)</title><rect x="1167.8" y="547.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="558.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.04%)</title><rect x="1167.8" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.8" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.12%)</title><rect x="1168.3" y="547.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.06%)</title><rect x="1169.0" y="531.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.0" y="542.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.04%)</title><rect x="1169.7" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.04%)</title><rect x="1170.5" y="547.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="558.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.18%)</title><rect x="1171.2" y="547.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="558.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.06%)</title><rect x="1172.1" y="531.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="542.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="1172.1" y="515.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="526.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 0.98%)</title><rect x="1173.8" y="579.0" width="11.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="590.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (14 samples, 0.29%)</title><rect x="1173.8" y="563.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (14 samples, 0.29%)</title><rect x="1173.8" y="547.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.06%)</title><rect x="1174.1" y="531.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.16%)</title><rect x="1174.8" y="531.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (7 samples, 0.14%)</title><rect x="1175.0" y="515.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 0.14%)</title><rect x="1175.0" y="499.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (7 samples, 0.14%)</title><rect x="1175.0" y="483.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.04%)</title><rect x="1175.0" y="467.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (5 samples, 0.10%)</title><rect x="1175.5" y="467.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.06%)</title><rect x="1176.0" y="451.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="462.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (3 samples, 0.06%)</title><rect x="1176.0" y="435.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.04%)</title><rect x="1176.7" y="531.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.04%)</title><rect x="1177.5" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (19 samples, 0.39%)</title><rect x="1177.9" y="563.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.04%)</title><rect x="1178.7" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.18%)</title><rect x="1179.4" y="547.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (9 samples, 0.18%)</title><rect x="1179.4" y="531.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 0.14%)</title><rect x="1179.6" y="515.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (6 samples, 0.12%)</title><rect x="1179.9" y="499.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.04%)</title><rect x="1179.9" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (4 samples, 0.08%)</title><rect x="1180.3" y="483.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.06%)</title><rect x="1180.6" y="467.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="478.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.04%)</title><rect x="1180.8" y="451.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="1181.8" y="547.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="1181.8" y="531.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.18%)</title><rect x="1182.5" y="563.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.16%)</title><rect x="1182.5" y="547.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="558.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.06%)</title><rect x="1184.7" y="563.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.7" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.06%)</title><rect x="1184.7" y="547.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.7" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="1184.9" y="531.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="542.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (3 samples, 0.06%)</title><rect x="1185.4" y="579.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.4" y="590.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (2 samples, 0.04%)</title><rect x="1185.4" y="563.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.4" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1185.4" y="547.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.4" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1185.4" y="531.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1185.4" y="515.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1185.4" y="499.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1185.4" y="483.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1185.4" y="467.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1185.4" y="451.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1185.4" y="435.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1185.4" y="419.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1185.4" y="403.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1185.4" y="387.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1185.4" y="371.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1185.4" y="355.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1185.4" y="339.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1185.4" y="323.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.29%)</title><rect x="1186.1" y="579.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.29%)</title><rect x="1186.1" y="563.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.29%)</title><rect x="1186.1" y="547.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.29%)</title><rect x="1186.1" y="531.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.27%)</title><rect x="1186.4" y="515.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.25%)</title><rect x="1186.6" y="499.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.25%)</title><rect x="1186.6" y="483.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.25%)</title><rect x="1186.6" y="467.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.25%)</title><rect x="1186.6" y="451.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.22%)</title><rect x="1186.6" y="435.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.20%)</title><rect x="1186.6" y="419.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.20%)</title><rect x="1186.6" y="403.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.18%)</title><rect x="1186.6" y="387.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.18%)</title><rect x="1186.6" y="371.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.16%)</title><rect x="1186.6" y="355.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.04%)</title><rect x="1186.6" y="339.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.6" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.04%)</title><rect x="1186.6" y="323.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1187.1" y="339.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="1187.1" y="323.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.10%)</title><rect x="1187.1" y="307.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.10%)</title><rect x="1187.1" y="291.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1187.1" y="275.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1187.1" y="259.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1187.1" y="243.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1187.1" y="227.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1187.1" y="211.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1187.1" y="195.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1187.1" y="179.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1187.1" y="163.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1187.1" y="147.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1187.1" y="131.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1187.1" y="115.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1187.1" y="99.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1187.1" y="83.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1187.1" y="67.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1187.1" y="51.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1187.1" y="35.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.04%)</title><rect x="1187.8" y="275.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="286.0"></text>
</g>
</g>
</svg>
