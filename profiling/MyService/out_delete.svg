<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (11,417 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=26115] (3,680 samples, 32.23%)</title><rect x="10.0" y="483.0" width="380.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="13.0" y="494.0">[NIO Selector #0 tid=26115]</text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.06%)</title><rect x="10.3" y="467.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.3" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,664 samples, 32.09%)</title><rect x="11.0" y="467.0" width="378.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.0" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.04%)</title><rect x="11.8" y="451.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.8" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (905 samples, 7.93%)</title><rect x="12.2" y="451.0" width="93.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="462.0">one/nio/net..</text>
</g>
<g>
<title>_res (3 samples, 0.03%)</title><rect x="12.4" y="435.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="15.4" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (15 samples, 0.13%)</title><rect x="12.7" y="435.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.03%)</title><rect x="13.4" y="419.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.04%)</title><rect x="13.7" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.04%)</title><rect x="13.7" y="403.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.03%)</title><rect x="13.7" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (881 samples, 7.72%)</title><rect x="14.5" y="435.0" width="91.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="17.5" y="446.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (881 samples, 7.72%)</title><rect x="14.5" y="419.0" width="91.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.5" y="430.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (876 samples, 7.67%)</title><rect x="15.1" y="403.0" width="90.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.1" y="414.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (838 samples, 7.34%)</title><rect x="15.6" y="387.0" width="86.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.6" y="398.0">sun/nio/ch..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.03%)</title><rect x="20.5" y="371.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="23.5" y="382.0"></text>
</g>
<g>
<title>kevent (787 samples, 6.89%)</title><rect x="20.9" y="371.0" width="81.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="23.9" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.04%)</title><rect x="102.2" y="387.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.03%)</title><rect x="102.4" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="105.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.03%)</title><rect x="102.4" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="102.4" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="102.4" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.04%)</title><rect x="102.7" y="387.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (22 samples, 0.19%)</title><rect x="103.3" y="387.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="106.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (6 samples, 0.05%)</title><rect x="105.0" y="371.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.04%)</title><rect x="105.2" y="355.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.&lt;init&gt; (3 samples, 0.03%)</title><rect x="105.3" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="108.3" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,748 samples, 24.07%)</title><rect x="105.7" y="451.0" width="284.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.7" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,742 samples, 24.02%)</title><rect x="106.0" y="435.0" width="283.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.0" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,562 samples, 22.44%)</title><rect x="106.3" y="419.0" width="264.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.3" y="430.0">one/nio/http/HttpSession.processHtt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,495 samples, 21.85%)</title><rect x="108.6" y="403.0" width="257.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.6" y="414.0">one/nio/http/HttpSession.handlePar..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,495 samples, 21.85%)</title><rect x="108.6" y="387.0" width="257.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.6" y="398.0">one/nio/http/HttpServer.handleRequ..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,473 samples, 21.66%)</title><rect x="109.0" y="371.0" width="255.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="112.0" y="382.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (642 samples, 5.62%)</title><rect x="109.1" y="355.0" width="66.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.1" y="366.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (639 samples, 5.60%)</title><rect x="109.2" y="339.0" width="66.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.2" y="350.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (22 samples, 0.19%)</title><rect x="109.2" y="323.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.2" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="109.7" y="307.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="112.7" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.12%)</title><rect x="110.0" y="307.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="113.0" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.03%)</title><rect x="110.0" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.0" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.06%)</title><rect x="110.5" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.5" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="111.2" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.2" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="111.2" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.2" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (617 samples, 5.40%)</title><rect x="111.5" y="323.0" width="63.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="114.5" y="334.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (617 samples, 5.40%)</title><rect x="111.5" y="307.0" width="63.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="114.5" y="318.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (607 samples, 5.32%)</title><rect x="111.7" y="291.0" width="62.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.7" y="302.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (607 samples, 5.32%)</title><rect x="111.7" y="275.0" width="62.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="114.7" y="286.0">one/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="111.7" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="114.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (603 samples, 5.28%)</title><rect x="112.1" y="259.0" width="62.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.1" y="270.0">sun/ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.04%)</title><rect x="112.3" y="243.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.03%)</title><rect x="112.5" y="227.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (596 samples, 5.22%)</title><rect x="112.8" y="243.0" width="61.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="115.8" y="254.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (595 samples, 5.21%)</title><rect x="112.9" y="227.0" width="61.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="115.9" y="238.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (578 samples, 5.06%)</title><rect x="112.9" y="211.0" width="59.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.9" y="222.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (578 samples, 5.06%)</title><rect x="112.9" y="195.0" width="59.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="115.9" y="206.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (578 samples, 5.06%)</title><rect x="112.9" y="179.0" width="59.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="115.9" y="190.0">sun/ni..</text>
</g>
<g>
<title>write (559 samples, 4.90%)</title><rect x="114.9" y="163.0" width="57.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="117.9" y="174.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (17 samples, 0.15%)</title><rect x="172.7" y="211.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.7" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.05%)</title><rect x="173.0" y="195.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (8 samples, 0.07%)</title><rect x="173.6" y="195.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.6" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="174.0" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.0" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="174.0" y="163.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="177.0" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.07%)</title><rect x="174.4" y="291.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="177.4" y="302.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="174.5" y="275.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="177.5" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.04%)</title><rect x="174.9" y="275.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="177.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (26 samples, 0.23%)</title><rect x="175.5" y="355.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.03%)</title><rect x="175.6" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (18 samples, 0.16%)</title><rect x="175.9" y="339.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (17 samples, 0.15%)</title><rect x="176.0" y="323.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.0" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (16 samples, 0.14%)</title><rect x="176.1" y="307.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.delete (4 samples, 0.04%)</title><rect x="177.3" y="291.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="180.3" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.04%)</title><rect x="177.7" y="339.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="177.7" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="180.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="177.7" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.7" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="177.8" y="291.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (1,804 samples, 15.80%)</title><rect x="178.2" y="355.0" width="186.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.2" y="366.0">ru/mail/polis/service/st..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.delete (1,797 samples, 15.74%)</title><rect x="178.4" y="339.0" width="185.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.4" y="350.0">ru/mail/polis/service/st..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (1,796 samples, 15.73%)</title><rect x="178.5" y="323.0" width="185.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="181.5" y="334.0">ru/mail/polis/dao/RockDA..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,779 samples, 15.58%)</title><rect x="178.8" y="307.0" width="183.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="181.8" y="318.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,779 samples, 15.58%)</title><rect x="178.8" y="291.0" width="183.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.8" y="302.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1,770 samples, 15.50%)</title><rect x="179.7" y="275.0" width="182.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="182.7" y="286.0">Java_org_rocksdb_RocksDB..</text>
</g>
<g>
<title>operator delete[](void*) (3 samples, 0.03%)</title><rect x="180.2" y="259.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="183.2" y="270.0"></text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,757 samples, 15.39%)</title><rect x="181.1" y="259.0" width="181.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="184.1" y="270.0">rocksdb_delete_helper(J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.03%)</title><rect x="181.2" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="184.2" y="254.0"></text>
</g>
<g>
<title>_setcontext (5 samples, 0.04%)</title><rect x="182.1" y="243.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="185.1" y="254.0"></text>
</g>
<g>
<title>free (4 samples, 0.04%)</title><rect x="182.7" y="243.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="185.7" y="254.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.05%)</title><rect x="183.1" y="243.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="186.1" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.03%)</title><rect x="183.4" y="227.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="186.4" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.06%)</title><rect x="183.7" y="243.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="186.7" y="254.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.04%)</title><rect x="183.7" y="227.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="186.7" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="184.2" y="227.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="187.2" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (20 samples, 0.18%)</title><rect x="184.5" y="243.0" width="2.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="187.5" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.05%)</title><rect x="185.6" y="227.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="188.6" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.05%)</title><rect x="185.6" y="211.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="188.6" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="185.7" y="195.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="188.7" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="185.7" y="179.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="188.7" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="185.7" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="188.7" y="174.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="186.5" y="243.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="189.5" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (20 samples, 0.18%)</title><rect x="186.8" y="243.0" width="2.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="189.8" y="254.0"></text>
</g>
<g>
<title>malloc (20 samples, 0.18%)</title><rect x="186.8" y="227.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="189.8" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (16 samples, 0.14%)</title><rect x="186.9" y="211.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="189.9" y="222.0"></text>
</g>
<g>
<title>default_zone_malloc (5 samples, 0.04%)</title><rect x="187.5" y="195.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="190.5" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.05%)</title><rect x="188.0" y="195.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="191.0" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.05%)</title><rect x="188.0" y="179.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="191.0" y="190.0"></text>
</g>
<g>
<title>szone_malloc (3 samples, 0.03%)</title><rect x="188.6" y="211.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="191.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,679 samples, 14.71%)</title><rect x="188.9" y="243.0" width="173.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="191.9" y="254.0">rocksdb::CompactedDBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1,671 samples, 14.64%)</title><rect x="189.1" y="227.0" width="172.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="192.1" y="238.0">rocksdb::DBImpl::Delet..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,620 samples, 14.19%)</title><rect x="189.8" y="211.0" width="167.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="192.8" y="222.0">rocksdb::DBImpl::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,607 samples, 14.08%)</title><rect x="190.3" y="195.0" width="166.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="193.3" y="206.0">rocksdb::DBImpl::Writ..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.05%)</title><rect x="194.3" y="179.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="197.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.04%)</title><rect x="195.2" y="179.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="198.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (554 samples, 4.85%)</title><rect x="195.6" y="179.0" width="57.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="198.6" y="190.0">rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (546 samples, 4.78%)</title><rect x="195.9" y="163.0" width="56.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="198.9" y="174.0">rocksd..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (543 samples, 4.76%)</title><rect x="196.2" y="147.0" width="56.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="199.2" y="158.0">rocksd..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (11 samples, 0.10%)</title><rect x="196.6" y="131.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="199.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (529 samples, 4.63%)</title><rect x="197.7" y="131.0" width="54.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="200.7" y="142.0">rocks..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (3 samples, 0.03%)</title><rect x="198.3" y="115.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="201.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (6 samples, 0.05%)</title><rect x="198.8" y="115.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="201.8" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="199.0" y="99.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="202.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (512 samples, 4.48%)</title><rect x="199.4" y="115.0" width="53.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="202.4" y="126.0">rocks..</text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.05%)</title><rect x="199.8" y="99.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="202.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (3 samples, 0.03%)</title><rect x="200.7" y="99.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="203.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (497 samples, 4.35%)</title><rect x="201.0" y="99.0" width="51.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="204.0" y="110.0">rocks..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (4 samples, 0.04%)</title><rect x="201.3" y="83.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="204.3" y="94.0"></text>
</g>
<g>
<title>write (490 samples, 4.29%)</title><rect x="201.7" y="83.0" width="50.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="204.7" y="94.0">write</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (4 samples, 0.04%)</title><rect x="252.5" y="163.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="255.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (4 samples, 0.04%)</title><rect x="252.9" y="179.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="255.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (5 samples, 0.04%)</title><rect x="253.5" y="179.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="256.5" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.04%)</title><rect x="253.5" y="163.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="256.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (161 samples, 1.41%)</title><rect x="254.0" y="179.0" width="16.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="257.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (155 samples, 1.36%)</title><rect x="254.4" y="163.0" width="16.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="257.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (148 samples, 1.30%)</title><rect x="255.2" y="147.0" width="15.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="258.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (136 samples, 1.19%)</title><rect x="256.4" y="131.0" width="14.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="259.4" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="256.8" y="115.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="259.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (122 samples, 1.07%)</title><rect x="257.3" y="115.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="260.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (114 samples, 1.00%)</title><rect x="258.2" y="99.0" width="11.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="261.2" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.03%)</title><rect x="263.7" y="83.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="266.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.03%)</title><rect x="264.0" y="83.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="267.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.04%)</title><rect x="264.4" y="83.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="267.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (45 samples, 0.39%)</title><rect x="264.8" y="83.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="267.8" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.05%)</title><rect x="265.9" y="67.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="268.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (27 samples, 0.24%)</title><rect x="266.5" y="67.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="269.5" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (18 samples, 0.16%)</title><rect x="267.5" y="51.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="270.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.04%)</title><rect x="269.4" y="83.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="272.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="270.1" y="115.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="273.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (47 samples, 0.41%)</title><rect x="270.7" y="179.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="273.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (43 samples, 0.38%)</title><rect x="271.0" y="163.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="274.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (41 samples, 0.36%)</title><rect x="271.2" y="147.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="274.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (41 samples, 0.36%)</title><rect x="271.2" y="131.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="274.2" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.04%)</title><rect x="271.4" y="115.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="274.4" y="126.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.04%)</title><rect x="271.4" y="99.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="274.4" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.04%)</title><rect x="271.4" y="83.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="274.4" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.04%)</title><rect x="271.4" y="67.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="274.4" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.04%)</title><rect x="271.4" y="51.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="274.4" y="62.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.04%)</title><rect x="271.5" y="35.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="274.5" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (32 samples, 0.28%)</title><rect x="271.9" y="115.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="274.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (31 samples, 0.27%)</title><rect x="272.0" y="99.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="275.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (30 samples, 0.26%)</title><rect x="272.1" y="83.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="275.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (16 samples, 0.14%)</title><rect x="273.6" y="67.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="276.6" y="78.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.04%)</title><rect x="274.0" y="51.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="277.0" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.06%)</title><rect x="274.5" y="51.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="277.5" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.04%)</title><rect x="274.7" y="35.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="277.7" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (321 samples, 2.81%)</title><rect x="275.7" y="179.0" width="33.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="278.7" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (321 samples, 2.81%)</title><rect x="275.7" y="163.0" width="33.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="278.7" y="174.0">ro..</text>
</g>
<g>
<title>xdrrec_ops (314 samples, 2.75%)</title><rect x="276.4" y="147.0" width="32.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="279.4" y="158.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (4 samples, 0.04%)</title><rect x="309.1" y="179.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="312.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.04%)</title><rect x="309.1" y="163.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="312.1" y="174.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.03%)</title><rect x="309.2" y="147.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="312.2" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.03%)</title><rect x="309.2" y="131.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="312.2" y="142.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.03%)</title><rect x="309.2" y="115.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="312.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (12 samples, 0.11%)</title><rect x="309.5" y="179.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="312.5" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.06%)</title><rect x="309.8" y="163.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="312.8" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.06%)</title><rect x="309.8" y="147.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="312.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (427 samples, 3.74%)</title><rect x="310.8" y="179.0" width="44.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="313.8" y="190.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (418 samples, 3.66%)</title><rect x="311.0" y="163.0" width="43.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="314.0" y="174.0">rock..</text>
</g>
<g>
<title>sched_yield (3 samples, 0.03%)</title><rect x="314.2" y="147.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="317.2" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (8 samples, 0.07%)</title><rect x="314.5" y="147.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="317.5" y="158.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.07%)</title><rect x="314.5" y="131.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="317.5" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.04%)</title><rect x="314.9" y="115.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="317.9" y="126.0"></text>
</g>
<g>
<title>_res (4 samples, 0.04%)</title><rect x="314.9" y="99.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="317.9" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (48 samples, 0.42%)</title><rect x="315.3" y="147.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="318.3" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (42 samples, 0.37%)</title><rect x="315.3" y="131.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="318.3" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.03%)</title><rect x="319.7" y="131.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="322.7" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (327 samples, 2.86%)</title><rect x="320.4" y="147.0" width="33.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="323.4" y="158.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (3 samples, 0.03%)</title><rect x="354.2" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="357.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (5 samples, 0.04%)</title><rect x="354.9" y="179.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="357.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.04%)</title><rect x="354.9" y="163.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="357.9" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.04%)</title><rect x="354.9" y="147.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="357.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (3 samples, 0.03%)</title><rect x="355.4" y="179.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="358.4" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.03%)</title><rect x="355.8" y="179.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="358.8" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (3 samples, 0.03%)</title><rect x="357.0" y="195.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="360.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (18 samples, 0.16%)</title><rect x="357.4" y="211.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="360.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (9 samples, 0.08%)</title><rect x="358.0" y="195.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="361.0" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (9 samples, 0.08%)</title><rect x="358.0" y="179.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="361.0" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (7 samples, 0.06%)</title><rect x="358.2" y="163.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="361.2" y="174.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.04%)</title><rect x="358.4" y="147.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="361.4" y="158.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.04%)</title><rect x="358.4" y="131.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="361.4" y="142.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.04%)</title><rect x="358.4" y="115.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="361.4" y="126.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.04%)</title><rect x="358.4" y="99.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="361.4" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="358.4" y="83.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="361.4" y="94.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="358.5" y="67.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="361.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (9 samples, 0.08%)</title><rect x="359.2" y="211.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="362.2" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (6 samples, 0.05%)</title><rect x="359.5" y="195.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="362.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (4 samples, 0.04%)</title><rect x="359.5" y="179.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="362.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (11 samples, 0.10%)</title><rect x="360.2" y="211.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="363.2" y="222.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.04%)</title><rect x="360.6" y="195.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="363.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="361.9" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="364.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (14 samples, 0.12%)</title><rect x="362.6" y="307.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (10 samples, 0.09%)</title><rect x="363.1" y="291.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="366.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.03%)</title><rect x="363.1" y="275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.06%)</title><rect x="363.4" y="275.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.4" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.06%)</title><rect x="363.4" y="259.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="366.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.06%)</title><rect x="363.4" y="243.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.4" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="363.7" y="227.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="366.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.put (5 samples, 0.04%)</title><rect x="364.1" y="339.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.04%)</title><rect x="364.2" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (14 samples, 0.12%)</title><rect x="364.7" y="371.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (14 samples, 0.12%)</title><rect x="364.7" y="355.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.04%)</title><rect x="364.7" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.09%)</title><rect x="365.1" y="339.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (10 samples, 0.09%)</title><rect x="365.1" y="323.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (7 samples, 0.06%)</title><rect x="365.4" y="307.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.03%)</title><rect x="366.2" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="366.2" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="366.2" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="366.2" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (32 samples, 0.28%)</title><rect x="366.5" y="403.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.13%)</title><rect x="367.3" y="387.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="370.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.13%)</title><rect x="367.3" y="371.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.3" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (9 samples, 0.08%)</title><rect x="368.8" y="387.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="369.5" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="372.5" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.06%)</title><rect x="369.8" y="403.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="370.2" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.03%)</title><rect x="370.2" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="370.6" y="403.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="370.7" y="387.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="373.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (177 samples, 1.55%)</title><rect x="371.1" y="419.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="374.1" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (174 samples, 1.52%)</title><rect x="371.2" y="403.0" width="18.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.2" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.06%)</title><rect x="371.2" y="387.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.2" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="371.3" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="374.3" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="371.3" y="355.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (167 samples, 1.46%)</title><rect x="371.9" y="387.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.04%)</title><rect x="371.9" y="371.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="374.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (162 samples, 1.42%)</title><rect x="372.5" y="371.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="375.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (159 samples, 1.39%)</title><rect x="372.8" y="355.0" width="16.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.05%)</title><rect x="373.2" y="339.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="376.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.05%)</title><rect x="373.2" y="323.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="376.2" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="373.4" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="373.4" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="376.4" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="373.4" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.4" y="286.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="373.4" y="259.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="376.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (140 samples, 1.23%)</title><rect x="373.8" y="339.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (140 samples, 1.23%)</title><rect x="373.8" y="323.0" width="14.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="376.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (140 samples, 1.23%)</title><rect x="373.8" y="307.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.8" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.03%)</title><rect x="374.6" y="291.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="377.6" y="302.0"></text>
</g>
<g>
<title>read (129 samples, 1.13%)</title><rect x="374.9" y="291.0" width="13.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="377.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.05%)</title><rect x="388.3" y="339.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.04%)</title><rect x="388.3" y="323.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="388.9" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.9" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="389.4" y="435.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="392.4" y="446.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="389.4" y="419.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="392.4" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="389.7" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="392.7" y="478.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.03%)</title><rect x="390.0" y="467.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="393.0" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=39939] (3,769 samples, 33.01%)</title><rect x="390.3" y="483.0" width="389.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="393.3" y="494.0">[NIO Selector #1 tid=39939]</text>
</g>
<g>
<title>[unknown_Java] (9 samples, 0.08%)</title><rect x="390.4" y="467.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="393.4" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,754 samples, 32.88%)</title><rect x="391.4" y="467.0" width="388.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="394.4" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.03%)</title><rect x="392.0" y="451.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.03%)</title><rect x="392.0" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="395.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (927 samples, 8.12%)</title><rect x="392.4" y="451.0" width="95.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.4" y="462.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (17 samples, 0.15%)</title><rect x="392.5" y="435.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.04%)</title><rect x="393.0" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (4 samples, 0.04%)</title><rect x="393.0" y="403.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (8 samples, 0.07%)</title><rect x="393.4" y="419.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="396.4" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (8 samples, 0.07%)</title><rect x="393.4" y="403.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="396.4" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (6 samples, 0.05%)</title><rect x="393.5" y="387.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="396.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (6 samples, 0.05%)</title><rect x="393.5" y="371.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.05%)</title><rect x="393.5" y="355.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="396.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.03%)</title><rect x="394.3" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (902 samples, 7.90%)</title><rect x="394.8" y="435.0" width="93.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="397.8" y="446.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (902 samples, 7.90%)</title><rect x="394.8" y="419.0" width="93.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="397.8" y="430.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (901 samples, 7.89%)</title><rect x="394.9" y="403.0" width="93.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="397.9" y="414.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (854 samples, 7.48%)</title><rect x="395.5" y="387.0" width="88.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="398.5" y="398.0">sun/nio/ch..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (6 samples, 0.05%)</title><rect x="399.3" y="371.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="402.3" y="382.0"></text>
</g>
<g>
<title>kevent (811 samples, 7.10%)</title><rect x="400.0" y="371.0" width="83.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="403.0" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (13 samples, 0.11%)</title><rect x="483.8" y="387.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (13 samples, 0.11%)</title><rect x="483.8" y="371.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="486.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (13 samples, 0.11%)</title><rect x="483.8" y="355.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.11%)</title><rect x="483.8" y="339.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="486.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (13 samples, 0.11%)</title><rect x="483.8" y="323.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="486.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (26 samples, 0.23%)</title><rect x="485.3" y="387.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (15 samples, 0.13%)</title><rect x="486.5" y="371.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="489.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (14 samples, 0.12%)</title><rect x="486.5" y="355.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (12 samples, 0.11%)</title><rect x="486.7" y="339.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="489.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (11 samples, 0.10%)</title><rect x="486.7" y="323.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,817 samples, 24.67%)</title><rect x="488.2" y="451.0" width="291.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.2" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,812 samples, 24.63%)</title><rect x="488.4" y="435.0" width="290.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.4" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,610 samples, 22.86%)</title><rect x="488.9" y="419.0" width="269.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.9" y="430.0">one/nio/http/HttpSession.processHttp..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,552 samples, 22.35%)</title><rect x="490.4" y="403.0" width="263.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="493.4" y="414.0">one/nio/http/HttpSession.handlePars..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,548 samples, 22.32%)</title><rect x="490.8" y="387.0" width="263.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.8" y="398.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,532 samples, 22.18%)</title><rect x="490.9" y="371.0" width="261.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="493.9" y="382.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (636 samples, 5.57%)</title><rect x="490.9" y="355.0" width="65.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="493.9" y="366.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (632 samples, 5.54%)</title><rect x="490.9" y="339.0" width="65.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.9" y="350.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.14%)</title><rect x="490.9" y="323.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="493.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13 samples, 0.11%)</title><rect x="491.2" y="307.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="494.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.04%)</title><rect x="491.4" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="494.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.06%)</title><rect x="491.8" y="291.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="494.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.05%)</title><rect x="491.9" y="275.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="494.9" y="286.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (3 samples, 0.03%)</title><rect x="492.3" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="495.3" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (616 samples, 5.40%)</title><rect x="492.6" y="323.0" width="63.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.6" y="334.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (616 samples, 5.40%)</title><rect x="492.6" y="307.0" width="63.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="495.6" y="318.0">one/nio..</text>
</g>
<g>
<title>gettimeofday (4 samples, 0.04%)</title><rect x="492.8" y="291.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="495.8" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (601 samples, 5.26%)</title><rect x="493.2" y="291.0" width="62.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.2" y="302.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (600 samples, 5.26%)</title><rect x="493.3" y="275.0" width="62.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.3" y="286.0">one/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (598 samples, 5.24%)</title><rect x="493.5" y="259.0" width="61.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="496.5" y="270.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (594 samples, 5.20%)</title><rect x="493.9" y="243.0" width="61.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="496.9" y="254.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (594 samples, 5.20%)</title><rect x="493.9" y="227.0" width="61.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="496.9" y="238.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (574 samples, 5.03%)</title><rect x="494.3" y="211.0" width="59.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.3" y="222.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (574 samples, 5.03%)</title><rect x="494.3" y="195.0" width="59.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="497.3" y="206.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (574 samples, 5.03%)</title><rect x="494.3" y="179.0" width="59.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.3" y="190.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (8 samples, 0.07%)</title><rect x="496.3" y="163.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="499.3" y="174.0"></text>
</g>
<g>
<title>write (545 samples, 4.77%)</title><rect x="497.3" y="163.0" width="56.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="500.3" y="174.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (16 samples, 0.14%)</title><rect x="553.6" y="211.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="556.6" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.05%)</title><rect x="553.7" y="195.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="556.7" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.04%)</title><rect x="553.9" y="179.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="556.9" y="190.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="554.1" y="163.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="557.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (9 samples, 0.08%)</title><rect x="554.4" y="195.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="557.4" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="554.7" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.7" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="554.7" y="163.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="557.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="554.7" y="147.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="557.7" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.03%)</title><rect x="554.7" y="131.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="557.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (3 samples, 0.03%)</title><rect x="555.0" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="558.0" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.08%)</title><rect x="555.3" y="291.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="558.3" y="302.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.04%)</title><rect x="555.3" y="275.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="558.3" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.04%)</title><rect x="555.4" y="259.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="558.4" y="270.0"></text>
</g>
<g>
<title>_res (3 samples, 0.03%)</title><rect x="555.5" y="243.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="558.5" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.04%)</title><rect x="555.8" y="275.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="558.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.04%)</title><rect x="556.2" y="339.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="556.3" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="559.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (22 samples, 0.19%)</title><rect x="556.6" y="355.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="559.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.03%)</title><rect x="557.1" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="560.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (13 samples, 0.11%)</title><rect x="557.4" y="339.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="560.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (13 samples, 0.11%)</title><rect x="557.4" y="323.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="560.4" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (13 samples, 0.11%)</title><rect x="557.4" y="307.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="560.4" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="558.0" y="291.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="561.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (1,874 samples, 16.41%)</title><rect x="558.9" y="355.0" width="193.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.9" y="366.0">ru/mail/polis/service/sta..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.delete (1,870 samples, 16.38%)</title><rect x="559.1" y="339.0" width="193.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="562.1" y="350.0">ru/mail/polis/service/sta..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (1,868 samples, 16.36%)</title><rect x="559.3" y="323.0" width="193.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.3" y="334.0">ru/mail/polis/dao/RockDAO..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,853 samples, 16.23%)</title><rect x="559.6" y="307.0" width="191.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="562.6" y="318.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,853 samples, 16.23%)</title><rect x="559.6" y="291.0" width="191.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="562.6" y="302.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1,839 samples, 16.11%)</title><rect x="561.1" y="275.0" width="190.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="564.1" y="286.0">Java_org_rocksdb_RocksDB_..</text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="561.6" y="259.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="564.6" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.05%)</title><rect x="562.3" y="259.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="565.3" y="270.0"></text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,820 samples, 15.94%)</title><rect x="563.1" y="259.0" width="188.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="566.1" y="270.0">rocksdb_delete_helper(JN..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.04%)</title><rect x="563.6" y="243.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="566.6" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.04%)</title><rect x="564.0" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="567.0" y="254.0"></text>
</g>
<g>
<title>__cxx_global_var_init (3 samples, 0.03%)</title><rect x="564.5" y="243.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="567.5" y="254.0"></text>
</g>
<g>
<title>free (4 samples, 0.04%)</title><rect x="565.2" y="243.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="568.2" y="254.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.03%)</title><rect x="565.3" y="227.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="568.3" y="238.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.04%)</title><rect x="565.6" y="243.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="568.6" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.03%)</title><rect x="565.8" y="227.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="568.8" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (12 samples, 0.11%)</title><rect x="566.2" y="243.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="569.2" y="254.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (6 samples, 0.05%)</title><rect x="566.4" y="227.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="569.4" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="567.1" y="227.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="570.1" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="567.1" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="570.1" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="567.1" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="570.1" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="567.1" y="179.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="570.1" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="567.1" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="570.1" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (29 samples, 0.25%)</title><rect x="567.4" y="243.0" width="3.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="570.4" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.08%)</title><rect x="568.7" y="227.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="571.7" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.07%)</title><rect x="568.8" y="211.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="571.8" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.07%)</title><rect x="568.8" y="195.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="571.8" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.04%)</title><rect x="569.1" y="179.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="572.1" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="569.3" y="163.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="572.3" y="174.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="569.7" y="227.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="572.7" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.07%)</title><rect x="570.5" y="243.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="573.5" y="254.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.07%)</title><rect x="570.5" y="227.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="573.5" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.06%)</title><rect x="570.6" y="211.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="573.6" y="222.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.03%)</title><rect x="570.8" y="195.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="573.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,727 samples, 15.13%)</title><rect x="571.3" y="243.0" width="178.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="574.3" y="254.0">rocksdb::CompactedDBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1,720 samples, 15.07%)</title><rect x="571.4" y="227.0" width="177.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="574.4" y="238.0">rocksdb::DBImpl::Delete..</text>
</g>
<g>
<title>free (3 samples, 0.03%)</title><rect x="571.8" y="211.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="574.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,642 samples, 14.38%)</title><rect x="572.2" y="211.0" width="169.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="575.2" y="222.0">rocksdb::DBImpl::Write..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,635 samples, 14.32%)</title><rect x="572.6" y="195.0" width="168.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="575.6" y="206.0">rocksdb::DBImpl::Write..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.04%)</title><rect x="577.0" y="179.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="580.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (8 samples, 0.07%)</title><rect x="577.6" y="179.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="580.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (525 samples, 4.60%)</title><rect x="578.5" y="179.0" width="54.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="581.5" y="190.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (517 samples, 4.53%)</title><rect x="578.9" y="163.0" width="53.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="581.9" y="174.0">rocks..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (511 samples, 4.48%)</title><rect x="579.4" y="147.0" width="52.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="582.4" y="158.0">rocks..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (9 samples, 0.08%)</title><rect x="579.7" y="131.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="582.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (499 samples, 4.37%)</title><rect x="580.6" y="131.0" width="51.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="583.6" y="142.0">rocks..</text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (3 samples, 0.03%)</title><rect x="580.9" y="115.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="583.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush() (3 samples, 0.03%)</title><rect x="581.4" y="115.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="584.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (9 samples, 0.08%)</title><rect x="581.8" y="115.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="584.8" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="582.1" y="99.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="585.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (3 samples, 0.03%)</title><rect x="582.4" y="99.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="585.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (479 samples, 4.20%)</title><rect x="582.7" y="115.0" width="49.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="585.7" y="126.0">rocks..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (473 samples, 4.14%)</title><rect x="583.3" y="99.0" width="48.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="586.3" y="110.0">rock..</text>
</g>
<g>
<title>write (466 samples, 4.08%)</title><rect x="584.0" y="83.0" width="48.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="587.0" y="94.0">write</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (12 samples, 0.11%)</title><rect x="632.9" y="179.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="635.9" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.05%)</title><rect x="633.4" y="163.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="636.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (161 samples, 1.41%)</title><rect x="634.2" y="179.0" width="16.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (152 samples, 1.33%)</title><rect x="635.1" y="163.0" width="15.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="638.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (144 samples, 1.26%)</title><rect x="635.9" y="147.0" width="14.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="638.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (139 samples, 1.22%)</title><rect x="636.4" y="131.0" width="14.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="639.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (125 samples, 1.09%)</title><rect x="637.3" y="115.0" width="12.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="640.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (115 samples, 1.01%)</title><rect x="638.3" y="99.0" width="11.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="641.3" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.04%)</title><rect x="643.7" y="83.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="646.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (5 samples, 0.04%)</title><rect x="644.1" y="83.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="647.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (5 samples, 0.04%)</title><rect x="644.6" y="83.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="647.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="644.8" y="67.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="647.8" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (41 samples, 0.36%)</title><rect x="645.1" y="83.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="648.1" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.04%)</title><rect x="645.9" y="67.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="648.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (27 samples, 0.24%)</title><rect x="646.5" y="67.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="649.5" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (20 samples, 0.18%)</title><rect x="647.2" y="51.0" width="2.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="650.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.04%)</title><rect x="649.5" y="83.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="652.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.04%)</title><rect x="650.4" y="115.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="653.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (39 samples, 0.34%)</title><rect x="650.8" y="179.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="653.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (32 samples, 0.28%)</title><rect x="651.5" y="163.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="654.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.25%)</title><rect x="651.8" y="147.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="654.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.25%)</title><rect x="651.9" y="131.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="654.9" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="651.9" y="115.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="654.9" y="126.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="651.9" y="99.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="654.9" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="651.9" y="83.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="654.9" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="651.9" y="67.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="654.9" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="651.9" y="51.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="654.9" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (25 samples, 0.22%)</title><rect x="652.2" y="115.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="655.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (22 samples, 0.19%)</title><rect x="652.6" y="99.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="655.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.18%)</title><rect x="652.8" y="83.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.04%)</title><rect x="654.0" y="67.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="657.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="654.4" y="67.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="657.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (345 samples, 3.02%)</title><rect x="654.8" y="179.0" width="35.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="657.8" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (345 samples, 3.02%)</title><rect x="654.8" y="163.0" width="35.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="657.8" y="174.0">roc..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.03%)</title><rect x="655.4" y="147.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="658.4" y="158.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.03%)</title><rect x="655.4" y="131.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="658.4" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (333 samples, 2.92%)</title><rect x="656.1" y="147.0" width="34.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="659.1" y="158.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (9 samples, 0.08%)</title><rect x="690.6" y="179.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="693.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.04%)</title><rect x="690.8" y="163.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="693.8" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.04%)</title><rect x="690.8" y="147.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="693.8" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.03%)</title><rect x="691.2" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="694.2" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.03%)</title><rect x="691.2" y="147.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="694.2" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.03%)</title><rect x="691.2" y="131.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="694.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (468 samples, 4.10%)</title><rect x="691.5" y="179.0" width="48.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="694.5" y="190.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (456 samples, 3.99%)</title><rect x="691.8" y="163.0" width="47.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="694.8" y="174.0">rock..</text>
</g>
<g>
<title>sched_yield (5 samples, 0.04%)</title><rect x="695.4" y="147.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="698.4" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (8 samples, 0.07%)</title><rect x="696.0" y="147.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="699.0" y="158.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.07%)</title><rect x="696.0" y="131.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="699.0" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (7 samples, 0.06%)</title><rect x="696.0" y="115.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="699.0" y="126.0"></text>
</g>
<g>
<title>_res (3 samples, 0.03%)</title><rect x="696.3" y="99.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="699.3" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (49 samples, 0.43%)</title><rect x="696.8" y="147.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="699.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (40 samples, 0.35%)</title><rect x="696.8" y="131.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="699.8" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (9 samples, 0.08%)</title><rect x="700.9" y="131.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="703.9" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.06%)</title><rect x="701.1" y="115.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="704.1" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (7 samples, 0.06%)</title><rect x="701.1" y="99.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="704.1" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (359 samples, 3.14%)</title><rect x="701.9" y="147.0" width="37.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="704.9" y="158.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (6 samples, 0.05%)</title><rect x="739.0" y="163.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="742.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (5 samples, 0.04%)</title><rect x="739.9" y="179.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="742.9" y="190.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.03%)</title><rect x="740.1" y="163.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="743.1" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.03%)</title><rect x="740.1" y="147.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="743.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.03%)</title><rect x="740.5" y="179.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="743.5" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (3 samples, 0.03%)</title><rect x="741.2" y="179.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (10 samples, 0.09%)</title><rect x="742.0" y="211.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="745.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (32 samples, 0.28%)</title><rect x="743.0" y="211.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="746.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (25 samples, 0.22%)</title><rect x="743.5" y="195.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (20 samples, 0.18%)</title><rect x="743.9" y="179.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="746.9" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (12 samples, 0.11%)</title><rect x="744.7" y="163.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="747.7" y="174.0"></text>
</g>
<g>
<title>operator new(unsigned long) (11 samples, 0.10%)</title><rect x="744.9" y="147.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="747.9" y="158.0"></text>
</g>
<g>
<title>malloc (11 samples, 0.10%)</title><rect x="744.9" y="131.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="747.9" y="142.0"></text>
</g>
<g>
<title>malloc_zone_malloc (11 samples, 0.10%)</title><rect x="744.9" y="115.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="747.9" y="126.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (11 samples, 0.10%)</title><rect x="744.9" y="99.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="747.9" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (11 samples, 0.10%)</title><rect x="744.9" y="83.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="747.9" y="94.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (9 samples, 0.08%)</title><rect x="745.1" y="67.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="748.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (17 samples, 0.15%)</title><rect x="746.3" y="211.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="749.3" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (15 samples, 0.13%)</title><rect x="746.5" y="195.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="749.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (6 samples, 0.05%)</title><rect x="746.9" y="179.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="749.9" y="190.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="747.1" y="163.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="750.1" y="174.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (5 samples, 0.04%)</title><rect x="747.5" y="179.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="750.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (8 samples, 0.07%)</title><rect x="748.1" y="211.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="751.1" y="222.0"></text>
</g>
<g>
<title>free (5 samples, 0.04%)</title><rect x="748.2" y="195.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="751.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (6 samples, 0.05%)</title><rect x="749.8" y="243.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="752.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (4 samples, 0.04%)</title><rect x="750.4" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="753.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (12 samples, 0.11%)</title><rect x="751.2" y="307.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="754.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (11 samples, 0.10%)</title><rect x="751.3" y="291.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="754.3" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (9 samples, 0.08%)</title><rect x="751.5" y="275.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="754.5" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.08%)</title><rect x="751.5" y="259.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="754.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.08%)</title><rect x="751.5" y="243.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="754.5" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="752.1" y="227.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="755.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (11 samples, 0.10%)</title><rect x="752.8" y="371.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="755.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.10%)</title><rect x="752.8" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.05%)</title><rect x="752.8" y="339.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="755.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.04%)</title><rect x="752.9" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="755.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.03%)</title><rect x="753.1" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.04%)</title><rect x="753.4" y="339.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="756.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.04%)</title><rect x="753.4" y="323.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="756.4" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.03%)</title><rect x="753.6" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="756.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (35 samples, 0.31%)</title><rect x="754.2" y="403.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="757.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.04%)</title><rect x="755.4" y="387.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="755.4" y="371.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="758.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="755.4" y="355.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.04%)</title><rect x="755.4" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.4" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.09%)</title><rect x="755.8" y="387.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.07%)</title><rect x="756.0" y="371.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="759.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (9 samples, 0.08%)</title><rect x="756.8" y="387.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="759.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.06%)</title><rect x="757.8" y="403.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.05%)</title><rect x="757.9" y="387.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.04%)</title><rect x="758.0" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="761.0" y="382.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="758.2" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="761.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="758.2" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="761.2" y="350.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.03%)</title><rect x="758.2" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="761.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (197 samples, 1.73%)</title><rect x="758.7" y="419.0" width="20.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.7" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (196 samples, 1.72%)</title><rect x="758.7" y="403.0" width="20.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="761.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.04%)</title><rect x="758.8" y="387.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.8" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="759.0" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="762.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="759.0" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (190 samples, 1.66%)</title><rect x="759.3" y="387.0" width="19.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (189 samples, 1.66%)</title><rect x="759.4" y="371.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="762.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (187 samples, 1.64%)</title><rect x="759.6" y="355.0" width="19.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.05%)</title><rect x="759.7" y="339.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="762.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.05%)</title><rect x="759.7" y="323.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="762.7" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="759.7" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="762.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="759.7" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="762.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="759.7" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="762.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.03%)</title><rect x="760.0" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="763.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.03%)</title><rect x="760.0" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="763.0" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.03%)</title><rect x="760.0" y="275.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="763.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.03%)</title><rect x="760.0" y="259.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="763.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (168 samples, 1.47%)</title><rect x="760.4" y="339.0" width="17.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="763.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (166 samples, 1.45%)</title><rect x="760.6" y="323.0" width="17.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="763.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (165 samples, 1.45%)</title><rect x="760.7" y="307.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="763.7" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.04%)</title><rect x="761.6" y="291.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="764.6" y="302.0"></text>
</g>
<g>
<title>read (150 samples, 1.31%)</title><rect x="762.2" y="291.0" width="15.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="765.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.08%)</title><rect x="777.7" y="339.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.7" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.06%)</title><rect x="777.7" y="323.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="780.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="778.6" y="339.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="781.6" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="779.1" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="782.1" y="446.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=27395] (3,812 samples, 33.39%)</title><rect x="779.9" y="483.0" width="394.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="782.9" y="494.0">[NIO Selector #3 tid=27395]</text>
</g>
<g>
<title>[unknown_Java] (13 samples, 0.11%)</title><rect x="780.0" y="467.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="783.0" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.04%)</title><rect x="780.8" y="451.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.8" y="462.0"></text>
</g>
<g>
<title>_res (5 samples, 0.04%)</title><rect x="780.8" y="435.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="783.8" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,793 samples, 33.22%)</title><rect x="781.3" y="467.0" width="392.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.3" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (3 samples, 0.03%)</title><rect x="781.9" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="784.9" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (3 samples, 0.03%)</title><rect x="781.9" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="784.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 0.03%)</title><rect x="781.9" y="419.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="784.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (933 samples, 8.17%)</title><rect x="782.2" y="451.0" width="96.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.2" y="462.0">one/nio/net..</text>
</g>
<g>
<title>__cxx_global_var_init (3 samples, 0.03%)</title><rect x="782.4" y="435.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="785.4" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (19 samples, 0.17%)</title><rect x="782.8" y="435.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="785.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (11 samples, 0.10%)</title><rect x="783.6" y="419.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="786.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (11 samples, 0.10%)</title><rect x="783.6" y="403.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (5 samples, 0.04%)</title><rect x="783.6" y="387.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="786.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.04%)</title><rect x="783.7" y="371.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.04%)</title><rect x="783.7" y="355.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="786.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (6 samples, 0.05%)</title><rect x="784.1" y="387.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="787.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.03%)</title><rect x="784.7" y="435.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.7" y="446.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.04%)</title><rect x="785.1" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="788.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (900 samples, 7.88%)</title><rect x="785.5" y="435.0" width="93.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="788.5" y="446.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (900 samples, 7.88%)</title><rect x="785.5" y="419.0" width="93.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="788.5" y="430.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (900 samples, 7.88%)</title><rect x="785.5" y="403.0" width="93.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="788.5" y="414.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (850 samples, 7.45%)</title><rect x="786.0" y="387.0" width="87.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.0" y="398.0">sun/nio/ch..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.04%)</title><rect x="790.7" y="371.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="793.7" y="382.0"></text>
</g>
<g>
<title>kevent (800 samples, 7.01%)</title><rect x="791.2" y="371.0" width="82.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="794.2" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.06%)</title><rect x="873.8" y="387.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.05%)</title><rect x="873.9" y="371.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="876.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.05%)</title><rect x="873.9" y="355.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="876.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.05%)</title><rect x="873.9" y="339.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="876.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.05%)</title><rect x="873.9" y="323.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="876.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.04%)</title><rect x="874.6" y="387.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="877.6" y="398.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.03%)</title><rect x="874.8" y="371.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="877.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.04%)</title><rect x="875.1" y="387.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="878.1" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.04%)</title><rect x="875.1" y="371.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="878.1" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.04%)</title><rect x="875.1" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="878.1" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.04%)</title><rect x="875.1" y="339.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="878.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (29 samples, 0.25%)</title><rect x="875.5" y="387.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="878.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (10 samples, 0.09%)</title><rect x="877.5" y="371.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="880.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (10 samples, 0.09%)</title><rect x="877.5" y="355.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="880.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (10 samples, 0.09%)</title><rect x="877.5" y="339.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="880.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.05%)</title><rect x="877.5" y="323.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="880.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="878.1" y="323.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="881.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,852 samples, 24.98%)</title><rect x="878.6" y="451.0" width="294.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="881.6" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,848 samples, 24.95%)</title><rect x="878.9" y="435.0" width="294.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="881.9" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,650 samples, 23.21%)</title><rect x="879.0" y="419.0" width="273.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="882.0" y="430.0">one/nio/http/HttpSession.processHttpB..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,608 samples, 22.84%)</title><rect x="880.2" y="403.0" width="269.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="883.2" y="414.0">one/nio/http/HttpSession.handleParse..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,606 samples, 22.83%)</title><rect x="880.5" y="387.0" width="269.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="883.5" y="398.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,584 samples, 22.63%)</title><rect x="880.7" y="371.0" width="267.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="883.7" y="382.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (615 samples, 5.39%)</title><rect x="880.7" y="355.0" width="63.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="883.7" y="366.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (607 samples, 5.32%)</title><rect x="880.7" y="339.0" width="62.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="883.7" y="350.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (20 samples, 0.18%)</title><rect x="880.7" y="323.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="883.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.12%)</title><rect x="881.3" y="307.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="884.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.06%)</title><rect x="881.4" y="291.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.05%)</title><rect x="882.1" y="291.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="885.1" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.05%)</title><rect x="882.1" y="275.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="885.1" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (587 samples, 5.14%)</title><rect x="882.7" y="323.0" width="60.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="885.7" y="334.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (587 samples, 5.14%)</title><rect x="882.7" y="307.0" width="60.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="885.7" y="318.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (577 samples, 5.05%)</title><rect x="883.2" y="291.0" width="59.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="886.2" y="302.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (576 samples, 5.05%)</title><rect x="883.3" y="275.0" width="59.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="886.3" y="286.0">one/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="883.5" y="259.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="886.5" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="883.6" y="243.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="886.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="883.6" y="227.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="886.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (571 samples, 5.00%)</title><rect x="883.9" y="259.0" width="59.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="886.9" y="270.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (570 samples, 4.99%)</title><rect x="884.0" y="243.0" width="58.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.0" y="254.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (570 samples, 4.99%)</title><rect x="884.0" y="227.0" width="58.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.0" y="238.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (551 samples, 4.83%)</title><rect x="884.1" y="211.0" width="56.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="887.1" y="222.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (551 samples, 4.83%)</title><rect x="884.1" y="195.0" width="56.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="887.1" y="206.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (551 samples, 4.83%)</title><rect x="884.1" y="179.0" width="56.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="887.1" y="190.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (13 samples, 0.11%)</title><rect x="886.4" y="163.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="889.4" y="174.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.03%)</title><rect x="887.5" y="147.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="890.5" y="158.0"></text>
</g>
<g>
<title>write (512 samples, 4.48%)</title><rect x="888.1" y="163.0" width="52.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="891.1" y="174.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (18 samples, 0.16%)</title><rect x="941.0" y="211.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="944.0" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.05%)</title><rect x="941.1" y="195.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="944.1" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.04%)</title><rect x="941.3" y="179.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="944.3" y="190.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="941.4" y="163.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="944.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (11 samples, 0.10%)</title><rect x="941.7" y="195.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="944.7" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="942.4" y="179.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="945.4" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="942.4" y="163.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="945.4" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.04%)</title><rect x="942.9" y="291.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="945.9" y="302.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="943.0" y="275.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="946.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.07%)</title><rect x="943.4" y="339.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="946.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.04%)</title><rect x="943.7" y="323.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="946.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (19 samples, 0.17%)</title><rect x="944.2" y="355.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="947.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (17 samples, 0.15%)</title><rect x="944.3" y="339.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="947.3" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (17 samples, 0.15%)</title><rect x="944.3" y="323.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="947.3" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (17 samples, 0.15%)</title><rect x="944.3" y="307.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="947.3" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="944.8" y="291.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="947.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.delete (3 samples, 0.03%)</title><rect x="945.8" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="948.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (1,950 samples, 17.08%)</title><rect x="946.2" y="355.0" width="201.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="949.2" y="366.0">ru/mail/polis/service/stak..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.delete (1,946 samples, 17.04%)</title><rect x="946.5" y="339.0" width="201.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="949.5" y="350.0">ru/mail/polis/service/stak..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (1,942 samples, 17.01%)</title><rect x="946.9" y="323.0" width="200.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="949.9" y="334.0">ru/mail/polis/dao/RockDAO...</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,934 samples, 16.94%)</title><rect x="946.9" y="307.0" width="199.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="949.9" y="318.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,934 samples, 16.94%)</title><rect x="946.9" y="291.0" width="199.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="949.9" y="302.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1,926 samples, 16.87%)</title><rect x="947.7" y="275.0" width="199.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="950.7" y="286.0">Java_org_rocksdb_RocksDB_d..</text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.04%)</title><rect x="948.6" y="259.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="951.6" y="270.0"></text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,910 samples, 16.73%)</title><rect x="949.4" y="259.0" width="197.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="952.4" y="270.0">rocksdb_delete_helper(JNIE..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (5 samples, 0.04%)</title><rect x="949.8" y="243.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="952.8" y="254.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.03%)</title><rect x="950.3" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.3" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.03%)</title><rect x="950.6" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.6" y="254.0"></text>
</g>
<g>
<title>free (3 samples, 0.03%)</title><rect x="951.7" y="243.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="954.7" y="254.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="952.0" y="243.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="955.0" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.04%)</title><rect x="952.3" y="243.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="955.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="952.5" y="227.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="955.5" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (18 samples, 0.16%)</title><rect x="952.8" y="243.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="955.8" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.04%)</title><rect x="953.4" y="227.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.4" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.04%)</title><rect x="953.4" y="211.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="956.4" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.04%)</title><rect x="953.4" y="195.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.4" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.04%)</title><rect x="953.4" y="179.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="956.4" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.04%)</title><rect x="953.4" y="163.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.4" y="174.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="953.9" y="227.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="956.9" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (16 samples, 0.14%)</title><rect x="954.8" y="243.0" width="1.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="957.8" y="254.0"></text>
</g>
<g>
<title>malloc (15 samples, 0.13%)</title><rect x="954.8" y="227.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="957.8" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (13 samples, 0.11%)</title><rect x="954.9" y="211.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="957.9" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (10 samples, 0.09%)</title><rect x="955.2" y="195.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="958.2" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (9 samples, 0.08%)</title><rect x="955.3" y="179.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="958.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,838 samples, 16.10%)</title><rect x="956.4" y="243.0" width="190.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.4" y="254.0">rocksdb::CompactedDBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1,834 samples, 16.06%)</title><rect x="956.5" y="227.0" width="189.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="959.5" y="238.0">rocksdb::DBImpl::Delete(r..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (3 samples, 0.03%)</title><rect x="957.5" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="960.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,775 samples, 15.55%)</title><rect x="957.8" y="211.0" width="183.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="960.8" y="222.0">rocksdb::DBImpl::Write(r..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.03%)</title><rect x="957.9" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,761 samples, 15.42%)</title><rect x="958.2" y="195.0" width="182.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="961.2" y="206.0">rocksdb::DBImpl::WriteIm..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.04%)</title><rect x="962.1" y="179.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="965.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (6 samples, 0.05%)</title><rect x="962.7" y="179.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (536 samples, 4.69%)</title><rect x="963.4" y="179.0" width="55.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.4" y="190.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (3 samples, 0.03%)</title><rect x="963.7" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="966.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (526 samples, 4.61%)</title><rect x="964.0" y="163.0" width="54.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="967.0" y="174.0">rocks..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (517 samples, 4.53%)</title><rect x="964.7" y="147.0" width="53.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="967.7" y="158.0">rocks..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (6 samples, 0.05%)</title><rect x="965.2" y="131.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="968.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (506 samples, 4.43%)</title><rect x="965.8" y="131.0" width="52.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="968.8" y="142.0">rocks..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (9 samples, 0.08%)</title><rect x="967.1" y="115.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.1" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="967.6" y="99.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="970.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (485 samples, 4.25%)</title><rect x="968.0" y="115.0" width="50.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.0" y="126.0">rocks..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.04%)</title><rect x="968.4" y="99.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="971.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (471 samples, 4.13%)</title><rect x="969.4" y="99.0" width="48.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="972.4" y="110.0">rock..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (4 samples, 0.04%)</title><rect x="970.4" y="83.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.4" y="94.0"></text>
</g>
<g>
<title>write (458 samples, 4.01%)</title><rect x="970.8" y="83.0" width="47.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="973.8" y="94.0">write</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (6 samples, 0.05%)</title><rect x="1018.9" y="179.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.9" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.03%)</title><rect x="1019.2" y="163.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1022.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (131 samples, 1.15%)</title><rect x="1019.7" y="179.0" width="13.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1022.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (122 samples, 1.07%)</title><rect x="1020.6" y="163.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1023.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.03%)</title><rect x="1021.1" y="147.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (114 samples, 1.00%)</title><rect x="1021.4" y="147.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (103 samples, 0.90%)</title><rect x="1022.6" y="131.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1025.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (98 samples, 0.86%)</title><rect x="1022.8" y="115.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1025.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (89 samples, 0.78%)</title><rect x="1023.7" y="99.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.7" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.03%)</title><rect x="1028.0" y="83.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1031.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.03%)</title><rect x="1028.6" y="83.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (38 samples, 0.33%)</title><rect x="1028.9" y="83.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.9" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (6 samples, 0.05%)</title><rect x="1029.8" y="67.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1032.8" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (23 samples, 0.20%)</title><rect x="1030.4" y="67.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1033.4" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (13 samples, 0.11%)</title><rect x="1031.5" y="51.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1034.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="1032.9" y="115.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (29 samples, 0.25%)</title><rect x="1033.2" y="179.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (26 samples, 0.23%)</title><rect x="1033.5" y="163.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.23%)</title><rect x="1033.5" y="147.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.21%)</title><rect x="1033.7" y="131.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.7" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="1033.7" y="115.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1036.7" y="126.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="1033.7" y="99.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1036.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (21 samples, 0.18%)</title><rect x="1034.0" y="115.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1037.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.18%)</title><rect x="1034.0" y="99.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.18%)</title><rect x="1034.1" y="83.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1037.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (10 samples, 0.09%)</title><rect x="1035.1" y="67.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1038.1" y="78.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.03%)</title><rect x="1035.4" y="51.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1038.4" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="1035.8" y="51.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (398 samples, 3.49%)</title><rect x="1036.5" y="179.0" width="41.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.5" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (397 samples, 3.48%)</title><rect x="1036.6" y="163.0" width="41.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1039.6" y="174.0">roc..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.04%)</title><rect x="1037.6" y="147.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.6" y="158.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.04%)</title><rect x="1037.6" y="131.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1040.6" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (382 samples, 3.35%)</title><rect x="1038.2" y="147.0" width="39.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1041.2" y="158.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (9 samples, 0.08%)</title><rect x="1077.7" y="179.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.03%)</title><rect x="1078.1" y="163.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.1" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1078.1" y="147.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1081.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (582 samples, 5.10%)</title><rect x="1078.6" y="179.0" width="60.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.6" y="190.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (573 samples, 5.02%)</title><rect x="1078.8" y="163.0" width="59.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.8" y="174.0">rocksd..</text>
</g>
<g>
<title>sched_yield (4 samples, 0.04%)</title><rect x="1082.2" y="147.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1085.2" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (16 samples, 0.14%)</title><rect x="1082.6" y="147.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1085.6" y="158.0"></text>
</g>
<g>
<title>clock_gettime (15 samples, 0.13%)</title><rect x="1082.7" y="131.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1085.7" y="142.0"></text>
</g>
<g>
<title>__vsnprintf_chk (3 samples, 0.03%)</title><rect x="1082.8" y="115.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1085.8" y="126.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (6 samples, 0.05%)</title><rect x="1083.3" y="115.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1086.3" y="126.0"></text>
</g>
<g>
<title>mach_timebase_info (3 samples, 0.03%)</title><rect x="1084.0" y="115.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1087.0" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (60 samples, 0.53%)</title><rect x="1084.3" y="147.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1087.3" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (56 samples, 0.49%)</title><rect x="1084.3" y="131.0" width="5.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1087.3" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.04%)</title><rect x="1090.1" y="131.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1093.1" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.03%)</title><rect x="1090.2" y="115.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1093.2" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.03%)</title><rect x="1090.2" y="99.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1093.2" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (459 samples, 4.02%)</title><rect x="1090.6" y="147.0" width="47.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1093.6" y="158.0">xdrr..</text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (6 samples, 0.05%)</title><rect x="1138.0" y="163.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (4 samples, 0.04%)</title><rect x="1138.7" y="179.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.03%)</title><rect x="1138.7" y="163.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.7" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1138.7" y="147.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1141.7" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.04%)</title><rect x="1139.5" y="179.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.5" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.03%)</title><rect x="1140.9" y="195.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (22 samples, 0.19%)</title><rect x="1141.4" y="211.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (13 samples, 0.11%)</title><rect x="1141.7" y="195.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.7" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (12 samples, 0.11%)</title><rect x="1141.8" y="179.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.8" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (7 samples, 0.06%)</title><rect x="1142.3" y="163.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.3" y="174.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.04%)</title><rect x="1142.6" y="147.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1145.6" y="158.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.04%)</title><rect x="1142.6" y="131.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1145.6" y="142.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.04%)</title><rect x="1142.6" y="115.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1145.6" y="126.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="1142.7" y="99.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1145.7" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="1142.7" y="83.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1145.7" y="94.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.04%)</title><rect x="1143.1" y="195.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="1143.7" y="211.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.7" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (6 samples, 0.05%)</title><rect x="1143.9" y="195.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.9" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (3 samples, 0.03%)</title><rect x="1144.2" y="179.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (12 samples, 0.11%)</title><rect x="1144.5" y="211.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.5" y="222.0"></text>
</g>
<g>
<title>free (6 samples, 0.05%)</title><rect x="1144.7" y="195.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1147.7" y="206.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.04%)</title><rect x="1144.9" y="179.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1147.9" y="190.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="1145.4" y="195.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1148.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (8 samples, 0.07%)</title><rect x="1146.8" y="307.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1149.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (8 samples, 0.07%)</title><rect x="1146.8" y="291.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1149.8" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.07%)</title><rect x="1146.8" y="275.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1149.8" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.06%)</title><rect x="1146.9" y="259.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1149.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.06%)</title><rect x="1146.9" y="243.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1149.9" y="254.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (17 samples, 0.15%)</title><rect x="1147.7" y="371.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1150.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (17 samples, 0.15%)</title><rect x="1147.7" y="355.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1150.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.10%)</title><rect x="1147.7" y="339.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1150.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String.equals (9 samples, 0.08%)</title><rect x="1147.9" y="323.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1150.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.03%)</title><rect x="1148.2" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1151.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.03%)</title><rect x="1148.6" y="307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1151.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.05%)</title><rect x="1148.9" y="339.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1151.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.05%)</title><rect x="1148.9" y="323.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1151.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.04%)</title><rect x="1149.0" y="307.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1152.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.03%)</title><rect x="1149.5" y="371.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1152.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="1149.5" y="355.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1152.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="1149.5" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1152.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21 samples, 0.18%)</title><rect x="1149.8" y="403.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1152.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.11%)</title><rect x="1150.4" y="387.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1153.4" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.09%)</title><rect x="1150.6" y="371.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1153.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.03%)</title><rect x="1151.7" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1154.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="1152.1" y="403.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1155.1" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="1152.4" y="403.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1155.4" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="1152.4" y="387.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1155.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (197 samples, 1.73%)</title><rect x="1152.9" y="419.0" width="20.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1155.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (194 samples, 1.70%)</title><rect x="1153.1" y="403.0" width="20.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1156.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="1153.4" y="387.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1156.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (187 samples, 1.64%)</title><rect x="1153.8" y="387.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1156.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (185 samples, 1.62%)</title><rect x="1154.0" y="371.0" width="19.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1157.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (184 samples, 1.61%)</title><rect x="1154.1" y="355.0" width="19.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1157.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (10 samples, 0.09%)</title><rect x="1154.1" y="339.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1157.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.09%)</title><rect x="1154.1" y="323.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1157.1" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.04%)</title><rect x="1154.1" y="307.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1157.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.04%)</title><rect x="1154.1" y="291.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1157.1" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.04%)</title><rect x="1154.1" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1157.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (6 samples, 0.05%)</title><rect x="1154.5" y="307.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1157.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (6 samples, 0.05%)</title><rect x="1154.5" y="291.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1157.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (6 samples, 0.05%)</title><rect x="1154.5" y="275.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1157.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (6 samples, 0.05%)</title><rect x="1154.5" y="259.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1157.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (165 samples, 1.45%)</title><rect x="1155.3" y="339.0" width="17.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1158.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (163 samples, 1.43%)</title><rect x="1155.5" y="323.0" width="16.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1158.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (163 samples, 1.43%)</title><rect x="1155.5" y="307.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1158.5" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (7 samples, 0.06%)</title><rect x="1157.2" y="291.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1160.2" y="302.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.03%)</title><rect x="1157.6" y="275.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1160.6" y="286.0"></text>
</g>
<g>
<title>read (137 samples, 1.20%)</title><rect x="1158.2" y="291.0" width="14.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1161.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.06%)</title><rect x="1172.3" y="339.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1175.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.06%)</title><rect x="1172.3" y="323.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1175.3" y="334.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.03%)</title><rect x="1173.6" y="467.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1176.6" y="478.0"></text>
</g>
<g>
<title>[tid=13827] (9 samples, 0.08%)</title><rect x="1174.1" y="483.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1177.1" y="494.0"></text>
</g>
<g>
<title>thread_start (9 samples, 0.08%)</title><rect x="1174.1" y="467.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1177.1" y="478.0"></text>
</g>
<g>
<title>_pthread_start (9 samples, 0.08%)</title><rect x="1174.1" y="451.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1177.1" y="462.0"></text>
</g>
<g>
<title>_pthread_body (9 samples, 0.08%)</title><rect x="1174.1" y="435.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1177.1" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.08%)</title><rect x="1174.1" y="419.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1177.1" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.08%)</title><rect x="1174.1" y="403.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="414.0"></text>
</g>
<g>
<title>VMThread::run() (9 samples, 0.08%)</title><rect x="1174.1" y="387.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.1" y="398.0"></text>
</g>
<g>
<title>VMThread::loop() (9 samples, 0.08%)</title><rect x="1174.1" y="371.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.04%)</title><rect x="1174.1" y="355.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.04%)</title><rect x="1174.1" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.1" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.04%)</title><rect x="1174.1" y="323.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="1174.1" y="307.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1177.1" y="318.0"></text>
</g>
<g>
<title>[tid=20483] (11 samples, 0.10%)</title><rect x="1175.0" y="483.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1178.0" y="494.0"></text>
</g>
<g>
<title>thread_start (11 samples, 0.10%)</title><rect x="1175.0" y="467.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1178.0" y="478.0"></text>
</g>
<g>
<title>_pthread_start (11 samples, 0.10%)</title><rect x="1175.0" y="451.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1178.0" y="462.0"></text>
</g>
<g>
<title>_pthread_body (11 samples, 0.10%)</title><rect x="1175.0" y="435.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1178.0" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (11 samples, 0.10%)</title><rect x="1175.0" y="419.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1178.0" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (11 samples, 0.10%)</title><rect x="1175.0" y="403.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.0" y="414.0"></text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 0.10%)</title><rect x="1175.0" y="387.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="398.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (5 samples, 0.04%)</title><rect x="1175.0" y="371.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="382.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (5 samples, 0.04%)</title><rect x="1175.0" y="355.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.0" y="366.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (4 samples, 0.04%)</title><rect x="1175.1" y="339.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="350.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (3 samples, 0.03%)</title><rect x="1175.2" y="323.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="334.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (5 samples, 0.04%)</title><rect x="1175.5" y="371.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="382.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (4 samples, 0.04%)</title><rect x="1175.6" y="355.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1178.6" y="366.0"></text>
</g>
<g>
<title>[tid=24835] (104 samples, 0.91%)</title><rect x="1176.3" y="483.0" width="10.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>thread_start (104 samples, 0.91%)</title><rect x="1176.3" y="467.0" width="10.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1179.3" y="478.0"></text>
</g>
<g>
<title>_pthread_start (104 samples, 0.91%)</title><rect x="1176.3" y="451.0" width="10.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1179.3" y="462.0"></text>
</g>
<g>
<title>_pthread_body (104 samples, 0.91%)</title><rect x="1176.3" y="435.0" width="10.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1179.3" y="446.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void* (*)(void*), rocksdb::BGThreadMetadata*&gt; &gt;(void*) (104 samples, 0.91%)</title><rect x="1176.3" y="419.0" width="10.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (104 samples, 0.91%)</title><rect x="1176.3" y="403.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (104 samples, 0.91%)</title><rect x="1176.3" y="387.0" width="10.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (104 samples, 0.91%)</title><rect x="1176.3" y="371.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (102 samples, 0.89%)</title><rect x="1176.4" y="355.0" width="10.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (102 samples, 0.89%)</title><rect x="1176.4" y="339.0" width="10.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;&amp;, unsigned long long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (102 samples, 0.89%)</title><rect x="1176.4" y="323.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*) (102 samples, 0.89%)</title><rect x="1176.4" y="307.0" width="10.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::WriteLevel0Table() (102 samples, 0.89%)</title><rect x="1176.4" y="291.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt; &gt; &gt;, rocksdb::FileMetaData*, rocksdb::InternalKeyComparator const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::__1::default_delete&lt;rocksdb::IntTblPropCollector (101 samples, 0.88%)</title><rect x="1176.4" y="275.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (43 samples, 0.38%)</title><rect x="1176.7" y="259.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (31 samples, 0.27%)</title><rect x="1176.8" y="243.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (31 samples, 0.27%)</title><rect x="1176.8" y="227.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (31 samples, 0.27%)</title><rect x="1176.8" y="211.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (31 samples, 0.27%)</title><rect x="1176.8" y="195.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="206.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (31 samples, 0.27%)</title><rect x="1176.8" y="179.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="190.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (31 samples, 0.27%)</title><rect x="1176.8" y="163.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="174.0"></text>
</g>
<g>
<title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (30 samples, 0.26%)</title><rect x="1176.9" y="147.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="158.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (16 samples, 0.14%)</title><rect x="1178.3" y="131.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="142.0"></text>
</g>
<g>
<title>snappy::Bits::FindLSBSetNonZero64(unsigned long long) (3 samples, 0.03%)</title><rect x="1179.1" y="115.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="126.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (4 samples, 0.04%)</title><rect x="1179.5" y="115.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::BlockBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const*) (7 samples, 0.06%)</title><rect x="1180.1" y="243.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.03%)</title><rect x="1180.4" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="1180.4" y="211.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (52 samples, 0.46%)</title><rect x="1181.2" y="259.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (47 samples, 0.41%)</title><rect x="1181.3" y="243.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (31 samples, 0.27%)</title><rect x="1182.7" y="227.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="1185.9" y="227.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.03%)</title><rect x="1185.9" y="211.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1188.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.03%)</title><rect x="1186.2" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="254.0"></text>
</g>
<g>
<title>[tid=37891] (4 samples, 0.04%)</title><rect x="1187.2" y="483.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1190.2" y="494.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.04%)</title><rect x="1187.2" y="467.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1190.2" y="478.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.04%)</title><rect x="1187.2" y="451.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1190.2" y="462.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.04%)</title><rect x="1187.2" y="435.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1190.2" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.04%)</title><rect x="1187.2" y="419.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1190.2" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.04%)</title><rect x="1187.2" y="403.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="414.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.04%)</title><rect x="1187.2" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.2" y="398.0"></text>
</g>
<g>
<title>[tid=4099] (3 samples, 0.03%)</title><rect x="1187.6" y="483.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1190.6" y="494.0"></text>
</g>
<g>
<title>start_wqthread (3 samples, 0.03%)</title><rect x="1187.6" y="467.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1190.6" y="478.0"></text>
</g>
<g>
<title>_pthread_wqthread (3 samples, 0.03%)</title><rect x="1187.6" y="451.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1190.6" y="462.0"></text>
</g>
<g>
<title>_dispatch_kevent_worker_thread (3 samples, 0.03%)</title><rect x="1187.6" y="435.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1190.6" y="446.0"></text>
</g>
<g>
<title>_dispatch_lane_serial_drain (3 samples, 0.03%)</title><rect x="1187.6" y="419.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1190.6" y="430.0"></text>
</g>
<g>
<title>_dispatch_source_invoke (3 samples, 0.03%)</title><rect x="1187.6" y="403.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1190.6" y="414.0"></text>
</g>
<g>
<title>_dispatch_continuation_pop (3 samples, 0.03%)</title><rect x="1187.6" y="387.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1190.6" y="398.0"></text>
</g>
<g>
<title>_dispatch_client_callout (3 samples, 0.03%)</title><rect x="1187.6" y="371.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1190.6" y="382.0"></text>
</g>
<g>
<title>malloc_memory_event_handler (3 samples, 0.03%)</title><rect x="1187.6" y="355.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1190.6" y="366.0"></text>
</g>
<g>
<title>malloc_zone_pressure_relief (3 samples, 0.03%)</title><rect x="1187.6" y="339.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.6" y="350.0"></text>
</g>
<g>
<title>szone_pressure_relief (3 samples, 0.03%)</title><rect x="1187.6" y="323.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1190.6" y="334.0"></text>
</g>
<g>
<title>tiny_madvise_pressure_relief (3 samples, 0.03%)</title><rect x="1187.6" y="307.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1190.6" y="318.0"></text>
</g>
<g>
<title>[tid=41219] (12 samples, 0.11%)</title><rect x="1187.9" y="483.0" width="1.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1190.9" y="494.0"></text>
</g>
<g>
<title>thread_start (12 samples, 0.11%)</title><rect x="1187.9" y="467.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1190.9" y="478.0"></text>
</g>
<g>
<title>_pthread_start (12 samples, 0.11%)</title><rect x="1187.9" y="451.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1190.9" y="462.0"></text>
</g>
<g>
<title>_pthread_body (12 samples, 0.11%)</title><rect x="1187.9" y="435.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1190.9" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (12 samples, 0.11%)</title><rect x="1187.9" y="419.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1190.9" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (12 samples, 0.11%)</title><rect x="1187.9" y="403.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.9" y="414.0"></text>
</g>
<g>
<title>WatcherThread::run() (12 samples, 0.11%)</title><rect x="1187.9" y="387.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="398.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (12 samples, 0.11%)</title><rect x="1187.9" y="371.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (12 samples, 0.11%)</title><rect x="1187.9" y="355.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (12 samples, 0.11%)</title><rect x="1187.9" y="339.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (11 samples, 0.10%)</title><rect x="1188.0" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.10%)</title><rect x="1188.0" y="307.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1191.0" y="318.0"></text>
</g>
<g>
<title>[tid=43267] (8 samples, 0.07%)</title><rect x="1189.2" y="483.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1192.2" y="494.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.07%)</title><rect x="1189.2" y="467.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1192.2" y="478.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.07%)</title><rect x="1189.2" y="451.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1192.2" y="462.0"></text>
</g>
<g>
<title>_pthread_body (8 samples, 0.07%)</title><rect x="1189.2" y="435.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1192.2" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.07%)</title><rect x="1189.2" y="419.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1192.2" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.07%)</title><rect x="1189.2" y="403.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="414.0"></text>
</g>
<g>
<title>JavaThread::run() (8 samples, 0.07%)</title><rect x="1189.2" y="387.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="398.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (8 samples, 0.07%)</title><rect x="1189.2" y="371.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.2" y="382.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (8 samples, 0.07%)</title><rect x="1189.2" y="355.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.2" y="366.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (8 samples, 0.07%)</title><rect x="1189.2" y="339.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.2" y="350.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (8 samples, 0.07%)</title><rect x="1189.2" y="323.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="334.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (7 samples, 0.06%)</title><rect x="1189.3" y="307.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.3" y="318.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.03%)</title><rect x="1189.3" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.3" y="302.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.03%)</title><rect x="1189.6" y="291.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.6" y="302.0"></text>
</g>
</g>
</svg>
