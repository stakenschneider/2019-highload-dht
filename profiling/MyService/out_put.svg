<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (4,635 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>[NIO Acceptor 0.0.0.0:8080 tid=38915] (1 samples, 0.02%)</title><rect x="10.0" y="1155.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (1 samples, 0.02%)</title><rect x="10.0" y="1139.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/server/Server.register (1 samples, 0.02%)</title><rect x="10.0" y="1123.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.register (1 samples, 0.02%)</title><rect x="10.0" y="1107.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.enable (1 samples, 0.02%)</title><rect x="10.0" y="1091.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (1 samples, 0.02%)</title><rect x="10.0" y="1075.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=26115] (1,816 samples, 39.18%)</title><rect x="10.3" y="1155.0" width="462.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.3" y="1166.0">[NIO Selector #0 tid=26115]</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="10.3" y="1139.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.3" y="1150.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="10.3" y="1123.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.3" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="10.5" y="1139.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.5" y="1150.0"></text>
</g>
<g>
<title>ClassLoaderData::holder_phantom() const (1 samples, 0.02%)</title><rect x="10.5" y="1123.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.5" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (2 samples, 0.04%)</title><rect x="10.8" y="1139.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="1150.0"></text>
</g>
<g>
<title>[not_walkable_Java] (12 samples, 0.26%)</title><rect x="11.3" y="1139.0" width="3.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="14.3" y="1150.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="11.8" y="1123.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.8" y="1134.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (3 samples, 0.06%)</title><rect x="12.0" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.0" y="1134.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (1 samples, 0.02%)</title><rect x="12.8" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.8" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (3 samples, 0.06%)</title><rect x="13.1" y="1123.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.1" y="1134.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="13.1" y="1107.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.1" y="1118.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.04%)</title><rect x="13.1" y="1091.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.1" y="1102.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="13.6" y="1107.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.6" y="1118.0"></text>
</g>
<g>
<title>nmethod::verified_entry_point() const (2 samples, 0.04%)</title><rect x="13.8" y="1123.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.8" y="1134.0"></text>
</g>
<g>
<title>[unknown_Java] (24 samples, 0.52%)</title><rect x="14.3" y="1139.0" width="6.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="17.3" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (13 samples, 0.28%)</title><rect x="17.1" y="1123.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.1" y="1134.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.11%)</title><rect x="17.1" y="1107.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.1" y="1118.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.04%)</title><rect x="17.1" y="1091.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="20.1" y="1102.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.04%)</title><rect x="17.6" y="1091.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="20.6" y="1102.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.04%)</title><rect x="17.6" y="1075.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="20.6" y="1086.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="18.1" y="1091.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="21.1" y="1102.0"></text>
</g>
<g>
<title>Method::from_compiled_entry_no_trampoline() const (6 samples, 0.13%)</title><rect x="18.4" y="1107.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="21.4" y="1118.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (1 samples, 0.02%)</title><rect x="19.9" y="1107.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="22.9" y="1118.0"></text>
</g>
<g>
<title>nmethod::verified_entry_point() const (1 samples, 0.02%)</title><rect x="20.2" y="1107.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,772 samples, 38.23%)</title><rect x="20.4" y="1139.0" width="451.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.4" y="1150.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.09%)</title><rect x="21.2" y="1123.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.2" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1 samples, 0.02%)</title><rect x="22.0" y="1107.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.0" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.02%)</title><rect x="22.2" y="1123.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.2" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.02%)</title><rect x="22.2" y="1107.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.02%)</title><rect x="22.5" y="1123.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="25.5" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.02%)</title><rect x="22.5" y="1107.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.02%)</title><rect x="22.5" y="1091.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.5" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (353 samples, 7.62%)</title><rect x="22.7" y="1123.0" width="89.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.7" y="1134.0">one/nio/ne..</text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.02%)</title><rect x="23.2" y="1107.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="26.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7 samples, 0.15%)</title><rect x="23.5" y="1107.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.02%)</title><rect x="24.8" y="1091.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.02%)</title><rect x="24.8" y="1075.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.8" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.02%)</title><rect x="25.0" y="1091.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.02%)</title><rect x="25.0" y="1075.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="25.0" y="1059.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="25.0" y="1043.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="25.0" y="1027.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.0" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (343 samples, 7.40%)</title><rect x="25.3" y="1107.0" width="87.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.3" y="1118.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (343 samples, 7.40%)</title><rect x="25.3" y="1091.0" width="87.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.3" y="1102.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (342 samples, 7.38%)</title><rect x="25.5" y="1075.0" width="87.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.5" y="1086.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (326 samples, 7.03%)</title><rect x="25.5" y="1059.0" width="83.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.5" y="1070.0">sun/nio/c..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.02%)</title><rect x="31.9" y="1043.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="34.9" y="1054.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.11%)</title><rect x="32.1" y="1043.0" width="1.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="35.1" y="1054.0"></text>
</g>
<g>
<title>kevent (295 samples, 6.36%)</title><rect x="33.4" y="1043.0" width="75.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="36.4" y="1054.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.04%)</title><rect x="108.5" y="1059.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="111.5" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.02%)</title><rect x="108.8" y="1043.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.02%)</title><rect x="108.8" y="1027.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.02%)</title><rect x="108.8" y="1011.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.02%)</title><rect x="108.8" y="995.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="111.8" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.02%)</title><rect x="109.0" y="1059.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.0" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.04%)</title><rect x="109.3" y="1059.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.04%)</title><rect x="109.3" y="1043.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.04%)</title><rect x="109.3" y="1027.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="112.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.04%)</title><rect x="109.3" y="1011.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="112.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (11 samples, 0.24%)</title><rect x="109.8" y="1059.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.09%)</title><rect x="111.6" y="1043.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="111.6" y="1027.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="111.6" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="114.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="111.6" y="995.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.02%)</title><rect x="111.8" y="995.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.04%)</title><rect x="112.1" y="1027.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="115.1" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,410 samples, 30.42%)</title><rect x="112.6" y="1123.0" width="359.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="115.6" y="1134.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,410 samples, 30.42%)</title><rect x="112.6" y="1107.0" width="359.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.6" y="1118.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.09%)</title><rect x="113.1" y="1091.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,320 samples, 28.48%)</title><rect x="114.1" y="1091.0" width="336.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.1" y="1102.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>I2C/C2I adapters (10 samples, 0.22%)</title><rect x="151.5" y="1075.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="154.5" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (11 samples, 0.24%)</title><rect x="154.1" y="1075.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="157.1" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (9 samples, 0.19%)</title><rect x="154.1" y="1059.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="157.1" y="1070.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.02%)</title><rect x="154.1" y="1043.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="157.1" y="1054.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (8 samples, 0.17%)</title><rect x="154.3" y="1043.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="157.3" y="1054.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="154.3" y="1027.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="157.3" y="1038.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (7 samples, 0.15%)</title><rect x="154.6" y="1027.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="157.6" y="1038.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="155.4" y="1011.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="158.4" y="1022.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle const&amp;, int) (1 samples, 0.02%)</title><rect x="155.4" y="995.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="158.4" y="1006.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.02%)</title><rect x="155.4" y="979.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="158.4" y="990.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (3 samples, 0.06%)</title><rect x="155.6" y="1011.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="158.6" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (3 samples, 0.06%)</title><rect x="155.6" y="995.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="158.6" y="1006.0"></text>
</g>
<g>
<title>AbstractCompiler::can_compile_method(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="155.6" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="158.6" y="990.0"></text>
</g>
<g>
<title>CompilerOracle::has_any_option() (1 samples, 0.02%)</title><rect x="155.9" y="979.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="158.9" y="990.0"></text>
</g>
<g>
<title>DirectivesStack::getMatchingDirective(methodHandle const&amp;, AbstractCompiler*) (1 samples, 0.02%)</title><rect x="156.1" y="979.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="159.1" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="156.1" y="963.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="159.1" y="974.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="156.4" y="1059.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="159.4" y="1070.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="156.4" y="1043.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="159.4" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="156.4" y="1027.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="159.4" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title><rect x="156.4" y="1011.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="159.4" y="1022.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="156.6" y="1059.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="159.6" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::OSR_migration_begin(JavaThread*) (3 samples, 0.06%)</title><rect x="156.9" y="1075.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="159.9" y="1086.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (3 samples, 0.06%)</title><rect x="156.9" y="1059.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="159.9" y="1070.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (2 samples, 0.04%)</title><rect x="157.1" y="1043.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="160.1" y="1054.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (2 samples, 0.04%)</title><rect x="157.1" y="1027.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="160.1" y="1038.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.02%)</title><rect x="157.4" y="1011.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="160.4" y="1022.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.02%)</title><rect x="157.4" y="995.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="160.4" y="1006.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="157.4" y="979.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="160.4" y="990.0"></text>
</g>
<g>
<title>__ulock_wake (1 samples, 0.02%)</title><rect x="157.7" y="1075.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="160.7" y="1086.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="157.9" y="1075.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="160.9" y="1086.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.02%)</title><rect x="157.9" y="1059.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="160.9" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,110 samples, 23.95%)</title><rect x="158.2" y="1075.0" width="282.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.2" y="1086.0">one/nio/http/HttpSession.handleParsedR..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,110 samples, 23.95%)</title><rect x="158.2" y="1059.0" width="282.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.2" y="1070.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,102 samples, 23.78%)</title><rect x="158.4" y="1043.0" width="280.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.4" y="1054.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="158.4" y="1027.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="161.4" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (352 samples, 7.59%)</title><rect x="158.9" y="1027.0" width="89.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.9" y="1038.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (346 samples, 7.46%)</title><rect x="158.9" y="1011.0" width="88.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.9" y="1022.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.35%)</title><rect x="158.9" y="995.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="161.9" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="159.7" y="979.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="162.7" y="990.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.26%)</title><rect x="160.0" y="979.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.0" y="990.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title><rect x="160.0" y="963.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.0" y="974.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.04%)</title><rect x="160.0" y="947.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.0" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.15%)</title><rect x="160.5" y="963.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="163.5" y="974.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="161.7" y="947.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="164.7" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.06%)</title><rect x="162.2" y="963.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="165.2" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.06%)</title><rect x="162.2" y="947.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="165.2" y="958.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="162.5" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.5" y="942.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="162.5" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="165.5" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (330 samples, 7.12%)</title><rect x="163.0" y="995.0" width="84.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.0" y="1006.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session.write (330 samples, 7.12%)</title><rect x="163.0" y="979.0" width="84.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.0" y="990.0">one/nio/ne..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="163.0" y="963.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="166.0" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (325 samples, 7.01%)</title><rect x="163.3" y="963.0" width="82.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.3" y="974.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (325 samples, 7.01%)</title><rect x="163.3" y="947.0" width="82.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.3" y="958.0">one/nio/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="163.3" y="931.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.3" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (324 samples, 6.99%)</title><rect x="163.5" y="931.0" width="82.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.5" y="942.0">sun/nio/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="163.5" y="915.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.5" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (323 samples, 6.97%)</title><rect x="163.8" y="915.0" width="82.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.8" y="926.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (322 samples, 6.95%)</title><rect x="164.0" y="899.0" width="82.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="167.0" y="910.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (311 samples, 6.71%)</title><rect x="165.0" y="883.0" width="79.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.0" y="894.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (311 samples, 6.71%)</title><rect x="165.0" y="867.0" width="79.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="168.0" y="878.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (311 samples, 6.71%)</title><rect x="165.0" y="851.0" width="79.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="168.0" y="862.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.11%)</title><rect x="167.1" y="835.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="170.1" y="846.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.04%)</title><rect x="168.4" y="835.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="171.4" y="846.0"></text>
</g>
<g>
<title>write (296 samples, 6.39%)</title><rect x="168.9" y="835.0" width="75.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="171.9" y="846.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.15%)</title><rect x="244.2" y="883.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.2" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="244.5" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.02%)</title><rect x="244.7" y="851.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.09%)</title><rect x="245.0" y="867.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.0" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="245.7" y="851.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.7" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="245.7" y="835.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.7" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="245.7" y="819.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.7" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="245.7" y="803.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.7" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.09%)</title><rect x="246.0" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="249.0" y="974.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="246.0" y="947.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="249.0" y="958.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="246.3" y="931.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="249.3" y="942.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="246.5" y="947.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="249.5" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.13%)</title><rect x="247.0" y="1011.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="247.8" y="995.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="247.8" y="979.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.8" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="247.8" y="963.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="250.8" y="974.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="248.0" y="995.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="248.0" y="979.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="248.0" y="963.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="251.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="248.0" y="947.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.0" y="958.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.02%)</title><rect x="248.0" y="931.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="251.0" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (1 samples, 0.02%)</title><rect x="248.3" y="979.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.3" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (11 samples, 0.24%)</title><rect x="248.5" y="1027.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="249.1" y="1011.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="249.1" y="995.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.15%)</title><rect x="249.3" y="1011.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.13%)</title><rect x="249.6" y="995.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="249.8" y="979.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.8" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="249.8" y="963.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.8" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.09%)</title><rect x="250.1" y="979.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.1" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="250.3" y="963.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="253.3" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.04%)</title><rect x="250.6" y="963.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.6" y="974.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.02%)</title><rect x="251.1" y="1011.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="251.1" y="995.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="251.1" y="979.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.1" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="251.1" y="963.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.1" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (737 samples, 15.90%)</title><rect x="251.3" y="1027.0" width="187.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.3" y="1038.0">ru/mail/polis/service/st..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="251.3" y="1011.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="251.6" y="1011.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="251.6" y="995.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="251.6" y="979.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.6" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="251.6" y="963.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.6" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.put (735 samples, 15.86%)</title><rect x="251.9" y="1011.0" width="187.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.9" y="1022.0">ru/mail/polis/service/st..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="251.9" y="995.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="251.9" y="979.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.9" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="251.9" y="963.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.9" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="251.9" y="947.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.9" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="251.9" y="931.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.9" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="251.9" y="915.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.9" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="251.9" y="899.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.9" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="251.9" y="883.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.9" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="252.1" y="995.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.1" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (732 samples, 15.79%)</title><rect x="252.6" y="995.0" width="186.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="255.6" y="1006.0">ru/mail/polis/dao/RockDA..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (728 samples, 15.71%)</title><rect x="252.9" y="979.0" width="185.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.9" y="990.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (728 samples, 15.71%)</title><rect x="252.9" y="963.0" width="185.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.9" y="974.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (725 samples, 15.64%)</title><rect x="253.6" y="947.0" width="184.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="256.6" y="958.0">Java_org_rocksdb_RocksDB..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.02%)</title><rect x="253.9" y="931.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="256.9" y="942.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.02%)</title><rect x="254.1" y="931.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="257.1" y="942.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="254.4" y="931.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="257.4" y="942.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.02%)</title><rect x="254.9" y="931.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="257.9" y="942.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.04%)</title><rect x="255.2" y="931.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="258.2" y="942.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (716 samples, 15.45%)</title><rect x="255.7" y="931.0" width="182.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="258.7" y="942.0">rocksdb_put_helper(JNIEn..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="257.5" y="915.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="260.5" y="926.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="257.7" y="915.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="260.7" y="926.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.02%)</title><rect x="258.0" y="915.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="261.0" y="926.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="258.2" y="915.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="261.2" y="926.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="258.5" y="915.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="261.5" y="926.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.02%)</title><rect x="258.5" y="899.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="261.5" y="910.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="258.7" y="915.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="261.7" y="926.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.02%)</title><rect x="258.7" y="899.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="261.7" y="910.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.09%)</title><rect x="259.0" y="915.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="262.0" y="926.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="259.2" y="899.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="262.2" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="259.5" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="262.5" y="910.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="259.5" y="883.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="262.5" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="259.5" y="867.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="262.5" y="878.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="259.5" y="851.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="262.5" y="862.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="259.5" y="835.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="262.5" y="846.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="259.5" y="819.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="262.5" y="830.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.02%)</title><rect x="259.7" y="867.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="262.7" y="878.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11 samples, 0.24%)</title><rect x="260.0" y="915.0" width="2.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="263.0" y="926.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (1 samples, 0.02%)</title><rect x="261.0" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="264.0" y="910.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="261.3" y="899.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="264.3" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.06%)</title><rect x="261.5" y="899.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="264.5" y="910.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="261.5" y="883.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="264.5" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="261.8" y="883.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="264.8" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="261.8" y="867.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="264.8" y="878.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="261.8" y="851.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="264.8" y="862.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="261.8" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="264.8" y="846.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="261.8" y="819.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="264.8" y="830.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="262.0" y="819.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="265.0" y="830.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="262.0" y="803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="265.0" y="814.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="262.0" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="265.0" y="798.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.02%)</title><rect x="262.3" y="899.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="265.3" y="910.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.02%)</title><rect x="262.5" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="265.5" y="910.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.02%)</title><rect x="262.8" y="915.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="265.8" y="926.0"></text>
</g>
<g>
<title>operator new(unsigned long) (15 samples, 0.32%)</title><rect x="263.1" y="915.0" width="3.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="266.1" y="926.0"></text>
</g>
<g>
<title>malloc (15 samples, 0.32%)</title><rect x="263.1" y="899.0" width="3.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="266.1" y="910.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="263.1" y="883.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="266.1" y="894.0"></text>
</g>
<g>
<title>malloc_zone_malloc (13 samples, 0.28%)</title><rect x="263.3" y="883.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="266.3" y="894.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="263.8" y="867.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="266.8" y="878.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (9 samples, 0.19%)</title><rect x="264.1" y="867.0" width="2.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="267.1" y="878.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (9 samples, 0.19%)</title><rect x="264.1" y="851.0" width="2.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="267.1" y="862.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.09%)</title><rect x="265.3" y="835.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="268.3" y="846.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="266.4" y="867.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="269.4" y="878.0"></text>
</g>
<g>
<title>szone_malloc (1 samples, 0.02%)</title><rect x="266.6" y="883.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="269.6" y="894.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (669 samples, 14.43%)</title><rect x="266.9" y="915.0" width="170.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="269.9" y="926.0">rocksdb::CompactedDBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (667 samples, 14.39%)</title><rect x="267.4" y="899.0" width="169.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="270.4" y="910.0">rocksdb::DBImpl::Put(r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (667 samples, 14.39%)</title><rect x="267.4" y="883.0" width="169.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="270.4" y="894.0">rocksdb::DB::Put(rocks..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="267.4" y="867.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="270.4" y="878.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="267.6" y="867.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="270.6" y="878.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="267.9" y="867.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="270.9" y="878.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.02%)</title><rect x="268.1" y="867.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="271.1" y="878.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.02%)</title><rect x="268.4" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="271.4" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (639 samples, 13.79%)</title><rect x="268.7" y="867.0" width="162.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="271.7" y="878.0">rocksdb::DBImpl::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="269.4" y="851.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="272.4" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (630 samples, 13.59%)</title><rect x="269.9" y="851.0" width="160.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="272.9" y="862.0">rocksdb::DBImpl::Wri..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="275.0" y="835.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="278.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.02%)</title><rect x="275.5" y="835.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="278.5" y="846.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="275.5" y="819.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="278.5" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (335 samples, 7.23%)</title><rect x="275.8" y="835.0" width="85.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="278.8" y="846.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.02%)</title><rect x="275.8" y="819.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="278.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (332 samples, 7.16%)</title><rect x="276.0" y="819.0" width="84.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="279.0" y="830.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (330 samples, 7.12%)</title><rect x="276.6" y="803.0" width="84.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="279.6" y="814.0">rocksdb::l..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.02%)</title><rect x="277.3" y="787.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="280.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (9 samples, 0.19%)</title><rect x="277.6" y="787.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="280.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (317 samples, 6.84%)</title><rect x="279.9" y="787.0" width="80.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="282.9" y="798.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (1 samples, 0.02%)</title><rect x="280.1" y="771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="283.1" y="782.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (4 samples, 0.09%)</title><rect x="280.4" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="283.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (9 samples, 0.19%)</title><rect x="281.4" y="771.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="284.4" y="782.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.09%)</title><rect x="282.4" y="755.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="285.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (1 samples, 0.02%)</title><rect x="283.4" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="286.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (300 samples, 6.47%)</title><rect x="283.7" y="771.0" width="76.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="286.7" y="782.0">rocksdb:..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.09%)</title><rect x="283.9" y="755.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="286.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (1 samples, 0.02%)</title><rect x="285.0" y="755.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="288.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (294 samples, 6.34%)</title><rect x="285.2" y="755.0" width="74.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="288.2" y="766.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="286.0" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="289.0" y="750.0"></text>
</g>
<g>
<title>write (289 samples, 6.24%)</title><rect x="286.5" y="739.0" width="73.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="289.5" y="750.0">write</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="360.1" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="363.1" y="782.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="360.6" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="363.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.02%)</title><rect x="361.1" y="835.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="364.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.04%)</title><rect x="361.3" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="364.3" y="846.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="361.3" y="819.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="364.3" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="361.6" y="819.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="364.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (90 samples, 1.94%)</title><rect x="361.8" y="835.0" width="22.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="364.8" y="846.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (1 samples, 0.02%)</title><rect x="363.4" y="819.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="366.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (81 samples, 1.75%)</title><rect x="363.6" y="819.0" width="20.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="366.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (5 samples, 0.11%)</title><rect x="364.4" y="803.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="367.4" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (73 samples, 1.57%)</title><rect x="365.7" y="803.0" width="18.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="368.7" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (72 samples, 1.55%)</title><rect x="365.9" y="787.0" width="18.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="368.9" y="798.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="366.9" y="771.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="369.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (59 samples, 1.27%)</title><rect x="367.7" y="771.0" width="15.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="370.7" y="782.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="369.5" y="755.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="372.5" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="369.7" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="372.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (49 samples, 1.06%)</title><rect x="370.2" y="755.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="373.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="376.9" y="739.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="379.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.02%)</title><rect x="377.1" y="723.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="380.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="377.4" y="723.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="380.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.02%)</title><rect x="377.6" y="739.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="380.6" y="750.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="377.6" y="723.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="380.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (18 samples, 0.39%)</title><rect x="377.9" y="739.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="380.9" y="750.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.06%)</title><rect x="379.4" y="723.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="382.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.17%)</title><rect x="380.2" y="723.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="383.2" y="734.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.09%)</title><rect x="381.2" y="707.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="384.2" y="718.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="382.2" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="385.2" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="382.5" y="739.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="385.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (1 samples, 0.02%)</title><rect x="382.7" y="771.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="385.7" y="782.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.11%)</title><rect x="383.0" y="771.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="386.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="384.2" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="387.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (6 samples, 0.13%)</title><rect x="384.7" y="835.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="387.7" y="846.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.02%)</title><rect x="384.7" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="387.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (5 samples, 0.11%)</title><rect x="385.0" y="819.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="388.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.09%)</title><rect x="385.3" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="388.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.02%)</title><rect x="385.3" y="787.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="388.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.06%)</title><rect x="385.5" y="787.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="388.5" y="798.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="385.5" y="771.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="388.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (2 samples, 0.04%)</title><rect x="385.8" y="771.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="388.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="385.8" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="388.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="385.8" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="388.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long long) (1 samples, 0.02%)</title><rect x="386.3" y="835.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="389.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (1 samples, 0.02%)</title><rect x="386.5" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="389.5" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (17 samples, 0.37%)</title><rect x="386.8" y="835.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="389.8" y="846.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="386.8" y="819.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="389.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (15 samples, 0.32%)</title><rect x="387.0" y="819.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="390.0" y="830.0"></text>
</g>
<g>
<title>xdrrec_ops (13 samples, 0.28%)</title><rect x="387.5" y="803.0" width="3.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="390.5" y="814.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.02%)</title><rect x="390.9" y="819.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="393.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.02%)</title><rect x="391.1" y="835.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="394.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (147 samples, 3.17%)</title><rect x="391.4" y="835.0" width="37.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="394.4" y="846.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (147 samples, 3.17%)</title><rect x="391.4" y="819.0" width="37.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="394.4" y="830.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="396.5" y="803.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="399.5" y="814.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np (2 samples, 0.04%)</title><rect x="396.7" y="803.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="399.7" y="814.0"></text>
</g>
<g>
<title>sched_yield (4 samples, 0.09%)</title><rect x="397.2" y="803.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="400.2" y="814.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (11 samples, 0.24%)</title><rect x="398.2" y="803.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="401.2" y="814.0"></text>
</g>
<g>
<title>clock_gettime (10 samples, 0.22%)</title><rect x="398.2" y="787.0" width="2.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="401.2" y="798.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.02%)</title><rect x="398.5" y="771.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="401.5" y="782.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (6 samples, 0.13%)</title><rect x="398.8" y="771.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="401.8" y="782.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="399.5" y="755.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="402.5" y="766.0"></text>
</g>
<g>
<title>mach_timebase_info (1 samples, 0.02%)</title><rect x="400.0" y="755.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="403.0" y="766.0"></text>
</g>
<g>
<title>mach_timebase_info (2 samples, 0.04%)</title><rect x="400.3" y="771.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="403.3" y="782.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (1 samples, 0.02%)</title><rect x="400.8" y="787.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="403.8" y="798.0"></text>
</g>
<g>
<title>xdrrec_ops (109 samples, 2.35%)</title><rect x="401.0" y="803.0" width="27.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="404.0" y="814.0">x..</text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.02%)</title><rect x="428.8" y="835.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="431.8" y="846.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.06%)</title><rect x="429.0" y="835.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="432.0" y="846.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="429.8" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="432.8" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (3 samples, 0.06%)</title><rect x="430.3" y="851.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="433.3" y="862.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.02%)</title><rect x="431.1" y="851.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="434.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.11%)</title><rect x="431.3" y="867.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="434.3" y="878.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.04%)</title><rect x="431.6" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="434.6" y="862.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.02%)</title><rect x="432.1" y="851.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="435.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.02%)</title><rect x="432.4" y="851.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="435.4" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (10 samples, 0.22%)</title><rect x="432.6" y="867.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="435.6" y="878.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.02%)</title><rect x="432.9" y="851.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="435.9" y="862.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.09%)</title><rect x="433.1" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="436.1" y="862.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.09%)</title><rect x="433.1" y="835.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="436.1" y="846.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.09%)</title><rect x="433.1" y="819.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="436.1" y="830.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.09%)</title><rect x="433.1" y="803.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="436.1" y="814.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="433.1" y="787.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="436.1" y="798.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="433.4" y="787.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="436.4" y="798.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="433.4" y="771.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="436.4" y="782.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="433.9" y="755.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="436.9" y="766.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.09%)</title><rect x="434.1" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="437.1" y="862.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="434.1" y="835.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="437.1" y="846.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (3 samples, 0.06%)</title><rect x="434.4" y="835.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="437.4" y="846.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="434.4" y="819.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="437.4" y="830.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="434.6" y="819.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="437.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.11%)</title><rect x="435.2" y="867.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="438.2" y="878.0"></text>
</g>
<g>
<title>free (5 samples, 0.11%)</title><rect x="435.2" y="851.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="438.2" y="862.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.06%)</title><rect x="436.4" y="867.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="439.4" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.06%)</title><rect x="437.2" y="915.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="440.2" y="926.0"></text>
</g>
<g>
<title>szone_free_definite_size (1 samples, 0.02%)</title><rect x="438.0" y="931.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="441.0" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (1 samples, 0.02%)</title><rect x="438.2" y="979.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="441.2" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="438.2" y="963.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.2" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="438.2" y="947.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.2" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="438.2" y="931.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="441.2" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.04%)</title><rect x="438.5" y="979.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="441.5" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (1 samples, 0.02%)</title><rect x="438.7" y="963.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="441.7" y="974.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.13%)</title><rect x="439.0" y="1043.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.11%)</title><rect x="439.2" y="1027.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.04%)</title><rect x="439.2" y="1011.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="439.2" y="995.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="442.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.02%)</title><rect x="439.2" y="979.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.2" y="990.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.02%)</title><rect x="439.5" y="979.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.06%)</title><rect x="439.7" y="1011.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.06%)</title><rect x="439.7" y="995.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="442.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.04%)</title><rect x="440.0" y="979.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="443.0" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.02%)</title><rect x="440.5" y="1043.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="443.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="440.5" y="1027.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="440.5" y="1011.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="443.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="440.5" y="995.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13 samples, 0.28%)</title><rect x="440.8" y="1075.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="443.8" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.02%)</title><rect x="441.8" y="1059.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="441.8" y="1043.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="441.8" y="1027.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.8" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.11%)</title><rect x="442.0" y="1059.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.0" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.11%)</title><rect x="442.0" y="1043.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="443.0" y="1027.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="446.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="443.0" y="1011.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="446.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.02%)</title><rect x="443.0" y="995.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.0" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.06%)</title><rect x="443.3" y="1059.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="446.3" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 0.11%)</title><rect x="444.1" y="1075.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="447.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.06%)</title><rect x="444.6" y="1059.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.06%)</title><rect x="444.6" y="1043.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="447.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="445.1" y="1027.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="445.1" y="1011.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="448.1" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Request.getBody (1 samples, 0.02%)</title><rect x="445.3" y="1075.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="448.3" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.15%)</title><rect x="445.6" y="1075.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="448.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="445.6" y="1059.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="445.8" y="1059.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="446.1" y="1043.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="449.1" y="1054.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="446.4" y="1027.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="449.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="446.6" y="1059.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="446.6" y="1043.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.6" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.06%)</title><rect x="446.6" y="1027.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.6" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="446.9" y="1011.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="449.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (3 samples, 0.06%)</title><rect x="447.4" y="1075.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.4" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.17%)</title><rect x="448.1" y="1075.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.17%)</title><rect x="448.1" y="1059.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="451.1" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (84 samples, 1.81%)</title><rect x="450.2" y="1091.0" width="21.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="453.2" y="1102.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (83 samples, 1.79%)</title><rect x="450.2" y="1075.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="453.2" y="1086.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="450.2" y="1059.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="450.7" y="1043.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="453.7" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (80 samples, 1.73%)</title><rect x="450.9" y="1059.0" width="20.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="453.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="450.9" y="1043.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="450.9" y="1027.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="450.9" y="1011.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="450.9" y="995.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="453.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.04%)</title><rect x="450.9" y="979.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="453.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.02%)</title><rect x="451.4" y="1043.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="454.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="451.4" y="1027.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="454.4" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (77 samples, 1.66%)</title><rect x="451.7" y="1043.0" width="19.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.7" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (75 samples, 1.62%)</title><rect x="452.2" y="1027.0" width="19.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.09%)</title><rect x="452.5" y="1011.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="455.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.09%)</title><rect x="452.5" y="995.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.06%)</title><rect x="452.5" y="979.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="455.5" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="452.5" y="963.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="455.5" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.06%)</title><rect x="452.5" y="947.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="455.5" y="958.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="452.7" y="931.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="455.7" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="453.0" y="931.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="456.0" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.02%)</title><rect x="453.2" y="979.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.2" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.02%)</title><rect x="453.2" y="963.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.2" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.02%)</title><rect x="453.2" y="947.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.2" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.02%)</title><rect x="453.2" y="931.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.2" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (69 samples, 1.49%)</title><rect x="453.5" y="1011.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.5" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (69 samples, 1.49%)</title><rect x="453.5" y="995.0" width="17.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="456.5" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (69 samples, 1.49%)</title><rect x="453.5" y="979.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="456.5" y="990.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.04%)</title><rect x="453.7" y="963.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="456.7" y="974.0"></text>
</g>
<g>
<title>read (66 samples, 1.42%)</title><rect x="454.3" y="963.0" width="16.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="457.3" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.02%)</title><rect x="471.1" y="1011.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="474.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.02%)</title><rect x="471.1" y="995.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.1" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.02%)</title><rect x="471.3" y="1075.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="474.3" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="471.6" y="1139.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="474.6" y="1150.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="471.8" y="1139.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="474.8" y="1150.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=26883] (2,712 samples, 58.51%)</title><rect x="472.6" y="1155.0" width="690.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="475.6" y="1166.0">[NIO Selector #2 tid=26883]</text>
</g>
<g>
<title>[unknown_Java] (9 samples, 0.19%)</title><rect x="472.6" y="1139.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="475.6" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="474.4" y="1123.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="477.4" y="1134.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="474.4" y="1107.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="477.4" y="1118.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,695 samples, 58.14%)</title><rect x="474.9" y="1139.0" width="686.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="477.9" y="1150.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (1 samples, 0.02%)</title><rect x="477.2" y="1123.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.2" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.04%)</title><rect x="477.4" y="1123.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.4" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.04%)</title><rect x="477.4" y="1107.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.4" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.02%)</title><rect x="477.9" y="1123.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="480.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.02%)</title><rect x="477.9" y="1107.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.02%)</title><rect x="477.9" y="1091.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.9" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (335 samples, 7.23%)</title><rect x="478.2" y="1123.0" width="85.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="481.2" y="1134.0">one/nio/ne..</text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="478.9" y="1107.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="481.9" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (12 samples, 0.26%)</title><rect x="479.2" y="1107.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="481.0" y="1091.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title><rect x="481.0" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.06%)</title><rect x="481.5" y="1091.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.06%)</title><rect x="481.5" y="1075.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="484.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="481.5" y="1059.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="484.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="481.5" y="1043.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="484.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="481.5" y="1027.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.04%)</title><rect x="481.7" y="1059.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="484.7" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.04%)</title><rect x="482.3" y="1107.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.04%)</title><rect x="482.3" y="1091.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.3" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (317 samples, 6.84%)</title><rect x="482.8" y="1107.0" width="80.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.8" y="1118.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (317 samples, 6.84%)</title><rect x="482.8" y="1091.0" width="80.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.8" y="1102.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (316 samples, 6.82%)</title><rect x="483.0" y="1075.0" width="80.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.0" y="1086.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (286 samples, 6.17%)</title><rect x="483.5" y="1059.0" width="72.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.5" y="1070.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.06%)</title><rect x="488.9" y="1043.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="491.9" y="1054.0"></text>
</g>
<g>
<title>kevent (262 samples, 5.65%)</title><rect x="489.6" y="1043.0" width="66.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="492.6" y="1054.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.19%)</title><rect x="556.3" y="1059.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (9 samples, 0.19%)</title><rect x="556.3" y="1043.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.add (9 samples, 0.19%)</title><rect x="556.3" y="1027.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 0.19%)</title><rect x="556.3" y="1011.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="559.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.19%)</title><rect x="556.3" y="995.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="559.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="558.6" y="1059.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.6" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.02%)</title><rect x="558.9" y="1043.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="561.9" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (17 samples, 0.37%)</title><rect x="559.1" y="1059.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="562.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (7 samples, 0.15%)</title><rect x="561.7" y="1043.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="564.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (7 samples, 0.15%)</title><rect x="561.7" y="1027.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="564.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (6 samples, 0.13%)</title><rect x="561.9" y="1011.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="564.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.11%)</title><rect x="561.9" y="995.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="564.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.02%)</title><rect x="563.2" y="995.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="566.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,347 samples, 50.64%)</title><rect x="563.5" y="1123.0" width="597.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="566.5" y="1134.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,340 samples, 50.49%)</title><rect x="564.5" y="1107.0" width="595.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="567.5" y="1118.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,086 samples, 45.01%)</title><rect x="565.0" y="1091.0" width="531.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.0" y="1102.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,986 samples, 42.85%)</title><rect x="570.1" y="1075.0" width="505.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="573.1" y="1086.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,983 samples, 42.78%)</title><rect x="570.9" y="1059.0" width="504.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="573.9" y="1070.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,959 samples, 42.27%)</title><rect x="571.1" y="1043.0" width="498.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.1" y="1054.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (648 samples, 13.98%)</title><rect x="571.6" y="1027.0" width="165.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.6" y="1038.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (617 samples, 13.31%)</title><rect x="571.6" y="1011.0" width="157.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.6" y="1022.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (29 samples, 0.63%)</title><rect x="571.6" y="995.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.6" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="573.9" y="979.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="576.9" y="990.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (19 samples, 0.41%)</title><rect x="574.2" y="979.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="577.2" y="990.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title><rect x="574.2" y="963.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="577.2" y="974.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.04%)</title><rect x="574.2" y="947.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="577.2" y="958.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.02%)</title><rect x="574.7" y="963.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.7" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.15%)</title><rect x="574.9" y="963.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.9" y="974.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="576.5" y="947.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="579.5" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.19%)</title><rect x="576.7" y="963.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="579.7" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.19%)</title><rect x="576.7" y="947.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="579.7" y="958.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.06%)</title><rect x="578.2" y="931.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="581.2" y="942.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.06%)</title><rect x="578.2" y="915.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="581.2" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (588 samples, 12.69%)</title><rect x="579.0" y="995.0" width="149.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="582.0" y="1006.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session.write (588 samples, 12.69%)</title><rect x="579.0" y="979.0" width="149.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.0" y="990.0">one/nio/net/Session..</text>
</g>
<g>
<title>__cxx_global_var_init (3 samples, 0.06%)</title><rect x="579.5" y="963.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="582.5" y="974.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.11%)</title><rect x="580.3" y="963.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="583.3" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (569 samples, 12.28%)</title><rect x="581.5" y="963.0" width="144.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="584.5" y="974.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (569 samples, 12.28%)</title><rect x="581.5" y="947.0" width="144.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="584.5" y="958.0">one/nio/net/JavaSo..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="581.5" y="931.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="584.5" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="581.8" y="915.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.8" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="581.8" y="899.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="584.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (566 samples, 12.21%)</title><rect x="582.3" y="931.0" width="144.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="585.3" y="942.0">sun/nio/ch/SocketC..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (566 samples, 12.21%)</title><rect x="582.3" y="915.0" width="144.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="585.3" y="926.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (566 samples, 12.21%)</title><rect x="582.3" y="899.0" width="144.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="585.3" y="910.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.04%)</title><rect x="582.6" y="883.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="585.6" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.04%)</title><rect x="582.6" y="867.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="585.6" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.04%)</title><rect x="582.6" y="851.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="585.6" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.04%)</title><rect x="582.6" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="585.6" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.04%)</title><rect x="582.6" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="585.6" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.04%)</title><rect x="582.6" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="585.6" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (551 samples, 11.89%)</title><rect x="583.1" y="883.0" width="140.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="586.1" y="894.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (551 samples, 11.89%)</title><rect x="583.1" y="867.0" width="140.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="586.1" y="878.0">sun/nio/ch/SocketD..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (551 samples, 11.89%)</title><rect x="583.1" y="851.0" width="140.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="586.1" y="862.0">sun/nio/ch/FileDis..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.02%)</title><rect x="586.4" y="835.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="589.4" y="846.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (10 samples, 0.22%)</title><rect x="586.6" y="835.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="589.6" y="846.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="588.7" y="819.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="591.7" y="830.0"></text>
</g>
<g>
<title>convertReturnVal (4 samples, 0.09%)</title><rect x="589.2" y="835.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="592.2" y="846.0"></text>
</g>
<g>
<title>write (523 samples, 11.28%)</title><rect x="590.2" y="835.0" width="133.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="593.2" y="846.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (12 samples, 0.26%)</title><rect x="723.3" y="883.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="726.3" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="724.4" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="727.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.02%)</title><rect x="724.6" y="851.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="727.6" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="724.6" y="835.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="727.6" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.13%)</title><rect x="724.9" y="867.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="727.9" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.09%)</title><rect x="724.9" y="851.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="727.9" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.09%)</title><rect x="724.9" y="835.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="727.9" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.09%)</title><rect x="724.9" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="727.9" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.09%)</title><rect x="724.9" y="803.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="727.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.04%)</title><rect x="725.9" y="851.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="728.9" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.19%)</title><rect x="726.4" y="963.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="729.4" y="974.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.04%)</title><rect x="726.4" y="947.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="729.4" y="958.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.15%)</title><rect x="726.9" y="947.0" width="1.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="729.9" y="958.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="727.4" y="931.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="730.4" y="942.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.09%)</title><rect x="727.7" y="931.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="730.7" y="942.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="728.2" y="915.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="731.2" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (31 samples, 0.67%)</title><rect x="728.7" y="1011.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.length (7 samples, 0.15%)</title><rect x="729.7" y="995.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.coder (7 samples, 0.15%)</title><rect x="729.7" y="979.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.7" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.13%)</title><rect x="730.0" y="963.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="733.0" y="974.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (20 samples, 0.43%)</title><rect x="731.5" y="995.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="734.5" y="979.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.5" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (5 samples, 0.11%)</title><rect x="735.3" y="979.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="738.3" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (31 samples, 0.67%)</title><rect x="736.6" y="1027.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="737.3" y="1011.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="740.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="737.3" y="995.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="740.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.06%)</title><rect x="737.9" y="1011.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="740.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="738.1" y="995.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="741.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.substring (21 samples, 0.45%)</title><rect x="738.6" y="1011.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (21 samples, 0.45%)</title><rect x="738.6" y="995.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="741.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.13%)</title><rect x="739.1" y="979.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="742.1" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.09%)</title><rect x="739.6" y="963.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="742.6" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (13 samples, 0.28%)</title><rect x="740.7" y="979.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="743.7" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="742.2" y="963.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="745.2" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.11%)</title><rect x="742.7" y="963.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="745.7" y="974.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="744.0" y="1011.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="747.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="744.0" y="995.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="744.0" y="979.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.0" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="744.0" y="963.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="747.0" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (1,278 samples, 27.57%)</title><rect x="744.5" y="1027.0" width="325.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="747.5" y="1038.0">ru/mail/polis/service/stakenschneider/MyServ..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="744.7" y="1011.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="744.7" y="995.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="747.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="744.7" y="979.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="747.7" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="744.7" y="963.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="747.7" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="744.7" y="947.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="747.7" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="744.7" y="931.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.7" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getMethod (2 samples, 0.04%)</title><rect x="745.2" y="1011.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.2" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.put (1,273 samples, 27.46%)</title><rect x="745.7" y="1011.0" width="324.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="748.7" y="1022.0">ru/mail/polis/service/stakenschneider/MyServ..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="745.7" y="995.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="748.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="745.7" y="979.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="748.7" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="745.7" y="963.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="748.7" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="745.7" y="947.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="748.7" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="745.7" y="931.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.7" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="745.7" y="915.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.7" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="745.7" y="899.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="748.7" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="746.0" y="915.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.0" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="746.0" y="899.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="749.0" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.04%)</title><rect x="746.0" y="883.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="749.0" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (1,270 samples, 27.40%)</title><rect x="746.5" y="995.0" width="323.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="749.5" y="1006.0">ru/mail/polis/dao/RockDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,259 samples, 27.16%)</title><rect x="746.8" y="979.0" width="320.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="749.8" y="990.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,259 samples, 27.16%)</title><rect x="746.8" y="963.0" width="320.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="749.8" y="974.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,250 samples, 26.97%)</title><rect x="748.6" y="947.0" width="318.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="751.6" y="958.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.04%)</title><rect x="750.1" y="931.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="753.1" y="942.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (2 samples, 0.04%)</title><rect x="750.6" y="931.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="753.6" y="942.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="751.1" y="931.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="754.1" y="942.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="751.4" y="931.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="754.4" y="942.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="751.9" y="931.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="754.9" y="942.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.02%)</title><rect x="752.4" y="931.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="755.4" y="942.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.02%)</title><rect x="752.6" y="931.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="755.6" y="942.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="752.9" y="931.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="755.9" y="942.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.02%)</title><rect x="753.1" y="931.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="756.1" y="942.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.02%)</title><rect x="753.4" y="931.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="756.4" y="942.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,230 samples, 26.54%)</title><rect x="753.6" y="931.0" width="313.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="756.6" y="942.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*,..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="756.2" y="915.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="759.2" y="926.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.04%)</title><rect x="756.4" y="915.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="759.4" y="926.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.11%)</title><rect x="757.0" y="915.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="760.0" y="926.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.06%)</title><rect x="758.2" y="915.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="761.2" y="926.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="759.0" y="915.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="762.0" y="926.0"></text>
</g>
<g>
<title>_setcontext (5 samples, 0.11%)</title><rect x="759.8" y="915.0" width="1.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="762.8" y="926.0"></text>
</g>
<g>
<title>free (7 samples, 0.15%)</title><rect x="761.0" y="915.0" width="1.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="764.0" y="926.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.11%)</title><rect x="761.5" y="899.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="764.5" y="910.0"></text>
</g>
<g>
<title>free_tiny (16 samples, 0.35%)</title><rect x="762.8" y="915.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="765.8" y="926.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="764.1" y="899.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="767.1" y="910.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="764.3" y="899.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="767.3" y="910.0"></text>
</g>
<g>
<title>tiny_free_no_lock (9 samples, 0.19%)</title><rect x="764.6" y="899.0" width="2.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="767.6" y="910.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (2 samples, 0.04%)</title><rect x="766.4" y="883.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="769.4" y="894.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (13 samples, 0.28%)</title><rect x="766.9" y="915.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="769.9" y="926.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.06%)</title><rect x="767.4" y="899.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="770.4" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.17%)</title><rect x="768.2" y="899.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="771.2" y="910.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="768.2" y="883.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="771.2" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.13%)</title><rect x="768.4" y="883.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="771.4" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.09%)</title><rect x="768.4" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="771.4" y="878.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.09%)</title><rect x="768.4" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.4" y="862.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.09%)</title><rect x="768.4" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="771.4" y="846.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.02%)</title><rect x="768.4" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="771.4" y="830.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.02%)</title><rect x="768.7" y="819.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="771.7" y="830.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="768.9" y="819.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="771.9" y="830.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.02%)</title><rect x="769.4" y="867.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="772.4" y="878.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="769.7" y="867.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="772.7" y="878.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.02%)</title><rect x="769.9" y="883.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="772.9" y="894.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (31 samples, 0.67%)</title><rect x="770.2" y="915.0" width="7.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="773.2" y="926.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.02%)</title><rect x="772.7" y="899.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="775.7" y="910.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="773.0" y="899.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="776.0" y="910.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.04%)</title><rect x="773.2" y="899.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="776.2" y="910.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (2 samples, 0.04%)</title><rect x="773.8" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="776.8" y="910.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.02%)</title><rect x="774.3" y="899.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="777.3" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.22%)</title><rect x="774.5" y="899.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="777.5" y="910.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="774.8" y="883.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="777.8" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.17%)</title><rect x="775.0" y="883.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="778.0" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.13%)</title><rect x="775.3" y="867.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.3" y="878.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.06%)</title><rect x="775.3" y="851.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.3" y="862.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.06%)</title><rect x="776.0" y="851.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="779.0" y="862.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="776.0" y="835.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.0" y="846.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="776.3" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="779.3" y="830.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="776.6" y="835.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="779.6" y="846.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="776.8" y="867.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="779.8" y="878.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="777.1" y="899.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="780.1" y="910.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.02%)</title><rect x="777.6" y="899.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="780.6" y="910.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.02%)</title><rect x="777.6" y="883.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="780.6" y="894.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.02%)</title><rect x="777.6" y="867.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="780.6" y="878.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.02%)</title><rect x="777.8" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="780.8" y="910.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="778.1" y="915.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="781.1" y="926.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.02%)</title><rect x="778.6" y="915.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="781.6" y="926.0"></text>
</g>
<g>
<title>operator new(unsigned long) (27 samples, 0.58%)</title><rect x="778.8" y="915.0" width="6.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="781.8" y="926.0"></text>
</g>
<g>
<title>malloc (27 samples, 0.58%)</title><rect x="778.8" y="899.0" width="6.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="781.8" y="910.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="778.8" y="883.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="781.8" y="894.0"></text>
</g>
<g>
<title>malloc_zone_malloc (24 samples, 0.52%)</title><rect x="779.1" y="883.0" width="6.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="782.1" y="894.0"></text>
</g>
<g>
<title>default_zone_malloc (5 samples, 0.11%)</title><rect x="779.4" y="867.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="782.4" y="878.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (15 samples, 0.32%)</title><rect x="780.6" y="867.0" width="3.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="783.6" y="878.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (15 samples, 0.32%)</title><rect x="780.6" y="851.0" width="3.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="783.6" y="862.0"></text>
</g>
<g>
<title>__ulock_wait (1 samples, 0.02%)</title><rect x="782.4" y="835.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="785.4" y="846.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (7 samples, 0.15%)</title><rect x="782.7" y="835.0" width="1.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="785.7" y="846.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="784.4" y="867.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="787.4" y="878.0"></text>
</g>
<g>
<title>szone_malloc (1 samples, 0.02%)</title><rect x="785.2" y="883.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="788.2" y="894.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="785.5" y="883.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="788.5" y="894.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,098 samples, 23.69%)</title><rect x="785.7" y="915.0" width="279.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="788.7" y="926.0">rocksdb::CompactedDBImpl::Open(rocksd..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="785.7" y="899.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="788.7" y="910.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,096 samples, 23.65%)</title><rect x="786.2" y="899.0" width="279.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="789.2" y="910.0">rocksdb::DBImpl::Put(rocksdb::WriteOp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,089 samples, 23.50%)</title><rect x="786.7" y="883.0" width="277.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="789.7" y="894.0">rocksdb::DB::Put(rocksdb::WriteOption..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="788.5" y="867.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="791.5" y="878.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (2 samples, 0.04%)</title><rect x="788.8" y="867.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="791.8" y="878.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (4 samples, 0.09%)</title><rect x="789.3" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="792.3" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,004 samples, 21.66%)</title><rect x="790.3" y="867.0" width="255.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="793.3" y="878.0">rocksdb::DBImpl::Write(rocksdb::Wr..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (992 samples, 21.40%)</title><rect x="790.6" y="851.0" width="252.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="793.6" y="862.0">rocksdb::DBImpl::WriteImpl(rocksdb..</text>
</g>
<g>
<title>_dispatch_queue_attrs (7 samples, 0.15%)</title><rect x="797.9" y="835.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="800.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (6 samples, 0.13%)</title><rect x="799.7" y="835.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="802.7" y="846.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="800.7" y="819.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="803.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (525 samples, 11.33%)</title><rect x="801.2" y="835.0" width="133.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="804.2" y="846.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.02%)</title><rect x="801.5" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="804.5" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (523 samples, 11.28%)</title><rect x="801.8" y="819.0" width="133.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="804.8" y="830.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (516 samples, 11.13%)</title><rect x="803.3" y="803.0" width="131.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="806.3" y="814.0">rocksdb::log::Wr..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (7 samples, 0.15%)</title><rect x="803.5" y="787.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="806.5" y="798.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (508 samples, 10.96%)</title><rect x="805.3" y="787.0" width="129.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="808.3" y="798.0">rocksdb::log::Wr..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="806.3" y="771.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="809.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (1 samples, 0.02%)</title><rect x="806.9" y="771.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (1 samples, 0.02%)</title><rect x="807.1" y="771.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="810.1" y="782.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush() (3 samples, 0.06%)</title><rect x="807.4" y="771.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="810.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (4 samples, 0.09%)</title><rect x="808.1" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="811.1" y="782.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="808.6" y="755.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="811.6" y="766.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (1 samples, 0.02%)</title><rect x="808.9" y="755.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="811.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (492 samples, 10.61%)</title><rect x="809.1" y="771.0" width="125.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="812.1" y="782.0">rocksdb::Writab..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.11%)</title><rect x="809.4" y="755.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="812.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize() (1 samples, 0.02%)</title><rect x="810.7" y="755.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (1 samples, 0.02%)</title><rect x="810.9" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="813.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (484 samples, 10.44%)</title><rect x="811.2" y="755.0" width="123.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.2" y="766.0">rocksdb::Writab..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (3 samples, 0.06%)</title><rect x="811.7" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="814.7" y="750.0"></text>
</g>
<g>
<title>write (479 samples, 10.33%)</title><rect x="812.5" y="739.0" width="121.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="815.5" y="750.0">write</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.02%)</title><rect x="934.4" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.02%)</title><rect x="934.7" y="803.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.7" y="814.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.02%)</title><rect x="934.9" y="835.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.02%)</title><rect x="935.2" y="835.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.2" y="846.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.06%)</title><rect x="935.4" y="835.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.4" y="846.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="935.4" y="819.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="938.4" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="935.7" y="819.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="938.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (181 samples, 3.91%)</title><rect x="936.2" y="835.0" width="46.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="939.2" y="846.0">rock..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.02%)</title><rect x="938.7" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (1 samples, 0.02%)</title><rect x="939.0" y="819.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (169 samples, 3.65%)</title><rect x="939.2" y="819.0" width="43.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.2" y="830.0">rock..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (4 samples, 0.09%)</title><rect x="941.8" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (155 samples, 3.34%)</title><rect x="942.8" y="803.0" width="39.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="945.8" y="814.0">roc..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.04%)</title><rect x="943.1" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.1" y="798.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (3 samples, 0.06%)</title><rect x="943.6" y="787.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (149 samples, 3.21%)</title><rect x="944.3" y="787.0" width="38.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="947.3" y="798.0">roc..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="945.3" y="771.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="948.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (3 samples, 0.06%)</title><rect x="945.6" y="771.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.6" y="782.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.02%)</title><rect x="946.4" y="771.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="949.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (133 samples, 2.87%)</title><rect x="946.6" y="771.0" width="33.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.6" y="782.0">ro..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="948.9" y="755.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="951.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="949.2" y="755.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="952.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="949.9" y="755.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.06%)</title><rect x="950.4" y="755.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.02%)</title><rect x="951.2" y="755.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="954.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (114 samples, 2.46%)</title><rect x="951.5" y="755.0" width="29.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.5" y="766.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="965.5" y="739.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="968.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (9 samples, 0.19%)</title><rect x="966.0" y="739.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="969.0" y="750.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="966.7" y="723.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="969.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (5 samples, 0.11%)</title><rect x="967.0" y="723.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (5 samples, 0.11%)</title><rect x="968.3" y="739.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.3" y="750.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="968.8" y="723.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="971.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="969.3" y="723.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="972.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (42 samples, 0.91%)</title><rect x="969.5" y="739.0" width="10.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="972.5" y="750.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="973.1" y="723.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="976.1" y="734.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (7 samples, 0.15%)</title><rect x="973.3" y="723.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="976.3" y="734.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="975.1" y="723.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="978.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (16 samples, 0.35%)</title><rect x="975.6" y="723.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="978.6" y="734.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.15%)</title><rect x="977.9" y="707.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="980.9" y="718.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="979.7" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="980.2" y="739.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="983.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.09%)</title><rect x="980.5" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.06%)</title><rect x="981.5" y="771.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (6 samples, 0.13%)</title><rect x="982.3" y="835.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (6 samples, 0.13%)</title><rect x="982.3" y="819.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.13%)</title><rect x="982.3" y="803.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.13%)</title><rect x="982.3" y="787.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (5 samples, 0.11%)</title><rect x="982.5" y="771.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.11%)</title><rect x="982.5" y="755.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.5" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="982.5" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.02%)</title><rect x="982.8" y="739.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.06%)</title><rect x="983.0" y="739.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.02%)</title><rect x="983.3" y="723.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="983.3" y="707.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.02%)</title><rect x="983.5" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (1 samples, 0.02%)</title><rect x="983.8" y="835.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="986.8" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (13 samples, 0.28%)</title><rect x="984.0" y="835.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="987.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (13 samples, 0.28%)</title><rect x="984.0" y="819.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.0" y="830.0"></text>
</g>
<g>
<title>xdrrec_ops (13 samples, 0.28%)</title><rect x="984.0" y="803.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="987.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.02%)</title><rect x="987.4" y="835.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.4" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (6 samples, 0.13%)</title><rect x="987.6" y="835.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.6" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (202 samples, 4.36%)</title><rect x="989.1" y="835.0" width="51.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.1" y="846.0">rocks..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="989.1" y="819.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="992.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (200 samples, 4.31%)</title><rect x="989.4" y="819.0" width="50.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.4" y="830.0">rocks..</text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="994.7" y="803.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="997.7" y="814.0"></text>
</g>
<g>
<title>sched_yield (2 samples, 0.04%)</title><rect x="995.2" y="803.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="998.2" y="814.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (15 samples, 0.32%)</title><rect x="995.8" y="803.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.8" y="814.0"></text>
</g>
<g>
<title>clock_gettime (15 samples, 0.32%)</title><rect x="995.8" y="787.0" width="3.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="998.8" y="798.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.02%)</title><rect x="996.3" y="771.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="999.3" y="782.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="996.5" y="771.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="999.5" y="782.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (11 samples, 0.24%)</title><rect x="996.8" y="771.0" width="2.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="999.8" y="782.0"></text>
</g>
<g>
<title>_res (5 samples, 0.11%)</title><rect x="998.0" y="755.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1001.0" y="766.0"></text>
</g>
<g>
<title>mach_timebase_info (1 samples, 0.02%)</title><rect x="999.3" y="755.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1002.3" y="766.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.02%)</title><rect x="999.6" y="803.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.6" y="814.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="999.6" y="787.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1002.6" y="798.0"></text>
</g>
<g>
<title>xdrrec_ops (159 samples, 3.43%)</title><rect x="999.8" y="803.0" width="40.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1002.8" y="814.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.02%)</title><rect x="1040.3" y="819.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.02%)</title><rect x="1040.6" y="835.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1043.6" y="846.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.04%)</title><rect x="1040.8" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1043.8" y="846.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1041.3" y="835.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1044.3" y="846.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (6 samples, 0.13%)</title><rect x="1041.6" y="835.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1044.6" y="846.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (6 samples, 0.13%)</title><rect x="1041.6" y="819.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1044.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (1 samples, 0.02%)</title><rect x="1043.1" y="851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="1043.4" y="851.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1046.4" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (3 samples, 0.06%)</title><rect x="1043.6" y="851.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.6" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.04%)</title><rect x="1044.4" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.4" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.02%)</title><rect x="1044.9" y="851.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.9" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="1045.1" y="851.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.1" y="862.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1045.7" y="851.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.7" y="862.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="1045.9" y="867.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.9" y="878.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (22 samples, 0.47%)</title><rect x="1046.4" y="867.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1049.4" y="878.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.02%)</title><rect x="1046.4" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1049.4" y="862.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (4 samples, 0.09%)</title><rect x="1046.7" y="851.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.7" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (14 samples, 0.30%)</title><rect x="1047.7" y="851.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.7" y="862.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (10 samples, 0.22%)</title><rect x="1048.5" y="835.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.5" y="846.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1050.5" y="819.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1053.5" y="830.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (1 samples, 0.02%)</title><rect x="1051.0" y="835.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1054.0" y="846.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.06%)</title><rect x="1051.3" y="851.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.3" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (29 samples, 0.63%)</title><rect x="1052.0" y="867.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.0" y="878.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.02%)</title><rect x="1052.3" y="851.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1055.3" y="862.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="1052.5" y="851.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1055.5" y="862.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.02%)</title><rect x="1052.8" y="851.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1055.8" y="862.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (15 samples, 0.32%)</title><rect x="1053.0" y="851.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.0" y="862.0"></text>
</g>
<g>
<title>operator new(unsigned long) (12 samples, 0.26%)</title><rect x="1053.8" y="835.0" width="3.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1056.8" y="846.0"></text>
</g>
<g>
<title>malloc (11 samples, 0.24%)</title><rect x="1054.1" y="819.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1057.1" y="830.0"></text>
</g>
<g>
<title>malloc_zone_malloc (10 samples, 0.22%)</title><rect x="1054.3" y="803.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1057.3" y="814.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="1054.3" y="787.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1057.3" y="798.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (9 samples, 0.19%)</title><rect x="1054.6" y="787.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1057.6" y="798.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (9 samples, 0.19%)</title><rect x="1054.6" y="771.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1057.6" y="782.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.09%)</title><rect x="1055.8" y="755.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1058.8" y="766.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (7 samples, 0.15%)</title><rect x="1056.9" y="851.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.9" y="862.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (6 samples, 0.13%)</title><rect x="1056.9" y="835.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.9" y="846.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (5 samples, 0.11%)</title><rect x="1057.1" y="819.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1060.1" y="830.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (1 samples, 0.02%)</title><rect x="1058.4" y="835.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.4" y="846.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (3 samples, 0.06%)</title><rect x="1058.6" y="851.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.6" y="862.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (10 samples, 0.22%)</title><rect x="1059.4" y="867.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1062.4" y="878.0"></text>
</g>
<g>
<title>free (6 samples, 0.13%)</title><rect x="1059.4" y="851.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1062.4" y="862.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.09%)</title><rect x="1059.9" y="835.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1062.9" y="846.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="1060.9" y="851.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1063.9" y="862.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="1060.9" y="835.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1063.9" y="846.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.02%)</title><rect x="1061.2" y="835.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1064.2" y="846.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.04%)</title><rect x="1061.4" y="851.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1064.4" y="862.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.06%)</title><rect x="1061.9" y="867.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1064.9" y="878.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (5 samples, 0.11%)</title><rect x="1062.7" y="867.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.7" y="878.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.06%)</title><rect x="1064.0" y="883.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="1064.7" y="883.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.7" y="894.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.02%)</title><rect x="1065.0" y="883.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.06%)</title><rect x="1065.3" y="915.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.3" y="926.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.02%)</title><rect x="1066.0" y="915.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.0" y="926.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.02%)</title><rect x="1066.3" y="915.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1069.3" y="926.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.02%)</title><rect x="1066.5" y="915.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.5" y="926.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2 samples, 0.04%)</title><rect x="1066.8" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.8" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (5 samples, 0.11%)</title><rect x="1067.3" y="979.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.3" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.06%)</title><rect x="1067.8" y="963.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1070.8" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.06%)</title><rect x="1067.8" y="947.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.8" y="958.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="1068.1" y="931.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1071.1" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1068.3" y="931.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1071.3" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (5 samples, 0.11%)</title><rect x="1068.6" y="979.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1071.6" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (3 samples, 0.06%)</title><rect x="1069.1" y="963.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.1" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.04%)</title><rect x="1069.3" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1072.3" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="1069.3" y="931.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1072.3" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1069.6" y="915.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1072.6" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="1069.6" y="899.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1072.6" y="910.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (20 samples, 0.43%)</title><rect x="1069.8" y="1043.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1072.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (18 samples, 0.39%)</title><rect x="1070.3" y="1027.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1073.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.22%)</title><rect x="1070.6" y="1011.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1073.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.13%)</title><rect x="1071.6" y="995.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1074.6" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.02%)</title><rect x="1072.6" y="979.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1075.6" y="990.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.02%)</title><rect x="1072.9" y="979.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1075.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.15%)</title><rect x="1073.1" y="1011.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1076.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.15%)</title><rect x="1073.1" y="995.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1076.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.11%)</title><rect x="1073.7" y="979.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1076.7" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.06%)</title><rect x="1074.9" y="1043.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1077.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="1074.9" y="1027.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1077.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="1074.9" y="1011.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1077.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1075.2" y="995.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1078.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (39 samples, 0.84%)</title><rect x="1075.7" y="1075.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1078.7" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.13%)</title><rect x="1077.7" y="1059.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1080.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.09%)</title><rect x="1078.2" y="1043.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1081.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.09%)</title><rect x="1078.2" y="1027.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1081.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.09%)</title><rect x="1078.2" y="1011.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1081.2" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.35%)</title><rect x="1079.3" y="1059.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1082.3" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.35%)</title><rect x="1079.3" y="1043.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1082.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1083.1" y="1027.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1086.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1083.1" y="1011.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1086.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.02%)</title><rect x="1083.1" y="995.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1086.1" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (9 samples, 0.19%)</title><rect x="1083.3" y="1059.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1086.3" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="1085.1" y="1043.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1088.1" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (13 samples, 0.28%)</title><rect x="1085.6" y="1075.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1088.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.09%)</title><rect x="1087.4" y="1059.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1090.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.09%)</title><rect x="1087.4" y="1043.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1090.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.06%)</title><rect x="1087.4" y="1027.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1090.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.06%)</title><rect x="1087.4" y="1011.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1090.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (2 samples, 0.04%)</title><rect x="1087.7" y="995.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1090.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="1088.2" y="1027.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1091.2" y="1038.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.04%)</title><rect x="1088.4" y="1059.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1091.4" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.02%)</title><rect x="1088.9" y="1075.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1091.9" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.28%)</title><rect x="1089.2" y="1075.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1092.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="1089.4" y="1059.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1092.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="1089.7" y="1043.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1092.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.22%)</title><rect x="1089.9" y="1059.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1092.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.17%)</title><rect x="1090.5" y="1043.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1093.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="1090.7" y="1027.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1093.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="1091.2" y="1027.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1094.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="1091.2" y="1011.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1094.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.02%)</title><rect x="1091.2" y="995.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1094.2" y="1006.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="1091.5" y="1027.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1094.5" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="1091.7" y="1027.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1094.7" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.30%)</title><rect x="1092.5" y="1075.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1095.5" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.30%)</title><rect x="1092.5" y="1059.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1095.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.09%)</title><rect x="1094.8" y="1043.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1097.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.09%)</title><rect x="1094.8" y="1027.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1097.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.09%)</title><rect x="1094.8" y="1011.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1097.8" y="1022.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.02%)</title><rect x="1095.8" y="1043.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1098.8" y="1054.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (252 samples, 5.44%)</title><rect x="1096.1" y="1091.0" width="64.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1099.1" y="1102.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (250 samples, 5.39%)</title><rect x="1096.1" y="1075.0" width="63.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1099.1" y="1086.0">one/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="1096.3" y="1059.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1099.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1096.3" y="1043.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1099.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1096.3" y="1027.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1099.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (247 samples, 5.33%)</title><rect x="1096.8" y="1059.0" width="62.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1099.8" y="1070.0">sun/ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.09%)</title><rect x="1096.8" y="1043.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1099.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.09%)</title><rect x="1096.8" y="1027.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1099.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.09%)</title><rect x="1096.8" y="1011.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1099.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.09%)</title><rect x="1096.8" y="995.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1099.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="1096.8" y="979.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1099.8" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="1096.8" y="963.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1099.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="1096.8" y="947.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1099.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.04%)</title><rect x="1097.3" y="979.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1100.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.04%)</title><rect x="1097.8" y="1043.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1100.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="1098.1" y="1027.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1101.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.02%)</title><rect x="1098.1" y="1011.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1101.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.02%)</title><rect x="1098.1" y="995.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1101.1" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (241 samples, 5.20%)</title><rect x="1098.3" y="1043.0" width="61.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1101.3" y="1054.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (239 samples, 5.16%)</title><rect x="1098.9" y="1027.0" width="60.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1101.9" y="1038.0">sun/ni..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.09%)</title><rect x="1099.6" y="1011.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1102.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.09%)</title><rect x="1099.6" y="995.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1102.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.02%)</title><rect x="1099.6" y="979.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1102.6" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="1099.9" y="979.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1102.9" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="1099.9" y="963.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1102.9" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="1099.9" y="947.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1102.9" y="958.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1100.1" y="931.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1103.1" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.02%)</title><rect x="1100.4" y="979.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1103.4" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.02%)</title><rect x="1100.4" y="963.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1103.4" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.02%)</title><rect x="1100.4" y="947.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1103.4" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.02%)</title><rect x="1100.4" y="931.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1103.4" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.02%)</title><rect x="1100.6" y="1011.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1103.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.02%)</title><rect x="1100.6" y="995.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1103.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (1 samples, 0.02%)</title><rect x="1100.6" y="979.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1103.6" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.flip (1 samples, 0.02%)</title><rect x="1100.6" y="963.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1103.6" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (228 samples, 4.92%)</title><rect x="1100.9" y="1011.0" width="58.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1103.9" y="1022.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.02%)</title><rect x="1101.9" y="995.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1104.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (223 samples, 4.81%)</title><rect x="1102.2" y="995.0" width="56.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1105.2" y="1006.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (223 samples, 4.81%)</title><rect x="1102.2" y="979.0" width="56.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1105.2" y="990.0">sun/ni..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.02%)</title><rect x="1109.8" y="963.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1112.8" y="974.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (9 samples, 0.19%)</title><rect x="1110.1" y="963.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1113.1" y="974.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.09%)</title><rect x="1111.3" y="947.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1114.3" y="958.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.06%)</title><rect x="1112.4" y="963.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1115.4" y="974.0"></text>
</g>
<g>
<title>read (180 samples, 3.88%)</title><rect x="1113.1" y="963.0" width="45.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1116.1" y="974.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.06%)</title><rect x="1158.9" y="1011.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1161.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="1158.9" y="995.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1161.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.02%)</title><rect x="1159.4" y="995.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1162.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.04%)</title><rect x="1159.7" y="1075.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1162.7" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="1160.2" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="1118.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="1160.5" y="1091.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1163.5" y="1102.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="1160.7" y="1075.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1163.7" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="1161.0" y="1139.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.0" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="1161.5" y="1139.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.5" y="1150.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (5 samples, 0.11%)</title><rect x="1161.7" y="1139.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1164.7" y="1150.0"></text>
</g>
<g>
<title>[tid=13315] (1 samples, 0.02%)</title><rect x="1163.0" y="1155.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1166.0" y="1166.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="1163.0" y="1139.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1166.0" y="1150.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="1163.0" y="1123.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1166.0" y="1134.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="1163.0" y="1107.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1166.0" y="1118.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="1163.0" y="1091.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1166.0" y="1102.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="1163.0" y="1075.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.0" y="1086.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.02%)</title><rect x="1163.0" y="1059.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.0" y="1070.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.02%)</title><rect x="1163.0" y="1043.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="1054.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.02%)</title><rect x="1163.0" y="1027.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.0" y="1038.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.02%)</title><rect x="1163.0" y="1011.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="1022.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1163.0" y="995.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="1163.0" y="979.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.0" y="990.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.02%)</title><rect x="1163.0" y="963.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.0" y="974.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.02%)</title><rect x="1163.0" y="947.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.0" y="958.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.02%)</title><rect x="1163.0" y="931.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.0" y="942.0"></text>
</g>
<g>
<title>[tid=13827] (4 samples, 0.09%)</title><rect x="1163.3" y="1155.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1166.3" y="1166.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.09%)</title><rect x="1163.3" y="1139.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1166.3" y="1150.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.09%)</title><rect x="1163.3" y="1123.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1166.3" y="1134.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.09%)</title><rect x="1163.3" y="1107.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1166.3" y="1118.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.09%)</title><rect x="1163.3" y="1091.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1166.3" y="1102.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.09%)</title><rect x="1163.3" y="1075.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.3" y="1086.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.09%)</title><rect x="1163.3" y="1059.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="1070.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.09%)</title><rect x="1163.3" y="1043.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="1054.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4 samples, 0.09%)</title><rect x="1163.3" y="1027.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.3" y="1038.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (3 samples, 0.06%)</title><rect x="1163.5" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.5" y="1022.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (3 samples, 0.06%)</title><rect x="1163.5" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.5" y="1006.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (3 samples, 0.06%)</title><rect x="1163.5" y="979.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.5" y="990.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (3 samples, 0.06%)</title><rect x="1163.5" y="963.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1166.5" y="974.0"></text>
</g>
<g>
<title>[tid=20483] (1 samples, 0.02%)</title><rect x="1164.3" y="1155.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1167.3" y="1166.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="1164.3" y="1139.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1167.3" y="1150.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="1164.3" y="1123.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1167.3" y="1134.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="1164.3" y="1107.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1167.3" y="1118.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="1164.3" y="1091.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1167.3" y="1102.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="1164.3" y="1075.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="1086.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.02%)</title><rect x="1164.3" y="1059.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.3" y="1070.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.02%)</title><rect x="1164.3" y="1043.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.3" y="1054.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.02%)</title><rect x="1164.3" y="1027.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="1038.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1164.3" y="1011.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.3" y="1022.0"></text>
</g>
<g>
<title>[tid=22531] (3 samples, 0.06%)</title><rect x="1164.5" y="1155.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1167.5" y="1166.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.06%)</title><rect x="1164.5" y="1139.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1167.5" y="1150.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.06%)</title><rect x="1164.5" y="1123.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1167.5" y="1134.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.06%)</title><rect x="1164.5" y="1107.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1167.5" y="1118.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.06%)</title><rect x="1164.5" y="1091.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1167.5" y="1102.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.06%)</title><rect x="1164.5" y="1075.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="1086.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.06%)</title><rect x="1164.5" y="1059.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.5" y="1070.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.06%)</title><rect x="1164.5" y="1043.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="1054.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.06%)</title><rect x="1164.5" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.5" y="1038.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.06%)</title><rect x="1164.5" y="1011.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.5" y="1022.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.06%)</title><rect x="1164.5" y="995.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.5" y="1006.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.06%)</title><rect x="1164.5" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.5" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.06%)</title><rect x="1164.5" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.5" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.06%)</title><rect x="1164.5" y="947.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.5" y="958.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.06%)</title><rect x="1164.5" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="942.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 0.06%)</title><rect x="1164.5" y="915.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.5" y="926.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.04%)</title><rect x="1164.5" y="899.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.5" y="910.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.02%)</title><rect x="1164.5" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.5" y="894.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.02%)</title><rect x="1164.8" y="883.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.8" y="894.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.02%)</title><rect x="1164.8" y="867.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.8" y="878.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.02%)</title><rect x="1164.8" y="851.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.8" y="862.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.02%)</title><rect x="1164.8" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.8" y="846.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.02%)</title><rect x="1165.1" y="899.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.1" y="910.0"></text>
</g>
<g>
<title>MoveResolver::resolve_and_append_moves() (1 samples, 0.02%)</title><rect x="1165.1" y="883.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.1" y="894.0"></text>
</g>
<g>
<title>LIR_List::append(LIR_InsertionBuffer*) (1 samples, 0.02%)</title><rect x="1165.1" y="867.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.1" y="878.0"></text>
</g>
<g>
<title>[tid=28419] (3 samples, 0.06%)</title><rect x="1165.3" y="1155.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1168.3" y="1166.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.06%)</title><rect x="1165.3" y="1139.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1168.3" y="1150.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.06%)</title><rect x="1165.3" y="1123.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1168.3" y="1134.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.06%)</title><rect x="1165.3" y="1107.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1168.3" y="1118.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.06%)</title><rect x="1165.3" y="1091.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1168.3" y="1102.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.06%)</title><rect x="1165.3" y="1075.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.3" y="1086.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.06%)</title><rect x="1165.3" y="1059.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="1070.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.02%)</title><rect x="1165.3" y="1043.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.3" y="1054.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::do_parallel_work_for_region(unsigned int, bool, bool) (1 samples, 0.02%)</title><rect x="1165.3" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.3" y="1038.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.02%)</title><rect x="1165.3" y="1011.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.3" y="1022.0"></text>
</g>
<g>
<title>OtherRegionsTable::occ_fine() const (1 samples, 0.02%)</title><rect x="1165.3" y="995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.3" y="1006.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.04%)</title><rect x="1165.6" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="1054.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.04%)</title><rect x="1165.6" y="1027.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1168.6" y="1038.0"></text>
</g>
<g>
<title>[tid=28675] (1 samples, 0.02%)</title><rect x="1166.1" y="1155.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1169.1" y="1166.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="1166.1" y="1139.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1169.1" y="1150.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="1166.1" y="1123.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1169.1" y="1134.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="1166.1" y="1107.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1169.1" y="1118.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="1166.1" y="1091.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1169.1" y="1102.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="1166.1" y="1075.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.1" y="1086.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.02%)</title><rect x="1166.1" y="1059.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="1070.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.02%)</title><rect x="1166.1" y="1043.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.1" y="1054.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.02%)</title><rect x="1166.1" y="1027.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1169.1" y="1038.0"></text>
</g>
<g>
<title>[tid=37891] (1 samples, 0.02%)</title><rect x="1166.3" y="1155.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1169.3" y="1166.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="1166.3" y="1139.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1169.3" y="1150.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="1166.3" y="1123.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1169.3" y="1134.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="1166.3" y="1107.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1169.3" y="1118.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="1166.3" y="1091.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1169.3" y="1102.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="1166.3" y="1075.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.3" y="1086.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.02%)</title><rect x="1166.3" y="1059.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.3" y="1070.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.02%)</title><rect x="1166.3" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.3" y="1054.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.02%)</title><rect x="1166.3" y="1027.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1169.3" y="1038.0"></text>
</g>
<g>
<title>[tid=41219] (3 samples, 0.06%)</title><rect x="1166.6" y="1155.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1169.6" y="1166.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.06%)</title><rect x="1166.6" y="1139.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1169.6" y="1150.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.06%)</title><rect x="1166.6" y="1123.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1169.6" y="1134.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.06%)</title><rect x="1166.6" y="1107.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1169.6" y="1118.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.06%)</title><rect x="1166.6" y="1091.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1169.6" y="1102.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.06%)</title><rect x="1166.6" y="1075.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="1086.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.06%)</title><rect x="1166.6" y="1059.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.6" y="1070.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 0.06%)</title><rect x="1166.6" y="1043.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="1054.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.06%)</title><rect x="1166.6" y="1027.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.6" y="1038.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.06%)</title><rect x="1166.6" y="1011.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.6" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.06%)</title><rect x="1166.6" y="995.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.6" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="1166.6" y="979.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1169.6" y="990.0"></text>
</g>
<g>
<title>[tid=42755] (1 samples, 0.02%)</title><rect x="1167.3" y="1155.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1170.3" y="1166.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="1167.3" y="1139.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1170.3" y="1150.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="1167.3" y="1123.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1170.3" y="1134.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="1167.3" y="1107.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1170.3" y="1118.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="1167.3" y="1091.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1170.3" y="1102.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="1167.3" y="1075.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.3" y="1086.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.02%)</title><rect x="1167.3" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.3" y="1070.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.02%)</title><rect x="1167.3" y="1043.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.3" y="1054.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.02%)</title><rect x="1167.3" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.3" y="1038.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.02%)</title><rect x="1167.3" y="1011.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.3" y="1022.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.02%)</title><rect x="1167.3" y="995.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.3" y="1006.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next() (1 samples, 0.02%)</title><rect x="1167.3" y="979.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.3" y="990.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next_blob() (1 samples, 0.02%)</title><rect x="1167.3" y="963.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.3" y="974.0"></text>
</g>
<g>
<title>CodeHeap::next(void*) const (1 samples, 0.02%)</title><rect x="1167.3" y="947.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.3" y="958.0"></text>
</g>
<g>
<title>[tid=43267] (88 samples, 1.90%)</title><rect x="1167.6" y="1155.0" width="22.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1170.6" y="1166.0">[..</text>
</g>
<g>
<title>thread_start (88 samples, 1.90%)</title><rect x="1167.6" y="1139.0" width="22.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1170.6" y="1150.0">t..</text>
</g>
<g>
<title>_pthread_start (88 samples, 1.90%)</title><rect x="1167.6" y="1123.0" width="22.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1170.6" y="1134.0">_..</text>
</g>
<g>
<title>_pthread_body (88 samples, 1.90%)</title><rect x="1167.6" y="1107.0" width="22.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1170.6" y="1118.0">_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (88 samples, 1.90%)</title><rect x="1167.6" y="1091.0" width="22.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1170.6" y="1102.0">t..</text>
</g>
<g>
<title>Thread::call_run() (88 samples, 1.90%)</title><rect x="1167.6" y="1075.0" width="22.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.6" y="1086.0">T..</text>
</g>
<g>
<title>JavaThread::run() (88 samples, 1.90%)</title><rect x="1167.6" y="1059.0" width="22.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.6" y="1070.0">J..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (88 samples, 1.90%)</title><rect x="1167.6" y="1043.0" width="22.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.6" y="1054.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (88 samples, 1.90%)</title><rect x="1167.6" y="1027.0" width="22.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.6" y="1038.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (88 samples, 1.90%)</title><rect x="1167.6" y="1011.0" width="22.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.6" y="1022.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (88 samples, 1.90%)</title><rect x="1167.6" y="995.0" width="22.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.6" y="1006.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (88 samples, 1.90%)</title><rect x="1167.6" y="979.0" width="22.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.6" y="990.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 0.95%)</title><rect x="1167.6" y="963.0" width="11.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.6" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.02%)</title><rect x="1167.6" y="947.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.6" y="958.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.02%)</title><rect x="1167.6" y="931.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.6" y="942.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.02%)</title><rect x="1167.6" y="915.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.6" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.02%)</title><rect x="1167.6" y="899.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.6" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1167.6" y="883.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.6" y="894.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.02%)</title><rect x="1167.6" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.6" y="878.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1167.6" y="851.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.6" y="862.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.02%)</title><rect x="1167.6" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.6" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.06%)</title><rect x="1167.9" y="947.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.9" y="958.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.06%)</title><rect x="1167.9" y="931.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="942.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.02%)</title><rect x="1168.1" y="915.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.1" y="926.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.02%)</title><rect x="1168.1" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.1" y="910.0"></text>
</g>
<g>
<title>shrI_rReg_immNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.02%)</title><rect x="1168.1" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.1" y="894.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.02%)</title><rect x="1168.1" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.1" y="878.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.02%)</title><rect x="1168.1" y="851.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.1" y="862.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1168.1" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.1" y="846.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1168.4" y="915.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.4" y="926.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.02%)</title><rect x="1168.4" y="899.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.4" y="910.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.02%)</title><rect x="1168.4" y="883.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.4" y="894.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1168.4" y="867.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.4" y="878.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1168.4" y="851.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1171.4" y="862.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.02%)</title><rect x="1168.6" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.6" y="958.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.02%)</title><rect x="1168.6" y="931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.6" y="942.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="1168.6" y="915.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.6" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.02%)</title><rect x="1168.9" y="947.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.02%)</title><rect x="1168.9" y="931.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.11%)</title><rect x="1169.1" y="947.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.1" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.11%)</title><rect x="1169.1" y="931.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.04%)</title><rect x="1169.1" y="915.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.1" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.02%)</title><rect x="1169.6" y="915.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.6" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.02%)</title><rect x="1169.6" y="899.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.6" y="910.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.02%)</title><rect x="1169.6" y="883.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1169.6" y="867.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1169.6" y="851.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.6" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1169.6" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.6" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.02%)</title><rect x="1169.9" y="915.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.02%)</title><rect x="1169.9" y="899.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.9" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1169.9" y="883.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="894.0"></text>
</g>
<g>
<title>convI2L_reg_regNode::ideal_Opcode() const (1 samples, 0.02%)</title><rect x="1170.1" y="915.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.1" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 0.71%)</title><rect x="1170.4" y="947.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.4" y="958.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.02%)</title><rect x="1170.7" y="931.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.7" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.02%)</title><rect x="1170.9" y="931.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.02%)</title><rect x="1170.9" y="915.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.9" y="926.0"></text>
</g>
<g>
<title>LiveRangeMap::find(unsigned int) (1 samples, 0.02%)</title><rect x="1170.9" y="899.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.04%)</title><rect x="1171.2" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.02%)</title><rect x="1171.4" y="915.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="1171.4" y="899.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.04%)</title><rect x="1171.7" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.7" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.04%)</title><rect x="1171.7" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.7" y="926.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1171.7" y="899.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.7" y="910.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.02%)</title><rect x="1171.7" y="883.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.7" y="894.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.02%)</title><rect x="1171.7" y="867.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.7" y="878.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1171.7" y="851.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.7" y="862.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1171.7" y="835.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.7" y="846.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1171.7" y="819.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.7" y="830.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.02%)</title><rect x="1171.7" y="803.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.02%)</title><rect x="1171.9" y="899.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.9" y="910.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1171.9" y="883.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 0.28%)</title><rect x="1172.2" y="931.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.2" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1172.2" y="915.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.2" y="926.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.02%)</title><rect x="1172.2" y="899.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.2" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.04%)</title><rect x="1172.4" y="915.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1172.7" y="899.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.7" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.15%)</title><rect x="1172.9" y="915.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.9" y="926.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1173.2" y="899.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.2" y="910.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1173.2" y="883.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.2" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.04%)</title><rect x="1173.5" y="899.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.5" y="910.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.06%)</title><rect x="1174.0" y="899.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.0" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.06%)</title><rect x="1174.7" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="926.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.06%)</title><rect x="1174.7" y="899.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.7" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.04%)</title><rect x="1175.5" y="931.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="942.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.02%)</title><rect x="1175.5" y="915.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="926.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.02%)</title><rect x="1175.7" y="915.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1175.7" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="910.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.02%)</title><rect x="1175.7" y="883.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.09%)</title><rect x="1176.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.06%)</title><rect x="1176.3" y="915.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1176.5" y="899.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.5" y="910.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (2 samples, 0.04%)</title><rect x="1176.5" y="883.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.5" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1176.5" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.5" y="878.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.02%)</title><rect x="1176.8" y="867.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.04%)</title><rect x="1177.0" y="931.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.0" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.04%)</title><rect x="1177.0" y="915.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="1177.0" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1177.3" y="899.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.02%)</title><rect x="1177.5" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1177.5" y="915.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.06%)</title><rect x="1177.8" y="931.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="942.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.02%)</title><rect x="1177.8" y="915.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.04%)</title><rect x="1178.0" y="915.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.0" y="926.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.04%)</title><rect x="1178.0" y="899.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="910.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1178.3" y="883.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.02%)</title><rect x="1178.5" y="931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="942.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 0.63%)</title><rect x="1178.8" y="963.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="974.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (12 samples, 0.26%)</title><rect x="1178.8" y="947.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (12 samples, 0.26%)</title><rect x="1178.8" y="931.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate_invariants(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1178.8" y="915.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate_add_sub(Node*, PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1178.8" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="910.0"></text>
</g>
<g>
<title>Node::is_Add() const (1 samples, 0.02%)</title><rect x="1178.8" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.06%)</title><rect x="1179.1" y="915.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.02%)</title><rect x="1179.8" y="915.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1179.8" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1179.8" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1179.8" y="867.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.02%)</title><rect x="1179.8" y="851.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.02%)</title><rect x="1179.8" y="835.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="846.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.02%)</title><rect x="1179.8" y="819.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.04%)</title><rect x="1180.1" y="915.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (1 samples, 0.02%)</title><rect x="1180.3" y="899.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.02%)</title><rect x="1180.3" y="883.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.02%)</title><rect x="1180.3" y="867.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="878.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.02%)</title><rect x="1180.3" y="851.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.06%)</title><rect x="1180.6" y="915.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.06%)</title><rect x="1180.6" y="899.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.04%)</title><rect x="1180.8" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.02%)</title><rect x="1181.1" y="867.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="1181.3" y="915.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1181.3" y="899.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="910.0"></text>
</g>
<g>
<title>CmpPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1181.3" y="883.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="894.0"></text>
</g>
<g>
<title>G1BarrierSetC2::step_over_gc_barrier(Node*) const (1 samples, 0.02%)</title><rect x="1181.3" y="867.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.02%)</title><rect x="1181.6" y="899.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="910.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.04%)</title><rect x="1181.9" y="947.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="1181.9" y="931.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1181.9" y="915.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="926.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1181.9" y="899.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="910.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.02%)</title><rect x="1182.1" y="931.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="942.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.02%)</title><rect x="1182.1" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="926.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1182.1" y="899.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.02%)</title><rect x="1182.4" y="947.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.02%)</title><rect x="1182.4" y="931.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.4" y="942.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.02%)</title><rect x="1182.4" y="915.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.4" y="926.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.02%)</title><rect x="1182.4" y="899.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.4" y="910.0"></text>
</g>
<g>
<title>VectorSet::test_set_grow(unsigned int) (1 samples, 0.02%)</title><rect x="1182.4" y="883.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.4" y="894.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.02%)</title><rect x="1182.4" y="867.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="878.0"></text>
</g>
<g>
<title>VectorSet::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1182.4" y="851.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.4" y="862.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1182.4" y="835.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1185.4" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.02%)</title><rect x="1182.6" y="947.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="958.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.02%)</title><rect x="1182.6" y="931.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.02%)</title><rect x="1182.9" y="947.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="958.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1182.9" y="931.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="942.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1182.9" y="915.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="926.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1182.9" y="899.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1185.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (8 samples, 0.17%)</title><rect x="1183.1" y="947.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.02%)</title><rect x="1183.1" y="931.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.09%)</title><rect x="1183.4" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (4 samples, 0.09%)</title><rect x="1183.4" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="926.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1183.4" y="899.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="910.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1183.4" y="883.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="894.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1183.4" y="867.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1186.4" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.04%)</title><rect x="1183.6" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1183.9" y="883.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1183.9" y="867.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.02%)</title><rect x="1183.9" y="851.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.02%)</title><rect x="1183.9" y="835.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="846.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.02%)</title><rect x="1183.9" y="819.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.02%)</title><rect x="1184.1" y="899.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="910.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.02%)</title><rect x="1184.1" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.04%)</title><rect x="1184.4" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.02%)</title><rect x="1184.4" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.02%)</title><rect x="1184.4" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.02%)</title><rect x="1184.4" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.02%)</title><rect x="1184.7" y="915.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_before_loop(Node*, Node*) (1 samples, 0.02%)</title><rect x="1184.7" y="899.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="910.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1184.7" y="883.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="1184.9" y="931.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1184.9" y="915.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.06%)</title><rect x="1185.2" y="947.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.06%)</title><rect x="1185.2" y="931.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1185.2" y="915.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="926.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.02%)</title><rect x="1185.2" y="899.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.02%)</title><rect x="1185.2" y="883.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="894.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1185.4" y="915.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.02%)</title><rect x="1185.4" y="899.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="910.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="1185.4" y="883.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="894.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1185.7" y="915.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.7" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.02%)</title><rect x="1185.9" y="947.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="1185.9" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1185.9" y="915.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="926.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1185.9" y="899.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="910.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.02%)</title><rect x="1185.9" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="894.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1186.2" y="963.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="974.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.02%)</title><rect x="1186.4" y="963.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.4" y="974.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.02%)</title><rect x="1186.4" y="947.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1186.4" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.4" y="942.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.02%)</title><rect x="1186.4" y="915.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.4" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::hash() const (1 samples, 0.02%)</title><rect x="1186.4" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.28%)</title><rect x="1186.7" y="963.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.28%)</title><rect x="1186.7" y="947.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.28%)</title><rect x="1186.7" y="931.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.28%)</title><rect x="1186.7" y="915.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.28%)</title><rect x="1186.7" y="899.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="910.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1186.7" y="883.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="894.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::AccessKind) (1 samples, 0.02%)</title><rect x="1186.7" y="867.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="878.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.02%)</title><rect x="1186.7" y="851.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="862.0"></text>
</g>
<g>
<title>TypePtr::remove_speculative() const (1 samples, 0.02%)</title><rect x="1186.7" y="835.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.15%)</title><rect x="1186.9" y="883.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.15%)</title><rect x="1186.9" y="867.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.15%)</title><rect x="1186.9" y="851.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.13%)</title><rect x="1186.9" y="835.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.13%)</title><rect x="1186.9" y="819.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.13%)</title><rect x="1186.9" y="803.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.13%)</title><rect x="1186.9" y="787.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.13%)</title><rect x="1186.9" y="771.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.13%)</title><rect x="1186.9" y="755.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.13%)</title><rect x="1186.9" y="739.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.11%)</title><rect x="1186.9" y="723.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.11%)</title><rect x="1186.9" y="707.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.11%)</title><rect x="1186.9" y="691.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.11%)</title><rect x="1186.9" y="675.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.11%)</title><rect x="1186.9" y="659.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.11%)</title><rect x="1186.9" y="643.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.11%)</title><rect x="1186.9" y="627.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="638.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.02%)</title><rect x="1186.9" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="622.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1186.9" y="595.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="606.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.02%)</title><rect x="1186.9" y="579.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="590.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.02%)</title><rect x="1186.9" y="563.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.02%)</title><rect x="1186.9" y="547.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1187.2" y="611.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1187.2" y="595.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1187.2" y="579.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.02%)</title><rect x="1187.2" y="563.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.2" y="574.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.02%)</title><rect x="1187.2" y="547.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="558.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.02%)</title><rect x="1187.2" y="531.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.2" y="542.0"></text>
</g>
<g>
<title>Type::get_const_type(ciType*) (1 samples, 0.02%)</title><rect x="1187.2" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="526.0"></text>
</g>
<g>
<title>Dependencies::assert_abstract_with_unique_concrete_subtype(ciKlass*, ciKlass*) (1 samples, 0.02%)</title><rect x="1187.2" y="499.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.2" y="510.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.5" y="563.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.5" y="574.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_string_equals(StrIntrinsicNode::ArgEncoding) (1 samples, 0.02%)</title><rect x="1187.5" y="547.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.7" y="563.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.7" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.7" y="531.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.7" y="515.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1187.7" y="499.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="510.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1187.7" y="483.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.7" y="494.0"></text>
</g>
<g>
<title>Parse::merge(int) (1 samples, 0.02%)</title><rect x="1188.0" y="611.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.0" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.2" y="723.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.2" y="707.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1188.2" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1188.2" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1188.2" y="659.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.2" y="643.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.2" y="627.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1188.2" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1188.2" y="595.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1188.2" y="579.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.2" y="563.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.2" y="547.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1188.2" y="531.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1188.2" y="515.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1188.2" y="499.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.2" y="483.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.2" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1188.2" y="451.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1188.2" y="435.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1188.2" y="419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.2" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.2" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1188.2" y="371.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1188.2" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1188.2" y="339.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.2" y="323.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.2" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1188.2" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1188.2" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1188.2" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.2" y="243.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.2" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1188.2" y="227.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.2" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1188.2" y="211.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.2" y="222.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.02%)</title><rect x="1188.2" y="195.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.2" y="206.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1188.2" y="179.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.2" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1188.2" y="163.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.2" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1188.2" y="147.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.2" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1188.2" y="131.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.2" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1188.2" y="115.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.2" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1188.2" y="99.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.2" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1188.2" y="83.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.2" y="94.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1188.2" y="67.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.2" y="78.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1188.2" y="51.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.2" y="62.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.02%)</title><rect x="1188.2" y="35.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.2" y="46.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1188.5" y="835.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.5" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1188.7" y="883.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1188.7" y="867.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1188.7" y="851.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1188.7" y="835.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1188.7" y="819.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1188.7" y="803.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.7" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1188.7" y="787.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.7" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1188.7" y="771.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.7" y="782.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.02%)</title><rect x="1188.7" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.7" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1188.7" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.7" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1188.7" y="723.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.7" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1188.7" y="707.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.7" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1188.7" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.7" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1188.7" y="675.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.7" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1188.7" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.7" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.02%)</title><rect x="1188.7" y="643.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.7" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1188.7" y="627.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.7" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1188.7" y="611.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1188.7" y="595.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.7" y="606.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.02%)</title><rect x="1188.7" y="579.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1189.0" y="787.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1189.0" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1189.0" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1189.0" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1189.0" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1189.0" y="707.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1189.0" y="691.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1189.0" y="675.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1189.0" y="659.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1189.0" y="643.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1189.0" y="627.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1189.0" y="611.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1189.0" y="595.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1189.0" y="579.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1189.0" y="563.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="574.0"></text>
</g>
<g>
<title>ciInstanceKlass::java_mirror() (1 samples, 0.02%)</title><rect x="1189.0" y="547.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.0" y="558.0"></text>
</g>
<g>
<title>ciKlass::java_mirror() (1 samples, 0.02%)</title><rect x="1189.0" y="531.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.02%)</title><rect x="1189.0" y="515.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.02%)</title><rect x="1189.0" y="499.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.0" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_scavengable(oopDesc*) (1 samples, 0.02%)</title><rect x="1189.0" y="483.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1189.2" y="707.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.2" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1189.2" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.2" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1189.2" y="675.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.2" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.02%)</title><rect x="1189.2" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.2" y="670.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.02%)</title><rect x="1189.2" y="643.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.2" y="654.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1189.5" y="867.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.5" y="878.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1189.5" y="851.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.02%)</title><rect x="1189.5" y="835.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.5" y="846.0"></text>
</g>
<g>
<title>TypeTuple::make(unsigned int, Type const**) (1 samples, 0.02%)</title><rect x="1189.5" y="819.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="830.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1189.5" y="803.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.5" y="814.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.02%)</title><rect x="1189.5" y="787.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.5" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1189.7" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.7" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1189.7" y="867.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.7" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1189.7" y="851.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.7" y="862.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1189.7" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.7" y="846.0"></text>
</g>
</g>
</svg>
