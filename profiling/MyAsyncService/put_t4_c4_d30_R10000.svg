<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (6,513 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=39171] (328 samples, 5.04%)</title><rect x="10.0" y="483.0" width="59.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="494.0">[NIO S..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="10.2" y="467.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.2" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="10.4" y="451.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.4" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (323 samples, 4.96%)</title><rect x="10.9" y="467.0" width="58.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.9" y="478.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.05%)</title><rect x="11.4" y="451.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.4" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="11.4" y="435.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.4" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.05%)</title><rect x="11.4" y="419.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.4" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (2 samples, 0.03%)</title><rect x="11.6" y="403.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.6" y="414.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.03%)</title><rect x="11.6" y="387.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="14.6" y="398.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.03%)</title><rect x="11.6" y="371.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.6" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (188 samples, 2.89%)</title><rect x="12.0" y="451.0" width="34.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.0" y="462.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.05%)</title><rect x="12.0" y="435.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.05%)</title><rect x="12.0" y="419.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.05%)</title><rect x="12.0" y="403.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (183 samples, 2.81%)</title><rect x="12.9" y="435.0" width="33.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.9" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (183 samples, 2.81%)</title><rect x="12.9" y="419.0" width="33.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (183 samples, 2.81%)</title><rect x="12.9" y="403.0" width="33.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.9" y="414.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (176 samples, 2.70%)</title><rect x="12.9" y="387.0" width="31.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="398.0">su..</text>
</g>
<g>
<title>kevent (168 samples, 2.58%)</title><rect x="14.3" y="371.0" width="30.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="17.3" y="382.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="44.8" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="44.8" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.05%)</title><rect x="45.1" y="387.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.1" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.05%)</title><rect x="45.1" y="371.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.1" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.05%)</title><rect x="45.1" y="355.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.1" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.05%)</title><rect x="45.1" y="339.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.1" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.05%)</title><rect x="45.1" y="323.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="45.7" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="48.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (129 samples, 1.98%)</title><rect x="46.1" y="451.0" width="23.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="49.1" y="462.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (125 samples, 1.92%)</title><rect x="46.2" y="435.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.2" y="446.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (87 samples, 1.34%)</title><rect x="46.2" y="419.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="49.2" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (70 samples, 1.07%)</title><rect x="46.6" y="403.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="49.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (70 samples, 1.07%)</title><rect x="46.6" y="387.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="46.6" y="371.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="46.6" y="355.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (68 samples, 1.04%)</title><rect x="47.0" y="371.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (67 samples, 1.03%)</title><rect x="47.1" y="355.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (67 samples, 1.03%)</title><rect x="47.1" y="339.0" width="12.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (67 samples, 1.03%)</title><rect x="47.1" y="323.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (67 samples, 1.03%)</title><rect x="47.1" y="307.0" width="12.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (52 samples, 0.80%)</title><rect x="47.1" y="291.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.06%)</title><rect x="47.1" y="275.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.06%)</title><rect x="47.1" y="259.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.06%)</title><rect x="47.1" y="243.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.03%)</title><rect x="47.1" y="227.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.1" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="47.1" y="211.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.1" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="47.1" y="195.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.03%)</title><rect x="47.5" y="227.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.03%)</title><rect x="47.5" y="211.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.5" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.03%)</title><rect x="47.5" y="195.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.5" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.03%)</title><rect x="47.5" y="179.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (47 samples, 0.72%)</title><rect x="48.0" y="275.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (47 samples, 0.72%)</title><rect x="48.0" y="259.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (47 samples, 0.72%)</title><rect x="48.0" y="243.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (47 samples, 0.72%)</title><rect x="48.0" y="227.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.0" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (47 samples, 0.72%)</title><rect x="48.0" y="211.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.0" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (43 samples, 0.66%)</title><rect x="48.8" y="195.0" width="7.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="51.8" y="206.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="49.0" y="179.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="52.0" y="190.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="49.9" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="52.9" y="190.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (2 samples, 0.03%)</title><rect x="49.9" y="163.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="52.9" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (32 samples, 0.49%)</title><rect x="50.2" y="179.0" width="5.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="53.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.21%)</title><rect x="56.7" y="291.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.21%)</title><rect x="56.7" y="275.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="59.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.21%)</title><rect x="56.7" y="259.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="59.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (14 samples, 0.21%)</title><rect x="56.7" y="243.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.7" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.11%)</title><rect x="59.3" y="403.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="62.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.06%)</title><rect x="59.3" y="387.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="59.5" y="371.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="59.5" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.05%)</title><rect x="59.5" y="339.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="60.0" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="60.0" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.03%)</title><rect x="60.5" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.5" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="60.5" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="60.5" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.5" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.05%)</title><rect x="61.1" y="403.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="64.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="61.3" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="64.3" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="61.3" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.3" y="382.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="61.3" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.3" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="61.6" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="64.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="61.6" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.6" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (38 samples, 0.58%)</title><rect x="62.0" y="419.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 0.57%)</title><rect x="62.2" y="403.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (36 samples, 0.55%)</title><rect x="62.4" y="387.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 0.55%)</title><rect x="62.4" y="371.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 0.55%)</title><rect x="62.4" y="355.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 0.55%)</title><rect x="62.4" y="339.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 0.55%)</title><rect x="62.4" y="323.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (36 samples, 0.55%)</title><rect x="62.4" y="307.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.4" y="318.0"></text>
</g>
<g>
<title>read (33 samples, 0.51%)</title><rect x="62.9" y="291.0" width="6.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="65.9" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="68.9" y="435.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="71.9" y="446.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (346 samples, 5.31%)</title><rect x="69.4" y="483.0" width="62.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="72.4" y="494.0">[NIO S..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="69.4" y="467.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="72.4" y="478.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.08%)</title><rect x="70.0" y="467.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="73.0" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.05%)</title><rect x="70.3" y="451.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="73.3" y="462.0"></text>
</g>
<g>
<title>_res (3 samples, 0.05%)</title><rect x="70.3" y="435.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="73.3" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (338 samples, 5.19%)</title><rect x="70.9" y="467.0" width="61.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.9" y="478.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (219 samples, 3.36%)</title><rect x="71.4" y="451.0" width="39.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.4" y="462.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.08%)</title><rect x="71.6" y="435.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.03%)</title><rect x="72.0" y="419.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.03%)</title><rect x="72.0" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (212 samples, 3.26%)</title><rect x="72.5" y="435.0" width="38.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.5" y="446.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (212 samples, 3.26%)</title><rect x="72.5" y="419.0" width="38.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.5" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (212 samples, 3.26%)</title><rect x="72.5" y="403.0" width="38.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.5" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (197 samples, 3.02%)</title><rect x="72.7" y="387.0" width="35.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.7" y="398.0">sun..</text>
</g>
<g>
<title>kevent (186 samples, 2.86%)</title><rect x="74.7" y="371.0" width="33.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="77.7" y="382.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.08%)</title><rect x="108.4" y="387.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="111.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="108.4" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.05%)</title><rect x="108.7" y="371.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="111.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="108.7" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="111.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="108.7" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="108.7" y="323.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="111.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="109.3" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.3" y="398.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.03%)</title><rect x="109.3" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.08%)</title><rect x="109.6" y="387.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.6" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.08%)</title><rect x="109.6" y="371.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.6" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.06%)</title><rect x="109.8" y="355.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.8" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.06%)</title><rect x="109.8" y="339.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="112.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.06%)</title><rect x="109.8" y="323.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="110.6" y="387.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.6" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (116 samples, 1.78%)</title><rect x="111.1" y="451.0" width="21.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="114.1" y="462.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (113 samples, 1.73%)</title><rect x="111.3" y="435.0" width="20.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (72 samples, 1.11%)</title><rect x="111.5" y="419.0" width="13.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (58 samples, 0.89%)</title><rect x="111.8" y="403.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (58 samples, 0.89%)</title><rect x="111.8" y="387.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="114.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (58 samples, 0.89%)</title><rect x="111.8" y="371.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.8" y="382.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="112.2" y="355.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="115.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (54 samples, 0.83%)</title><rect x="112.5" y="355.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (54 samples, 0.83%)</title><rect x="112.5" y="339.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (54 samples, 0.83%)</title><rect x="112.5" y="323.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (54 samples, 0.83%)</title><rect x="112.5" y="307.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (43 samples, 0.66%)</title><rect x="112.5" y="291.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (43 samples, 0.66%)</title><rect x="112.5" y="275.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (43 samples, 0.66%)</title><rect x="112.5" y="259.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (43 samples, 0.66%)</title><rect x="112.5" y="243.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (43 samples, 0.66%)</title><rect x="112.5" y="227.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="115.5" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (43 samples, 0.66%)</title><rect x="112.5" y="211.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.5" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (39 samples, 0.60%)</title><rect x="113.3" y="195.0" width="7.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="116.3" y="206.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title><rect x="114.4" y="179.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="117.4" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.03%)</title><rect x="114.4" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="117.4" y="174.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.03%)</title><rect x="114.4" y="147.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="117.4" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.03%)</title><rect x="114.4" y="131.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="117.4" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (29 samples, 0.45%)</title><rect x="115.1" y="179.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="118.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.17%)</title><rect x="120.3" y="291.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.17%)</title><rect x="120.3" y="275.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="123.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.17%)</title><rect x="120.3" y="259.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (11 samples, 0.17%)</title><rect x="120.3" y="243.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.3" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.11%)</title><rect x="122.3" y="403.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="125.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.08%)</title><rect x="122.5" y="387.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="125.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="122.9" y="371.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="125.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="122.9" y="355.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="123.1" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="126.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="123.6" y="403.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="123.6" y="387.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="126.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="123.6" y="371.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.6" y="382.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="123.6" y="355.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="126.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="124.0" y="403.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="127.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="124.0" y="387.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="127.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (40 samples, 0.61%)</title><rect x="124.5" y="419.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="127.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (40 samples, 0.61%)</title><rect x="124.5" y="403.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (39 samples, 0.60%)</title><rect x="124.7" y="387.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.12%)</title><rect x="124.7" y="371.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.12%)</title><rect x="124.7" y="355.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.09%)</title><rect x="125.0" y="339.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.09%)</title><rect x="125.0" y="323.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.05%)</title><rect x="125.0" y="307.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.48%)</title><rect x="126.1" y="371.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="129.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.48%)</title><rect x="126.1" y="355.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="129.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (31 samples, 0.48%)</title><rect x="126.1" y="339.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="129.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (30 samples, 0.46%)</title><rect x="126.3" y="323.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="129.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (30 samples, 0.46%)</title><rect x="126.3" y="307.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="129.3" y="318.0"></text>
</g>
<g>
<title>read (28 samples, 0.43%)</title><rect x="126.7" y="291.0" width="5.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="129.7" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="131.8" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="134.8" y="446.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="131.8" y="419.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="134.8" y="430.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="131.8" y="403.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="134.8" y="414.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="131.8" y="387.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="134.8" y="398.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=38659] (320 samples, 4.91%)</title><rect x="132.1" y="483.0" width="58.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="135.1" y="494.0">[NIO S..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.08%)</title><rect x="132.1" y="467.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="135.1" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.08%)</title><rect x="132.1" y="451.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="135.1" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.03%)</title><rect x="132.1" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="135.1" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="132.1" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="135.1" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="132.1" y="403.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="135.1" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.03%)</title><rect x="132.7" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="135.7" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.03%)</title><rect x="132.7" y="419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="135.7" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.05%)</title><rect x="133.0" y="467.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="136.0" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (312 samples, 4.79%)</title><rect x="133.6" y="467.0" width="56.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.6" y="478.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (202 samples, 3.10%)</title><rect x="133.9" y="451.0" width="36.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.9" y="462.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.06%)</title><rect x="133.9" y="435.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="136.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.03%)</title><rect x="134.1" y="419.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.1" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.03%)</title><rect x="134.1" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="137.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (196 samples, 3.01%)</title><rect x="135.0" y="435.0" width="35.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="138.0" y="446.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (196 samples, 3.01%)</title><rect x="135.0" y="419.0" width="35.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="138.0" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (196 samples, 3.01%)</title><rect x="135.0" y="403.0" width="35.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.0" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (181 samples, 2.78%)</title><rect x="135.0" y="387.0" width="32.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.0" y="398.0">su..</text>
</g>
<g>
<title>kevent (171 samples, 2.63%)</title><rect x="136.8" y="371.0" width="31.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="139.8" y="382.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.06%)</title><rect x="167.8" y="387.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="170.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="168.2" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="171.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.08%)</title><rect x="168.5" y="387.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.5" y="398.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.03%)</title><rect x="169.1" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (6 samples, 0.09%)</title><rect x="169.4" y="387.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.4" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (6 samples, 0.09%)</title><rect x="169.4" y="371.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.4" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.06%)</title><rect x="169.8" y="355.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.8" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.06%)</title><rect x="169.8" y="339.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.06%)</title><rect x="169.8" y="323.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (108 samples, 1.66%)</title><rect x="170.5" y="451.0" width="19.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.5" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (105 samples, 1.61%)</title><rect x="170.9" y="435.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (64 samples, 0.98%)</title><rect x="170.9" y="419.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.9" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (45 samples, 0.69%)</title><rect x="171.4" y="403.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (44 samples, 0.68%)</title><rect x="171.6" y="387.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="171.6" y="371.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="174.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="171.6" y="355.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (42 samples, 0.64%)</title><rect x="172.0" y="371.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (39 samples, 0.60%)</title><rect x="172.5" y="355.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.03%)</title><rect x="172.5" y="339.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (37 samples, 0.57%)</title><rect x="172.9" y="339.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (37 samples, 0.57%)</title><rect x="172.9" y="323.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (37 samples, 0.57%)</title><rect x="172.9" y="307.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (33 samples, 0.51%)</title><rect x="172.9" y="291.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (32 samples, 0.49%)</title><rect x="173.1" y="275.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 0.49%)</title><rect x="173.1" y="259.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (32 samples, 0.49%)</title><rect x="173.1" y="243.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (31 samples, 0.48%)</title><rect x="173.2" y="227.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.2" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (31 samples, 0.48%)</title><rect x="173.2" y="211.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.2" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (29 samples, 0.45%)</title><rect x="173.4" y="195.0" width="5.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="176.4" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (22 samples, 0.34%)</title><rect x="174.1" y="179.0" width="4.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="177.1" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.03%)</title><rect x="178.1" y="179.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="181.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.06%)</title><rect x="178.9" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.06%)</title><rect x="178.9" y="275.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.06%)</title><rect x="178.9" y="259.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="181.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (4 samples, 0.06%)</title><rect x="178.9" y="243.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="181.9" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.11%)</title><rect x="179.6" y="403.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.05%)</title><rect x="179.6" y="387.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="179.8" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="182.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="180.1" y="387.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.1" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="180.1" y="371.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.05%)</title><rect x="180.8" y="403.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.8" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.05%)</title><rect x="180.8" y="387.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="183.8" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.05%)</title><rect x="180.8" y="371.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="181.4" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="181.4" y="387.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.4" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="181.4" y="371.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="184.4" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.06%)</title><rect x="181.8" y="403.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="181.9" y="387.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="184.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (41 samples, 0.63%)</title><rect x="182.5" y="419.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (41 samples, 0.63%)</title><rect x="182.5" y="403.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (40 samples, 0.61%)</title><rect x="182.7" y="387.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.08%)</title><rect x="182.7" y="371.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.08%)</title><rect x="182.7" y="355.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.05%)</title><rect x="183.0" y="339.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="186.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.05%)</title><rect x="183.0" y="323.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.05%)</title><rect x="183.0" y="307.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 0.54%)</title><rect x="183.6" y="371.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 0.54%)</title><rect x="183.6" y="355.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (35 samples, 0.54%)</title><rect x="183.6" y="339.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (34 samples, 0.52%)</title><rect x="183.7" y="323.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (34 samples, 0.52%)</title><rect x="183.7" y="307.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.7" y="318.0"></text>
</g>
<g>
<title>read (29 samples, 0.45%)</title><rect x="184.7" y="291.0" width="5.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="187.7" y="302.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=26115] (335 samples, 5.14%)</title><rect x="190.1" y="483.0" width="60.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="193.1" y="494.0">[NIO S..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="190.3" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="193.3" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="190.3" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="193.3" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.03%)</title><rect x="190.3" y="435.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="193.3" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="190.3" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="193.3" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.05%)</title><rect x="190.8" y="467.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="193.8" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="191.0" y="451.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="194.0" y="462.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="191.0" y="435.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="194.0" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (328 samples, 5.04%)</title><rect x="191.4" y="467.0" width="59.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="194.4" y="478.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (192 samples, 2.95%)</title><rect x="191.5" y="451.0" width="34.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.5" y="462.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.03%)</title><rect x="191.5" y="435.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="194.5" y="446.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="192.1" y="435.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="195.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (185 samples, 2.84%)</title><rect x="192.4" y="435.0" width="33.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.4" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (185 samples, 2.84%)</title><rect x="192.4" y="419.0" width="33.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.4" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (185 samples, 2.84%)</title><rect x="192.4" y="403.0" width="33.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.4" y="414.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (174 samples, 2.67%)</title><rect x="192.4" y="387.0" width="31.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.4" y="398.0">su..</text>
</g>
<g>
<title>kevent (164 samples, 2.52%)</title><rect x="194.3" y="371.0" width="29.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="197.3" y="382.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.09%)</title><rect x="224.0" y="387.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.05%)</title><rect x="224.0" y="371.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="224.2" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.05%)</title><rect x="224.5" y="371.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.03%)</title><rect x="225.2" y="387.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.2" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.03%)</title><rect x="225.2" y="371.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.2" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="225.2" y="355.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.2" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title><rect x="225.2" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title><rect x="225.2" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (135 samples, 2.07%)</title><rect x="226.3" y="451.0" width="24.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.3" y="462.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (134 samples, 2.06%)</title><rect x="226.5" y="435.0" width="24.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.5" y="446.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (83 samples, 1.27%)</title><rect x="226.9" y="419.0" width="15.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.9" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (64 samples, 0.98%)</title><rect x="226.9" y="403.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (64 samples, 0.98%)</title><rect x="226.9" y="387.0" width="11.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (64 samples, 0.98%)</title><rect x="226.9" y="371.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (61 samples, 0.94%)</title><rect x="227.4" y="355.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (60 samples, 0.92%)</title><rect x="227.6" y="339.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (60 samples, 0.92%)</title><rect x="227.6" y="323.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (60 samples, 0.92%)</title><rect x="227.6" y="307.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (45 samples, 0.69%)</title><rect x="227.6" y="291.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="227.6" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (43 samples, 0.66%)</title><rect x="228.0" y="275.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (43 samples, 0.66%)</title><rect x="228.0" y="259.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (43 samples, 0.66%)</title><rect x="228.0" y="243.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (43 samples, 0.66%)</title><rect x="228.0" y="227.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.0" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (43 samples, 0.66%)</title><rect x="228.0" y="211.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.0" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (40 samples, 0.61%)</title><rect x="228.5" y="195.0" width="7.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="231.5" y="206.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title><rect x="228.5" y="179.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="231.5" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.03%)</title><rect x="228.5" y="163.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="231.5" y="174.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.03%)</title><rect x="228.5" y="147.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="231.5" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.03%)</title><rect x="228.5" y="131.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="231.5" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.03%)</title><rect x="228.5" y="115.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="231.5" y="126.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="228.9" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="231.9" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (30 samples, 0.46%)</title><rect x="229.9" y="179.0" width="5.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="232.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 0.23%)</title><rect x="235.7" y="291.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 0.23%)</title><rect x="235.7" y="275.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 0.23%)</title><rect x="235.7" y="259.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (15 samples, 0.23%)</title><rect x="235.7" y="243.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.7" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9 samples, 0.14%)</title><rect x="238.5" y="403.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.5" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.06%)</title><rect x="238.5" y="387.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="238.8" y="371.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="238.8" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="238.8" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="239.2" y="387.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="239.2" y="371.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.03%)</title><rect x="239.7" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.08%)</title><rect x="240.3" y="403.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="240.3" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.05%)</title><rect x="240.6" y="387.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="240.8" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.06%)</title><rect x="241.2" y="403.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.06%)</title><rect x="241.2" y="387.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (49 samples, 0.75%)</title><rect x="241.9" y="419.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (49 samples, 0.75%)</title><rect x="241.9" y="403.0" width="8.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="241.9" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.9" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="241.9" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="244.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="241.9" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="241.9" y="339.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="241.9" y="323.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="241.9" y="307.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.9" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="241.9" y="291.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (47 samples, 0.72%)</title><rect x="242.3" y="387.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.08%)</title><rect x="242.3" y="371.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.08%)</title><rect x="242.3" y="355.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.08%)</title><rect x="242.3" y="339.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.08%)</title><rect x="242.3" y="323.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.05%)</title><rect x="242.3" y="307.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 0.64%)</title><rect x="243.2" y="371.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 0.64%)</title><rect x="243.2" y="355.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (42 samples, 0.64%)</title><rect x="243.2" y="339.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (41 samples, 0.63%)</title><rect x="243.4" y="323.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (41 samples, 0.63%)</title><rect x="243.4" y="307.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.4" y="318.0"></text>
</g>
<g>
<title>read (38 samples, 0.58%)</title><rect x="243.9" y="291.0" width="6.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="246.9" y="302.0"></text>
</g>
<g>
<title>[tid=13315] (4 samples, 0.06%)</title><rect x="250.8" y="483.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="253.8" y="494.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.06%)</title><rect x="250.8" y="467.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="253.8" y="478.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.06%)</title><rect x="250.8" y="451.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="253.8" y="462.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.06%)</title><rect x="250.8" y="435.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="253.8" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.06%)</title><rect x="250.8" y="419.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="253.8" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.06%)</title><rect x="250.8" y="403.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="253.8" y="414.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.06%)</title><rect x="250.8" y="387.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="253.8" y="398.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.06%)</title><rect x="250.8" y="371.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="253.8" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.05%)</title><rect x="251.0" y="355.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="254.0" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.05%)</title><rect x="251.0" y="339.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="254.0" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.05%)</title><rect x="251.0" y="323.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="254.0" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.05%)</title><rect x="251.0" y="307.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="254.0" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.05%)</title><rect x="251.0" y="291.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="254.0" y="302.0"></text>
</g>
<g>
<title>[tid=13827] (2 samples, 0.03%)</title><rect x="251.5" y="483.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="254.5" y="494.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.03%)</title><rect x="251.5" y="467.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="254.5" y="478.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.03%)</title><rect x="251.5" y="451.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="254.5" y="462.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.03%)</title><rect x="251.5" y="435.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="254.5" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.03%)</title><rect x="251.5" y="419.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="254.5" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.03%)</title><rect x="251.5" y="403.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="254.5" y="414.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.03%)</title><rect x="251.5" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="254.5" y="398.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.03%)</title><rect x="251.5" y="371.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="254.5" y="382.0"></text>
</g>
<g>
<title>[tid=40451] (18 samples, 0.28%)</title><rect x="252.2" y="483.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="255.2" y="494.0"></text>
</g>
<g>
<title>thread_start (18 samples, 0.28%)</title><rect x="252.2" y="467.0" width="3.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="255.2" y="478.0"></text>
</g>
<g>
<title>_pthread_start (18 samples, 0.28%)</title><rect x="252.2" y="451.0" width="3.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="255.2" y="462.0"></text>
</g>
<g>
<title>_pthread_body (18 samples, 0.28%)</title><rect x="252.2" y="435.0" width="3.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="255.2" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (18 samples, 0.28%)</title><rect x="252.2" y="419.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="255.2" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (18 samples, 0.28%)</title><rect x="252.2" y="403.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="255.2" y="414.0"></text>
</g>
<g>
<title>WatcherThread::run() (18 samples, 0.28%)</title><rect x="252.2" y="387.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="255.2" y="398.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (17 samples, 0.26%)</title><rect x="252.4" y="371.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="255.4" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (16 samples, 0.25%)</title><rect x="252.6" y="355.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="255.6" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (16 samples, 0.25%)</title><rect x="252.6" y="339.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="255.6" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (16 samples, 0.25%)</title><rect x="252.6" y="323.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="255.6" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.23%)</title><rect x="252.6" y="307.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="255.6" y="318.0"></text>
</g>
<g>
<title>[worker tid=27139] (1,286 samples, 19.75%)</title><rect x="255.5" y="483.0" width="233.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="258.5" y="494.0">[worker tid=27139]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="255.5" y="467.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="258.5" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="255.5" y="451.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="258.5" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="255.5" y="435.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="258.5" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="255.5" y="419.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="258.5" y="430.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="255.5" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="258.5" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="255.5" y="387.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="258.5" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.11%)</title><rect x="255.9" y="467.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="258.9" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.09%)</title><rect x="256.0" y="451.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="259.0" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.03%)</title><rect x="256.2" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="259.2" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="256.2" y="419.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="259.2" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="256.2" y="403.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="259.2" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.05%)</title><rect x="256.6" y="435.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="259.6" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.05%)</title><rect x="256.6" y="419.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="259.6" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.08%)</title><rect x="257.5" y="467.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="260.5" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,269 samples, 19.48%)</title><rect x="258.4" y="467.0" width="229.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="261.4" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,269 samples, 19.48%)</title><rect x="258.4" y="451.0" width="229.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.4" y="462.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,269 samples, 19.48%)</title><rect x="258.4" y="435.0" width="229.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.4" y="446.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (340 samples, 5.22%)</title><rect x="258.4" y="419.0" width="61.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.4" y="430.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (338 samples, 5.19%)</title><rect x="258.8" y="403.0" width="61.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.8" y="414.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (305 samples, 4.68%)</title><rect x="258.8" y="387.0" width="55.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.8" y="398.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.08%)</title><rect x="258.8" y="371.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.08%)</title><rect x="258.8" y="355.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.06%)</title><rect x="258.8" y="339.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.06%)</title><rect x="258.8" y="323.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.8" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.06%)</title><rect x="258.8" y="307.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.8" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.06%)</title><rect x="258.8" y="291.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="261.8" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.05%)</title><rect x="258.9" y="275.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="261.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (300 samples, 4.61%)</title><rect x="259.7" y="371.0" width="54.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.7" y="382.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (300 samples, 4.61%)</title><rect x="259.7" y="355.0" width="54.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.7" y="366.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (293 samples, 4.50%)</title><rect x="260.9" y="339.0" width="53.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="263.9" y="350.0">Unsaf..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="261.1" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="264.1" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title><rect x="261.7" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="264.7" y="334.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.03%)</title><rect x="261.7" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="264.7" y="318.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.03%)</title><rect x="261.7" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="264.7" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.03%)</title><rect x="261.7" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="264.7" y="286.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.06%)</title><rect x="262.0" y="323.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="265.0" y="334.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (3 samples, 0.05%)</title><rect x="262.2" y="307.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="265.2" y="318.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="262.4" y="291.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="265.4" y="302.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (3 samples, 0.05%)</title><rect x="262.7" y="323.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="265.7" y="334.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (3 samples, 0.05%)</title><rect x="262.7" y="307.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="265.7" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (272 samples, 4.18%)</title><rect x="263.3" y="323.0" width="49.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="266.3" y="334.0">Parke..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.08%)</title><rect x="263.5" y="307.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="266.5" y="318.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="263.8" y="291.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="266.8" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (265 samples, 4.07%)</title><rect x="264.6" y="307.0" width="48.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="267.6" y="318.0">__ps..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.03%)</title><rect x="313.1" y="323.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="316.1" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="313.7" y="323.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="316.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.09%)</title><rect x="314.0" y="387.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.09%)</title><rect x="314.0" y="371.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.08%)</title><rect x="314.2" y="355.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.06%)</title><rect x="314.4" y="339.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.05%)</title><rect x="314.6" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="317.6" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="314.7" y="307.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.7" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="314.7" y="291.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="317.7" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="314.7" y="275.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="317.7" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="314.7" y="259.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="317.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 0.41%)</title><rect x="315.1" y="387.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 0.41%)</title><rect x="315.1" y="371.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="318.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 0.41%)</title><rect x="315.1" y="355.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 0.41%)</title><rect x="315.1" y="339.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (27 samples, 0.41%)</title><rect x="315.1" y="323.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.1" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (24 samples, 0.37%)</title><rect x="315.6" y="307.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="318.6" y="318.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="316.2" y="291.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="319.2" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (17 samples, 0.26%)</title><rect x="316.5" y="291.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="319.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (929 samples, 14.26%)</title><rect x="320.0" y="419.0" width="168.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.0" y="430.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (929 samples, 14.26%)</title><rect x="320.0" y="403.0" width="168.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.0" y="414.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (246 samples, 3.78%)</title><rect x="320.0" y="387.0" width="44.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.0" y="398.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.06%)</title><rect x="320.0" y="371.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="323.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.06%)</title><rect x="320.0" y="355.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.0" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="320.4" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (234 samples, 3.59%)</title><rect x="320.7" y="371.0" width="42.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.7" y="382.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.21%)</title><rect x="320.7" y="355.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.7" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.15%)</title><rect x="321.4" y="339.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.4" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.03%)</title><rect x="321.4" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.09%)</title><rect x="321.8" y="323.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.05%)</title><rect x="322.3" y="307.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="325.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="322.9" y="323.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="322.9" y="307.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.9" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (220 samples, 3.38%)</title><rect x="323.3" y="355.0" width="39.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.3" y="366.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (220 samples, 3.38%)</title><rect x="323.3" y="339.0" width="39.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="326.3" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (217 samples, 3.33%)</title><rect x="323.8" y="323.0" width="39.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.8" y="334.0">one..</text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (2 samples, 0.03%)</title><rect x="324.2" y="307.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="327.2" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.08%)</title><rect x="324.5" y="307.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="327.5" y="318.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.03%)</title><rect x="324.7" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="327.7" y="302.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (2 samples, 0.03%)</title><rect x="324.7" y="275.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="327.7" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="325.1" y="291.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="328.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (208 samples, 3.19%)</title><rect x="325.4" y="307.0" width="37.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.4" y="318.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.11%)</title><rect x="325.4" y="291.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.4" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.11%)</title><rect x="325.4" y="275.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="325.6" y="259.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.6" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="325.6" y="243.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.6" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.06%)</title><rect x="326.0" y="259.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="329.0" y="270.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="326.2" y="243.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="329.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (201 samples, 3.09%)</title><rect x="326.7" y="291.0" width="36.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="329.7" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (201 samples, 3.09%)</title><rect x="326.7" y="275.0" width="36.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.7" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (201 samples, 3.09%)</title><rect x="326.7" y="259.0" width="36.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="329.7" y="270.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="326.7" y="243.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (189 samples, 2.90%)</title><rect x="327.1" y="243.0" width="34.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.1" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (189 samples, 2.90%)</title><rect x="327.1" y="227.0" width="34.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.1" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (189 samples, 2.90%)</title><rect x="327.1" y="211.0" width="34.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="330.1" y="222.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.06%)</title><rect x="328.5" y="195.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="331.5" y="206.0"></text>
</g>
<g>
<title>write (177 samples, 2.72%)</title><rect x="329.2" y="195.0" width="32.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="332.2" y="206.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (10 samples, 0.15%)</title><rect x="361.3" y="243.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.3" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.05%)</title><rect x="361.7" y="227.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.7" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.03%)</title><rect x="361.8" y="211.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.8" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="361.8" y="195.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="364.8" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.08%)</title><rect x="362.2" y="227.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.12%)</title><rect x="363.1" y="371.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.1" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.06%)</title><rect x="363.1" y="355.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.05%)</title><rect x="363.3" y="339.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.3" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="363.3" y="323.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="363.3" y="307.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.06%)</title><rect x="363.8" y="355.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.05%)</title><rect x="364.0" y="339.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.0" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.05%)</title><rect x="364.0" y="323.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="367.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (683 samples, 10.49%)</title><rect x="364.6" y="387.0" width="123.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="367.6" y="398.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (682 samples, 10.47%)</title><rect x="364.7" y="371.0" width="123.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="367.7" y="382.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (681 samples, 10.46%)</title><rect x="364.9" y="355.0" width="123.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.9" y="366.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (679 samples, 10.43%)</title><rect x="365.3" y="339.0" width="123.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="368.3" y="350.0">ru/mail/polis/d..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (674 samples, 10.35%)</title><rect x="365.3" y="323.0" width="122.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.3" y="334.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (674 samples, 10.35%)</title><rect x="365.3" y="307.0" width="122.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.3" y="318.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (674 samples, 10.35%)</title><rect x="365.3" y="291.0" width="122.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="368.3" y="302.0">Java_org_rocksd..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (2 samples, 0.03%)</title><rect x="365.5" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="368.5" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (671 samples, 10.30%)</title><rect x="365.8" y="275.0" width="121.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="368.8" y="286.0">rocksdb_put_hel..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.05%)</title><rect x="366.6" y="259.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="369.6" y="270.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.06%)</title><rect x="367.6" y="259.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="370.6" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.08%)</title><rect x="368.4" y="259.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="371.4" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="368.7" y="243.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="371.7" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="369.3" y="259.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="372.3" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.11%)</title><rect x="369.6" y="259.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="372.6" y="270.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.11%)</title><rect x="369.6" y="243.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="372.6" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.09%)</title><rect x="369.6" y="227.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="372.6" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.08%)</title><rect x="369.8" y="211.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="372.8" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.05%)</title><rect x="370.2" y="195.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="373.2" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="370.4" y="179.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="373.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (642 samples, 9.86%)</title><rect x="370.9" y="259.0" width="116.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="373.9" y="270.0">rocksdb::Compa..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (642 samples, 9.86%)</title><rect x="370.9" y="243.0" width="116.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="373.9" y="254.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (638 samples, 9.80%)</title><rect x="370.9" y="227.0" width="115.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="373.9" y="238.0">rocksdb::DB::P..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (623 samples, 9.57%)</title><rect x="371.3" y="211.0" width="112.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="374.3" y="222.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (619 samples, 9.50%)</title><rect x="371.3" y="195.0" width="112.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="374.3" y="206.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.03%)</title><rect x="374.9" y="179.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="377.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (163 samples, 2.50%)</title><rect x="375.3" y="179.0" width="29.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="378.3" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (163 samples, 2.50%)</title><rect x="375.3" y="163.0" width="29.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="378.3" y="174.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (160 samples, 2.46%)</title><rect x="375.8" y="147.0" width="29.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="378.8" y="158.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.05%)</title><rect x="376.0" y="131.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="379.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (156 samples, 2.40%)</title><rect x="376.5" y="131.0" width="28.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="379.5" y="142.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (4 samples, 0.06%)</title><rect x="376.7" y="115.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="379.7" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.06%)</title><rect x="376.7" y="99.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="379.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (151 samples, 2.32%)</title><rect x="377.4" y="115.0" width="27.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="380.4" y="126.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="377.4" y="99.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="380.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (148 samples, 2.27%)</title><rect x="378.0" y="99.0" width="26.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="381.0" y="110.0">r..</text>
</g>
<g>
<title>write (144 samples, 2.21%)</title><rect x="378.7" y="83.0" width="26.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="381.7" y="94.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (42 samples, 0.64%)</title><rect x="405.0" y="179.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="408.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (36 samples, 0.55%)</title><rect x="405.9" y="163.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="408.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (32 samples, 0.49%)</title><rect x="406.6" y="147.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="409.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (32 samples, 0.49%)</title><rect x="406.6" y="131.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="409.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (28 samples, 0.43%)</title><rect x="407.0" y="115.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="410.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="407.3" y="99.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="410.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (24 samples, 0.37%)</title><rect x="407.7" y="99.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="410.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.05%)</title><rect x="410.0" y="83.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="413.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.05%)</title><rect x="410.0" y="67.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="413.0" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="410.2" y="51.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="413.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 0.12%)</title><rect x="410.6" y="83.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.08%)</title><rect x="410.9" y="67.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="413.9" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.06%)</title><rect x="411.1" y="51.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="414.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (30 samples, 0.46%)</title><rect x="412.6" y="179.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="415.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (24 samples, 0.37%)</title><rect x="413.7" y="163.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="416.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.34%)</title><rect x="414.0" y="147.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="417.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (20 samples, 0.31%)</title><rect x="414.4" y="131.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="417.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (16 samples, 0.25%)</title><rect x="414.7" y="115.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="417.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.21%)</title><rect x="415.1" y="99.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="418.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.17%)</title><rect x="415.7" y="83.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="418.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.11%)</title><rect x="416.4" y="67.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="419.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.05%)</title><rect x="416.7" y="51.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="419.7" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.05%)</title><rect x="416.7" y="35.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="419.7" y="46.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="417.3" y="51.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="420.3" y="62.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.03%)</title><rect x="417.6" y="115.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="420.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (214 samples, 3.29%)</title><rect x="418.2" y="179.0" width="38.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="421.2" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (214 samples, 3.29%)</title><rect x="418.2" y="163.0" width="38.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="421.2" y="174.0">roc..</text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="418.9" y="147.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="421.9" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.05%)</title><rect x="419.3" y="147.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="422.3" y="158.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.05%)</title><rect x="419.3" y="131.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="422.3" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.03%)</title><rect x="419.8" y="147.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="422.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="419.8" y="131.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="422.8" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (203 samples, 3.12%)</title><rect x="420.2" y="147.0" width="36.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="423.2" y="158.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.03%)</title><rect x="457.0" y="179.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="460.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.03%)</title><rect x="457.0" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="460.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (6 samples, 0.09%)</title><rect x="457.3" y="179.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="460.3" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.08%)</title><rect x="457.3" y="163.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="460.3" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.08%)</title><rect x="457.3" y="147.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="460.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (130 samples, 2.00%)</title><rect x="458.4" y="179.0" width="23.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="461.4" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (129 samples, 1.98%)</title><rect x="458.4" y="163.0" width="23.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="461.4" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (100 samples, 1.54%)</title><rect x="459.7" y="147.0" width="18.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="462.7" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (86 samples, 1.32%)</title><rect x="459.7" y="131.0" width="15.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="462.7" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (14 samples, 0.21%)</title><rect x="475.3" y="131.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="478.3" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (13 samples, 0.20%)</title><rect x="475.4" y="115.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="478.4" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (13 samples, 0.20%)</title><rect x="475.4" y="99.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="478.4" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (21 samples, 0.32%)</title><rect x="478.0" y="147.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="481.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (6 samples, 0.09%)</title><rect x="482.0" y="179.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="485.0" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.05%)</title><rect x="482.0" y="163.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="485.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.05%)</title><rect x="482.0" y="147.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="485.0" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.05%)</title><rect x="482.5" y="163.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="485.5" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.05%)</title><rect x="482.5" y="147.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="485.5" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.05%)</title><rect x="482.5" y="131.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="485.5" y="142.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.03%)</title><rect x="483.1" y="179.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="486.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="483.1" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="486.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (2 samples, 0.03%)</title><rect x="483.6" y="195.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="486.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="484.3" y="211.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="487.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="484.3" y="195.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="487.3" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="484.5" y="179.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="487.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (7 samples, 0.11%)</title><rect x="485.0" y="211.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="488.0" y="222.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.05%)</title><rect x="485.2" y="195.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="488.2" y="206.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.05%)</title><rect x="485.8" y="195.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="488.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.03%)</title><rect x="486.5" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="489.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.03%)</title><rect x="487.4" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.4" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="487.4" y="307.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="490.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (3 samples, 0.05%)</title><rect x="487.8" y="323.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (3 samples, 0.05%)</title><rect x="487.8" y="307.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.8" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.05%)</title><rect x="487.8" y="291.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="490.8" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="487.8" y="275.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.8" y="286.0"></text>
</g>
<g>
<title>[worker tid=35075] (1,256 samples, 19.28%)</title><rect x="488.5" y="483.0" width="227.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="491.5" y="494.0">[worker tid=35075]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.14%)</title><rect x="488.7" y="467.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="491.7" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.12%)</title><rect x="488.8" y="451.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="491.8" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.05%)</title><rect x="489.0" y="435.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="492.0" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.06%)</title><rect x="489.6" y="435.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="492.6" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.03%)</title><rect x="489.9" y="419.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="492.9" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,241 samples, 19.05%)</title><rect x="491.0" y="467.0" width="224.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.0" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,241 samples, 19.05%)</title><rect x="491.0" y="451.0" width="224.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="494.0" y="462.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,241 samples, 19.05%)</title><rect x="491.0" y="435.0" width="224.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="494.0" y="446.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (391 samples, 6.00%)</title><rect x="491.2" y="419.0" width="70.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="494.2" y="430.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (388 samples, 5.96%)</title><rect x="491.7" y="403.0" width="70.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="494.7" y="414.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (359 samples, 5.51%)</title><rect x="491.7" y="387.0" width="65.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="494.7" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.03%)</title><rect x="491.7" y="371.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="492.3" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="495.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.06%)</title><rect x="492.7" y="371.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="495.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.06%)</title><rect x="492.7" y="355.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.05%)</title><rect x="492.7" y="339.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="495.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.05%)</title><rect x="492.7" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="495.7" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.05%)</title><rect x="492.7" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="495.7" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.03%)</title><rect x="492.7" y="291.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="495.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (350 samples, 5.37%)</title><rect x="493.4" y="371.0" width="63.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.4" y="382.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (350 samples, 5.37%)</title><rect x="493.4" y="355.0" width="63.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="496.4" y="366.0">jdk/int..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (339 samples, 5.20%)</title><rect x="495.4" y="339.0" width="61.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="498.4" y="350.0">Unsafe..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="495.7" y="323.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="498.7" y="334.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="495.7" y="307.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="498.7" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (323 samples, 4.96%)</title><rect x="496.1" y="323.0" width="58.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="499.1" y="334.0">Parker..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.06%)</title><rect x="496.5" y="307.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="499.5" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="496.8" y="291.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="499.8" y="302.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.03%)</title><rect x="497.4" y="307.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="500.4" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (309 samples, 4.74%)</title><rect x="497.7" y="307.0" width="56.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="500.7" y="318.0">__psy..</text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.08%)</title><rect x="553.7" y="307.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="556.7" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="554.8" y="323.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="557.8" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="554.8" y="307.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="557.8" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="554.8" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="557.8" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="554.8" y="275.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="557.8" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="554.8" y="259.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="557.8" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.05%)</title><rect x="555.2" y="323.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="558.2" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.05%)</title><rect x="555.2" y="307.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="558.2" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.05%)</title><rect x="555.2" y="291.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="558.2" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.05%)</title><rect x="555.2" y="275.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="558.2" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="555.3" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="558.3" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="556.4" y="323.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="559.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 0.12%)</title><rect x="556.8" y="387.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="559.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.12%)</title><rect x="556.8" y="371.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.12%)</title><rect x="556.8" y="355.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="559.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.06%)</title><rect x="557.2" y="339.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="560.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.05%)</title><rect x="557.2" y="323.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="557.3" y="307.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="560.3" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="557.3" y="291.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="560.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 0.32%)</title><rect x="558.2" y="387.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="561.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 0.32%)</title><rect x="558.2" y="371.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="561.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 0.32%)</title><rect x="558.2" y="355.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 0.32%)</title><rect x="558.2" y="339.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="561.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (21 samples, 0.32%)</title><rect x="558.2" y="323.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.2" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (20 samples, 0.31%)</title><rect x="558.4" y="307.0" width="3.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="561.4" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.28%)</title><rect x="558.6" y="291.0" width="3.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="561.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (849 samples, 13.04%)</title><rect x="562.0" y="419.0" width="153.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="565.0" y="430.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (849 samples, 13.04%)</title><rect x="562.0" y="403.0" width="153.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="565.0" y="414.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (201 samples, 3.09%)</title><rect x="562.0" y="387.0" width="36.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="565.0" y="398.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.12%)</title><rect x="562.2" y="371.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="565.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.12%)</title><rect x="562.2" y="355.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="565.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.11%)</title><rect x="562.4" y="339.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="565.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.09%)</title><rect x="562.6" y="323.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="565.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.09%)</title><rect x="562.6" y="307.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="565.6" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="562.9" y="291.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="565.9" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.03%)</title><rect x="562.9" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="565.9" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="562.9" y="259.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="565.9" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (189 samples, 2.90%)</title><rect x="563.7" y="371.0" width="34.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="566.7" y="382.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.15%)</title><rect x="563.7" y="355.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.7" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.11%)</title><rect x="564.2" y="339.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="567.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.05%)</title><rect x="564.6" y="323.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="567.6" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="565.1" y="323.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.1" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="565.1" y="307.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="568.1" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (179 samples, 2.75%)</title><rect x="565.5" y="355.0" width="32.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.5" y="366.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (179 samples, 2.75%)</title><rect x="565.5" y="339.0" width="32.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.5" y="350.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (178 samples, 2.73%)</title><rect x="565.7" y="323.0" width="32.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.7" y="334.0">on..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.12%)</title><rect x="565.8" y="307.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="568.8" y="318.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (4 samples, 0.06%)</title><rect x="566.0" y="291.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="569.0" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="566.9" y="291.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="569.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (169 samples, 2.59%)</title><rect x="567.3" y="307.0" width="30.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="570.3" y="318.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.12%)</title><rect x="567.3" y="291.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="570.3" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.12%)</title><rect x="567.3" y="275.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="570.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="567.3" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.3" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="567.7" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="570.7" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.06%)</title><rect x="568.0" y="259.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="571.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (161 samples, 2.47%)</title><rect x="568.7" y="291.0" width="29.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="571.7" y="302.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (161 samples, 2.47%)</title><rect x="568.7" y="275.0" width="29.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="571.7" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (161 samples, 2.47%)</title><rect x="568.7" y="259.0" width="29.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="571.7" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (158 samples, 2.43%)</title><rect x="568.7" y="243.0" width="28.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.7" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (158 samples, 2.43%)</title><rect x="568.7" y="227.0" width="28.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.7" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (158 samples, 2.43%)</title><rect x="568.7" y="211.0" width="28.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="571.7" y="222.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.03%)</title><rect x="570.0" y="195.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="573.0" y="206.0"></text>
</g>
<g>
<title>write (148 samples, 2.27%)</title><rect x="570.6" y="195.0" width="26.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="573.6" y="206.0">w..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.05%)</title><rect x="597.4" y="243.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.05%)</title><rect x="597.4" y="227.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="600.4" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="597.9" y="371.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="600.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="597.9" y="355.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="600.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="597.9" y="339.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="600.9" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.03%)</title><rect x="597.9" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="600.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (648 samples, 9.95%)</title><rect x="598.5" y="387.0" width="117.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="601.5" y="398.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (648 samples, 9.95%)</title><rect x="598.5" y="371.0" width="117.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="601.5" y="382.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (648 samples, 9.95%)</title><rect x="598.5" y="355.0" width="117.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="601.5" y="366.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (646 samples, 9.92%)</title><rect x="598.8" y="339.0" width="117.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="601.8" y="350.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (643 samples, 9.87%)</title><rect x="598.8" y="323.0" width="116.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.8" y="334.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (643 samples, 9.87%)</title><rect x="598.8" y="307.0" width="116.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="601.8" y="318.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (640 samples, 9.83%)</title><rect x="599.4" y="291.0" width="115.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="602.4" y="302.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (636 samples, 9.77%)</title><rect x="599.9" y="275.0" width="115.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="602.9" y="286.0">rocksdb_put_he..</text>
</g>
<g>
<title>free_tiny (4 samples, 0.06%)</title><rect x="600.5" y="259.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="603.5" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.05%)</title><rect x="600.6" y="243.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="603.6" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.08%)</title><rect x="601.2" y="259.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="604.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="601.4" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="604.4" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="602.1" y="259.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="605.1" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.09%)</title><rect x="602.6" y="259.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="605.6" y="270.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.09%)</title><rect x="602.6" y="243.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="605.6" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.08%)</title><rect x="602.8" y="227.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="605.8" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.08%)</title><rect x="602.8" y="211.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="605.8" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.08%)</title><rect x="602.8" y="195.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="605.8" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.05%)</title><rect x="603.2" y="179.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="606.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (615 samples, 9.44%)</title><rect x="603.7" y="259.0" width="111.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="606.7" y="270.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (614 samples, 9.43%)</title><rect x="603.9" y="243.0" width="111.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="606.9" y="254.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (614 samples, 9.43%)</title><rect x="603.9" y="227.0" width="111.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="606.9" y="238.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (595 samples, 9.14%)</title><rect x="604.8" y="211.0" width="107.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="607.8" y="222.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (590 samples, 9.06%)</title><rect x="604.8" y="195.0" width="106.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="607.8" y="206.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.03%)</title><rect x="607.0" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="610.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (135 samples, 2.07%)</title><rect x="607.3" y="179.0" width="24.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="610.3" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (132 samples, 2.03%)</title><rect x="607.5" y="163.0" width="23.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="610.5" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (130 samples, 2.00%)</title><rect x="607.9" y="147.0" width="23.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="610.9" y="158.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (5 samples, 0.08%)</title><rect x="608.2" y="131.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="611.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (123 samples, 1.89%)</title><rect x="609.1" y="131.0" width="22.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="612.1" y="142.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (119 samples, 1.83%)</title><rect x="609.9" y="115.0" width="21.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="612.9" y="126.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="610.1" y="99.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="613.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (116 samples, 1.78%)</title><rect x="610.4" y="99.0" width="21.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="613.4" y="110.0">r..</text>
</g>
<g>
<title>write (115 samples, 1.77%)</title><rect x="610.6" y="83.0" width="20.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="613.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="631.4" y="163.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="634.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (42 samples, 0.64%)</title><rect x="631.8" y="179.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="634.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (42 samples, 0.64%)</title><rect x="631.8" y="163.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="634.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.05%)</title><rect x="632.7" y="147.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="635.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (34 samples, 0.52%)</title><rect x="633.2" y="147.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="636.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (32 samples, 0.49%)</title><rect x="633.6" y="131.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="636.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (30 samples, 0.46%)</title><rect x="633.8" y="115.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="636.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="635.1" y="99.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="638.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.31%)</title><rect x="635.6" y="99.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="638.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.11%)</title><rect x="638.0" y="83.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="641.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.08%)</title><rect x="638.3" y="67.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="641.3" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="638.9" y="51.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="641.9" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (29 samples, 0.45%)</title><rect x="639.4" y="179.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="642.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.03%)</title><rect x="639.9" y="163.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="642.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (24 samples, 0.37%)</title><rect x="640.3" y="163.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="643.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.37%)</title><rect x="640.3" y="147.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="643.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.34%)</title><rect x="640.7" y="131.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="643.7" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="640.9" y="115.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="643.9" y="126.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="640.9" y="99.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="643.9" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="640.9" y="83.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="643.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (19 samples, 0.29%)</title><rect x="641.2" y="115.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="644.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (18 samples, 0.28%)</title><rect x="641.4" y="99.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="644.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.25%)</title><rect x="641.8" y="83.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="644.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.03%)</title><rect x="643.4" y="67.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="646.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.06%)</title><rect x="643.8" y="67.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="646.8" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="644.1" y="51.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="647.1" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="644.1" y="35.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="647.1" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (217 samples, 3.33%)</title><rect x="644.8" y="179.0" width="39.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="647.8" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (216 samples, 3.32%)</title><rect x="645.0" y="163.0" width="39.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="648.0" y="174.0">roc..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (7 samples, 0.11%)</title><rect x="646.5" y="147.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="649.5" y="158.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.11%)</title><rect x="646.5" y="131.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="649.5" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="647.2" y="115.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="650.2" y="126.0"></text>
</g>
<g>
<title>xdrrec_ops (200 samples, 3.07%)</title><rect x="647.9" y="147.0" width="36.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="650.9" y="158.0">xdr..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (8 samples, 0.12%)</title><rect x="684.3" y="179.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="687.3" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.11%)</title><rect x="684.3" y="163.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="687.3" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.11%)</title><rect x="684.3" y="147.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="687.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (133 samples, 2.04%)</title><rect x="685.8" y="179.0" width="24.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="688.8" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (133 samples, 2.04%)</title><rect x="685.8" y="163.0" width="24.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="688.8" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (106 samples, 1.63%)</title><rect x="686.3" y="147.0" width="19.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="689.3" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (98 samples, 1.50%)</title><rect x="686.3" y="131.0" width="17.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="689.3" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.11%)</title><rect x="704.3" y="131.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="707.3" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.11%)</title><rect x="704.3" y="115.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="707.3" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (7 samples, 0.11%)</title><rect x="704.3" y="99.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="707.3" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (23 samples, 0.35%)</title><rect x="705.7" y="147.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="708.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (9 samples, 0.14%)</title><rect x="709.9" y="179.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="712.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.09%)</title><rect x="709.9" y="163.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.9" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.08%)</title><rect x="709.9" y="147.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="712.9" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.05%)</title><rect x="711.0" y="163.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="714.0" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.05%)</title><rect x="711.0" y="147.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="714.0" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.05%)</title><rect x="711.0" y="131.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="714.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.11%)</title><rect x="712.6" y="211.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="715.6" y="222.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.03%)</title><rect x="712.6" y="195.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="715.6" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.05%)</title><rect x="713.0" y="195.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="716.0" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="713.1" y="179.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="716.1" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="713.5" y="195.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="716.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.03%)</title><rect x="713.5" y="179.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="716.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.03%)</title><rect x="713.9" y="211.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="716.9" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.05%)</title><rect x="714.2" y="211.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="717.2" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="714.8" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="717.8" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.03%)</title><rect x="715.3" y="323.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.3" y="334.0"></text>
</g>
<g>
<title>[worker tid=35843] (1,265 samples, 19.42%)</title><rect x="716.0" y="483.0" width="229.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="719.0" y="494.0">[worker tid=35843]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.14%)</title><rect x="716.2" y="467.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="719.2" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.12%)</title><rect x="716.4" y="451.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="719.4" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.09%)</title><rect x="716.8" y="435.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="719.8" y="446.0"></text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.08%)</title><rect x="718.2" y="467.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="721.2" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.06%)</title><rect x="718.4" y="451.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="721.4" y="462.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.06%)</title><rect x="719.1" y="467.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="722.1" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,243 samples, 19.08%)</title><rect x="719.8" y="467.0" width="225.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="722.8" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,243 samples, 19.08%)</title><rect x="719.8" y="451.0" width="225.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.8" y="462.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,243 samples, 19.08%)</title><rect x="719.8" y="435.0" width="225.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="722.8" y="446.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (379 samples, 5.82%)</title><rect x="719.8" y="419.0" width="68.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="722.8" y="430.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (378 samples, 5.80%)</title><rect x="719.8" y="403.0" width="68.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="722.8" y="414.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (347 samples, 5.33%)</title><rect x="720.2" y="387.0" width="62.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="723.2" y="398.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="720.4" y="371.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="723.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.06%)</title><rect x="720.8" y="371.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="723.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.06%)</title><rect x="720.8" y="355.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="723.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.06%)</title><rect x="720.8" y="339.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="723.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.05%)</title><rect x="720.9" y="323.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.05%)</title><rect x="720.9" y="307.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="723.9" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.05%)</title><rect x="720.9" y="291.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="723.9" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="720.9" y="275.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="723.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (340 samples, 5.22%)</title><rect x="721.5" y="371.0" width="61.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="724.5" y="382.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (340 samples, 5.22%)</title><rect x="721.5" y="355.0" width="61.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.5" y="366.0">jdk/in..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (331 samples, 5.08%)</title><rect x="723.1" y="339.0" width="60.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="726.1" y="350.0">Unsafe..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="723.5" y="323.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="726.5" y="334.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.03%)</title><rect x="724.6" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="727.6" y="334.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.03%)</title><rect x="724.6" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="727.6" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (310 samples, 4.76%)</title><rect x="724.9" y="323.0" width="56.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="727.9" y="334.0">Parker..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.06%)</title><rect x="725.3" y="307.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="728.3" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (300 samples, 4.61%)</title><rect x="726.0" y="307.0" width="54.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="729.0" y="318.0">__psy..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.05%)</title><rect x="780.4" y="307.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="783.4" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.03%)</title><rect x="780.5" y="291.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="783.5" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.06%)</title><rect x="781.4" y="323.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="784.4" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.06%)</title><rect x="781.4" y="307.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="784.4" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.06%)</title><rect x="781.4" y="291.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="784.4" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="781.4" y="275.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="784.4" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.06%)</title><rect x="781.4" y="259.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="784.4" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (2 samples, 0.03%)</title><rect x="781.6" y="243.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="784.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.14%)</title><rect x="783.1" y="387.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="786.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.14%)</title><rect x="783.1" y="371.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="786.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.14%)</title><rect x="783.1" y="355.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.06%)</title><rect x="783.3" y="339.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="786.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="783.4" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="783.4" y="307.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="786.4" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="783.4" y="291.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="786.4" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="783.4" y="275.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="786.4" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="783.4" y="259.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="786.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.05%)</title><rect x="784.2" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 0.31%)</title><rect x="784.7" y="387.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 0.31%)</title><rect x="784.7" y="371.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="787.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 0.31%)</title><rect x="784.7" y="355.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="787.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 0.31%)</title><rect x="784.7" y="339.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 0.31%)</title><rect x="784.7" y="323.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.7" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (17 samples, 0.26%)</title><rect x="785.1" y="307.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="788.1" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.15%)</title><rect x="785.8" y="291.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="788.8" y="302.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="787.6" y="291.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="790.6" y="302.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.03%)</title><rect x="787.6" y="275.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="790.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (864 samples, 13.27%)</title><rect x="788.5" y="419.0" width="156.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.5" y="430.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (864 samples, 13.27%)</title><rect x="788.5" y="403.0" width="156.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="791.5" y="414.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (228 samples, 3.50%)</title><rect x="788.5" y="387.0" width="41.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.5" y="398.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.06%)</title><rect x="788.5" y="371.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.06%)</title><rect x="788.5" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.06%)</title><rect x="788.5" y="339.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.06%)</title><rect x="788.5" y="323.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="791.5" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.06%)</title><rect x="788.5" y="307.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.5" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="788.5" y="291.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="791.5" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.05%)</title><rect x="788.5" y="275.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="791.5" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="788.7" y="259.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="791.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (215 samples, 3.30%)</title><rect x="789.2" y="371.0" width="39.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.2" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.12%)</title><rect x="789.2" y="355.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="792.2" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="789.8" y="339.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="792.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.05%)</title><rect x="790.1" y="339.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="793.1" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="790.1" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="793.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (207 samples, 3.18%)</title><rect x="790.7" y="355.0" width="37.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="793.7" y="366.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (207 samples, 3.18%)</title><rect x="790.7" y="339.0" width="37.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="793.7" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (206 samples, 3.16%)</title><rect x="790.9" y="323.0" width="37.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="793.9" y="334.0">one..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.06%)</title><rect x="791.1" y="307.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.1" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="791.4" y="291.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="794.4" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (201 samples, 3.09%)</title><rect x="791.8" y="307.0" width="36.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.8" y="318.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="791.8" y="291.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.8" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="791.8" y="275.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.8" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="792.1" y="259.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="795.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (197 samples, 3.02%)</title><rect x="792.5" y="291.0" width="35.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.5" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (196 samples, 3.01%)</title><rect x="792.7" y="275.0" width="35.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="795.7" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (196 samples, 3.01%)</title><rect x="792.7" y="259.0" width="35.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="795.7" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (192 samples, 2.95%)</title><rect x="792.9" y="243.0" width="34.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="795.9" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (192 samples, 2.95%)</title><rect x="792.9" y="227.0" width="34.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.9" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (192 samples, 2.95%)</title><rect x="792.9" y="211.0" width="34.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.9" y="222.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.05%)</title><rect x="793.6" y="195.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="796.6" y="206.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="794.3" y="195.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="797.3" y="206.0"></text>
</g>
<g>
<title>write (182 samples, 2.79%)</title><rect x="794.7" y="195.0" width="32.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="797.7" y="206.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.05%)</title><rect x="827.6" y="243.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="830.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.12%)</title><rect x="828.2" y="371.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="831.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.09%)</title><rect x="828.2" y="355.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="831.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.08%)</title><rect x="828.2" y="339.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="831.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.05%)</title><rect x="828.4" y="323.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="828.6" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.6" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="829.3" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="832.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (636 samples, 9.77%)</title><rect x="829.8" y="387.0" width="115.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.8" y="398.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (636 samples, 9.77%)</title><rect x="829.8" y="371.0" width="115.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="832.8" y="382.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (636 samples, 9.77%)</title><rect x="829.8" y="355.0" width="115.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="832.8" y="366.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (634 samples, 9.73%)</title><rect x="830.2" y="339.0" width="114.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.2" y="350.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (632 samples, 9.70%)</title><rect x="830.2" y="323.0" width="114.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="833.2" y="334.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (632 samples, 9.70%)</title><rect x="830.2" y="307.0" width="114.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="833.2" y="318.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (627 samples, 9.63%)</title><rect x="830.9" y="291.0" width="113.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="833.9" y="302.0">Java_org_rocks..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (2 samples, 0.03%)</title><rect x="831.1" y="275.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="834.1" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="831.5" y="275.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="834.5" y="286.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.03%)</title><rect x="832.0" y="275.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="835.0" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (619 samples, 9.50%)</title><rect x="832.4" y="275.0" width="112.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="835.4" y="286.0">rocksdb_put_he..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="832.9" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="835.9" y="270.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="833.6" y="259.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="836.6" y="270.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.08%)</title><rect x="834.0" y="259.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="837.0" y="270.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="834.4" y="243.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="837.4" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.09%)</title><rect x="834.9" y="259.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="837.9" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="835.4" y="243.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="838.4" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="835.6" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="838.6" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="836.0" y="259.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="839.0" y="270.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.05%)</title><rect x="836.5" y="259.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="839.5" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.05%)</title><rect x="837.1" y="259.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="840.1" y="270.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.05%)</title><rect x="837.1" y="243.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="840.1" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="837.1" y="227.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="840.1" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="837.1" y="211.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="840.1" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="837.1" y="195.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="840.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (588 samples, 9.03%)</title><rect x="837.6" y="259.0" width="106.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="840.6" y="270.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (587 samples, 9.01%)</title><rect x="837.8" y="243.0" width="106.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.8" y="254.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (585 samples, 8.98%)</title><rect x="837.8" y="227.0" width="106.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="840.8" y="238.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (574 samples, 8.81%)</title><rect x="838.0" y="211.0" width="104.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="841.0" y="222.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (572 samples, 8.78%)</title><rect x="838.2" y="195.0" width="103.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.2" y="206.0">rocksdb::DBI..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="840.9" y="179.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="843.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.03%)</title><rect x="841.4" y="179.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="844.4" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="841.4" y="163.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="844.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (157 samples, 2.41%)</title><rect x="841.8" y="179.0" width="28.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="844.8" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.03%)</title><rect x="841.8" y="163.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="844.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (151 samples, 2.32%)</title><rect x="842.1" y="163.0" width="27.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="845.1" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (151 samples, 2.32%)</title><rect x="842.1" y="147.0" width="27.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="845.1" y="158.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="842.3" y="131.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="845.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (148 samples, 2.27%)</title><rect x="842.7" y="131.0" width="26.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="845.7" y="142.0">r..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (3 samples, 0.05%)</title><rect x="843.2" y="115.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="846.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (6 samples, 0.09%)</title><rect x="843.8" y="115.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="846.8" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="844.3" y="99.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="847.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (135 samples, 2.07%)</title><rect x="844.9" y="115.0" width="24.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="847.9" y="126.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="845.0" y="99.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="848.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (132 samples, 2.03%)</title><rect x="845.4" y="99.0" width="23.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="848.4" y="110.0">r..</text>
</g>
<g>
<title>write (131 samples, 2.01%)</title><rect x="845.6" y="83.0" width="23.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="848.6" y="94.0">w..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="869.7" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="872.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (42 samples, 0.64%)</title><rect x="870.8" y="179.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="873.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (41 samples, 0.63%)</title><rect x="870.9" y="163.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="873.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (39 samples, 0.60%)</title><rect x="871.3" y="147.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="874.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (37 samples, 0.57%)</title><rect x="871.7" y="131.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="874.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (32 samples, 0.49%)</title><rect x="872.0" y="115.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="875.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (27 samples, 0.41%)</title><rect x="872.9" y="99.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="875.5" y="83.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="878.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.14%)</title><rect x="876.0" y="83.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="879.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.09%)</title><rect x="876.6" y="67.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="879.6" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.08%)</title><rect x="876.7" y="51.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="879.7" y="62.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.05%)</title><rect x="877.8" y="115.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="880.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (29 samples, 0.45%)</title><rect x="878.4" y="179.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.4" y="190.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.05%)</title><rect x="878.6" y="163.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="881.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (24 samples, 0.37%)</title><rect x="879.3" y="163.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.37%)</title><rect x="879.3" y="147.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.35%)</title><rect x="879.5" y="131.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.5" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.05%)</title><rect x="879.5" y="115.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="882.5" y="126.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.05%)</title><rect x="879.5" y="99.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="882.5" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="879.5" y="83.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="882.5" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="879.5" y="67.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="882.5" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="879.5" y="51.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="882.5" y="62.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="879.5" y="35.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="882.5" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (18 samples, 0.28%)</title><rect x="880.0" y="115.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="883.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.23%)</title><rect x="880.6" y="99.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="883.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (13 samples, 0.20%)</title><rect x="880.9" y="83.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="883.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.05%)</title><rect x="882.7" y="67.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.03%)</title><rect x="883.3" y="115.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="886.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (174 samples, 2.67%)</title><rect x="883.8" y="179.0" width="31.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="886.8" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (173 samples, 2.66%)</title><rect x="884.0" y="163.0" width="31.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="887.0" y="174.0">ro..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.05%)</title><rect x="885.1" y="147.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="888.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="885.1" y="131.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="888.1" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (163 samples, 2.50%)</title><rect x="885.8" y="147.0" width="29.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="888.8" y="158.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.05%)</title><rect x="915.3" y="179.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="918.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.03%)</title><rect x="915.3" y="163.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="918.3" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.03%)</title><rect x="915.3" y="147.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="918.3" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="915.3" y="131.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="918.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (14 samples, 0.21%)</title><rect x="915.9" y="179.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="918.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.12%)</title><rect x="916.6" y="163.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="919.6" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.12%)</title><rect x="916.6" y="147.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="919.6" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.03%)</title><rect x="918.1" y="163.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="921.1" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="918.1" y="147.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="921.1" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="918.1" y="131.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="921.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (109 samples, 1.67%)</title><rect x="918.4" y="179.0" width="19.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="921.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (108 samples, 1.66%)</title><rect x="918.4" y="163.0" width="19.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="921.4" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (82 samples, 1.26%)</title><rect x="919.9" y="147.0" width="14.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (75 samples, 1.15%)</title><rect x="919.9" y="131.0" width="13.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="922.9" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.11%)</title><rect x="933.5" y="131.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="936.5" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.09%)</title><rect x="933.6" y="115.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="936.6" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.09%)</title><rect x="933.6" y="99.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="936.6" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (17 samples, 0.26%)</title><rect x="934.9" y="147.0" width="3.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="937.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (17 samples, 0.26%)</title><rect x="938.2" y="179.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="941.2" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (13 samples, 0.20%)</title><rect x="938.5" y="163.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="941.5" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.20%)</title><rect x="938.5" y="147.0" width="2.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="941.5" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.03%)</title><rect x="940.9" y="163.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.9" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="940.9" y="147.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="943.9" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="940.9" y="131.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="943.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="942.3" y="211.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.05%)</title><rect x="942.7" y="211.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.7" y="222.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.05%)</title><rect x="942.7" y="195.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="945.7" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="943.2" y="211.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="946.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="943.8" y="227.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.03%)</title><rect x="944.7" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="947.7" y="334.0"></text>
</g>
<g>
<title>[worker tid=36611] (1,351 samples, 20.74%)</title><rect x="945.2" y="483.0" width="244.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="948.2" y="494.0">[worker tid=36611]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="945.4" y="467.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.4" y="478.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.09%)</title><rect x="946.0" y="467.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="949.0" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,339 samples, 20.56%)</title><rect x="947.0" y="467.0" width="242.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="950.0" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,339 samples, 20.56%)</title><rect x="947.0" y="451.0" width="242.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="950.0" y="462.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,339 samples, 20.56%)</title><rect x="947.0" y="435.0" width="242.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="950.0" y="446.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (388 samples, 5.96%)</title><rect x="947.2" y="419.0" width="70.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="950.2" y="430.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (386 samples, 5.93%)</title><rect x="947.6" y="403.0" width="69.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.6" y="414.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (358 samples, 5.50%)</title><rect x="947.8" y="387.0" width="64.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.8" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.06%)</title><rect x="948.1" y="371.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="951.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.06%)</title><rect x="948.1" y="355.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="951.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.06%)</title><rect x="948.1" y="339.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="951.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.06%)</title><rect x="948.1" y="323.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="951.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.06%)</title><rect x="948.1" y="307.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="951.1" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.03%)</title><rect x="948.5" y="291.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="951.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (352 samples, 5.40%)</title><rect x="948.9" y="371.0" width="63.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="951.9" y="382.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (352 samples, 5.40%)</title><rect x="948.9" y="355.0" width="63.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="951.9" y="366.0">jdk/int..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (343 samples, 5.27%)</title><rect x="950.5" y="339.0" width="62.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="953.5" y="350.0">Unsafe..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title><rect x="950.7" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="953.7" y="334.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.05%)</title><rect x="951.0" y="323.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="954.0" y="334.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (2 samples, 0.03%)</title><rect x="951.2" y="307.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="954.2" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (331 samples, 5.08%)</title><rect x="951.8" y="323.0" width="59.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.8" y="334.0">Parker..</text>
</g>
<g>
<title>__psynch_cvwait (326 samples, 5.01%)</title><rect x="952.3" y="307.0" width="59.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="955.3" y="318.0">__psyn..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.03%)</title><rect x="1011.4" y="307.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1014.4" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="1011.9" y="323.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1014.9" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.05%)</title><rect x="1011.9" y="307.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.9" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="1011.9" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.09%)</title><rect x="1012.6" y="387.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1015.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.09%)</title><rect x="1012.6" y="371.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1015.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.08%)</title><rect x="1012.8" y="355.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1015.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="1013.4" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1016.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="1013.4" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1016.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="1013.4" y="307.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1016.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 0.32%)</title><rect x="1013.7" y="387.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1016.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 0.32%)</title><rect x="1013.7" y="371.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1016.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 0.32%)</title><rect x="1013.7" y="355.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1016.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 0.32%)</title><rect x="1013.7" y="339.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1016.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (21 samples, 0.32%)</title><rect x="1013.7" y="323.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1016.7" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.29%)</title><rect x="1014.1" y="307.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1017.1" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.21%)</title><rect x="1015.0" y="291.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1018.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (950 samples, 14.59%)</title><rect x="1017.5" y="419.0" width="172.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1020.5" y="430.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (950 samples, 14.59%)</title><rect x="1017.5" y="403.0" width="172.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1020.5" y="414.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (242 samples, 3.72%)</title><rect x="1017.5" y="387.0" width="43.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1020.5" y="398.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.12%)</title><rect x="1017.5" y="371.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1020.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.12%)</title><rect x="1017.5" y="355.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1020.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.12%)</title><rect x="1017.5" y="339.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1020.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.09%)</title><rect x="1017.7" y="323.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1020.7" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.09%)</title><rect x="1017.7" y="307.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1020.7" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.09%)</title><rect x="1017.7" y="291.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1020.7" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (4 samples, 0.06%)</title><rect x="1017.7" y="275.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1020.7" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.06%)</title><rect x="1017.7" y="259.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1020.7" y="270.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (2 samples, 0.03%)</title><rect x="1018.4" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1021.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (226 samples, 3.47%)</title><rect x="1019.0" y="371.0" width="40.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.0" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.11%)</title><rect x="1019.0" y="355.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1022.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.11%)</title><rect x="1019.0" y="339.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1022.0" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="1019.0" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1022.0" y="334.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="1019.0" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1022.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="1019.0" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1022.0" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.08%)</title><rect x="1019.3" y="323.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1022.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.08%)</title><rect x="1019.3" y="307.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1022.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (219 samples, 3.36%)</title><rect x="1020.2" y="355.0" width="39.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1023.2" y="366.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (219 samples, 3.36%)</title><rect x="1020.2" y="339.0" width="39.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.2" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (218 samples, 3.35%)</title><rect x="1020.4" y="323.0" width="39.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1023.4" y="334.0">one..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.12%)</title><rect x="1020.6" y="307.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.6" y="318.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.03%)</title><rect x="1020.6" y="291.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.6" y="302.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (4 samples, 0.06%)</title><rect x="1021.0" y="291.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.0" y="302.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (3 samples, 0.05%)</title><rect x="1021.1" y="275.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.1" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="1021.7" y="291.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1024.7" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (209 samples, 3.21%)</title><rect x="1022.0" y="307.0" width="37.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1025.0" y="318.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.14%)</title><rect x="1022.0" y="291.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1025.0" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.14%)</title><rect x="1022.0" y="275.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1025.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1022.0" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.0" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1022.2" y="243.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1025.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="1022.2" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1025.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="1022.2" y="211.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1025.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.03%)</title><rect x="1022.2" y="195.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1025.2" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.09%)</title><rect x="1022.6" y="259.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.6" y="270.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.09%)</title><rect x="1022.6" y="243.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1025.6" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.08%)</title><rect x="1022.8" y="227.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1025.8" y="238.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="1023.3" y="211.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1026.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (200 samples, 3.07%)</title><rect x="1023.7" y="291.0" width="36.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1026.7" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (200 samples, 3.07%)</title><rect x="1023.7" y="275.0" width="36.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.7" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (200 samples, 3.07%)</title><rect x="1023.7" y="259.0" width="36.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1026.7" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (195 samples, 2.99%)</title><rect x="1023.9" y="243.0" width="35.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1026.9" y="254.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (195 samples, 2.99%)</title><rect x="1023.9" y="227.0" width="35.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1026.9" y="238.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (195 samples, 2.99%)</title><rect x="1023.9" y="211.0" width="35.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.9" y="222.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.05%)</title><rect x="1025.3" y="195.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1028.3" y="206.0"></text>
</g>
<g>
<title>write (183 samples, 2.81%)</title><rect x="1026.0" y="195.0" width="33.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1029.0" y="206.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.06%)</title><rect x="1059.2" y="243.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1062.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.11%)</title><rect x="1059.9" y="371.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1062.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="1059.9" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1062.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="1060.1" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1063.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.06%)</title><rect x="1060.5" y="355.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1063.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="1060.5" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1063.5" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="1060.8" y="339.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1063.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (708 samples, 10.87%)</title><rect x="1061.4" y="387.0" width="128.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1064.4" y="398.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (708 samples, 10.87%)</title><rect x="1061.4" y="371.0" width="128.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1064.4" y="382.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (708 samples, 10.87%)</title><rect x="1061.4" y="355.0" width="128.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1064.4" y="366.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (707 samples, 10.86%)</title><rect x="1061.5" y="339.0" width="128.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1064.5" y="350.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (703 samples, 10.79%)</title><rect x="1061.5" y="323.0" width="127.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.5" y="334.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (703 samples, 10.79%)</title><rect x="1061.5" y="307.0" width="127.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1064.5" y="318.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (696 samples, 10.69%)</title><rect x="1062.8" y="291.0" width="126.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1065.8" y="302.0">Java_org_rocksdb..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (692 samples, 10.62%)</title><rect x="1063.5" y="275.0" width="125.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.5" y="286.0">rocksdb_put_hel..</text>
</g>
<g>
<title>_setcontext (2 samples, 0.03%)</title><rect x="1063.7" y="259.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1066.7" y="270.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.08%)</title><rect x="1064.3" y="259.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1067.3" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.06%)</title><rect x="1064.4" y="243.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1067.4" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.08%)</title><rect x="1065.4" y="259.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1068.4" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.05%)</title><rect x="1066.4" y="259.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1069.4" y="270.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.05%)</title><rect x="1066.4" y="243.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1069.4" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="1066.6" y="227.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1069.6" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="1066.6" y="211.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1069.6" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="1066.6" y="195.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1069.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (673 samples, 10.33%)</title><rect x="1067.0" y="259.0" width="121.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.0" y="270.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (672 samples, 10.32%)</title><rect x="1067.2" y="243.0" width="121.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.2" y="254.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (668 samples, 10.26%)</title><rect x="1067.2" y="227.0" width="121.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.2" y="238.0">rocksdb::DB::Pu..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (647 samples, 9.93%)</title><rect x="1067.5" y="211.0" width="117.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.5" y="222.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (639 samples, 9.81%)</title><rect x="1068.1" y="195.0" width="115.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.1" y="206.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (187 samples, 2.87%)</title><rect x="1073.0" y="179.0" width="33.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.0" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (186 samples, 2.86%)</title><rect x="1073.0" y="163.0" width="33.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.0" y="174.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (182 samples, 2.79%)</title><rect x="1073.5" y="147.0" width="33.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.5" y="158.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.06%)</title><rect x="1073.9" y="131.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (176 samples, 2.70%)</title><rect x="1074.6" y="131.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1077.6" y="142.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="1075.1" y="115.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (2 samples, 0.03%)</title><rect x="1075.3" y="99.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (170 samples, 2.61%)</title><rect x="1075.7" y="115.0" width="30.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.7" y="126.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (168 samples, 2.58%)</title><rect x="1076.0" y="99.0" width="30.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.0" y="110.0">ro..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="1076.0" y="83.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.0" y="94.0"></text>
</g>
<g>
<title>write (165 samples, 2.53%)</title><rect x="1076.6" y="83.0" width="29.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1079.6" y="94.0">wr..</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.05%)</title><rect x="1106.8" y="179.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (44 samples, 0.68%)</title><rect x="1107.4" y="179.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (40 samples, 0.61%)</title><rect x="1108.1" y="163.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (38 samples, 0.58%)</title><rect x="1108.5" y="147.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (37 samples, 0.57%)</title><rect x="1108.7" y="131.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (33 samples, 0.51%)</title><rect x="1109.2" y="115.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (32 samples, 0.49%)</title><rect x="1109.4" y="99.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.4" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="1112.1" y="83.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1115.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.05%)</title><rect x="1112.5" y="83.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="1112.6" y="67.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.17%)</title><rect x="1113.2" y="83.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.11%)</title><rect x="1113.9" y="67.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.9" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.09%)</title><rect x="1114.1" y="51.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1117.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (28 samples, 0.43%)</title><rect x="1115.4" y="179.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (25 samples, 0.38%)</title><rect x="1115.9" y="163.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.37%)</title><rect x="1116.1" y="147.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.37%)</title><rect x="1116.1" y="131.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.1" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.05%)</title><rect x="1116.3" y="115.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1119.3" y="126.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.05%)</title><rect x="1116.3" y="99.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1119.3" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.05%)</title><rect x="1116.3" y="83.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1119.3" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="1116.3" y="67.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1119.3" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.05%)</title><rect x="1116.3" y="51.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1119.3" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (19 samples, 0.29%)</title><rect x="1116.8" y="115.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.26%)</title><rect x="1117.2" y="99.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.05%)</title><rect x="1117.3" y="83.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="1117.5" y="67.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (13 samples, 0.20%)</title><rect x="1117.9" y="83.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.11%)</title><rect x="1119.0" y="67.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.06%)</title><rect x="1119.3" y="51.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.3" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="1119.7" y="35.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1122.7" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (173 samples, 2.66%)</title><rect x="1120.4" y="179.0" width="31.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.4" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (172 samples, 2.64%)</title><rect x="1120.4" y="163.0" width="31.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.4" y="174.0">ro..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.05%)</title><rect x="1121.3" y="147.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.3" y="158.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.05%)</title><rect x="1121.3" y="131.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1124.3" y="142.0"></text>
</g>
<g>
<title>mach_timebase_info (2 samples, 0.03%)</title><rect x="1121.5" y="115.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1124.5" y="126.0"></text>
</g>
<g>
<title>xdrrec_ops (164 samples, 2.52%)</title><rect x="1121.9" y="147.0" width="29.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1124.9" y="158.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (6 samples, 0.09%)</title><rect x="1151.8" y="179.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.06%)</title><rect x="1151.8" y="163.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.8" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.03%)</title><rect x="1152.0" y="147.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="1152.0" y="131.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1155.0" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.03%)</title><rect x="1152.5" y="163.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="1152.5" y="147.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1155.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (13 samples, 0.20%)</title><rect x="1152.9" y="179.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.14%)</title><rect x="1152.9" y="163.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.9" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.12%)</title><rect x="1152.9" y="147.0" width="1.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1155.9" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (4 samples, 0.06%)</title><rect x="1154.5" y="163.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.5" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.06%)</title><rect x="1154.5" y="147.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1157.5" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.06%)</title><rect x="1154.5" y="131.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1157.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (145 samples, 2.23%)</title><rect x="1155.2" y="179.0" width="26.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.2" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (142 samples, 2.18%)</title><rect x="1155.2" y="163.0" width="25.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.2" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (113 samples, 1.73%)</title><rect x="1156.7" y="147.0" width="20.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.7" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (104 samples, 1.60%)</title><rect x="1156.7" y="131.0" width="18.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1159.7" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.12%)</title><rect x="1175.5" y="131.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1178.5" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.09%)</title><rect x="1175.9" y="115.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1178.9" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.09%)</title><rect x="1175.9" y="99.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1178.9" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (21 samples, 0.32%)</title><rect x="1177.1" y="147.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1180.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (11 samples, 0.17%)</title><rect x="1181.5" y="179.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.15%)</title><rect x="1181.5" y="163.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.5" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.15%)</title><rect x="1181.5" y="147.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1184.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (3 samples, 0.05%)</title><rect x="1183.8" y="195.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="1184.4" y="195.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.09%)</title><rect x="1184.9" y="211.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="1185.1" y="195.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="1185.3" y="179.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1185.3" y="163.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1188.3" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="1185.7" y="195.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.06%)</title><rect x="1186.0" y="211.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.0" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="1186.4" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.08%)</title><rect x="1186.7" y="211.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="222.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.06%)</title><rect x="1186.9" y="195.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1189.9" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.05%)</title><rect x="1187.1" y="179.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1190.1" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.05%)</title><rect x="1187.6" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="1188.2" y="227.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (3 samples, 0.05%)</title><rect x="1188.9" y="323.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1191.9" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1189.1" y="307.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1192.1" y="318.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="1189.6" y="467.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1192.6" y="478.0"></text>
</g>
</g>
</svg>
