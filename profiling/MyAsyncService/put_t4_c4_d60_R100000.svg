<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (17,056 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=39171] (531 samples, 3.11%)</title><rect x="10.0" y="483.0" width="36.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="494.0">[NI..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (26 samples, 0.15%)</title><rect x="10.2" y="467.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.2" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (24 samples, 0.14%)</title><rect x="10.3" y="451.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.3" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (17 samples, 0.10%)</title><rect x="10.6" y="435.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.6" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (16 samples, 0.09%)</title><rect x="10.7" y="419.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.7" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.08%)</title><rect x="10.8" y="403.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="13.8" y="414.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (494 samples, 2.90%)</title><rect x="12.3" y="467.0" width="34.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.3" y="478.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (312 samples, 1.83%)</title><rect x="12.4" y="451.0" width="21.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.4" y="462.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.02%)</title><rect x="12.5" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (305 samples, 1.79%)</title><rect x="12.9" y="435.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.9" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (305 samples, 1.79%)</title><rect x="12.9" y="419.0" width="21.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.9" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (305 samples, 1.79%)</title><rect x="12.9" y="403.0" width="21.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.9" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (285 samples, 1.67%)</title><rect x="12.9" y="387.0" width="19.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="398.0"></text>
</g>
<g>
<title>kevent (255 samples, 1.50%)</title><rect x="15.0" y="371.0" width="17.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="18.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.05%)</title><rect x="32.6" y="387.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.02%)</title><rect x="33.0" y="371.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.02%)</title><rect x="33.0" y="355.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="36.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.02%)</title><rect x="33.0" y="339.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.02%)</title><rect x="33.0" y="323.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (6 samples, 0.04%)</title><rect x="33.3" y="387.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.3" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (6 samples, 0.04%)</title><rect x="33.3" y="371.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.3" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.04%)</title><rect x="33.3" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.3" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.04%)</title><rect x="33.3" y="339.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.3" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.04%)</title><rect x="33.3" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.3" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (180 samples, 1.06%)</title><rect x="34.0" y="451.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (178 samples, 1.04%)</title><rect x="34.1" y="435.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.1" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (101 samples, 0.59%)</title><rect x="34.2" y="419.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.2" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (79 samples, 0.46%)</title><rect x="34.2" y="403.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="37.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (79 samples, 0.46%)</title><rect x="34.2" y="387.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (78 samples, 0.46%)</title><rect x="34.3" y="371.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (76 samples, 0.45%)</title><rect x="34.4" y="355.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.02%)</title><rect x="34.4" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.02%)</title><rect x="34.4" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (72 samples, 0.42%)</title><rect x="34.7" y="339.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="37.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (72 samples, 0.42%)</title><rect x="34.7" y="323.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="37.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (72 samples, 0.42%)</title><rect x="34.7" y="307.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="37.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (56 samples, 0.33%)</title><rect x="34.7" y="291.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="37.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.02%)</title><rect x="34.7" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.02%)</title><rect x="34.7" y="259.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="37.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.02%)</title><rect x="34.7" y="243.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.02%)</title><rect x="35.0" y="275.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="38.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (48 samples, 0.28%)</title><rect x="35.3" y="275.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (48 samples, 0.28%)</title><rect x="35.3" y="259.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (48 samples, 0.28%)</title><rect x="35.3" y="243.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (48 samples, 0.28%)</title><rect x="35.3" y="227.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.3" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (48 samples, 0.28%)</title><rect x="35.3" y="211.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="38.3" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (42 samples, 0.25%)</title><rect x="35.5" y="195.0" width="2.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="38.5" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (26 samples, 0.15%)</title><rect x="36.4" y="179.0" width="1.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="39.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 0.09%)</title><rect x="38.6" y="291.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 0.09%)</title><rect x="38.6" y="275.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 0.09%)</title><rect x="38.6" y="259.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (16 samples, 0.09%)</title><rect x="38.6" y="243.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (11 samples, 0.06%)</title><rect x="39.7" y="403.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.7" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.03%)</title><rect x="40.0" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="40.0" y="371.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.02%)</title><rect x="40.4" y="403.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.4" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.02%)</title><rect x="40.4" y="387.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.4" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.02%)</title><rect x="40.4" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.02%)</title><rect x="40.7" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.7" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.02%)</title><rect x="40.7" y="387.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (76 samples, 0.45%)</title><rect x="41.2" y="419.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (76 samples, 0.45%)</title><rect x="41.2" y="403.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (73 samples, 0.43%)</title><rect x="41.4" y="387.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.04%)</title><rect x="41.4" y="371.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.04%)</title><rect x="41.4" y="355.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (66 samples, 0.39%)</title><rect x="41.9" y="371.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (66 samples, 0.39%)</title><rect x="41.9" y="355.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (66 samples, 0.39%)</title><rect x="41.9" y="339.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (64 samples, 0.38%)</title><rect x="42.0" y="323.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (64 samples, 0.38%)</title><rect x="42.0" y="307.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.0" y="318.0"></text>
</g>
<g>
<title>read (61 samples, 0.36%)</title><rect x="42.2" y="291.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="45.2" y="302.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (523 samples, 3.07%)</title><rect x="46.7" y="483.0" width="36.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="49.7" y="494.0">[NI..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (32 samples, 0.19%)</title><rect x="46.8" y="467.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="49.8" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (31 samples, 0.18%)</title><rect x="46.8" y="451.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="49.8" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (26 samples, 0.15%)</title><rect x="46.8" y="435.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="49.8" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (25 samples, 0.15%)</title><rect x="46.9" y="419.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="49.9" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (23 samples, 0.13%)</title><rect x="47.0" y="403.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="50.0" y="414.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.03%)</title><rect x="49.1" y="467.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="52.1" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (484 samples, 2.84%)</title><rect x="49.4" y="467.0" width="33.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.4" y="478.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (304 samples, 1.78%)</title><rect x="49.5" y="451.0" width="21.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.5" y="462.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (8 samples, 0.05%)</title><rect x="49.6" y="435.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.03%)</title><rect x="49.8" y="419.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.8" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.03%)</title><rect x="49.8" y="403.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (292 samples, 1.71%)</title><rect x="50.3" y="435.0" width="20.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (292 samples, 1.71%)</title><rect x="50.3" y="419.0" width="20.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (291 samples, 1.71%)</title><rect x="50.4" y="403.0" width="20.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (260 samples, 1.52%)</title><rect x="50.4" y="387.0" width="18.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.4" y="398.0"></text>
</g>
<g>
<title>kevent (233 samples, 1.37%)</title><rect x="52.3" y="371.0" width="16.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="55.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (11 samples, 0.06%)</title><rect x="68.4" y="387.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.03%)</title><rect x="68.8" y="371.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.02%)</title><rect x="68.9" y="355.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (13 samples, 0.08%)</title><rect x="69.4" y="387.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.4" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (13 samples, 0.08%)</title><rect x="69.4" y="371.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.4" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (12 samples, 0.07%)</title><rect x="69.4" y="355.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.4" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (12 samples, 0.07%)</title><rect x="69.4" y="339.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (12 samples, 0.07%)</title><rect x="69.4" y="323.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="72.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.02%)</title><rect x="70.3" y="387.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (179 samples, 1.05%)</title><rect x="70.5" y="451.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="73.5" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (176 samples, 1.03%)</title><rect x="70.7" y="435.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (99 samples, 0.58%)</title><rect x="70.7" y="419.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (80 samples, 0.47%)</title><rect x="70.9" y="403.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="73.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (80 samples, 0.47%)</title><rect x="70.9" y="387.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (77 samples, 0.45%)</title><rect x="71.1" y="371.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (74 samples, 0.43%)</title><rect x="71.3" y="355.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.02%)</title><rect x="71.3" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (70 samples, 0.41%)</title><rect x="71.6" y="339.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (70 samples, 0.41%)</title><rect x="71.6" y="323.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (70 samples, 0.41%)</title><rect x="71.6" y="307.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (52 samples, 0.30%)</title><rect x="71.6" y="291.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="74.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (50 samples, 0.29%)</title><rect x="71.7" y="275.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (50 samples, 0.29%)</title><rect x="71.7" y="259.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (50 samples, 0.29%)</title><rect x="71.7" y="243.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="74.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (50 samples, 0.29%)</title><rect x="71.7" y="227.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.7" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (50 samples, 0.29%)</title><rect x="71.7" y="211.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.7" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (47 samples, 0.28%)</title><rect x="71.9" y="195.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="74.9" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.03%)</title><rect x="72.3" y="179.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="75.3" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (32 samples, 0.19%)</title><rect x="72.7" y="179.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="75.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 0.09%)</title><rect x="75.3" y="291.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 0.09%)</title><rect x="75.3" y="275.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 0.09%)</title><rect x="75.3" y="259.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="78.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (16 samples, 0.09%)</title><rect x="75.3" y="243.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.3" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.03%)</title><rect x="76.4" y="403.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.02%)</title><rect x="77.0" y="403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="77.3" y="403.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.3" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (76 samples, 0.45%)</title><rect x="77.6" y="419.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.6" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (76 samples, 0.45%)</title><rect x="77.6" y="403.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (76 samples, 0.45%)</title><rect x="77.6" y="387.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.05%)</title><rect x="77.6" y="371.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.05%)</title><rect x="77.6" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.03%)</title><rect x="77.9" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.03%)</title><rect x="77.9" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (67 samples, 0.39%)</title><rect x="78.2" y="371.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="81.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (67 samples, 0.39%)</title><rect x="78.2" y="355.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (67 samples, 0.39%)</title><rect x="78.2" y="339.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (67 samples, 0.39%)</title><rect x="78.2" y="323.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (67 samples, 0.39%)</title><rect x="78.2" y="307.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.2" y="318.0"></text>
</g>
<g>
<title>read (65 samples, 0.38%)</title><rect x="78.4" y="291.0" width="4.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="81.4" y="302.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=38659] (1,197 samples, 7.02%)</title><rect x="82.9" y="483.0" width="82.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="85.9" y="494.0">[NIO Sele..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (51 samples, 0.30%)</title><rect x="83.0" y="467.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="86.0" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (49 samples, 0.29%)</title><rect x="83.1" y="451.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="86.1" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (42 samples, 0.25%)</title><rect x="83.3" y="435.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="86.3" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (41 samples, 0.24%)</title><rect x="83.4" y="419.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="86.4" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (40 samples, 0.23%)</title><rect x="83.5" y="403.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="86.5" y="414.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.02%)</title><rect x="86.6" y="467.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="89.6" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,137 samples, 6.67%)</title><rect x="86.9" y="467.0" width="78.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.9" y="478.0">one/nio/s..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (738 samples, 4.33%)</title><rect x="87.4" y="451.0" width="51.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="90.4" y="462.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (15 samples, 0.09%)</title><rect x="87.7" y="435.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.02%)</title><rect x="87.8" y="419.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (9 samples, 0.05%)</title><rect x="88.1" y="419.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.1" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (9 samples, 0.05%)</title><rect x="88.1" y="403.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.1" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (5 samples, 0.03%)</title><rect x="88.1" y="387.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.02%)</title><rect x="88.5" y="387.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.5" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.02%)</title><rect x="88.8" y="435.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="91.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (713 samples, 4.18%)</title><rect x="89.1" y="435.0" width="49.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.1" y="446.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (713 samples, 4.18%)</title><rect x="89.1" y="419.0" width="49.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.1" y="430.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (712 samples, 4.17%)</title><rect x="89.1" y="403.0" width="49.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.1" y="414.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (672 samples, 3.94%)</title><rect x="89.2" y="387.0" width="46.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.2" y="398.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (7 samples, 0.04%)</title><rect x="91.4" y="371.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="94.4" y="382.0"></text>
</g>
<g>
<title>kevent (634 samples, 3.72%)</title><rect x="91.8" y="371.0" width="43.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="94.8" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (20 samples, 0.12%)</title><rect x="135.7" y="387.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="138.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (15 samples, 0.09%)</title><rect x="136.1" y="371.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (10 samples, 0.06%)</title><rect x="136.1" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="139.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 0.06%)</title><rect x="136.1" y="339.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (10 samples, 0.06%)</title><rect x="136.1" y="323.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (4 samples, 0.02%)</title><rect x="136.8" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (4 samples, 0.02%)</title><rect x="136.8" y="339.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (6 samples, 0.04%)</title><rect x="137.1" y="387.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (12 samples, 0.07%)</title><rect x="137.5" y="387.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.5" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (12 samples, 0.07%)</title><rect x="137.5" y="371.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.5" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (10 samples, 0.06%)</title><rect x="137.6" y="355.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="140.6" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (10 samples, 0.06%)</title><rect x="137.6" y="339.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.6" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (10 samples, 0.06%)</title><rect x="137.6" y="323.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (391 samples, 2.29%)</title><rect x="138.5" y="451.0" width="27.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.5" y="462.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (383 samples, 2.25%)</title><rect x="138.6" y="435.0" width="26.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.6" y="446.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (229 samples, 1.34%)</title><rect x="138.6" y="419.0" width="15.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="141.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (172 samples, 1.01%)</title><rect x="139.2" y="403.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="142.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (172 samples, 1.01%)</title><rect x="139.2" y="387.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.02%)</title><rect x="139.2" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.02%)</title><rect x="139.2" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.02%)</title><rect x="139.2" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (166 samples, 0.97%)</title><rect x="139.7" y="371.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="142.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (159 samples, 0.93%)</title><rect x="140.1" y="355.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.04%)</title><rect x="140.1" y="339.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (152 samples, 0.89%)</title><rect x="140.6" y="339.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (152 samples, 0.89%)</title><rect x="140.6" y="323.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (152 samples, 0.89%)</title><rect x="140.6" y="307.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (124 samples, 0.73%)</title><rect x="140.6" y="291.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (123 samples, 0.72%)</title><rect x="140.7" y="275.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (123 samples, 0.72%)</title><rect x="140.7" y="259.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (123 samples, 0.72%)</title><rect x="140.7" y="243.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (123 samples, 0.72%)</title><rect x="140.7" y="227.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.7" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (122 samples, 0.72%)</title><rect x="140.8" y="211.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="143.8" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (106 samples, 0.62%)</title><rect x="141.7" y="195.0" width="7.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="144.7" y="206.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (6 samples, 0.04%)</title><rect x="142.2" y="179.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="145.2" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (5 samples, 0.03%)</title><rect x="142.3" y="163.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="145.3" y="174.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (5 samples, 0.03%)</title><rect x="142.3" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="145.3" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (5 samples, 0.03%)</title><rect x="142.3" y="131.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="145.3" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (7 samples, 0.04%)</title><rect x="143.2" y="179.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="146.2" y="190.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (8 samples, 0.05%)</title><rect x="143.7" y="179.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="146.7" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (60 samples, 0.35%)</title><rect x="144.4" y="179.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="147.4" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.04%)</title><rect x="148.6" y="179.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="151.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (25 samples, 0.15%)</title><rect x="149.4" y="291.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 0.15%)</title><rect x="149.4" y="275.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 0.15%)</title><rect x="149.4" y="259.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (25 samples, 0.15%)</title><rect x="149.4" y="243.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (22 samples, 0.13%)</title><rect x="151.1" y="403.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="154.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8 samples, 0.05%)</title><rect x="151.5" y="387.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="154.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.02%)</title><rect x="151.8" y="371.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.02%)</title><rect x="151.8" y="355.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.02%)</title><rect x="151.8" y="339.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="152.0" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="152.0" y="371.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.03%)</title><rect x="152.3" y="387.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.3" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.04%)</title><rect x="152.7" y="403.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="155.7" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.04%)</title><rect x="152.7" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.7" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.04%)</title><rect x="152.7" y="371.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.03%)</title><rect x="152.7" y="355.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.06%)</title><rect x="153.1" y="403.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="156.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.05%)</title><rect x="153.1" y="387.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="156.1" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.03%)</title><rect x="153.4" y="371.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.4" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.05%)</title><rect x="153.8" y="403.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="154.0" y="387.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (154 samples, 0.90%)</title><rect x="154.5" y="419.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (154 samples, 0.90%)</title><rect x="154.5" y="403.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (152 samples, 0.89%)</title><rect x="154.6" y="387.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (15 samples, 0.09%)</title><rect x="154.7" y="371.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="157.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (15 samples, 0.09%)</title><rect x="154.7" y="355.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="157.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (6 samples, 0.04%)</title><rect x="154.7" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="157.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.05%)</title><rect x="155.1" y="339.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="158.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.05%)</title><rect x="155.1" y="323.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.03%)</title><rect x="155.1" y="307.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="158.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (136 samples, 0.80%)</title><rect x="155.7" y="371.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="158.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (136 samples, 0.80%)</title><rect x="155.7" y="355.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="158.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (136 samples, 0.80%)</title><rect x="155.7" y="339.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (134 samples, 0.79%)</title><rect x="155.8" y="323.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="158.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (134 samples, 0.79%)</title><rect x="155.8" y="307.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="158.8" y="318.0"></text>
</g>
<g>
<title>read (121 samples, 0.71%)</title><rect x="156.7" y="291.0" width="8.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="159.7" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.04%)</title><rect x="165.1" y="435.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="168.1" y="446.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.02%)</title><rect x="165.2" y="419.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="168.2" y="430.0"></text>
</g>
<g>
<title>[tid=13315] (13 samples, 0.08%)</title><rect x="165.7" y="483.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="168.7" y="494.0"></text>
</g>
<g>
<title>thread_start (13 samples, 0.08%)</title><rect x="165.7" y="467.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="168.7" y="478.0"></text>
</g>
<g>
<title>_pthread_start (13 samples, 0.08%)</title><rect x="165.7" y="451.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="168.7" y="462.0"></text>
</g>
<g>
<title>_pthread_body (13 samples, 0.08%)</title><rect x="165.7" y="435.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="168.7" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 0.08%)</title><rect x="165.7" y="419.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="168.7" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (13 samples, 0.08%)</title><rect x="165.7" y="403.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="168.7" y="414.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (13 samples, 0.08%)</title><rect x="165.7" y="387.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="168.7" y="398.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (13 samples, 0.08%)</title><rect x="165.7" y="371.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="168.7" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (12 samples, 0.07%)</title><rect x="165.8" y="355.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="168.8" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (12 samples, 0.07%)</title><rect x="165.8" y="339.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="168.8" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (12 samples, 0.07%)</title><rect x="165.8" y="323.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="168.8" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (12 samples, 0.07%)</title><rect x="165.8" y="307.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="168.8" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.07%)</title><rect x="165.8" y="291.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="168.8" y="302.0"></text>
</g>
<g>
<title>[tid=40451] (50 samples, 0.29%)</title><rect x="166.9" y="483.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="169.9" y="494.0"></text>
</g>
<g>
<title>thread_start (50 samples, 0.29%)</title><rect x="166.9" y="467.0" width="3.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="169.9" y="478.0"></text>
</g>
<g>
<title>_pthread_start (50 samples, 0.29%)</title><rect x="166.9" y="451.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="169.9" y="462.0"></text>
</g>
<g>
<title>_pthread_body (50 samples, 0.29%)</title><rect x="166.9" y="435.0" width="3.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="169.9" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (50 samples, 0.29%)</title><rect x="166.9" y="419.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="169.9" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (50 samples, 0.29%)</title><rect x="166.9" y="403.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="169.9" y="414.0"></text>
</g>
<g>
<title>WatcherThread::run() (50 samples, 0.29%)</title><rect x="166.9" y="387.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="169.9" y="398.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (48 samples, 0.28%)</title><rect x="167.0" y="371.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="170.0" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (47 samples, 0.28%)</title><rect x="167.1" y="355.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="170.1" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (47 samples, 0.28%)</title><rect x="167.1" y="339.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="170.1" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (47 samples, 0.28%)</title><rect x="167.1" y="323.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="170.1" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (44 samples, 0.26%)</title><rect x="167.1" y="307.0" width="3.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="170.1" y="318.0"></text>
</g>
<g>
<title>[worker tid=27139] (3,621 samples, 21.23%)</title><rect x="170.4" y="483.0" width="250.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="173.4" y="494.0">[worker tid=27139]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.03%)</title><rect x="170.4" y="467.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="173.4" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.02%)</title><rect x="170.4" y="451.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="173.4" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,611 samples, 21.17%)</title><rect x="171.0" y="467.0" width="249.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="174.0" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,611 samples, 21.17%)</title><rect x="171.0" y="451.0" width="249.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.0" y="462.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,611 samples, 21.17%)</title><rect x="171.0" y="435.0" width="249.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="174.0" y="446.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (760 samples, 4.46%)</title><rect x="171.1" y="419.0" width="52.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.1" y="430.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (755 samples, 4.43%)</title><rect x="171.4" y="403.0" width="52.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.4" y="414.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (716 samples, 4.20%)</title><rect x="171.5" y="387.0" width="49.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="174.5" y="398.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (707 samples, 4.15%)</title><rect x="172.1" y="371.0" width="48.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.1" y="382.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (707 samples, 4.15%)</title><rect x="172.1" y="355.0" width="48.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.1" y="366.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (691 samples, 4.05%)</title><rect x="173.2" y="339.0" width="47.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="176.2" y="350.0">Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (663 samples, 3.89%)</title><rect x="174.2" y="323.0" width="45.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="177.2" y="334.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (653 samples, 3.83%)</title><rect x="174.6" y="307.0" width="45.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="177.6" y="318.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.02%)</title><rect x="219.8" y="307.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="222.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 0.06%)</title><rect x="221.0" y="387.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.06%)</title><rect x="221.0" y="371.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (11 samples, 0.06%)</title><rect x="221.0" y="355.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.02%)</title><rect x="221.1" y="339.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.02%)</title><rect x="221.1" y="323.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.02%)</title><rect x="221.1" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.1" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.02%)</title><rect x="221.1" y="291.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="224.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.02%)</title><rect x="221.4" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="224.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.02%)</title><rect x="221.4" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 0.16%)</title><rect x="221.8" y="387.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 0.16%)</title><rect x="221.8" y="371.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 0.16%)</title><rect x="221.8" y="355.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 0.16%)</title><rect x="221.8" y="339.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="224.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (27 samples, 0.16%)</title><rect x="221.8" y="323.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.8" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (25 samples, 0.15%)</title><rect x="221.9" y="307.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="224.9" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.07%)</title><rect x="222.7" y="291.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="225.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (2,850 samples, 16.71%)</title><rect x="223.6" y="419.0" width="197.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.6" y="430.0">ru/mail/polis/service/stak..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (2,850 samples, 16.71%)</title><rect x="223.6" y="403.0" width="197.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.6" y="414.0">ru/mail/polis/service/stak..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (520 samples, 3.05%)</title><rect x="223.6" y="387.0" width="36.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.6" y="398.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.03%)</title><rect x="223.6" y="371.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.03%)</title><rect x="223.6" y="355.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.6" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.03%)</title><rect x="223.6" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (506 samples, 2.97%)</title><rect x="224.0" y="371.0" width="35.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.0" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.05%)</title><rect x="224.0" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.04%)</title><rect x="224.1" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.1" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.02%)</title><rect x="224.3" y="323.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.02%)</title><rect x="224.3" y="307.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (498 samples, 2.92%)</title><rect x="224.5" y="355.0" width="34.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.5" y="366.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (498 samples, 2.92%)</title><rect x="224.5" y="339.0" width="34.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.5" y="350.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (498 samples, 2.92%)</title><rect x="224.5" y="323.0" width="34.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.5" y="334.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (492 samples, 2.88%)</title><rect x="225.0" y="307.0" width="34.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.0" y="318.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.08%)</title><rect x="225.0" y="291.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.0" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.08%)</title><rect x="225.0" y="275.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.0" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.04%)</title><rect x="225.4" y="259.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="228.4" y="270.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.02%)</title><rect x="225.4" y="243.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="228.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (479 samples, 2.81%)</title><rect x="225.9" y="291.0" width="33.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.9" y="302.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (477 samples, 2.80%)</title><rect x="226.0" y="275.0" width="33.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.0" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (477 samples, 2.80%)</title><rect x="226.0" y="259.0" width="33.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.0" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (468 samples, 2.74%)</title><rect x="226.1" y="243.0" width="32.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.1" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (468 samples, 2.74%)</title><rect x="226.1" y="227.0" width="32.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.1" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (468 samples, 2.74%)</title><rect x="226.1" y="211.0" width="32.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.1" y="222.0">su..</text>
</g>
<g>
<title>write (450 samples, 2.64%)</title><rect x="227.3" y="195.0" width="31.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="230.3" y="206.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.05%)</title><rect x="258.4" y="243.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.02%)</title><rect x="258.7" y="227.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.03%)</title><rect x="259.0" y="371.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.03%)</title><rect x="259.0" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.0" y="366.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (4 samples, 0.02%)</title><rect x="259.3" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (2,330 samples, 13.66%)</title><rect x="259.6" y="387.0" width="161.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.6" y="398.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (2,330 samples, 13.66%)</title><rect x="259.6" y="371.0" width="161.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.6" y="382.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (2,330 samples, 13.66%)</title><rect x="259.6" y="355.0" width="161.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.6" y="366.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (2,326 samples, 13.64%)</title><rect x="259.9" y="339.0" width="160.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.9" y="350.0">ru/mail/polis/dao/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,325 samples, 13.63%)</title><rect x="259.9" y="323.0" width="160.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.9" y="334.0">org/rocksdb/RocksDB...</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,325 samples, 13.63%)</title><rect x="259.9" y="307.0" width="160.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.9" y="318.0">org/rocksdb/RocksDB...</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,319 samples, 13.60%)</title><rect x="260.3" y="291.0" width="160.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="263.3" y="302.0">Java_org_rocksdb_Roc..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,312 samples, 13.56%)</title><rect x="260.8" y="275.0" width="159.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="263.8" y="286.0">rocksdb_put_helper(J..</text>
</g>
<g>
<title>free (4 samples, 0.02%)</title><rect x="261.3" y="259.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="264.3" y="270.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.02%)</title><rect x="261.3" y="243.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="264.3" y="254.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.02%)</title><rect x="261.6" y="259.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="264.6" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.05%)</title><rect x="262.0" y="259.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="265.0" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.02%)</title><rect x="262.2" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="265.2" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.04%)</title><rect x="262.6" y="259.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="265.6" y="270.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.04%)</title><rect x="262.6" y="243.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="265.6" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.04%)</title><rect x="262.6" y="227.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="265.6" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="262.7" y="211.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="265.7" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="262.7" y="195.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="265.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,278 samples, 13.36%)</title><rect x="263.1" y="259.0" width="157.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="266.1" y="270.0">rocksdb::CompactedDB..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,277 samples, 13.35%)</title><rect x="263.1" y="243.0" width="157.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="266.1" y="254.0">rocksdb::DBImpl::Put..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,274 samples, 13.33%)</title><rect x="263.1" y="227.0" width="157.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="266.1" y="238.0">rocksdb::DB::Put(roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,247 samples, 13.17%)</title><rect x="263.6" y="211.0" width="155.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="266.6" y="222.0">rocksdb::DBImpl::Wri..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,241 samples, 13.14%)</title><rect x="263.8" y="195.0" width="155.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="266.8" y="206.0">rocksdb::DBImpl::Wri..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (207 samples, 1.21%)</title><rect x="265.2" y="179.0" width="14.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="268.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (205 samples, 1.20%)</title><rect x="265.2" y="163.0" width="14.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="268.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (203 samples, 1.19%)</title><rect x="265.4" y="147.0" width="14.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="268.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (200 samples, 1.17%)</title><rect x="265.6" y="131.0" width="13.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="268.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (195 samples, 1.14%)</title><rect x="265.9" y="115.0" width="13.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="268.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (191 samples, 1.12%)</title><rect x="266.2" y="99.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="269.2" y="110.0"></text>
</g>
<g>
<title>write (189 samples, 1.11%)</title><rect x="266.3" y="83.0" width="13.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="269.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (61 samples, 0.36%)</title><rect x="279.7" y="179.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="282.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (57 samples, 0.33%)</title><rect x="279.9" y="163.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="282.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (4 samples, 0.02%)</title><rect x="280.1" y="147.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="283.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (50 samples, 0.29%)</title><rect x="280.4" y="147.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="283.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (47 samples, 0.28%)</title><rect x="280.6" y="131.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="283.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (39 samples, 0.23%)</title><rect x="280.9" y="115.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="283.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (33 samples, 0.19%)</title><rect x="281.3" y="99.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="284.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (12 samples, 0.07%)</title><rect x="282.8" y="83.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="285.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.04%)</title><rect x="283.1" y="67.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="286.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (24 samples, 0.14%)</title><rect x="283.9" y="179.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="286.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (19 samples, 0.11%)</title><rect x="284.2" y="163.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="287.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (18 samples, 0.11%)</title><rect x="284.2" y="147.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="287.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (18 samples, 0.11%)</title><rect x="284.2" y="131.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="287.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (14 samples, 0.08%)</title><rect x="284.5" y="115.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="287.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.08%)</title><rect x="284.5" y="99.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="287.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.08%)</title><rect x="284.5" y="83.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="287.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.04%)</title><rect x="285.0" y="67.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="288.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.02%)</title><rect x="285.1" y="51.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="288.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1,571 samples, 9.21%)</title><rect x="285.6" y="179.0" width="108.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="288.6" y="190.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1,571 samples, 9.21%)</title><rect x="285.6" y="163.0" width="108.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="288.6" y="174.0">rocksdb::Writ..</text>
</g>
<g>
<title>xdrrec_ops (1,560 samples, 9.15%)</title><rect x="286.3" y="147.0" width="107.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="289.3" y="158.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (6 samples, 0.04%)</title><rect x="394.3" y="179.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="397.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (340 samples, 1.99%)</title><rect x="394.7" y="179.0" width="23.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="397.7" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (337 samples, 1.98%)</title><rect x="394.7" y="163.0" width="23.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="397.7" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (149 samples, 0.87%)</title><rect x="395.1" y="147.0" width="10.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="398.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (147 samples, 0.86%)</title><rect x="395.1" y="131.0" width="10.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="398.1" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (183 samples, 1.07%)</title><rect x="405.4" y="147.0" width="12.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="408.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (7 samples, 0.04%)</title><rect x="418.3" y="179.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="421.3" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.03%)</title><rect x="418.3" y="163.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="421.3" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.03%)</title><rect x="418.3" y="147.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="421.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.04%)</title><rect x="419.1" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="422.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (9 samples, 0.05%)</title><rect x="419.5" y="211.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="422.5" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.02%)</title><rect x="419.8" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="422.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.02%)</title><rect x="420.1" y="211.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="423.1" y="222.0"></text>
</g>
<g>
<title>[worker tid=35075] (3,622 samples, 21.24%)</title><rect x="420.9" y="483.0" width="250.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="423.9" y="494.0">[worker tid=35075]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.04%)</title><rect x="420.9" y="467.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="423.9" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.04%)</title><rect x="420.9" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="423.9" y="462.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.02%)</title><rect x="421.6" y="467.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="424.6" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,603 samples, 21.12%)</title><rect x="421.9" y="467.0" width="249.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="424.9" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,603 samples, 21.12%)</title><rect x="421.9" y="451.0" width="249.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="424.9" y="462.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,603 samples, 21.12%)</title><rect x="421.9" y="435.0" width="249.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.9" y="446.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (739 samples, 4.33%)</title><rect x="422.0" y="419.0" width="51.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="425.0" y="430.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (737 samples, 4.32%)</title><rect x="422.1" y="403.0" width="51.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.1" y="414.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (709 samples, 4.16%)</title><rect x="422.2" y="387.0" width="49.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.2" y="398.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (705 samples, 4.13%)</title><rect x="422.5" y="371.0" width="48.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="425.5" y="382.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (705 samples, 4.13%)</title><rect x="422.5" y="355.0" width="48.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.5" y="366.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (683 samples, 4.00%)</title><rect x="424.0" y="339.0" width="47.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="427.0" y="350.0">Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (658 samples, 3.86%)</title><rect x="425.0" y="323.0" width="45.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="428.0" y="334.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (646 samples, 3.79%)</title><rect x="425.4" y="307.0" width="44.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="428.4" y="318.0">__ps..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.02%)</title><rect x="471.2" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.02%)</title><rect x="471.2" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="474.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4 samples, 0.02%)</title><rect x="471.2" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="474.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 0.13%)</title><rect x="471.5" y="387.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.13%)</title><rect x="471.5" y="371.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="474.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 0.13%)</title><rect x="471.5" y="355.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.13%)</title><rect x="471.5" y="339.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="474.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.13%)</title><rect x="471.5" y="323.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.5" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (23 samples, 0.13%)</title><rect x="471.5" y="307.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="474.5" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.09%)</title><rect x="471.9" y="291.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="474.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (2,863 samples, 16.79%)</title><rect x="473.1" y="419.0" width="198.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.1" y="430.0">ru/mail/polis/service/stak..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (2,863 samples, 16.79%)</title><rect x="473.1" y="403.0" width="198.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.1" y="414.0">ru/mail/polis/service/stak..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (507 samples, 2.97%)</title><rect x="473.1" y="387.0" width="35.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.1" y="398.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (9 samples, 0.05%)</title><rect x="473.1" y="371.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.1" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.05%)</title><rect x="473.1" y="355.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.05%)</title><rect x="473.1" y="339.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.1" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.02%)</title><rect x="473.4" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.02%)</title><rect x="473.4" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.4" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.02%)</title><rect x="473.4" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="476.4" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (4 samples, 0.02%)</title><rect x="473.4" y="275.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="476.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (489 samples, 2.87%)</title><rect x="473.7" y="371.0" width="33.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.7" y="382.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.05%)</title><rect x="473.7" y="355.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.7" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.04%)</title><rect x="473.8" y="339.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.02%)</title><rect x="474.0" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.02%)</title><rect x="474.0" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (481 samples, 2.82%)</title><rect x="474.3" y="355.0" width="33.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.3" y="366.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (481 samples, 2.82%)</title><rect x="474.3" y="339.0" width="33.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="477.3" y="350.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (481 samples, 2.82%)</title><rect x="474.3" y="323.0" width="33.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.3" y="334.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (477 samples, 2.80%)</title><rect x="474.6" y="307.0" width="33.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.6" y="318.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (17 samples, 0.10%)</title><rect x="474.6" y="291.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="477.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.10%)</title><rect x="474.6" y="275.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="477.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="474.8" y="259.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.8" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.03%)</title><rect x="474.9" y="243.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="477.9" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.04%)</title><rect x="475.3" y="259.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="478.3" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.02%)</title><rect x="475.5" y="243.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="478.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (460 samples, 2.70%)</title><rect x="475.7" y="291.0" width="31.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="478.7" y="302.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (458 samples, 2.69%)</title><rect x="475.9" y="275.0" width="31.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.9" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (458 samples, 2.69%)</title><rect x="475.9" y="259.0" width="31.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.9" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (449 samples, 2.63%)</title><rect x="475.9" y="243.0" width="31.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="478.9" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (449 samples, 2.63%)</title><rect x="475.9" y="227.0" width="31.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="478.9" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (449 samples, 2.63%)</title><rect x="475.9" y="211.0" width="31.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="478.9" y="222.0">su..</text>
</g>
<g>
<title>write (439 samples, 2.57%)</title><rect x="476.6" y="195.0" width="30.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="479.6" y="206.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.05%)</title><rect x="506.9" y="243.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="509.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.04%)</title><rect x="507.2" y="227.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="510.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.04%)</title><rect x="507.6" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="510.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (2,356 samples, 13.81%)</title><rect x="508.2" y="387.0" width="163.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="511.2" y="398.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (2,356 samples, 13.81%)</title><rect x="508.2" y="371.0" width="163.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="511.2" y="382.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (2,356 samples, 13.81%)</title><rect x="508.2" y="355.0" width="163.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.2" y="366.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (2,353 samples, 13.80%)</title><rect x="508.4" y="339.0" width="162.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="511.4" y="350.0">ru/mail/polis/dao/Roc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,349 samples, 13.77%)</title><rect x="508.4" y="323.0" width="162.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="511.4" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,349 samples, 13.77%)</title><rect x="508.4" y="307.0" width="162.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="511.4" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,338 samples, 13.71%)</title><rect x="509.2" y="291.0" width="161.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="512.2" y="302.0">Java_org_rocksdb_Rock..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,329 samples, 13.66%)</title><rect x="509.8" y="275.0" width="161.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.8" y="286.0">rocksdb_put_helper(JN..</text>
</g>
<g>
<title>free_tiny (7 samples, 0.04%)</title><rect x="510.4" y="259.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="513.4" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.02%)</title><rect x="510.6" y="243.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="513.6" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.04%)</title><rect x="510.9" y="259.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="513.9" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (13 samples, 0.08%)</title><rect x="511.3" y="259.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="514.3" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.05%)</title><rect x="512.3" y="259.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="515.3" y="270.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.05%)</title><rect x="512.3" y="243.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="515.3" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.04%)</title><rect x="512.4" y="227.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="515.4" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="512.6" y="211.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="515.6" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="512.6" y="195.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="515.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,281 samples, 13.37%)</title><rect x="512.9" y="259.0" width="157.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="515.9" y="270.0">rocksdb::CompactedDB..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,279 samples, 13.36%)</title><rect x="513.0" y="243.0" width="157.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="516.0" y="254.0">rocksdb::DBImpl::Put..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,272 samples, 13.32%)</title><rect x="513.1" y="227.0" width="157.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="516.1" y="238.0">rocksdb::DB::Put(roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,249 samples, 13.19%)</title><rect x="513.3" y="211.0" width="155.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="516.3" y="222.0">rocksdb::DBImpl::Wri..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,238 samples, 13.12%)</title><rect x="513.6" y="195.0" width="154.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="516.6" y="206.0">rocksdb::DBImpl::Wri..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (216 samples, 1.27%)</title><rect x="515.0" y="179.0" width="14.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="518.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (214 samples, 1.25%)</title><rect x="515.0" y="163.0" width="14.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="518.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (214 samples, 1.25%)</title><rect x="515.0" y="147.0" width="14.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="518.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (5 samples, 0.03%)</title><rect x="515.1" y="131.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="518.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (208 samples, 1.22%)</title><rect x="515.5" y="131.0" width="14.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="518.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (4 samples, 0.02%)</title><rect x="515.8" y="115.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="518.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (198 samples, 1.16%)</title><rect x="516.1" y="115.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="519.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (191 samples, 1.12%)</title><rect x="516.6" y="99.0" width="13.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="519.6" y="110.0"></text>
</g>
<g>
<title>write (188 samples, 1.10%)</title><rect x="516.8" y="83.0" width="13.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="519.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (51 samples, 0.30%)</title><rect x="530.1" y="179.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="533.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (48 samples, 0.28%)</title><rect x="530.3" y="163.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="533.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (46 samples, 0.27%)</title><rect x="530.4" y="147.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="533.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (45 samples, 0.26%)</title><rect x="530.5" y="131.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="533.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (41 samples, 0.24%)</title><rect x="530.7" y="115.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="533.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (38 samples, 0.22%)</title><rect x="530.9" y="99.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="533.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.02%)</title><rect x="531.9" y="83.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="534.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (17 samples, 0.10%)</title><rect x="532.3" y="83.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="535.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.05%)</title><rect x="532.9" y="67.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="535.9" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.03%)</title><rect x="533.1" y="51.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="536.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (31 samples, 0.18%)</title><rect x="533.6" y="179.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="536.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (27 samples, 0.16%)</title><rect x="533.9" y="163.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="536.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.15%)</title><rect x="533.9" y="147.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="536.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.13%)</title><rect x="534.1" y="131.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="537.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (19 samples, 0.11%)</title><rect x="534.4" y="115.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="537.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (19 samples, 0.11%)</title><rect x="534.4" y="99.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="537.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.10%)</title><rect x="534.6" y="83.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="537.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.04%)</title><rect x="535.2" y="67.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="538.2" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.03%)</title><rect x="535.2" y="51.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="538.2" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.02%)</title><rect x="535.3" y="35.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="538.3" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1,548 samples, 9.08%)</title><rect x="535.7" y="179.0" width="107.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="538.7" y="190.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1,547 samples, 9.07%)</title><rect x="535.7" y="163.0" width="107.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="538.7" y="174.0">rocksdb::Writ..</text>
</g>
<g>
<title>sched_yield (4 samples, 0.02%)</title><rect x="536.3" y="147.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="539.3" y="158.0"></text>
</g>
<g>
<title>xdrrec_ops (1,532 samples, 8.98%)</title><rect x="536.8" y="147.0" width="106.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="539.8" y="158.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (10 samples, 0.06%)</title><rect x="642.8" y="179.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="645.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.04%)</title><rect x="643.0" y="163.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="646.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.04%)</title><rect x="643.0" y="147.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="646.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (348 samples, 2.04%)</title><rect x="643.5" y="179.0" width="24.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="646.5" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (348 samples, 2.04%)</title><rect x="643.5" y="163.0" width="24.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="646.5" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (139 samples, 0.81%)</title><rect x="644.1" y="147.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="647.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (133 samples, 0.78%)</title><rect x="644.1" y="131.0" width="9.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="647.1" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.04%)</title><rect x="653.3" y="131.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="656.3" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.02%)</title><rect x="653.4" y="115.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="656.4" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.02%)</title><rect x="653.4" y="99.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="656.4" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (201 samples, 1.18%)</title><rect x="653.7" y="147.0" width="13.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="656.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (7 samples, 0.04%)</title><rect x="667.6" y="179.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="670.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.04%)</title><rect x="667.6" y="163.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="670.6" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.04%)</title><rect x="667.6" y="147.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="670.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.04%)</title><rect x="669.0" y="211.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="672.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.02%)</title><rect x="669.4" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="672.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (9 samples, 0.05%)</title><rect x="669.7" y="211.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="672.7" y="222.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.02%)</title><rect x="669.9" y="195.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="672.9" y="206.0"></text>
</g>
<g>
<title>[worker tid=35843] (3,702 samples, 21.70%)</title><rect x="671.5" y="483.0" width="256.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="674.5" y="494.0">[worker tid=35843]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.05%)</title><rect x="671.6" y="467.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="674.6" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 0.04%)</title><rect x="671.7" y="451.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="674.7" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (5 samples, 0.03%)</title><rect x="671.8" y="435.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="674.8" y="446.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.03%)</title><rect x="672.2" y="467.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="675.2" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,683 samples, 21.59%)</title><rect x="672.6" y="467.0" width="254.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="675.6" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,683 samples, 21.59%)</title><rect x="672.6" y="451.0" width="254.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="675.6" y="462.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,683 samples, 21.59%)</title><rect x="672.6" y="435.0" width="254.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="675.6" y="446.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (790 samples, 4.63%)</title><rect x="672.6" y="419.0" width="54.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="675.6" y="430.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (787 samples, 4.61%)</title><rect x="672.8" y="403.0" width="54.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.8" y="414.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (749 samples, 4.39%)</title><rect x="672.8" y="387.0" width="51.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.8" y="398.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.03%)</title><rect x="672.8" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="675.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.02%)</title><rect x="672.8" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.02%)</title><rect x="672.8" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.02%)</title><rect x="672.8" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="675.8" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.02%)</title><rect x="672.8" y="307.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="675.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.04%)</title><rect x="673.1" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="676.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.04%)</title><rect x="673.1" y="355.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="676.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.03%)</title><rect x="673.1" y="339.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="676.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.03%)</title><rect x="673.1" y="323.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="676.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.03%)</title><rect x="673.1" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="676.1" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.02%)</title><rect x="673.1" y="291.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="676.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (738 samples, 4.33%)</title><rect x="673.5" y="371.0" width="51.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.5" y="382.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (738 samples, 4.33%)</title><rect x="673.5" y="355.0" width="51.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.5" y="366.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (719 samples, 4.22%)</title><rect x="674.9" y="339.0" width="49.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="677.9" y="350.0">Unsaf..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.02%)</title><rect x="675.4" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="678.4" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (690 samples, 4.05%)</title><rect x="675.8" y="323.0" width="47.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="678.8" y="334.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (680 samples, 3.99%)</title><rect x="676.2" y="307.0" width="47.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="679.2" y="318.0">__ps..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.02%)</title><rect x="723.8" y="323.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="726.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (13 samples, 0.08%)</title><rect x="724.6" y="387.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="727.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (13 samples, 0.08%)</title><rect x="724.6" y="371.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="727.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (12 samples, 0.07%)</title><rect x="724.7" y="355.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="727.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.05%)</title><rect x="724.7" y="339.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="727.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.04%)</title><rect x="724.8" y="323.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="727.8" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.04%)</title><rect x="724.8" y="307.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="727.8" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.04%)</title><rect x="724.8" y="291.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="727.8" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.04%)</title><rect x="724.8" y="275.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="727.8" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.04%)</title><rect x="724.8" y="259.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="727.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (25 samples, 0.15%)</title><rect x="725.5" y="387.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="728.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 0.15%)</title><rect x="725.5" y="371.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 0.15%)</title><rect x="725.5" y="355.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="728.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (25 samples, 0.15%)</title><rect x="725.5" y="339.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="728.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (25 samples, 0.15%)</title><rect x="725.5" y="323.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="728.5" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (23 samples, 0.13%)</title><rect x="725.6" y="307.0" width="1.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="728.6" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.09%)</title><rect x="726.1" y="291.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="729.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (2,893 samples, 16.96%)</title><rect x="727.2" y="419.0" width="200.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="730.2" y="430.0">ru/mail/polis/service/stak..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (2,893 samples, 16.96%)</title><rect x="727.2" y="403.0" width="200.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.2" y="414.0">ru/mail/polis/service/stak..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (516 samples, 3.03%)</title><rect x="727.2" y="387.0" width="35.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="730.2" y="398.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (16 samples, 0.09%)</title><rect x="727.2" y="371.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="730.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (16 samples, 0.09%)</title><rect x="727.2" y="355.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (13 samples, 0.08%)</title><rect x="727.4" y="339.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="730.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.06%)</title><rect x="727.6" y="323.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.06%)</title><rect x="727.6" y="307.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (487 samples, 2.86%)</title><rect x="728.3" y="371.0" width="33.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="731.3" y="382.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.06%)</title><rect x="728.3" y="355.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="731.3" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.05%)</title><rect x="728.5" y="339.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="731.5" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (477 samples, 2.80%)</title><rect x="729.0" y="355.0" width="33.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.0" y="366.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (477 samples, 2.80%)</title><rect x="729.0" y="339.0" width="33.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="732.0" y="350.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (477 samples, 2.80%)</title><rect x="729.0" y="323.0" width="33.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.0" y="334.0">on..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.04%)</title><rect x="729.3" y="307.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="732.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (466 samples, 2.73%)</title><rect x="729.8" y="307.0" width="32.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="732.8" y="318.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.05%)</title><rect x="729.8" y="291.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="732.8" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.05%)</title><rect x="729.8" y="275.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.8" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.02%)</title><rect x="730.1" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="733.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (457 samples, 2.68%)</title><rect x="730.4" y="291.0" width="31.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="733.4" y="302.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.04%)</title><rect x="730.4" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="733.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.04%)</title><rect x="730.4" y="259.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.04%)</title><rect x="730.4" y="243.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="733.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.04%)</title><rect x="730.4" y="227.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="733.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.04%)</title><rect x="730.4" y="211.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.02%)</title><rect x="730.5" y="195.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (450 samples, 2.64%)</title><rect x="730.9" y="275.0" width="31.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="733.9" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (450 samples, 2.64%)</title><rect x="730.9" y="259.0" width="31.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="733.9" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (445 samples, 2.61%)</title><rect x="730.9" y="243.0" width="30.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="733.9" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (445 samples, 2.61%)</title><rect x="730.9" y="227.0" width="30.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.9" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (445 samples, 2.61%)</title><rect x="730.9" y="211.0" width="30.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="733.9" y="222.0">su..</text>
</g>
<g>
<title>write (434 samples, 2.54%)</title><rect x="731.7" y="195.0" width="30.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="734.7" y="206.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.03%)</title><rect x="761.7" y="243.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="764.7" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (12 samples, 0.07%)</title><rect x="762.0" y="371.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="765.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.04%)</title><rect x="762.2" y="355.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.02%)</title><rect x="762.2" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="765.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (2,377 samples, 13.94%)</title><rect x="762.9" y="387.0" width="164.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="765.9" y="398.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (2,377 samples, 13.94%)</title><rect x="762.9" y="371.0" width="164.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="765.9" y="382.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (2,377 samples, 13.94%)</title><rect x="762.9" y="355.0" width="164.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="765.9" y="366.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (2,374 samples, 13.92%)</title><rect x="763.1" y="339.0" width="164.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="766.1" y="350.0">ru/mail/polis/dao/Roc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,371 samples, 13.90%)</title><rect x="763.1" y="323.0" width="164.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="766.1" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,371 samples, 13.90%)</title><rect x="763.1" y="307.0" width="164.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="766.1" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,362 samples, 13.85%)</title><rect x="763.8" y="291.0" width="163.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="766.8" y="302.0">Java_org_rocksdb_Rock..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,357 samples, 13.82%)</title><rect x="764.1" y="275.0" width="163.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="767.1" y="286.0">rocksdb_put_helper(JN..</text>
</g>
<g>
<title>free_tiny (4 samples, 0.02%)</title><rect x="764.3" y="259.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="767.3" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (9 samples, 0.05%)</title><rect x="764.6" y="259.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="767.6" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.03%)</title><rect x="764.9" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="767.9" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.04%)</title><rect x="765.2" y="259.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="768.2" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (16 samples, 0.09%)</title><rect x="765.6" y="259.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="768.6" y="270.0"></text>
</g>
<g>
<title>malloc (16 samples, 0.09%)</title><rect x="765.6" y="243.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="768.6" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (14 samples, 0.08%)</title><rect x="765.6" y="227.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="768.6" y="238.0"></text>
</g>
<g>
<title>default_zone_malloc (4 samples, 0.02%)</title><rect x="765.8" y="211.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="768.8" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.05%)</title><rect x="766.0" y="211.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="769.0" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.05%)</title><rect x="766.0" y="195.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="769.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,318 samples, 13.59%)</title><rect x="766.7" y="259.0" width="160.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="769.7" y="270.0">rocksdb::CompactedDB..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,317 samples, 13.58%)</title><rect x="766.8" y="243.0" width="160.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="769.8" y="254.0">rocksdb::DBImpl::Put..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,317 samples, 13.58%)</title><rect x="766.8" y="227.0" width="160.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="769.8" y="238.0">rocksdb::DB::Put(roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,292 samples, 13.44%)</title><rect x="767.0" y="211.0" width="158.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="770.0" y="222.0">rocksdb::DBImpl::Wri..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,283 samples, 13.39%)</title><rect x="767.1" y="195.0" width="158.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.1" y="206.0">rocksdb::DBImpl::Wri..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (227 samples, 1.33%)</title><rect x="768.8" y="179.0" width="15.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="771.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (224 samples, 1.31%)</title><rect x="768.9" y="163.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="771.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (220 samples, 1.29%)</title><rect x="769.2" y="147.0" width="15.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="772.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (218 samples, 1.28%)</title><rect x="769.3" y="131.0" width="15.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="772.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (4 samples, 0.02%)</title><rect x="769.8" y="115.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="772.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (206 samples, 1.21%)</title><rect x="770.1" y="115.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="773.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (204 samples, 1.20%)</title><rect x="770.3" y="99.0" width="14.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="773.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (4 samples, 0.02%)</title><rect x="770.5" y="83.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="773.5" y="94.0"></text>
</g>
<g>
<title>write (197 samples, 1.16%)</title><rect x="770.7" y="83.0" width="13.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="773.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (57 samples, 0.33%)</title><rect x="784.7" y="179.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="787.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (55 samples, 0.32%)</title><rect x="784.8" y="163.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="787.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (53 samples, 0.31%)</title><rect x="784.9" y="147.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="787.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (52 samples, 0.30%)</title><rect x="785.0" y="131.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="788.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (45 samples, 0.26%)</title><rect x="785.4" y="115.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="788.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (38 samples, 0.22%)</title><rect x="785.9" y="99.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="788.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (12 samples, 0.07%)</title><rect x="787.6" y="83.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="790.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.05%)</title><rect x="787.8" y="67.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="790.8" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.02%)</title><rect x="788.1" y="51.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="791.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (30 samples, 0.18%)</title><rect x="788.6" y="179.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="791.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (25 samples, 0.15%)</title><rect x="788.9" y="163.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="791.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.14%)</title><rect x="789.0" y="147.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="792.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (20 samples, 0.12%)</title><rect x="789.3" y="131.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="792.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (18 samples, 0.11%)</title><rect x="789.4" y="115.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="792.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.10%)</title><rect x="789.5" y="99.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="792.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.07%)</title><rect x="789.8" y="83.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="792.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.04%)</title><rect x="790.2" y="67.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="793.2" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1,594 samples, 9.35%)</title><rect x="790.7" y="179.0" width="110.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="793.7" y="190.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1,593 samples, 9.34%)</title><rect x="790.7" y="163.0" width="110.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="793.7" y="174.0">rocksdb::Writ..</text>
</g>
<g>
<title>xdrrec_ops (1,587 samples, 9.30%)</title><rect x="791.2" y="147.0" width="109.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="794.2" y="158.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (11 samples, 0.06%)</title><rect x="901.1" y="179.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.1" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.06%)</title><rect x="901.2" y="163.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="904.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.06%)</title><rect x="901.2" y="147.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="904.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (329 samples, 1.93%)</title><rect x="901.8" y="179.0" width="22.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="904.8" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (329 samples, 1.93%)</title><rect x="901.8" y="163.0" width="22.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="904.8" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (122 samples, 0.72%)</title><rect x="902.5" y="147.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="905.5" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (115 samples, 0.67%)</title><rect x="902.5" y="131.0" width="8.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="905.5" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.04%)</title><rect x="910.5" y="131.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="913.5" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.04%)</title><rect x="910.5" y="115.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="913.5" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.04%)</title><rect x="910.5" y="99.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="913.5" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (196 samples, 1.15%)</title><rect x="911.1" y="147.0" width="13.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="914.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (6 samples, 0.04%)</title><rect x="924.6" y="179.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="927.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.04%)</title><rect x="924.6" y="163.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="927.6" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.03%)</title><rect x="924.6" y="147.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="927.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 0.05%)</title><rect x="925.7" y="211.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.02%)</title><rect x="925.9" y="195.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="928.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.02%)</title><rect x="926.3" y="211.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="929.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (7 samples, 0.04%)</title><rect x="926.5" y="211.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="929.5" y="222.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.02%)</title><rect x="926.7" y="195.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="929.7" y="206.0"></text>
</g>
<g>
<title>[worker tid=36611] (3,793 samples, 22.24%)</title><rect x="927.6" y="483.0" width="262.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="930.6" y="494.0">[worker tid=36611]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.02%)</title><rect x="927.6" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="930.6" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.02%)</title><rect x="927.6" y="451.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="930.6" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,784 samples, 22.19%)</title><rect x="928.2" y="467.0" width="261.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.2" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,784 samples, 22.19%)</title><rect x="928.2" y="451.0" width="261.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="931.2" y="462.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,784 samples, 22.19%)</title><rect x="928.2" y="435.0" width="261.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="931.2" y="446.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (803 samples, 4.71%)</title><rect x="928.3" y="419.0" width="55.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="931.3" y="430.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (797 samples, 4.67%)</title><rect x="928.7" y="403.0" width="55.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="931.7" y="414.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (754 samples, 4.42%)</title><rect x="928.7" y="387.0" width="52.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="931.7" y="398.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.04%)</title><rect x="929.1" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="932.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.04%)</title><rect x="929.1" y="355.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="932.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.04%)</title><rect x="929.1" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="932.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.04%)</title><rect x="929.1" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="932.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.04%)</title><rect x="929.1" y="307.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.1" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.04%)</title><rect x="929.2" y="291.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="932.2" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.03%)</title><rect x="929.2" y="275.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="932.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (741 samples, 4.34%)</title><rect x="929.6" y="371.0" width="51.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="932.6" y="382.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (741 samples, 4.34%)</title><rect x="929.6" y="355.0" width="51.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.6" y="366.0">jdk/i..</text>
</g>
<g>
<title>JavaThread::parker() (5 samples, 0.03%)</title><rect x="930.4" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.4" y="350.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (723 samples, 4.24%)</title><rect x="930.8" y="339.0" width="50.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="933.8" y="350.0">Unsaf..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.02%)</title><rect x="931.5" y="323.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.5" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (691 samples, 4.05%)</title><rect x="931.9" y="323.0" width="47.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.9" y="334.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (684 samples, 4.01%)</title><rect x="932.2" y="307.0" width="47.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="935.2" y="318.0">__ps..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (23 samples, 0.13%)</title><rect x="980.9" y="387.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="983.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (21 samples, 0.12%)</title><rect x="981.0" y="371.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="984.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (18 samples, 0.11%)</title><rect x="981.1" y="355.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="984.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.05%)</title><rect x="981.3" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="984.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.04%)</title><rect x="981.3" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="984.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.04%)</title><rect x="981.4" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="984.4" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.04%)</title><rect x="981.4" y="291.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="984.4" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.04%)</title><rect x="981.4" y="275.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="984.4" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.04%)</title><rect x="981.4" y="259.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="984.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.03%)</title><rect x="982.0" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="985.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.03%)</title><rect x="982.0" y="323.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="985.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.03%)</title><rect x="982.0" y="307.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="985.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 0.12%)</title><rect x="982.4" y="387.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="985.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 0.12%)</title><rect x="982.4" y="371.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="985.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 0.12%)</title><rect x="982.4" y="355.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="985.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 0.12%)</title><rect x="982.4" y="339.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="985.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 0.12%)</title><rect x="982.4" y="323.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="985.4" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.11%)</title><rect x="982.5" y="307.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="985.5" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.07%)</title><rect x="982.9" y="291.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="985.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (2,980 samples, 17.47%)</title><rect x="983.8" y="419.0" width="206.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="986.8" y="430.0">ru/mail/polis/service/stake..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (2,980 samples, 17.47%)</title><rect x="983.8" y="403.0" width="206.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="986.8" y="414.0">ru/mail/polis/service/stake..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (508 samples, 2.98%)</title><rect x="983.9" y="387.0" width="35.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="986.9" y="398.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (7 samples, 0.04%)</title><rect x="984.0" y="371.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="987.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.04%)</title><rect x="984.0" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="987.0" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.03%)</title><rect x="984.1" y="339.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="987.1" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.02%)</title><rect x="984.2" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="987.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (495 samples, 2.90%)</title><rect x="984.5" y="371.0" width="34.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.5" y="382.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.09%)</title><rect x="984.5" y="355.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="987.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13 samples, 0.08%)</title><rect x="984.7" y="339.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="987.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.03%)</title><rect x="984.9" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="987.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.03%)</title><rect x="985.2" y="323.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="988.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.03%)</title><rect x="985.2" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="988.2" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (479 samples, 2.81%)</title><rect x="985.6" y="355.0" width="33.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="988.6" y="366.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (479 samples, 2.81%)</title><rect x="985.6" y="339.0" width="33.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="988.6" y="350.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (479 samples, 2.81%)</title><rect x="985.6" y="323.0" width="33.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="988.6" y="334.0">on..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.06%)</title><rect x="986.0" y="307.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.0" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.02%)</title><rect x="986.5" y="291.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="989.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (462 samples, 2.71%)</title><rect x="986.7" y="307.0" width="32.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="989.7" y="318.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.08%)</title><rect x="986.7" y="291.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="989.7" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.08%)</title><rect x="986.7" y="275.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="989.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="986.8" y="259.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="989.8" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="986.9" y="243.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="989.9" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.04%)</title><rect x="987.2" y="259.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (449 samples, 2.63%)</title><rect x="987.6" y="291.0" width="31.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="990.6" y="302.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (447 samples, 2.62%)</title><rect x="987.8" y="275.0" width="30.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="990.8" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (447 samples, 2.62%)</title><rect x="987.8" y="259.0" width="30.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="990.8" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (436 samples, 2.56%)</title><rect x="987.8" y="243.0" width="30.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="990.8" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (436 samples, 2.56%)</title><rect x="987.8" y="227.0" width="30.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="990.8" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (436 samples, 2.56%)</title><rect x="987.8" y="211.0" width="30.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="990.8" y="222.0">su..</text>
</g>
<g>
<title>write (426 samples, 2.50%)</title><rect x="988.5" y="195.0" width="29.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="991.5" y="206.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (10 samples, 0.06%)</title><rect x="1018.0" y="243.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1021.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (7 samples, 0.04%)</title><rect x="1018.2" y="227.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1021.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.02%)</title><rect x="1018.7" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (2,470 samples, 14.48%)</title><rect x="1019.1" y="387.0" width="170.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1022.1" y="398.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (2,470 samples, 14.48%)</title><rect x="1019.1" y="371.0" width="170.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1022.1" y="382.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (2,470 samples, 14.48%)</title><rect x="1019.1" y="355.0" width="170.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1022.1" y="366.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (2,464 samples, 14.45%)</title><rect x="1019.5" y="339.0" width="170.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1022.5" y="350.0">ru/mail/polis/dao/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,454 samples, 14.39%)</title><rect x="1019.5" y="323.0" width="169.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1022.5" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,453 samples, 14.38%)</title><rect x="1019.6" y="307.0" width="169.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1022.6" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,448 samples, 14.35%)</title><rect x="1019.9" y="291.0" width="169.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1022.9" y="302.0">Java_org_rocksdb_Rocks..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,438 samples, 14.29%)</title><rect x="1020.6" y="275.0" width="168.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1023.6" y="286.0">rocksdb_put_helper(JNI..</text>
</g>
<g>
<title>free_tiny (8 samples, 0.05%)</title><rect x="1021.2" y="259.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1024.2" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (6 samples, 0.04%)</title><rect x="1021.3" y="243.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1024.3" y="254.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (4 samples, 0.02%)</title><rect x="1021.5" y="227.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1024.5" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.04%)</title><rect x="1021.7" y="259.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1024.7" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11 samples, 0.06%)</title><rect x="1022.2" y="259.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1025.2" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.02%)</title><rect x="1022.4" y="243.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.4" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.02%)</title><rect x="1022.4" y="227.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1025.4" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.04%)</title><rect x="1023.0" y="259.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1026.0" y="270.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.04%)</title><rect x="1023.0" y="243.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1026.0" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.04%)</title><rect x="1023.0" y="227.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1026.0" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.03%)</title><rect x="1023.1" y="211.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1026.1" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.03%)</title><rect x="1023.1" y="195.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1026.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,395 samples, 14.04%)</title><rect x="1023.5" y="259.0" width="165.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.5" y="270.0">rocksdb::CompactedDBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,394 samples, 14.04%)</title><rect x="1023.5" y="243.0" width="165.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.5" y="254.0">rocksdb::DBImpl::Put(..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,391 samples, 14.02%)</title><rect x="1023.6" y="227.0" width="165.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1026.6" y="238.0">rocksdb::DB::Put(rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,360 samples, 13.84%)</title><rect x="1023.9" y="211.0" width="163.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1026.9" y="222.0">rocksdb::DBImpl::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,353 samples, 13.80%)</title><rect x="1024.2" y="195.0" width="162.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1027.2" y="206.0">rocksdb::DBImpl::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (272 samples, 1.59%)</title><rect x="1025.5" y="179.0" width="18.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (266 samples, 1.56%)</title><rect x="1025.7" y="163.0" width="18.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1028.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (261 samples, 1.53%)</title><rect x="1026.0" y="147.0" width="18.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.02%)</title><rect x="1026.1" y="131.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1029.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (255 samples, 1.50%)</title><rect x="1026.4" y="131.0" width="17.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (250 samples, 1.47%)</title><rect x="1026.7" y="115.0" width="17.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (246 samples, 1.44%)</title><rect x="1027.0" y="99.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.0" y="110.0"></text>
</g>
<g>
<title>write (244 samples, 1.43%)</title><rect x="1027.1" y="83.0" width="16.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1030.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (79 samples, 0.46%)</title><rect x="1044.4" y="179.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (74 samples, 0.43%)</title><rect x="1044.8" y="163.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (71 samples, 0.42%)</title><rect x="1045.0" y="147.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (70 samples, 0.41%)</title><rect x="1045.1" y="131.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (63 samples, 0.37%)</title><rect x="1045.3" y="115.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (54 samples, 0.32%)</title><rect x="1046.0" y="99.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1049.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (18 samples, 0.11%)</title><rect x="1048.2" y="83.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.05%)</title><rect x="1048.8" y="67.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1051.8" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (33 samples, 0.19%)</title><rect x="1049.9" y="179.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (29 samples, 0.17%)</title><rect x="1050.2" y="163.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.15%)</title><rect x="1050.4" y="147.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (25 samples, 0.15%)</title><rect x="1050.5" y="131.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (19 samples, 0.11%)</title><rect x="1050.8" y="115.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1053.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.09%)</title><rect x="1051.1" y="99.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1054.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.08%)</title><rect x="1051.1" y="83.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.03%)</title><rect x="1051.8" y="67.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.8" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1,531 samples, 8.98%)</title><rect x="1052.3" y="179.0" width="105.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.3" y="190.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1,530 samples, 8.97%)</title><rect x="1052.3" y="163.0" width="105.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.3" y="174.0">rocksdb::Writ..</text>
</g>
<g>
<title>xdrrec_ops (1,518 samples, 8.90%)</title><rect x="1053.1" y="147.0" width="105.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1056.1" y="158.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (4 samples, 0.02%)</title><rect x="1158.2" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.02%)</title><rect x="1158.2" y="163.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (13 samples, 0.08%)</title><rect x="1158.5" y="179.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.5" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.05%)</title><rect x="1158.7" y="163.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.7" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.05%)</title><rect x="1158.7" y="147.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1161.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (383 samples, 2.25%)</title><rect x="1159.4" y="179.0" width="26.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (383 samples, 2.25%)</title><rect x="1159.4" y="163.0" width="26.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.4" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (156 samples, 0.91%)</title><rect x="1160.0" y="147.0" width="10.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (154 samples, 0.90%)</title><rect x="1160.0" y="131.0" width="10.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1163.0" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (219 samples, 1.28%)</title><rect x="1170.8" y="147.0" width="15.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1173.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (8 samples, 0.05%)</title><rect x="1185.9" y="179.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.04%)</title><rect x="1185.9" y="163.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.04%)</title><rect x="1185.9" y="147.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1188.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 0.05%)</title><rect x="1187.3" y="211.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.03%)</title><rect x="1187.4" y="195.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (10 samples, 0.06%)</title><rect x="1187.9" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.03%)</title><rect x="1188.0" y="195.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.03%)</title><rect x="1188.0" y="179.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1191.0" y="190.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.03%)</title><rect x="1188.0" y="163.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1191.0" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.03%)</title><rect x="1188.0" y="147.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1191.0" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="1188.1" y="131.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1191.1" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="1188.1" y="115.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1191.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (7 samples, 0.04%)</title><rect x="1188.5" y="211.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.5" y="222.0"></text>
</g>
<g>
<title>free (4 samples, 0.02%)</title><rect x="1188.6" y="195.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1191.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (5 samples, 0.03%)</title><rect x="1189.3" y="323.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1192.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (5 samples, 0.03%)</title><rect x="1189.7" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1192.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (5 samples, 0.03%)</title><rect x="1189.7" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1192.7" y="318.0"></text>
</g>
</g>
</svg>
