<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (5,837 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (620 samples, 10.62%)</title><rect x="10.2" y="403.0" width="125.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.2" y="414.0">[NIO Selector #..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="10.4" y="387.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.4" y="398.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (6 samples, 0.10%)</title><rect x="10.8" y="387.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.03%)</title><rect x="11.4" y="371.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.4" y="382.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (2 samples, 0.03%)</title><rect x="11.4" y="355.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="14.4" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.07%)</title><rect x="12.2" y="387.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="15.2" y="398.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (604 samples, 10.35%)</title><rect x="13.0" y="387.0" width="122.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.0" y="398.0">one/nio/server/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="13.6" y="371.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.6" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.05%)</title><rect x="13.6" y="355.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.6" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="13.6" y="339.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="16.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.03%)</title><rect x="14.2" y="371.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (2 samples, 0.03%)</title><rect x="14.2" y="355.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (391 samples, 6.70%)</title><rect x="14.6" y="371.0" width="79.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.6" y="382.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.09%)</title><rect x="15.3" y="355.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.07%)</title><rect x="15.5" y="339.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.07%)</title><rect x="15.5" y="323.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.03%)</title><rect x="15.9" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.9" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (4 samples, 0.07%)</title><rect x="16.3" y="355.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.03%)</title><rect x="16.7" y="339.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (378 samples, 6.48%)</title><rect x="17.1" y="355.0" width="76.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.1" y="366.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (378 samples, 6.48%)</title><rect x="17.1" y="339.0" width="76.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.1" y="350.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (373 samples, 6.39%)</title><rect x="17.9" y="323.0" width="75.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.9" y="334.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (349 samples, 5.98%)</title><rect x="18.1" y="307.0" width="70.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.1" y="318.0">sun/nio/..</text>
</g>
<g>
<title>kevent (336 samples, 5.76%)</title><rect x="20.7" y="291.0" width="67.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="23.7" y="302.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.07%)</title><rect x="88.6" y="307.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="91.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="89.0" y="291.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="89.0" y="275.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="89.0" y="259.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.0" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="89.0" y="243.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (6 samples, 0.10%)</title><rect x="89.4" y="307.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.4" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (5 samples, 0.09%)</title><rect x="89.7" y="291.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (8 samples, 0.14%)</title><rect x="90.7" y="307.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.7" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (8 samples, 0.14%)</title><rect x="90.7" y="291.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.7" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.07%)</title><rect x="90.7" y="275.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.7" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.05%)</title><rect x="91.5" y="275.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.5" y="286.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.05%)</title><rect x="91.5" y="259.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="94.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.05%)</title><rect x="91.5" y="243.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.09%)</title><rect x="92.3" y="307.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="95.3" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (2 samples, 0.03%)</title><rect x="92.9" y="291.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (205 samples, 3.51%)</title><rect x="93.7" y="371.0" width="41.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.7" y="382.0">one..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="94.3" y="355.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="97.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (194 samples, 3.32%)</title><rect x="94.7" y="355.0" width="39.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.7" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (139 samples, 2.38%)</title><rect x="94.7" y="339.0" width="28.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.7" y="350.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (121 samples, 2.07%)</title><rect x="95.1" y="323.0" width="24.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.1" y="334.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (121 samples, 2.07%)</title><rect x="95.1" y="307.0" width="24.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.1" y="318.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="95.3" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (118 samples, 2.02%)</title><rect x="95.7" y="291.0" width="23.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.7" y="302.0">r..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="95.7" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="95.7" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.7" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="95.7" y="243.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (116 samples, 1.99%)</title><rect x="96.1" y="275.0" width="23.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.1" y="286.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (116 samples, 1.99%)</title><rect x="96.1" y="259.0" width="23.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.1" y="270.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (116 samples, 1.99%)</title><rect x="96.1" y="243.0" width="23.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.1" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (116 samples, 1.99%)</title><rect x="96.1" y="227.0" width="23.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.1" y="238.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 1.95%)</title><rect x="96.1" y="211.0" width="23.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.1" y="222.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.05%)</title><rect x="96.1" y="195.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (2 samples, 0.03%)</title><rect x="96.3" y="179.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (110 samples, 1.88%)</title><rect x="96.9" y="195.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.9" y="206.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (110 samples, 1.88%)</title><rect x="96.9" y="179.0" width="22.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.9" y="190.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (110 samples, 1.88%)</title><rect x="96.9" y="163.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.9" y="174.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (109 samples, 1.87%)</title><rect x="96.9" y="147.0" width="22.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.9" y="158.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (109 samples, 1.87%)</title><rect x="96.9" y="131.0" width="22.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.9" y="142.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (98 samples, 1.68%)</title><rect x="98.7" y="115.0" width="19.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="101.7" y="126.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.05%)</title><rect x="99.2" y="99.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="102.2" y="110.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.03%)</title><rect x="99.2" y="83.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="102.2" y="94.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="99.8" y="99.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="102.8" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="100.0" y="83.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="103.0" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.05%)</title><rect x="100.6" y="99.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="103.6" y="110.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (2 samples, 0.03%)</title><rect x="100.8" y="83.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="103.8" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.07%)</title><rect x="101.2" y="99.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="104.2" y="110.0"></text>
</g>
<g>
<title>__psynch_cvsignal (74 samples, 1.27%)</title><rect x="102.0" y="99.0" width="14.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="105.0" y="110.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.05%)</title><rect x="117.1" y="99.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="120.1" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.05%)</title><rect x="118.0" y="99.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="121.0" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="119.2" y="211.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="119.2" y="195.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="122.2" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.12%)</title><rect x="119.6" y="323.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.07%)</title><rect x="119.8" y="307.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="120.6" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.6" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="120.6" y="291.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.6" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.10%)</title><rect x="121.2" y="323.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.10%)</title><rect x="121.2" y="307.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.10%)</title><rect x="121.2" y="291.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="124.2" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="121.8" y="275.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="124.8" y="286.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="122.4" y="323.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.4" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (55 samples, 0.94%)</title><rect x="122.8" y="339.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="125.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (54 samples, 0.93%)</title><rect x="123.0" y="323.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="123.0" y="307.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.0" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="123.0" y="291.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="126.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="123.0" y="275.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="123.0" y="259.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="123.0" y="243.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="126.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="123.0" y="227.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (52 samples, 0.89%)</title><rect x="123.4" y="307.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.10%)</title><rect x="123.4" y="291.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="126.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.10%)</title><rect x="123.4" y="275.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.05%)</title><rect x="124.0" y="259.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.05%)</title><rect x="124.0" y="243.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.0" y="254.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="124.2" y="227.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="127.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (46 samples, 0.79%)</title><rect x="124.6" y="291.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (46 samples, 0.79%)</title><rect x="124.6" y="275.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="127.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (46 samples, 0.79%)</title><rect x="124.6" y="259.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="127.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (44 samples, 0.75%)</title><rect x="125.0" y="243.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (44 samples, 0.75%)</title><rect x="125.0" y="227.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.0" y="238.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.03%)</title><rect x="126.0" y="211.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="129.0" y="222.0"></text>
</g>
<g>
<title>read (37 samples, 0.63%)</title><rect x="126.4" y="211.0" width="7.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="129.4" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.10%)</title><rect x="133.9" y="355.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="136.9" y="366.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.07%)</title><rect x="134.1" y="339.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="137.1" y="350.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.07%)</title><rect x="134.1" y="323.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="137.1" y="334.0"></text>
</g>
<g>
<title>_res (3 samples, 0.05%)</title><rect x="134.3" y="307.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="137.3" y="318.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=26115] (983 samples, 16.84%)</title><rect x="135.7" y="403.0" width="198.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="138.7" y="414.0">[NIO Selector #3 tid=26115]</text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.07%)</title><rect x="135.7" y="387.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="138.7" y="398.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (978 samples, 16.76%)</title><rect x="136.6" y="387.0" width="197.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.6" y="398.0">one/nio/server/SelectorThr..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.17%)</title><rect x="137.4" y="371.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="140.4" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (10 samples, 0.17%)</title><rect x="137.4" y="355.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="140.4" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.10%)</title><rect x="137.4" y="339.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="140.4" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (4 samples, 0.07%)</title><rect x="138.6" y="339.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="141.6" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.07%)</title><rect x="138.6" y="323.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="141.6" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.07%)</title><rect x="138.6" y="307.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="141.6" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.03%)</title><rect x="139.4" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (3 samples, 0.05%)</title><rect x="139.8" y="371.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.8" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (3 samples, 0.05%)</title><rect x="139.8" y="355.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 0.05%)</title><rect x="139.8" y="339.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="142.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (438 samples, 7.50%)</title><rect x="140.4" y="371.0" width="88.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.4" y="382.0">one/nio/ne..</text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.03%)</title><rect x="140.8" y="355.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="143.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (8 samples, 0.14%)</title><rect x="141.2" y="355.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.07%)</title><rect x="141.8" y="339.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="144.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.05%)</title><rect x="142.0" y="323.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="145.0" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.05%)</title><rect x="142.8" y="355.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="145.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.03%)</title><rect x="143.0" y="339.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="146.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (422 samples, 7.23%)</title><rect x="143.4" y="355.0" width="85.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.4" y="366.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (422 samples, 7.23%)</title><rect x="143.4" y="339.0" width="85.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.4" y="350.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (417 samples, 7.14%)</title><rect x="144.2" y="323.0" width="84.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.2" y="334.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (385 samples, 6.60%)</title><rect x="144.8" y="307.0" width="77.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.8" y="318.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.03%)</title><rect x="147.1" y="291.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="150.1" y="302.0"></text>
</g>
<g>
<title>kevent (372 samples, 6.37%)</title><rect x="147.5" y="291.0" width="75.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="150.5" y="302.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.12%)</title><rect x="222.7" y="307.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.7" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="223.3" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="223.7" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (9 samples, 0.15%)</title><rect x="224.1" y="307.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="227.1" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (5 samples, 0.09%)</title><rect x="224.9" y="291.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.09%)</title><rect x="225.9" y="307.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.9" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.07%)</title><rect x="226.1" y="291.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="229.1" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="226.3" y="275.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.3" y="286.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title><rect x="226.3" y="259.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.3" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title><rect x="226.3" y="243.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (7 samples, 0.12%)</title><rect x="227.1" y="307.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.1" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (521 samples, 8.93%)</title><rect x="228.9" y="371.0" width="105.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.9" y="382.0">one/nio/net/S..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="229.7" y="355.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="232.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (506 samples, 8.67%)</title><rect x="230.4" y="355.0" width="102.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.4" y="366.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (355 samples, 6.08%)</title><rect x="230.8" y="339.0" width="71.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.8" y="350.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (305 samples, 5.23%)</title><rect x="232.0" y="323.0" width="61.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.0" y="334.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (304 samples, 5.21%)</title><rect x="232.2" y="307.0" width="61.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.2" y="318.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.07%)</title><rect x="232.4" y="291.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.07%)</title><rect x="232.4" y="275.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.4" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.07%)</title><rect x="232.4" y="259.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="232.4" y="243.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="232.4" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.4" y="238.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="232.8" y="243.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="235.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="233.2" y="291.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="233.2" y="275.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.2" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="233.2" y="259.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.2" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="233.2" y="243.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="233.2" y="227.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (297 samples, 5.09%)</title><rect x="233.6" y="291.0" width="60.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="236.6" y="302.0">ru/mai..</text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="233.6" y="275.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="234.0" y="275.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="234.0" y="259.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="234.0" y="243.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (293 samples, 5.02%)</title><rect x="234.4" y="275.0" width="59.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.4" y="286.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.12%)</title><rect x="235.0" y="259.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="235.4" y="243.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.4" y="254.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.05%)</title><rect x="235.8" y="243.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="235.8" y="227.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="235.8" y="211.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.8" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="236.0" y="195.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (283 samples, 4.85%)</title><rect x="236.4" y="259.0" width="57.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.4" y="270.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (282 samples, 4.83%)</title><rect x="236.6" y="243.0" width="57.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.6" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (282 samples, 4.83%)</title><rect x="236.6" y="227.0" width="57.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.6" y="238.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (278 samples, 4.76%)</title><rect x="236.8" y="211.0" width="56.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.8" y="222.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.10%)</title><rect x="236.8" y="195.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.03%)</title><rect x="237.0" y="179.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.03%)</title><rect x="237.0" y="163.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.03%)</title><rect x="237.0" y="147.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.0" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="237.0" y="131.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.0" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="237.0" y="115.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.0" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (3 samples, 0.05%)</title><rect x="237.4" y="179.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (271 samples, 4.64%)</title><rect x="238.2" y="195.0" width="54.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.2" y="206.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (271 samples, 4.64%)</title><rect x="238.2" y="179.0" width="54.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.2" y="190.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (268 samples, 4.59%)</title><rect x="238.4" y="163.0" width="54.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.4" y="174.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (268 samples, 4.59%)</title><rect x="238.4" y="147.0" width="54.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.4" y="158.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (268 samples, 4.59%)</title><rect x="238.4" y="131.0" width="54.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.4" y="142.0">jdk/i..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.07%)</title><rect x="240.3" y="115.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="243.3" y="126.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title><rect x="241.3" y="115.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="244.3" y="126.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.03%)</title><rect x="241.7" y="115.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="244.7" y="126.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.05%)</title><rect x="242.1" y="115.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="245.1" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="242.7" y="115.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="245.7" y="126.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="243.1" y="115.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="246.1" y="126.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (241 samples, 4.13%)</title><rect x="243.7" y="115.0" width="48.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="246.7" y="126.0">Unsa..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.09%)</title><rect x="243.9" y="99.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="246.9" y="110.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.05%)</title><rect x="244.3" y="83.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="247.3" y="94.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.05%)</title><rect x="245.1" y="99.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="248.1" y="110.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.05%)</title><rect x="245.1" y="83.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="248.1" y="94.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.05%)</title><rect x="245.1" y="67.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="248.1" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.03%)</title><rect x="245.3" y="51.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="248.3" y="62.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.03%)</title><rect x="245.3" y="35.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="248.3" y="46.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (2 samples, 0.03%)</title><rect x="245.7" y="99.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="248.7" y="110.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (2 samples, 0.03%)</title><rect x="246.1" y="99.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="249.1" y="110.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.05%)</title><rect x="246.5" y="99.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="249.5" y="110.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.03%)</title><rect x="246.5" y="83.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="249.5" y="94.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.03%)</title><rect x="247.1" y="99.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="250.1" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.07%)</title><rect x="247.7" y="99.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="250.7" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.07%)</title><rect x="247.7" y="83.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="250.7" y="94.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.05%)</title><rect x="247.7" y="67.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="250.7" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="247.9" y="51.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="250.9" y="62.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="247.9" y="35.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="250.9" y="46.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.03%)</title><rect x="248.5" y="99.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="251.5" y="110.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="248.5" y="83.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="251.5" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="249.0" y="99.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="252.0" y="110.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (2 samples, 0.03%)</title><rect x="249.0" y="83.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="252.0" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.09%)</title><rect x="249.4" y="99.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="252.4" y="110.0"></text>
</g>
<g>
<title>__psynch_cvsignal (192 samples, 3.29%)</title><rect x="250.6" y="99.0" width="38.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="253.6" y="110.0">__p..</text>
</g>
<g>
<title>pthread_cond_signal (9 samples, 0.15%)</title><rect x="289.8" y="99.0" width="1.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="292.8" y="110.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (7 samples, 0.12%)</title><rect x="290.2" y="83.0" width="1.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="293.2" y="94.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.05%)</title><rect x="291.8" y="99.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="294.8" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="292.6" y="163.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.05%)</title><rect x="293.0" y="211.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="293.0" y="195.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.03%)</title><rect x="293.2" y="179.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.2" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.27%)</title><rect x="293.6" y="323.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (9 samples, 0.15%)</title><rect x="293.6" y="307.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="295.0" y="291.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.0" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.12%)</title><rect x="295.4" y="307.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.12%)</title><rect x="295.4" y="291.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.4" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (18 samples, 0.31%)</title><rect x="297.1" y="323.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (17 samples, 0.29%)</title><rect x="297.3" y="307.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.3" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (14 samples, 0.24%)</title><rect x="297.7" y="291.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.7" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.07%)</title><rect x="298.1" y="275.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.1" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="298.5" y="259.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.07%)</title><rect x="298.9" y="275.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.03%)</title><rect x="299.3" y="259.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.07%)</title><rect x="299.7" y="275.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.7" y="286.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="300.7" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.12%)</title><rect x="301.1" y="323.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.1" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.12%)</title><rect x="301.1" y="307.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.1" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (149 samples, 2.55%)</title><rect x="302.5" y="339.0" width="30.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.5" y="350.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (147 samples, 2.52%)</title><rect x="302.7" y="323.0" width="29.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.7" y="334.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="302.7" y="307.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="305.7" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="302.7" y="291.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="302.7" y="275.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.7" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="302.9" y="259.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="305.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="302.9" y="243.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="305.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (144 samples, 2.47%)</title><rect x="303.3" y="307.0" width="29.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.3" y="318.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 0.29%)</title><rect x="303.3" y="291.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (17 samples, 0.29%)</title><rect x="303.3" y="275.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.03%)</title><rect x="303.9" y="259.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="306.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (12 samples, 0.21%)</title><rect x="304.3" y="259.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (12 samples, 0.21%)</title><rect x="304.3" y="243.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.05%)</title><rect x="304.3" y="227.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (3 samples, 0.05%)</title><rect x="305.2" y="227.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.2" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="306.0" y="227.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="309.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (127 samples, 2.18%)</title><rect x="306.8" y="291.0" width="25.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.8" y="302.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (127 samples, 2.18%)</title><rect x="306.8" y="275.0" width="25.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.8" y="286.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (127 samples, 2.18%)</title><rect x="306.8" y="259.0" width="25.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.8" y="270.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (126 samples, 2.16%)</title><rect x="307.0" y="243.0" width="25.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.0" y="254.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (126 samples, 2.16%)</title><rect x="307.0" y="227.0" width="25.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.0" y="238.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (6 samples, 0.10%)</title><rect x="308.2" y="211.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="311.2" y="222.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.07%)</title><rect x="308.6" y="195.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="311.6" y="206.0"></text>
</g>
<g>
<title>read (112 samples, 1.92%)</title><rect x="309.8" y="211.0" width="22.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="312.8" y="222.0">r..</text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.14%)</title><rect x="332.6" y="355.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="335.6" y="366.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.03%)</title><rect x="332.8" y="339.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="335.8" y="350.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="333.3" y="339.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="336.3" y="350.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.05%)</title><rect x="333.3" y="323.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="336.3" y="334.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="333.9" y="339.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="336.9" y="350.0"></text>
</g>
<g>
<title>[tid=13315] (16 samples, 0.27%)</title><rect x="334.5" y="403.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="337.5" y="414.0"></text>
</g>
<g>
<title>thread_start (16 samples, 0.27%)</title><rect x="334.5" y="387.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="337.5" y="398.0"></text>
</g>
<g>
<title>_pthread_start (16 samples, 0.27%)</title><rect x="334.5" y="371.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="337.5" y="382.0"></text>
</g>
<g>
<title>_pthread_body (16 samples, 0.27%)</title><rect x="334.5" y="355.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="337.5" y="366.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (16 samples, 0.27%)</title><rect x="334.5" y="339.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="337.5" y="350.0"></text>
</g>
<g>
<title>Thread::call_run() (16 samples, 0.27%)</title><rect x="334.5" y="323.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="337.5" y="334.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (16 samples, 0.27%)</title><rect x="334.5" y="307.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="337.5" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (16 samples, 0.27%)</title><rect x="334.5" y="291.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="337.5" y="302.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (5 samples, 0.09%)</title><rect x="334.5" y="275.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="337.5" y="286.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.07%)</title><rect x="334.7" y="259.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="337.7" y="270.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (3 samples, 0.05%)</title><rect x="334.9" y="243.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="337.9" y="254.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (3 samples, 0.05%)</title><rect x="334.9" y="227.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="337.9" y="238.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (3 samples, 0.05%)</title><rect x="334.9" y="211.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="337.9" y="222.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (2 samples, 0.03%)</title><rect x="335.1" y="195.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="338.1" y="206.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (2 samples, 0.03%)</title><rect x="335.1" y="179.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="338.1" y="190.0"></text>
</g>
<g>
<title>SurvRateGroup::get_seq(unsigned long) const (2 samples, 0.03%)</title><rect x="335.1" y="163.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="338.1" y="174.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (11 samples, 0.19%)</title><rect x="335.5" y="275.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="338.5" y="286.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (11 samples, 0.19%)</title><rect x="335.5" y="259.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="338.5" y="270.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (11 samples, 0.19%)</title><rect x="335.5" y="243.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="338.5" y="254.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (10 samples, 0.17%)</title><rect x="335.7" y="227.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="338.7" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.15%)</title><rect x="335.7" y="211.0" width="1.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="338.7" y="222.0"></text>
</g>
<g>
<title>[tid=13827] (7 samples, 0.12%)</title><rect x="337.7" y="403.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="340.7" y="414.0"></text>
</g>
<g>
<title>thread_start (7 samples, 0.12%)</title><rect x="337.7" y="387.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="340.7" y="398.0"></text>
</g>
<g>
<title>_pthread_start (7 samples, 0.12%)</title><rect x="337.7" y="371.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="340.7" y="382.0"></text>
</g>
<g>
<title>_pthread_body (7 samples, 0.12%)</title><rect x="337.7" y="355.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="340.7" y="366.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (7 samples, 0.12%)</title><rect x="337.7" y="339.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="340.7" y="350.0"></text>
</g>
<g>
<title>Thread::call_run() (7 samples, 0.12%)</title><rect x="337.7" y="323.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="340.7" y="334.0"></text>
</g>
<g>
<title>VMThread::run() (7 samples, 0.12%)</title><rect x="337.7" y="307.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="340.7" y="318.0"></text>
</g>
<g>
<title>VMThread::loop() (7 samples, 0.12%)</title><rect x="337.7" y="291.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="340.7" y="302.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.03%)</title><rect x="337.7" y="275.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="340.7" y="286.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.03%)</title><rect x="337.7" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="340.7" y="270.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="337.7" y="243.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="340.7" y="254.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.03%)</title><rect x="338.1" y="275.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="341.1" y="286.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (3 samples, 0.05%)</title><rect x="338.5" y="275.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="341.5" y="286.0"></text>
</g>
<g>
<title>[tid=20739] (6 samples, 0.10%)</title><rect x="339.1" y="403.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="342.1" y="414.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.10%)</title><rect x="339.1" y="387.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="342.1" y="398.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.10%)</title><rect x="339.1" y="371.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="342.1" y="382.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.10%)</title><rect x="339.1" y="355.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="342.1" y="366.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.10%)</title><rect x="339.1" y="339.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="342.1" y="350.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.10%)</title><rect x="339.1" y="323.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="342.1" y="334.0"></text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 0.10%)</title><rect x="339.1" y="307.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="342.1" y="318.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="339.3" y="291.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="342.3" y="302.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.03%)</title><rect x="339.3" y="275.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="342.3" y="286.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (2 samples, 0.03%)</title><rect x="339.3" y="259.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="342.3" y="270.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (2 samples, 0.03%)</title><rect x="339.3" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="342.3" y="254.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (2 samples, 0.03%)</title><rect x="339.3" y="227.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="342.3" y="238.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.03%)</title><rect x="339.3" y="211.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="342.3" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="339.3" y="195.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="342.3" y="206.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (3 samples, 0.05%)</title><rect x="339.7" y="291.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="342.7" y="302.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (3 samples, 0.05%)</title><rect x="339.7" y="275.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="342.7" y="286.0"></text>
</g>
<g>
<title>[tid=27907] (3 samples, 0.05%)</title><rect x="340.5" y="403.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="343.5" y="414.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.05%)</title><rect x="340.5" y="387.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="343.5" y="398.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.05%)</title><rect x="340.5" y="371.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="343.5" y="382.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.05%)</title><rect x="340.5" y="355.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="343.5" y="366.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.05%)</title><rect x="340.5" y="339.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="343.5" y="350.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.05%)</title><rect x="340.5" y="323.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="343.5" y="334.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.05%)</title><rect x="340.5" y="307.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="343.5" y="318.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="340.7" y="291.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="343.7" y="302.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.03%)</title><rect x="340.7" y="275.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="343.7" y="286.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (2 samples, 0.03%)</title><rect x="340.7" y="259.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="343.7" y="270.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (2 samples, 0.03%)</title><rect x="340.7" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="343.7" y="254.0"></text>
</g>
<g>
<title>[tid=3331] (2 samples, 0.03%)</title><rect x="341.1" y="403.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="344.1" y="414.0"></text>
</g>
<g>
<title>start_wqthread (2 samples, 0.03%)</title><rect x="341.1" y="387.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="344.1" y="398.0"></text>
</g>
<g>
<title>_pthread_wqthread (2 samples, 0.03%)</title><rect x="341.1" y="371.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="344.1" y="382.0"></text>
</g>
<g>
<title>_dispatch_kevent_worker_thread (2 samples, 0.03%)</title><rect x="341.1" y="355.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="344.1" y="366.0"></text>
</g>
<g>
<title>_dispatch_lane_serial_drain (2 samples, 0.03%)</title><rect x="341.1" y="339.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="344.1" y="350.0"></text>
</g>
<g>
<title>_dispatch_source_invoke (2 samples, 0.03%)</title><rect x="341.1" y="323.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="344.1" y="334.0"></text>
</g>
<g>
<title>_dispatch_continuation_pop (2 samples, 0.03%)</title><rect x="341.1" y="307.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="344.1" y="318.0"></text>
</g>
<g>
<title>_dispatch_client_callout (2 samples, 0.03%)</title><rect x="341.1" y="291.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="344.1" y="302.0"></text>
</g>
<g>
<title>malloc_memory_event_handler (2 samples, 0.03%)</title><rect x="341.1" y="275.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="344.1" y="286.0"></text>
</g>
<g>
<title>malloc_zone_pressure_relief (2 samples, 0.03%)</title><rect x="341.1" y="259.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="344.1" y="270.0"></text>
</g>
<g>
<title>szone_pressure_relief (2 samples, 0.03%)</title><rect x="341.1" y="243.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="344.1" y="254.0"></text>
</g>
<g>
<title>[tid=34051] (3 samples, 0.05%)</title><rect x="341.5" y="403.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="344.5" y="414.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.05%)</title><rect x="341.5" y="387.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="344.5" y="398.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.05%)</title><rect x="341.5" y="371.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="344.5" y="382.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.05%)</title><rect x="341.5" y="355.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="344.5" y="366.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.05%)</title><rect x="341.5" y="339.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="344.5" y="350.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.05%)</title><rect x="341.5" y="323.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="344.5" y="334.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.05%)</title><rect x="341.5" y="307.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="344.5" y="318.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="341.5" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="344.5" y="302.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.03%)</title><rect x="341.5" y="275.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="344.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="341.5" y="259.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="344.5" y="270.0"></text>
</g>
<g>
<title>[tid=34819] (4 samples, 0.07%)</title><rect x="342.1" y="403.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="345.1" y="414.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.07%)</title><rect x="342.1" y="387.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="345.1" y="398.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.07%)</title><rect x="342.1" y="371.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="345.1" y="382.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.07%)</title><rect x="342.1" y="355.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="345.1" y="366.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.07%)</title><rect x="342.1" y="339.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="345.1" y="350.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.07%)</title><rect x="342.1" y="323.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="345.1" y="334.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.07%)</title><rect x="342.1" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="345.1" y="318.0"></text>
</g>
<g>
<title>[tid=40451] (18 samples, 0.31%)</title><rect x="343.0" y="403.0" width="3.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="346.0" y="414.0"></text>
</g>
<g>
<title>thread_start (18 samples, 0.31%)</title><rect x="343.0" y="387.0" width="3.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="346.0" y="398.0"></text>
</g>
<g>
<title>_pthread_start (18 samples, 0.31%)</title><rect x="343.0" y="371.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="346.0" y="382.0"></text>
</g>
<g>
<title>_pthread_body (18 samples, 0.31%)</title><rect x="343.0" y="355.0" width="3.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="346.0" y="366.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (18 samples, 0.31%)</title><rect x="343.0" y="339.0" width="3.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="346.0" y="350.0"></text>
</g>
<g>
<title>Thread::call_run() (18 samples, 0.31%)</title><rect x="343.0" y="323.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="346.0" y="334.0"></text>
</g>
<g>
<title>WatcherThread::run() (18 samples, 0.31%)</title><rect x="343.0" y="307.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="346.0" y="318.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (17 samples, 0.29%)</title><rect x="343.2" y="291.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="346.2" y="302.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (16 samples, 0.27%)</title><rect x="343.2" y="275.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="346.2" y="286.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (16 samples, 0.27%)</title><rect x="343.2" y="259.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="346.2" y="270.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (15 samples, 0.26%)</title><rect x="343.4" y="243.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="346.4" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.24%)</title><rect x="343.6" y="227.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="346.6" y="238.0"></text>
</g>
<g>
<title>[tid=43267] (9 samples, 0.15%)</title><rect x="346.8" y="403.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="349.8" y="414.0"></text>
</g>
<g>
<title>thread_start (9 samples, 0.15%)</title><rect x="346.8" y="387.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="349.8" y="398.0"></text>
</g>
<g>
<title>_pthread_start (9 samples, 0.15%)</title><rect x="346.8" y="371.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="349.8" y="382.0"></text>
</g>
<g>
<title>_pthread_body (9 samples, 0.15%)</title><rect x="346.8" y="355.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="349.8" y="366.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.15%)</title><rect x="346.8" y="339.0" width="1.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="349.8" y="350.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.15%)</title><rect x="346.8" y="323.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="349.8" y="334.0"></text>
</g>
<g>
<title>JavaThread::run() (9 samples, 0.15%)</title><rect x="346.8" y="307.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="349.8" y="318.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (9 samples, 0.15%)</title><rect x="346.8" y="291.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="349.8" y="302.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (9 samples, 0.15%)</title><rect x="346.8" y="275.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="349.8" y="286.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (9 samples, 0.15%)</title><rect x="346.8" y="259.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="349.8" y="270.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (8 samples, 0.14%)</title><rect x="346.8" y="243.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="349.8" y="254.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (8 samples, 0.14%)</title><rect x="346.8" y="227.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="349.8" y="238.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (5 samples, 0.09%)</title><rect x="346.8" y="211.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="349.8" y="222.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.03%)</title><rect x="346.8" y="195.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="349.8" y="206.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (2 samples, 0.03%)</title><rect x="347.4" y="195.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="350.4" y="206.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 0.03%)</title><rect x="347.8" y="211.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="350.8" y="222.0"></text>
</g>
<g>
<title>[worker tid=27139] (1,042 samples, 17.85%)</title><rect x="348.6" y="403.0" width="210.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="351.6" y="414.0">[worker tid=27139]</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (3 samples, 0.05%)</title><rect x="348.6" y="387.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="351.6" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (28 samples, 0.48%)</title><rect x="349.6" y="387.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="352.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (26 samples, 0.45%)</title><rect x="349.8" y="371.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="352.8" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (8 samples, 0.14%)</title><rect x="349.8" y="355.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="352.8" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.03%)</title><rect x="350.0" y="339.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="353.0" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.09%)</title><rect x="350.4" y="339.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="353.4" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.07%)</title><rect x="350.6" y="323.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="353.6" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.05%)</title><rect x="351.4" y="355.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="354.4" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (15 samples, 0.26%)</title><rect x="352.1" y="355.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="355.1" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (8 samples, 0.14%)</title><rect x="353.5" y="339.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="356.5" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="355.3" y="387.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="358.3" y="398.0"></text>
</g>
<g>
<title>[not_walkable_Java] (19 samples, 0.33%)</title><rect x="356.3" y="387.0" width="3.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="359.3" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.09%)</title><rect x="356.3" y="371.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="359.3" y="382.0"></text>
</g>
<g>
<title>CompiledMethod::is_method_handle_return(unsigned char*) (2 samples, 0.03%)</title><rect x="357.5" y="371.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="360.5" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (9 samples, 0.15%)</title><rect x="358.3" y="371.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="361.3" y="382.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (6 samples, 0.10%)</title><rect x="358.9" y="355.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="361.9" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (30 samples, 0.51%)</title><rect x="360.1" y="387.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="363.1" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (25 samples, 0.43%)</title><rect x="360.5" y="371.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="363.5" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (25 samples, 0.43%)</title><rect x="360.5" y="355.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="363.5" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (11 samples, 0.19%)</title><rect x="360.5" y="339.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="363.5" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.10%)</title><rect x="362.8" y="339.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="365.8" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (6 samples, 0.10%)</title><rect x="362.8" y="323.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="365.8" y="334.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (8 samples, 0.14%)</title><rect x="364.0" y="339.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="367.0" y="350.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (3 samples, 0.05%)</title><rect x="365.6" y="371.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="368.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.run (952 samples, 16.31%)</title><rect x="366.2" y="387.0" width="192.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.2" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (952 samples, 16.31%)</title><rect x="366.2" y="371.0" width="192.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.2" y="382.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (952 samples, 16.31%)</title><rect x="366.2" y="355.0" width="192.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.2" y="366.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (348 samples, 5.96%)</title><rect x="366.4" y="339.0" width="70.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.4" y="350.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (345 samples, 5.91%)</title><rect x="366.8" y="323.0" width="69.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="369.8" y="334.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (309 samples, 5.29%)</title><rect x="367.2" y="307.0" width="62.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.2" y="318.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="367.4" y="291.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="367.4" y="275.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="367.4" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="367.4" y="243.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.4" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="367.4" y="227.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="370.4" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="367.4" y="211.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="370.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="367.4" y="195.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="370.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.07%)</title><rect x="367.8" y="291.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.07%)</title><rect x="367.8" y="275.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.07%)</title><rect x="367.8" y="259.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.07%)</title><rect x="367.8" y="243.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.07%)</title><rect x="367.8" y="227.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.8" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.03%)</title><rect x="368.2" y="211.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="371.2" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="368.2" y="195.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="371.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (302 samples, 5.17%)</title><rect x="368.6" y="291.0" width="61.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.6" y="302.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (302 samples, 5.17%)</title><rect x="368.6" y="275.0" width="61.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="371.6" y="286.0">jdk/in..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (294 samples, 5.04%)</title><rect x="370.2" y="259.0" width="59.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="373.2" y="270.0">Unsafe..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.07%)</title><rect x="370.9" y="243.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="373.9" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.05%)</title><rect x="371.1" y="227.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="374.1" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.05%)</title><rect x="371.1" y="211.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="374.1" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.03%)</title><rect x="371.1" y="195.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="374.1" y="206.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (6 samples, 0.10%)</title><rect x="371.7" y="243.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="374.7" y="254.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="372.1" y="227.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="375.1" y="238.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (2 samples, 0.03%)</title><rect x="372.5" y="227.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="375.5" y="238.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.03%)</title><rect x="372.9" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="375.9" y="254.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.03%)</title><rect x="372.9" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="375.9" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (265 samples, 4.54%)</title><rect x="373.7" y="243.0" width="53.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="376.7" y="254.0">Parke..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.03%)</title><rect x="374.3" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="377.3" y="238.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.03%)</title><rect x="374.7" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="377.7" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (252 samples, 4.32%)</title><rect x="375.1" y="227.0" width="50.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="378.1" y="238.0">__psy..</text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.10%)</title><rect x="426.0" y="227.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="429.0" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.05%)</title><rect x="427.5" y="243.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="430.5" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (5 samples, 0.09%)</title><rect x="428.5" y="243.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="431.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (15 samples, 0.26%)</title><rect x="429.7" y="307.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="432.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (15 samples, 0.26%)</title><rect x="429.7" y="291.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="432.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (13 samples, 0.22%)</title><rect x="429.7" y="275.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.07%)</title><rect x="430.5" y="259.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="433.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.07%)</title><rect x="430.5" y="243.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.5" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.07%)</title><rect x="430.5" y="227.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="433.5" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.07%)</title><rect x="430.5" y="211.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="433.5" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.07%)</title><rect x="430.5" y="195.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="433.5" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.07%)</title><rect x="430.5" y="179.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="433.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.07%)</title><rect x="431.3" y="259.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="434.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.07%)</title><rect x="431.3" y="243.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.07%)</title><rect x="431.3" y="227.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="434.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="432.3" y="275.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="435.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="432.3" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="432.3" y="243.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.33%)</title><rect x="432.7" y="307.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.33%)</title><rect x="432.7" y="291.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="435.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.33%)</title><rect x="432.7" y="275.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="435.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.33%)</title><rect x="432.7" y="259.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="435.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.33%)</title><rect x="432.7" y="243.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.7" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (18 samples, 0.31%)</title><rect x="432.9" y="227.0" width="3.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="435.9" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="432.9" y="211.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="435.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.27%)</title><rect x="433.3" y="211.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="436.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (603 samples, 10.33%)</title><rect x="436.8" y="339.0" width="121.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="439.8" y="350.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (603 samples, 10.33%)</title><rect x="436.8" y="323.0" width="121.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="439.8" y="334.0">ru/mail/polis/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (397 samples, 6.80%)</title><rect x="436.8" y="307.0" width="80.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.8" y="318.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (390 samples, 6.68%)</title><rect x="437.2" y="291.0" width="78.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.2" y="302.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.22%)</title><rect x="437.2" y="275.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.2" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.17%)</title><rect x="437.8" y="259.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.8" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.05%)</title><rect x="438.2" y="243.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.2" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.09%)</title><rect x="438.8" y="243.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.07%)</title><rect x="439.0" y="227.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="442.0" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (377 samples, 6.46%)</title><rect x="439.8" y="275.0" width="76.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.8" y="286.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (377 samples, 6.46%)</title><rect x="439.8" y="259.0" width="76.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="442.8" y="270.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (375 samples, 6.42%)</title><rect x="440.2" y="243.0" width="75.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="443.2" y="254.0">one/nio/..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.03%)</title><rect x="440.2" y="227.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="443.2" y="238.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (2 samples, 0.03%)</title><rect x="440.8" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="443.8" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="441.6" y="227.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="444.6" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.03%)</title><rect x="441.8" y="211.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="444.8" y="222.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (365 samples, 6.25%)</title><rect x="442.2" y="227.0" width="73.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.2" y="238.0">one/nio/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.19%)</title><rect x="442.2" y="211.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="445.2" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.19%)</title><rect x="442.2" y="195.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.2" y="206.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="442.4" y="179.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="445.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="442.8" y="179.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="445.8" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="443.2" y="163.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.2" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="443.8" y="179.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="446.8" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.05%)</title><rect x="443.8" y="163.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="446.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (354 samples, 6.06%)</title><rect x="444.4" y="211.0" width="71.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.4" y="222.0">sun/nio/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.07%)</title><rect x="444.4" y="195.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="447.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.07%)</title><rect x="444.4" y="179.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="447.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.05%)</title><rect x="444.4" y="163.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="447.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.05%)</title><rect x="444.4" y="147.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="447.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.05%)</title><rect x="444.4" y="131.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="447.4" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="444.6" y="115.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="447.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (350 samples, 6.00%)</title><rect x="445.2" y="195.0" width="70.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.2" y="206.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (350 samples, 6.00%)</title><rect x="445.2" y="179.0" width="70.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.2" y="190.0">sun/nio/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="445.4" y="163.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="448.4" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="445.4" y="147.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.4" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title><rect x="445.4" y="131.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.4" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="445.4" y="115.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.4" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="445.4" y="99.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="448.4" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (332 samples, 5.69%)</title><rect x="445.9" y="163.0" width="67.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.9" y="174.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (332 samples, 5.69%)</title><rect x="445.9" y="147.0" width="67.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.9" y="158.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (332 samples, 5.69%)</title><rect x="445.9" y="131.0" width="67.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.9" y="142.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.09%)</title><rect x="448.5" y="115.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="451.5" y="126.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="449.1" y="99.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="452.1" y="110.0"></text>
</g>
<g>
<title>write (314 samples, 5.38%)</title><rect x="449.5" y="115.0" width="63.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="452.5" y="126.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (15 samples, 0.26%)</title><rect x="513.0" y="163.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="516.0" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.10%)</title><rect x="513.4" y="147.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="516.4" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.03%)</title><rect x="514.2" y="131.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="517.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (7 samples, 0.12%)</title><rect x="514.6" y="147.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="517.6" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.05%)</title><rect x="515.2" y="131.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.2" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.05%)</title><rect x="515.2" y="115.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.2" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.07%)</title><rect x="516.0" y="291.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.07%)</title><rect x="516.0" y="275.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="519.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="516.4" y="259.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.4" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="516.4" y="243.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.4" y="254.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="516.4" y="227.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="519.4" y="238.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.03%)</title><rect x="516.4" y="211.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="519.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (206 samples, 3.53%)</title><rect x="517.0" y="307.0" width="41.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="520.0" y="318.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (206 samples, 3.53%)</title><rect x="517.0" y="291.0" width="41.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.0" y="302.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (206 samples, 3.53%)</title><rect x="517.0" y="275.0" width="41.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="520.0" y="286.0">ru/..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.03%)</title><rect x="518.0" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="521.0" y="270.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.03%)</title><rect x="518.4" y="259.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="521.4" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (40 samples, 0.69%)</title><rect x="518.8" y="259.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="521.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (5 samples, 0.09%)</title><rect x="519.4" y="243.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="522.4" y="254.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.03%)</title><rect x="519.4" y="227.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="522.4" y="238.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.05%)</title><rect x="519.8" y="227.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="522.8" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.05%)</title><rect x="519.8" y="211.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="522.8" y="222.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.03%)</title><rect x="520.0" y="195.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="523.0" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (26 samples, 0.45%)</title><rect x="520.5" y="243.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="523.5" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="522.5" y="227.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="525.5" y="238.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (6 samples, 0.10%)</title><rect x="522.9" y="227.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="525.9" y="238.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (5 samples, 0.09%)</title><rect x="523.1" y="211.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="526.1" y="222.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (2 samples, 0.03%)</title><rect x="524.1" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="527.1" y="238.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (2 samples, 0.03%)</title><rect x="524.5" y="227.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="527.5" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (3 samples, 0.05%)</title><rect x="524.9" y="227.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="527.9" y="238.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.09%)</title><rect x="525.7" y="243.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="528.7" y="254.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (4 samples, 0.07%)</title><rect x="525.9" y="227.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="528.9" y="238.0"></text>
</g>
<g>
<title>_rethrow_Java (2 samples, 0.03%)</title><rect x="527.1" y="259.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="530.1" y="270.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (3 samples, 0.05%)</title><rect x="527.5" y="259.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="530.5" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.03%)</title><rect x="528.1" y="259.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="531.1" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.07%)</title><rect x="528.5" y="259.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="531.5" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.03%)</title><rect x="528.9" y="243.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="531.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (145 samples, 2.48%)</title><rect x="529.3" y="259.0" width="29.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="532.3" y="270.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title><rect x="530.4" y="243.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="533.4" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/510464020.invoke (2 samples, 0.03%)</title><rect x="530.4" y="227.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="533.4" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="530.4" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="533.4" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (23 samples, 0.39%)</title><rect x="530.8" y="243.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="533.8" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (17 samples, 0.29%)</title><rect x="531.6" y="227.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.6" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 0.29%)</title><rect x="531.6" y="211.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.6" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.17%)</title><rect x="531.6" y="195.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.6" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.12%)</title><rect x="532.2" y="179.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.2" y="190.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (4 samples, 0.07%)</title><rect x="533.8" y="195.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.8" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="534.6" y="195.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="537.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (2 samples, 0.03%)</title><rect x="535.0" y="227.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="538.0" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="535.0" y="211.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="538.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="535.0" y="195.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="538.0" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (102 samples, 1.75%)</title><rect x="535.4" y="243.0" width="20.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="538.4" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (102 samples, 1.75%)</title><rect x="535.4" y="227.0" width="20.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="538.4" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (102 samples, 1.75%)</title><rect x="535.4" y="211.0" width="20.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="538.4" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="536.8" y="195.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="539.8" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="537.2" y="195.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="540.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.05%)</title><rect x="537.6" y="195.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="540.6" y="206.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (87 samples, 1.49%)</title><rect x="538.2" y="195.0" width="17.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="541.2" y="206.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="538.6" y="179.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="541.6" y="190.0"></text>
</g>
<g>
<title>free (6 samples, 0.10%)</title><rect x="539.5" y="179.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="542.5" y="190.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.07%)</title><rect x="539.9" y="163.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="542.9" y="174.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="540.9" y="179.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="543.9" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.05%)</title><rect x="541.5" y="179.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="544.5" y="190.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.05%)</title><rect x="541.5" y="163.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="544.5" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="541.5" y="147.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="544.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (65 samples, 1.11%)</title><rect x="542.1" y="179.0" width="13.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="545.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (64 samples, 1.10%)</title><rect x="542.3" y="163.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="545.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (61 samples, 1.05%)</title><rect x="542.9" y="147.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="545.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.05%)</title><rect x="543.1" y="131.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="546.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (49 samples, 0.84%)</title><rect x="543.7" y="131.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="546.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (13 samples, 0.22%)</title><rect x="545.5" y="115.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="548.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (8 samples, 0.14%)</title><rect x="546.5" y="99.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="549.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="548.1" y="115.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="551.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.03%)</title><rect x="548.1" y="99.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="551.1" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="548.1" y="83.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="551.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (5 samples, 0.09%)</title><rect x="548.6" y="115.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="551.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="549.6" y="115.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="552.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="550.0" y="115.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="553.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (14 samples, 0.24%)</title><rect x="550.6" y="115.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="553.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.03%)</title><rect x="552.8" y="99.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="555.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.05%)</title><rect x="553.6" y="131.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="556.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (4 samples, 0.07%)</title><rect x="554.2" y="131.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="557.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.05%)</title><rect x="555.2" y="179.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="558.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (8 samples, 0.14%)</title><rect x="556.0" y="243.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="559.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (6 samples, 0.10%)</title><rect x="556.4" y="227.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="559.4" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.07%)</title><rect x="556.8" y="211.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="559.8" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="557.0" y="195.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="560.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="557.0" y="179.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="560.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/NoSuchElementLite.&lt;init&gt; (5 samples, 0.09%)</title><rect x="557.6" y="243.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.6" y="254.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (5 samples, 0.09%)</title><rect x="557.6" y="227.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="560.6" y="238.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (5 samples, 0.09%)</title><rect x="557.6" y="211.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.6" y="222.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (5 samples, 0.09%)</title><rect x="557.6" y="195.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="560.6" y="206.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (5 samples, 0.09%)</title><rect x="557.6" y="179.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="560.6" y="190.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (3 samples, 0.05%)</title><rect x="558.7" y="387.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="561.7" y="398.0"></text>
</g>
<g>
<title>[worker tid=35075] (891 samples, 15.26%)</title><rect x="559.3" y="403.0" width="180.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="562.3" y="414.0">[worker tid=35075]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (30 samples, 0.51%)</title><rect x="559.9" y="387.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="562.9" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (27 samples, 0.46%)</title><rect x="560.1" y="371.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="563.1" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.05%)</title><rect x="560.1" y="355.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="563.1" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="560.3" y="339.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="563.3" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.05%)</title><rect x="560.7" y="355.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="563.7" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (21 samples, 0.36%)</title><rect x="561.3" y="355.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="564.3" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (13 samples, 0.22%)</title><rect x="562.9" y="339.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="565.9" y="350.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.05%)</title><rect x="565.9" y="387.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="568.9" y="398.0"></text>
</g>
<g>
<title>[not_walkable_Java] (10 samples, 0.17%)</title><rect x="566.5" y="387.0" width="2.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="569.5" y="398.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (3 samples, 0.05%)</title><rect x="566.5" y="371.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="569.5" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (6 samples, 0.10%)</title><rect x="567.4" y="371.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="570.4" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="567.8" y="355.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="570.8" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.03%)</title><rect x="567.8" y="339.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="570.8" y="350.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.03%)</title><rect x="568.2" y="355.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.2" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (17 samples, 0.29%)</title><rect x="568.6" y="387.0" width="3.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="571.6" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (15 samples, 0.26%)</title><rect x="568.8" y="371.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="571.8" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (15 samples, 0.26%)</title><rect x="568.8" y="355.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="571.8" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (12 samples, 0.21%)</title><rect x="568.8" y="339.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="571.8" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="571.2" y="339.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="574.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.run (825 samples, 14.13%)</title><rect x="572.0" y="387.0" width="166.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="575.0" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (825 samples, 14.13%)</title><rect x="572.0" y="371.0" width="166.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="575.0" y="382.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (825 samples, 14.13%)</title><rect x="572.0" y="355.0" width="166.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="575.0" y="366.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.03%)</title><rect x="572.2" y="339.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="575.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="572.2" y="323.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="575.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (318 samples, 5.45%)</title><rect x="572.6" y="339.0" width="64.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="575.6" y="350.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (315 samples, 5.40%)</title><rect x="573.2" y="323.0" width="63.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="576.2" y="334.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (293 samples, 5.02%)</title><rect x="573.4" y="307.0" width="59.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="576.4" y="318.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.03%)</title><rect x="573.4" y="291.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.03%)</title><rect x="573.8" y="291.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="576.8" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.03%)</title><rect x="573.8" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="576.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="574.2" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="574.2" y="275.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="577.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="574.2" y="259.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="577.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (286 samples, 4.90%)</title><rect x="574.8" y="291.0" width="57.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="577.8" y="302.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (286 samples, 4.90%)</title><rect x="574.8" y="275.0" width="57.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="577.8" y="286.0">jdk/in..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title><rect x="575.8" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="578.8" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (278 samples, 4.76%)</title><rect x="576.4" y="259.0" width="56.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="579.4" y="270.0">Unsafe..</text>
</g>
<g>
<title>JavaThread::parker() (3 samples, 0.05%)</title><rect x="577.1" y="243.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="580.1" y="254.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="577.9" y="243.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="580.9" y="254.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.03%)</title><rect x="578.5" y="243.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="581.5" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (255 samples, 4.37%)</title><rect x="578.9" y="243.0" width="51.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="581.9" y="254.0">Parke..</text>
</g>
<g>
<title>__psynch_cvwait (241 samples, 4.13%)</title><rect x="579.1" y="227.0" width="48.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="582.1" y="238.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.10%)</title><rect x="627.8" y="227.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="630.8" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.03%)</title><rect x="628.6" y="211.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="631.6" y="222.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.03%)</title><rect x="629.2" y="227.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="632.2" y="238.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.03%)</title><rect x="629.6" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="632.6" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="630.0" y="227.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="633.0" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.07%)</title><rect x="630.8" y="243.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="633.8" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="630.8" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="633.8" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="631.2" y="227.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="634.2" y="238.0"></text>
</g>
<g>
<title>pthread_cond_wait (4 samples, 0.07%)</title><rect x="631.8" y="243.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="634.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 0.24%)</title><rect x="632.6" y="307.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="635.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (14 samples, 0.24%)</title><rect x="632.6" y="291.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="635.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (14 samples, 0.24%)</title><rect x="632.6" y="275.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (3 samples, 0.05%)</title><rect x="633.1" y="259.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.12%)</title><rect x="633.9" y="259.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.09%)</title><rect x="634.1" y="243.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="637.1" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.09%)</title><rect x="634.1" y="227.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="637.1" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.09%)</title><rect x="634.1" y="211.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="637.1" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.09%)</title><rect x="634.1" y="195.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="637.1" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.09%)</title><rect x="634.1" y="179.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="637.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.12%)</title><rect x="635.5" y="307.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.12%)</title><rect x="635.5" y="291.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="638.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.12%)</title><rect x="635.5" y="275.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.12%)</title><rect x="635.5" y="259.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.12%)</title><rect x="635.5" y="243.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.5" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.12%)</title><rect x="635.5" y="227.0" width="1.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="638.5" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.10%)</title><rect x="635.7" y="211.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="638.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (504 samples, 8.63%)</title><rect x="636.9" y="339.0" width="101.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.9" y="350.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (503 samples, 8.62%)</title><rect x="637.1" y="323.0" width="101.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.1" y="334.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (314 samples, 5.38%)</title><rect x="637.1" y="307.0" width="63.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.1" y="318.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (309 samples, 5.29%)</title><rect x="637.3" y="291.0" width="62.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="640.3" y="302.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.19%)</title><rect x="637.3" y="275.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="640.3" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.12%)</title><rect x="638.1" y="259.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.1" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.05%)</title><rect x="638.5" y="243.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="638.5" y="227.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="641.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="638.5" y="211.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.5" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="639.1" y="243.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="642.1" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="639.1" y="227.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="642.1" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (298 samples, 5.11%)</title><rect x="639.5" y="275.0" width="60.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.5" y="286.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (298 samples, 5.11%)</title><rect x="639.5" y="259.0" width="60.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.5" y="270.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (297 samples, 5.09%)</title><rect x="639.7" y="243.0" width="60.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="642.7" y="254.0">one/ni..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.03%)</title><rect x="640.5" y="227.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="643.5" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="641.3" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="644.3" y="238.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (287 samples, 4.92%)</title><rect x="641.7" y="227.0" width="58.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.7" y="238.0">one/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.09%)</title><rect x="641.7" y="211.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="641.7" y="195.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="641.9" y="179.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (282 samples, 4.83%)</title><rect x="642.8" y="211.0" width="57.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="645.8" y="222.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (281 samples, 4.81%)</title><rect x="643.0" y="195.0" width="56.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="646.0" y="206.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (281 samples, 4.81%)</title><rect x="643.0" y="179.0" width="56.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.0" y="190.0">sun/ni..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="643.0" y="163.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.0" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="643.0" y="147.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.0" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title><rect x="643.0" y="131.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.0" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="643.0" y="115.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.0" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="643.0" y="99.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="646.0" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (271 samples, 4.64%)</title><rect x="643.4" y="163.0" width="54.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.4" y="174.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (271 samples, 4.64%)</title><rect x="643.4" y="147.0" width="54.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.4" y="158.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (271 samples, 4.64%)</title><rect x="643.4" y="131.0" width="54.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.4" y="142.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.05%)</title><rect x="646.2" y="115.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="649.2" y="126.0"></text>
</g>
<g>
<title>write (252 samples, 4.32%)</title><rect x="647.2" y="115.0" width="50.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="650.2" y="126.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.14%)</title><rect x="698.1" y="163.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="701.1" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.09%)</title><rect x="698.4" y="147.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="701.4" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.05%)</title><rect x="698.8" y="131.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="701.8" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.03%)</title><rect x="699.4" y="147.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="702.4" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="699.8" y="291.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="702.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.03%)</title><rect x="700.2" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="703.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (189 samples, 3.24%)</title><rect x="700.6" y="307.0" width="38.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="703.6" y="318.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (189 samples, 3.24%)</title><rect x="700.6" y="291.0" width="38.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.6" y="302.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (189 samples, 3.24%)</title><rect x="700.6" y="275.0" width="38.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="703.6" y="286.0">ru/..</text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.03%)</title><rect x="700.8" y="259.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="703.8" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (47 samples, 0.81%)</title><rect x="701.2" y="259.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="704.2" y="270.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (4 samples, 0.07%)</title><rect x="701.6" y="243.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="704.6" y="254.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (9 samples, 0.15%)</title><rect x="702.4" y="243.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="705.4" y="254.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (3 samples, 0.05%)</title><rect x="702.4" y="227.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="705.4" y="238.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.10%)</title><rect x="703.0" y="227.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="706.0" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.10%)</title><rect x="703.0" y="211.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="706.0" y="222.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (5 samples, 0.09%)</title><rect x="703.2" y="195.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="706.2" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (26 samples, 0.45%)</title><rect x="704.4" y="243.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="707.4" y="254.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (2 samples, 0.03%)</title><rect x="706.2" y="227.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="709.2" y="238.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (6 samples, 0.10%)</title><rect x="706.8" y="227.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="709.8" y="238.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (4 samples, 0.07%)</title><rect x="707.2" y="211.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="710.2" y="222.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (3 samples, 0.05%)</title><rect x="708.1" y="227.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="711.1" y="238.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (3 samples, 0.05%)</title><rect x="709.1" y="227.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="712.1" y="238.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.03%)</title><rect x="710.1" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="713.1" y="254.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (2 samples, 0.03%)</title><rect x="710.1" y="227.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="713.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9 samples, 0.15%)</title><rect x="711.1" y="259.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="714.1" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.05%)</title><rect x="712.3" y="243.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="715.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (128 samples, 2.19%)</title><rect x="712.9" y="259.0" width="25.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="715.9" y="270.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title><rect x="713.7" y="243.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (27 samples, 0.46%)</title><rect x="714.1" y="243.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="717.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (18 samples, 0.31%)</title><rect x="714.7" y="227.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.7" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 0.29%)</title><rect x="714.9" y="211.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.9" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.12%)</title><rect x="714.9" y="195.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.9" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (2 samples, 0.03%)</title><rect x="715.5" y="179.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.5" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.03%)</title><rect x="715.9" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="718.9" y="190.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.03%)</title><rect x="716.3" y="195.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="719.3" y="206.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="716.3" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="719.3" y="190.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (6 samples, 0.10%)</title><rect x="716.7" y="195.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="719.7" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="717.6" y="179.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="720.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (6 samples, 0.10%)</title><rect x="718.4" y="227.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="721.4" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.10%)</title><rect x="718.4" y="211.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="721.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.09%)</title><rect x="718.4" y="195.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="721.4" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="719.0" y="179.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="722.0" y="190.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (81 samples, 1.39%)</title><rect x="719.6" y="243.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="722.6" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (81 samples, 1.39%)</title><rect x="719.6" y="227.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.6" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (78 samples, 1.34%)</title><rect x="720.0" y="211.0" width="15.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="723.0" y="222.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.05%)</title><rect x="721.4" y="195.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="724.4" y="206.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (66 samples, 1.13%)</title><rect x="722.2" y="195.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="725.2" y="206.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.03%)</title><rect x="722.8" y="179.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="725.8" y="190.0"></text>
</g>
<g>
<title>free (5 samples, 0.09%)</title><rect x="723.4" y="179.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="726.4" y="190.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.09%)</title><rect x="723.4" y="163.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="726.4" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.09%)</title><rect x="724.6" y="179.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="727.6" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="725.0" y="163.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="728.0" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="725.0" y="147.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="728.0" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="725.0" y="131.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="728.0" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="725.0" y="115.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="728.0" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="725.0" y="99.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="728.0" y="110.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="725.6" y="179.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="728.6" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="726.0" y="179.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="729.0" y="190.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="726.0" y="163.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="729.0" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="726.0" y="147.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="729.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (41 samples, 0.70%)</title><rect x="726.5" y="179.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="729.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (39 samples, 0.67%)</title><rect x="726.9" y="163.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="729.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (39 samples, 0.67%)</title><rect x="726.9" y="147.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="729.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (35 samples, 0.60%)</title><rect x="727.1" y="131.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="730.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (7 samples, 0.12%)</title><rect x="728.1" y="115.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="731.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.03%)</title><rect x="728.7" y="99.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="731.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.03%)</title><rect x="729.1" y="99.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="732.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.03%)</title><rect x="729.1" y="83.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="732.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="729.5" y="115.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="732.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (3 samples, 0.05%)</title><rect x="730.1" y="115.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="733.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="730.7" y="115.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="733.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (13 samples, 0.22%)</title><rect x="731.3" y="115.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="734.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (3 samples, 0.05%)</title><rect x="732.9" y="99.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="735.9" y="110.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="733.1" y="83.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="736.1" y="94.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.05%)</title><rect x="734.9" y="179.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="737.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (11 samples, 0.19%)</title><rect x="736.0" y="243.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (8 samples, 0.14%)</title><rect x="736.6" y="227.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.07%)</title><rect x="736.6" y="211.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.07%)</title><rect x="736.6" y="195.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.6" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.07%)</title><rect x="737.4" y="211.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="740.4" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="737.4" y="195.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="740.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="737.4" y="179.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/NoSuchElementLite.&lt;init&gt; (3 samples, 0.05%)</title><rect x="738.2" y="243.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.2" y="254.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (3 samples, 0.05%)</title><rect x="738.2" y="227.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="741.2" y="238.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (3 samples, 0.05%)</title><rect x="738.2" y="211.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="741.2" y="222.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (3 samples, 0.05%)</title><rect x="738.2" y="195.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="741.2" y="206.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (3 samples, 0.05%)</title><rect x="738.2" y="179.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="741.2" y="190.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (2 samples, 0.03%)</title><rect x="738.8" y="387.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="741.8" y="398.0"></text>
</g>
<g>
<title>[worker tid=35843] (1,084 samples, 18.57%)</title><rect x="739.4" y="403.0" width="219.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="742.4" y="414.0">[worker tid=35843]</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (2 samples, 0.03%)</title><rect x="739.6" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="742.6" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (3 samples, 0.05%)</title><rect x="740.2" y="387.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="743.2" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (19 samples, 0.33%)</title><rect x="740.8" y="387.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="743.8" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (18 samples, 0.31%)</title><rect x="741.0" y="371.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.05%)</title><rect x="741.0" y="355.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="744.0" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.05%)</title><rect x="741.0" y="339.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="744.0" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="741.0" y="323.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="744.0" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.03%)</title><rect x="741.6" y="355.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="744.6" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (11 samples, 0.19%)</title><rect x="742.0" y="355.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="745.0" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (8 samples, 0.14%)</title><rect x="742.6" y="339.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="745.6" y="350.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.03%)</title><rect x="744.2" y="355.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="747.2" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.05%)</title><rect x="744.6" y="387.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="747.6" y="398.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.05%)</title><rect x="745.3" y="387.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="748.3" y="398.0"></text>
</g>
<g>
<title>[not_walkable_Java] (18 samples, 0.31%)</title><rect x="745.9" y="387.0" width="3.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="748.9" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.09%)</title><rect x="745.9" y="371.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="748.9" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.03%)</title><rect x="747.3" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="750.3" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (8 samples, 0.14%)</title><rect x="747.9" y="371.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="750.9" y="382.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (6 samples, 0.10%)</title><rect x="748.3" y="355.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="751.3" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (19 samples, 0.33%)</title><rect x="749.5" y="387.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="752.5" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="749.7" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="752.7" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.03%)</title><rect x="749.7" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="752.7" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (16 samples, 0.27%)</title><rect x="750.1" y="371.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="753.1" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (16 samples, 0.27%)</title><rect x="750.1" y="355.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="753.1" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (12 samples, 0.21%)</title><rect x="750.1" y="339.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="753.1" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.05%)</title><rect x="752.5" y="339.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="755.5" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.05%)</title><rect x="752.5" y="323.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="755.5" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,012 samples, 17.34%)</title><rect x="753.3" y="387.0" width="204.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="756.3" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,012 samples, 17.34%)</title><rect x="753.3" y="371.0" width="204.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.3" y="382.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,012 samples, 17.34%)</title><rect x="753.3" y="355.0" width="204.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.3" y="366.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (337 samples, 5.77%)</title><rect x="753.7" y="339.0" width="68.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="756.7" y="350.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (336 samples, 5.76%)</title><rect x="753.9" y="323.0" width="68.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="756.9" y="334.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (285 samples, 4.88%)</title><rect x="754.1" y="307.0" width="57.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="757.1" y="318.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.03%)</title><rect x="754.1" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="757.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.05%)</title><rect x="754.6" y="291.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="757.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.05%)</title><rect x="754.6" y="275.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="757.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.05%)</title><rect x="754.6" y="259.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="757.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.05%)</title><rect x="754.6" y="243.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="757.6" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.05%)</title><rect x="754.6" y="227.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="757.6" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.05%)</title><rect x="754.6" y="211.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="757.6" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.05%)</title><rect x="754.6" y="195.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="757.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.03%)</title><rect x="755.2" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="755.2" y="275.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="755.2" y="259.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.03%)</title><rect x="755.2" y="243.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="758.2" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.03%)</title><rect x="755.2" y="227.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.2" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.03%)</title><rect x="755.2" y="211.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="758.2" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="755.2" y="195.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="758.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (278 samples, 4.76%)</title><rect x="755.6" y="291.0" width="56.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.6" y="302.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (278 samples, 4.76%)</title><rect x="755.6" y="275.0" width="56.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.6" y="286.0">jdk/in..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (266 samples, 4.56%)</title><rect x="758.0" y="259.0" width="53.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="761.0" y="270.0">Unsaf..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="758.4" y="243.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="761.4" y="254.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.03%)</title><rect x="758.4" y="227.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="761.4" y="238.0"></text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.03%)</title><rect x="758.8" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="761.8" y="254.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="759.2" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="762.2" y="254.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="759.2" y="227.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="762.2" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="759.2" y="211.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="762.2" y="222.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (3 samples, 0.05%)</title><rect x="760.0" y="243.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="763.0" y="254.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.03%)</title><rect x="760.2" y="227.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="763.2" y="238.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (2 samples, 0.03%)</title><rect x="760.2" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="763.2" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (241 samples, 4.13%)</title><rect x="760.6" y="243.0" width="48.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="763.6" y="254.0">Park..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.05%)</title><rect x="761.4" y="227.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="764.4" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (224 samples, 3.84%)</title><rect x="762.0" y="227.0" width="45.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="765.0" y="238.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.12%)</title><rect x="807.3" y="227.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="810.3" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (3 samples, 0.05%)</title><rect x="808.1" y="211.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="811.1" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="809.5" y="243.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="812.5" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="809.7" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="812.7" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.03%)</title><rect x="810.1" y="243.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="813.1" y="254.0"></text>
</g>
<g>
<title>pthread_cond_wait (3 samples, 0.05%)</title><rect x="810.5" y="243.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="813.5" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (3 samples, 0.05%)</title><rect x="811.2" y="243.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="814.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (22 samples, 0.38%)</title><rect x="811.8" y="307.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (22 samples, 0.38%)</title><rect x="811.8" y="291.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="814.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (19 samples, 0.33%)</title><rect x="812.0" y="275.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="815.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (3 samples, 0.05%)</title><rect x="812.8" y="259.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="815.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.15%)</title><rect x="813.4" y="259.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="816.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.09%)</title><rect x="813.4" y="243.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="816.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.09%)</title><rect x="813.4" y="227.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.4" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.07%)</title><rect x="813.6" y="211.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="816.6" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.07%)</title><rect x="813.6" y="195.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="816.6" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.07%)</title><rect x="813.6" y="179.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="816.6" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.07%)</title><rect x="814.4" y="243.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="817.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="815.2" y="259.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="818.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="815.2" y="243.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="815.2" y="227.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="818.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="815.8" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="818.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="815.8" y="259.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="818.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="815.8" y="243.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="818.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 0.48%)</title><rect x="816.2" y="307.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 0.48%)</title><rect x="816.2" y="291.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 0.48%)</title><rect x="816.2" y="275.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 0.48%)</title><rect x="816.2" y="259.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="819.2" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (28 samples, 0.48%)</title><rect x="816.2" y="243.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="819.2" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (27 samples, 0.46%)</title><rect x="816.4" y="227.0" width="5.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="819.4" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (24 samples, 0.41%)</title><rect x="816.6" y="211.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="819.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (673 samples, 11.53%)</title><rect x="821.9" y="339.0" width="136.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="824.9" y="350.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (671 samples, 11.50%)</title><rect x="822.3" y="323.0" width="135.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="825.3" y="334.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (410 samples, 7.02%)</title><rect x="822.5" y="307.0" width="82.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.5" y="318.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (405 samples, 6.94%)</title><rect x="822.9" y="291.0" width="81.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="825.9" y="302.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (20 samples, 0.34%)</title><rect x="822.9" y="275.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="825.9" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.17%)</title><rect x="824.9" y="259.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="827.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.09%)</title><rect x="825.1" y="243.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="828.1" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.07%)</title><rect x="826.1" y="243.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="829.1" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.07%)</title><rect x="826.1" y="227.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="829.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="826.5" y="211.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="829.5" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (385 samples, 6.60%)</title><rect x="826.9" y="275.0" width="77.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="829.9" y="286.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (385 samples, 6.60%)</title><rect x="826.9" y="259.0" width="77.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="829.9" y="270.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (384 samples, 6.58%)</title><rect x="827.1" y="243.0" width="77.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="830.1" y="254.0">one/nio/n..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (3 samples, 0.05%)</title><rect x="827.1" y="227.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="830.1" y="238.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (2 samples, 0.03%)</title><rect x="827.7" y="227.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="830.7" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.09%)</title><rect x="828.1" y="227.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="831.1" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (4 samples, 0.07%)</title><rect x="828.1" y="211.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="831.1" y="222.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (3 samples, 0.05%)</title><rect x="828.3" y="195.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="831.3" y="206.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (374 samples, 6.41%)</title><rect x="829.1" y="227.0" width="75.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.1" y="238.0">one/nio/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.17%)</title><rect x="829.1" y="211.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.1" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.17%)</title><rect x="829.1" y="195.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="832.1" y="206.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="829.3" y="179.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="832.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="829.8" y="179.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="832.8" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="830.0" y="163.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="833.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="830.2" y="147.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="833.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="830.2" y="131.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.2" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="830.2" y="115.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="833.2" y="126.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="830.6" y="179.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="833.6" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="830.8" y="163.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="833.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (364 samples, 6.24%)</title><rect x="831.2" y="211.0" width="73.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.2" y="222.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (363 samples, 6.22%)</title><rect x="831.4" y="195.0" width="73.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="834.4" y="206.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (363 samples, 6.22%)</title><rect x="831.4" y="179.0" width="73.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="834.4" y="190.0">sun/nio/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="831.6" y="163.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="834.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (345 samples, 5.91%)</title><rect x="832.0" y="163.0" width="69.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="835.0" y="174.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (345 samples, 5.91%)</title><rect x="832.0" y="147.0" width="69.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="835.0" y="158.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (345 samples, 5.91%)</title><rect x="832.0" y="131.0" width="69.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="835.0" y="142.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.05%)</title><rect x="834.0" y="115.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="837.0" y="126.0"></text>
</g>
<g>
<title>write (331 samples, 5.67%)</title><rect x="834.8" y="115.0" width="66.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="837.8" y="126.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (15 samples, 0.26%)</title><rect x="901.7" y="163.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="904.7" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.07%)</title><rect x="901.9" y="147.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (10 samples, 0.17%)</title><rect x="902.7" y="147.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="905.7" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="904.1" y="131.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="907.1" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="904.1" y="115.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="907.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="904.8" y="291.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="907.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (260 samples, 4.45%)</title><rect x="905.4" y="307.0" width="52.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="908.4" y="318.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (260 samples, 4.45%)</title><rect x="905.4" y="291.0" width="52.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="908.4" y="302.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (260 samples, 4.45%)</title><rect x="905.4" y="275.0" width="52.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="908.4" y="286.0">ru/ma..</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (42 samples, 0.72%)</title><rect x="907.0" y="259.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="910.0" y="270.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (3 samples, 0.05%)</title><rect x="907.4" y="243.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="910.4" y="254.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (13 samples, 0.22%)</title><rect x="908.0" y="243.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="911.0" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (10 samples, 0.17%)</title><rect x="908.6" y="227.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="911.6" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (7 samples, 0.12%)</title><rect x="909.2" y="211.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.2" y="222.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (6 samples, 0.10%)</title><rect x="909.4" y="195.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="912.4" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (16 samples, 0.27%)</title><rect x="910.8" y="243.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="913.8" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="912.0" y="227.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="915.0" y="238.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (4 samples, 0.07%)</title><rect x="912.4" y="227.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="915.4" y="238.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (2 samples, 0.03%)</title><rect x="912.8" y="211.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.8" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.03%)</title><rect x="913.4" y="227.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="916.4" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.03%)</title><rect x="914.1" y="243.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="917.1" y="254.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.09%)</title><rect x="914.5" y="243.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.5" y="254.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.07%)</title><rect x="914.7" y="227.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.7" y="238.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="914.9" y="211.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="917.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.03%)</title><rect x="916.1" y="259.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="919.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (205 samples, 3.51%)</title><rect x="916.5" y="259.0" width="41.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="919.5" y="270.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title><rect x="917.5" y="243.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/510464020.invoke (2 samples, 0.03%)</title><rect x="917.5" y="227.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.5" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="917.5" y="211.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (31 samples, 0.53%)</title><rect x="917.9" y="243.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (19 samples, 0.33%)</title><rect x="918.3" y="227.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.3" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (19 samples, 0.33%)</title><rect x="918.3" y="211.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="921.3" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.17%)</title><rect x="918.3" y="195.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.3" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (2 samples, 0.03%)</title><rect x="918.5" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="921.5" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.12%)</title><rect x="918.9" y="179.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="921.9" y="190.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (4 samples, 0.07%)</title><rect x="920.3" y="195.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.3" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="920.7" y="179.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="923.7" y="190.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (2 samples, 0.03%)</title><rect x="921.1" y="195.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="924.1" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="921.5" y="195.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="924.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (10 samples, 0.17%)</title><rect x="922.1" y="227.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="925.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10 samples, 0.17%)</title><rect x="922.1" y="211.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="925.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.15%)</title><rect x="922.1" y="195.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="925.1" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="923.2" y="179.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="926.2" y="190.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (151 samples, 2.59%)</title><rect x="924.2" y="243.0" width="30.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.2" y="254.0">or..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (151 samples, 2.59%)</title><rect x="924.2" y="227.0" width="30.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="927.2" y="238.0">or..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (145 samples, 2.48%)</title><rect x="925.0" y="211.0" width="29.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="928.0" y="222.0">Ja..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.03%)</title><rect x="925.6" y="195.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="928.6" y="206.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.05%)</title><rect x="926.4" y="195.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="929.4" y="206.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (134 samples, 2.30%)</title><rect x="927.2" y="195.0" width="27.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="930.2" y="206.0">r..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="927.8" y="179.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="930.8" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="928.2" y="179.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.2" y="190.0"></text>
</g>
<g>
<title>free (6 samples, 0.10%)</title><rect x="929.0" y="179.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="932.0" y="190.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.07%)</title><rect x="929.4" y="163.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="932.4" y="174.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.07%)</title><rect x="930.2" y="179.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="933.2" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.05%)</title><rect x="931.0" y="179.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="934.0" y="190.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="931.2" y="163.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.2" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.14%)</title><rect x="931.6" y="179.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="934.6" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.14%)</title><rect x="933.5" y="179.0" width="1.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="936.5" y="190.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.14%)</title><rect x="933.5" y="163.0" width="1.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="936.5" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.10%)</title><rect x="933.7" y="147.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="936.7" y="158.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.03%)</title><rect x="933.9" y="131.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="936.9" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="934.3" y="131.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="937.3" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.05%)</title><rect x="934.3" y="115.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="937.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (90 samples, 1.54%)</title><rect x="935.1" y="179.0" width="18.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (2 samples, 0.03%)</title><rect x="935.1" y="163.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (88 samples, 1.51%)</title><rect x="935.5" y="163.0" width="17.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="938.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (87 samples, 1.49%)</title><rect x="935.7" y="147.0" width="17.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (73 samples, 1.25%)</title><rect x="936.3" y="131.0" width="14.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.3" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.07%)</title><rect x="938.9" y="115.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="941.9" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="939.7" y="115.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="942.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (17 samples, 0.29%)</title><rect x="940.3" y="115.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="943.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.03%)</title><rect x="941.5" y="99.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (8 samples, 0.14%)</title><rect x="942.2" y="99.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.05%)</title><rect x="943.8" y="115.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="946.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.03%)</title><rect x="944.4" y="115.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="944.8" y="115.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (5 samples, 0.09%)</title><rect x="945.4" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (20 samples, 0.34%)</title><rect x="946.8" y="115.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="948.4" y="99.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (4 samples, 0.07%)</title><rect x="948.8" y="99.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.03%)</title><rect x="949.6" y="99.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="952.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (4 samples, 0.07%)</title><rect x="950.0" y="99.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="951.5" y="131.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="954.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (5 samples, 0.09%)</title><rect x="951.9" y="131.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="954.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.03%)</title><rect x="953.3" y="179.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.3" y="190.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.05%)</title><rect x="953.7" y="179.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="956.7" y="190.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (2 samples, 0.03%)</title><rect x="954.3" y="211.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (9 samples, 0.15%)</title><rect x="954.7" y="243.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="957.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (9 samples, 0.15%)</title><rect x="954.7" y="227.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="957.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.07%)</title><rect x="954.7" y="211.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="957.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.07%)</title><rect x="954.7" y="195.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="957.7" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.09%)</title><rect x="955.5" y="211.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.5" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="955.7" y="195.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="958.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="955.7" y="179.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="958.7" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="956.1" y="163.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="959.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="956.1" y="147.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="959.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="956.1" y="131.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="959.1" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="956.1" y="115.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="959.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/NoSuchElementLite.&lt;init&gt; (7 samples, 0.12%)</title><rect x="956.5" y="243.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="959.5" y="254.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (7 samples, 0.12%)</title><rect x="956.5" y="227.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="959.5" y="238.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (7 samples, 0.12%)</title><rect x="956.5" y="211.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="959.5" y="222.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (7 samples, 0.12%)</title><rect x="956.5" y="195.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="959.5" y="206.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (7 samples, 0.12%)</title><rect x="956.5" y="179.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.5" y="190.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (2 samples, 0.03%)</title><rect x="957.9" y="387.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.9" y="398.0"></text>
</g>
<g>
<title>[worker tid=36611] (1,145 samples, 19.62%)</title><rect x="958.5" y="403.0" width="231.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="961.5" y="414.0">[worker tid=36611]</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (2 samples, 0.03%)</title><rect x="958.7" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.7" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (3 samples, 0.05%)</title><rect x="959.1" y="387.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="962.1" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (16 samples, 0.27%)</title><rect x="959.7" y="387.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.7" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (16 samples, 0.27%)</title><rect x="959.7" y="371.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.7" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.07%)</title><rect x="959.7" y="355.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.7" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.03%)</title><rect x="959.9" y="339.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.9" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (11 samples, 0.19%)</title><rect x="960.8" y="355.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="963.8" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (7 samples, 0.12%)</title><rect x="961.6" y="339.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.6" y="350.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.03%)</title><rect x="963.0" y="387.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="966.0" y="398.0"></text>
</g>
<g>
<title>[not_walkable_Java] (19 samples, 0.33%)</title><rect x="963.4" y="387.0" width="3.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="966.4" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.07%)</title><rect x="963.4" y="371.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="966.4" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.03%)</title><rect x="964.4" y="371.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.4" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="964.8" y="371.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="967.8" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (10 samples, 0.17%)</title><rect x="965.2" y="371.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.2" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.07%)</title><rect x="965.4" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="968.4" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="965.6" y="339.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="968.6" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.07%)</title><rect x="966.2" y="355.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="969.2" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (17 samples, 0.29%)</title><rect x="967.2" y="387.0" width="3.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="970.2" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (14 samples, 0.24%)</title><rect x="967.8" y="371.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="970.8" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (14 samples, 0.24%)</title><rect x="967.8" y="355.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="970.8" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (10 samples, 0.17%)</title><rect x="967.8" y="339.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.8" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.05%)</title><rect x="969.8" y="339.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.8" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.05%)</title><rect x="969.8" y="323.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,085 samples, 18.59%)</title><rect x="970.7" y="387.0" width="219.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="973.7" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,085 samples, 18.59%)</title><rect x="970.7" y="371.0" width="219.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="973.7" y="382.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,085 samples, 18.59%)</title><rect x="970.7" y="355.0" width="219.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="973.7" y="366.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.05%)</title><rect x="970.7" y="339.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="973.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="970.7" y="323.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="973.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.05%)</title><rect x="970.7" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="973.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.05%)</title><rect x="970.7" y="291.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="973.7" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.05%)</title><rect x="970.7" y="275.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="973.7" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.05%)</title><rect x="970.7" y="259.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="973.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (342 samples, 5.86%)</title><rect x="971.3" y="339.0" width="69.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="974.3" y="350.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (340 samples, 5.82%)</title><rect x="971.7" y="323.0" width="68.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="974.7" y="334.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (278 samples, 4.76%)</title><rect x="971.7" y="307.0" width="56.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="974.7" y="318.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.05%)</title><rect x="972.1" y="291.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="975.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.03%)</title><rect x="972.9" y="291.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="975.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="972.9" y="275.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="975.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (270 samples, 4.63%)</title><rect x="973.3" y="291.0" width="54.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="976.3" y="302.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (270 samples, 4.63%)</title><rect x="973.3" y="275.0" width="54.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="976.3" y="286.0">jdk/i..</text>
</g>
<g>
<title>JavaThread::parker() (5 samples, 0.09%)</title><rect x="976.3" y="259.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.3" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (247 samples, 4.23%)</title><rect x="977.9" y="259.0" width="50.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="980.9" y="270.0">Unsaf..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="978.1" y="243.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.1" y="254.0"></text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.03%)</title><rect x="978.9" y="243.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.9" y="254.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (3 samples, 0.05%)</title><rect x="980.2" y="243.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="983.2" y="254.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.03%)</title><rect x="980.4" y="227.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.4" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (222 samples, 3.80%)</title><rect x="980.8" y="243.0" width="44.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.8" y="254.0">Park..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.17%)</title><rect x="981.0" y="227.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.0" y="238.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.10%)</title><rect x="981.2" y="211.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.2" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.05%)</title><rect x="982.4" y="211.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="985.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (203 samples, 3.48%)</title><rect x="983.2" y="227.0" width="41.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="986.2" y="238.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.03%)</title><rect x="1024.2" y="227.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1027.2" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.03%)</title><rect x="1024.2" y="211.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1027.2" y="222.0"></text>
</g>
<g>
<title>_pthread_testcancel (4 samples, 0.07%)</title><rect x="1024.6" y="227.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1027.6" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.03%)</title><rect x="1026.0" y="243.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.0" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="1026.0" y="227.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.0" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="1026.0" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.0" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="1026.0" y="195.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.0" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="1026.0" y="179.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.0" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.07%)</title><rect x="1027.1" y="243.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1030.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (15 samples, 0.26%)</title><rect x="1027.9" y="307.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1030.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (15 samples, 0.26%)</title><rect x="1027.9" y="291.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1030.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (14 samples, 0.24%)</title><rect x="1028.1" y="275.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.09%)</title><rect x="1028.7" y="259.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1031.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.05%)</title><rect x="1028.7" y="243.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1031.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="1028.9" y="227.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.9" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="1028.9" y="211.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1031.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="1029.3" y="243.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (3 samples, 0.05%)</title><rect x="1029.7" y="259.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.05%)</title><rect x="1030.3" y="259.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1033.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.05%)</title><rect x="1030.3" y="243.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1033.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="1030.3" y="227.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1033.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (47 samples, 0.81%)</title><rect x="1030.9" y="307.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (47 samples, 0.81%)</title><rect x="1030.9" y="291.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1033.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (47 samples, 0.81%)</title><rect x="1030.9" y="275.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1033.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (47 samples, 0.81%)</title><rect x="1030.9" y="259.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (47 samples, 0.81%)</title><rect x="1030.9" y="243.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.9" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (45 samples, 0.77%)</title><rect x="1031.3" y="227.0" width="9.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1034.3" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (40 samples, 0.69%)</title><rect x="1032.3" y="211.0" width="8.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1035.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (740 samples, 12.68%)</title><rect x="1040.4" y="339.0" width="149.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1043.4" y="350.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (739 samples, 12.66%)</title><rect x="1040.6" y="323.0" width="149.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1043.6" y="334.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (402 samples, 6.89%)</title><rect x="1040.6" y="307.0" width="81.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1043.6" y="318.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (386 samples, 6.61%)</title><rect x="1041.6" y="291.0" width="78.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1044.6" y="302.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (19 samples, 0.33%)</title><rect x="1041.8" y="275.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1044.8" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (15 samples, 0.26%)</title><rect x="1042.6" y="259.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1045.6" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.05%)</title><rect x="1042.8" y="243.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1045.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.05%)</title><rect x="1042.8" y="227.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1045.8" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.09%)</title><rect x="1043.6" y="243.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1046.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.09%)</title><rect x="1044.6" y="243.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1047.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.09%)</title><rect x="1044.6" y="227.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1047.6" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (366 samples, 6.27%)</title><rect x="1045.7" y="275.0" width="73.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1048.7" y="286.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (366 samples, 6.27%)</title><rect x="1045.7" y="259.0" width="73.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1048.7" y="270.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (365 samples, 6.25%)</title><rect x="1045.9" y="243.0" width="73.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1048.9" y="254.0">one/nio/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.09%)</title><rect x="1046.3" y="227.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.3" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (3 samples, 0.05%)</title><rect x="1046.5" y="211.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.5" y="222.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (2 samples, 0.03%)</title><rect x="1046.7" y="195.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.7" y="206.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (358 samples, 6.13%)</title><rect x="1047.3" y="227.0" width="72.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1050.3" y="238.0">one/nio/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16 samples, 0.27%)</title><rect x="1047.3" y="211.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1050.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (16 samples, 0.27%)</title><rect x="1047.3" y="195.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1050.3" y="206.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="1047.5" y="179.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1050.5" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.12%)</title><rect x="1048.1" y="179.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1051.1" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="1048.5" y="163.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1051.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="1048.7" y="147.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1051.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="1048.7" y="131.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1051.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.03%)</title><rect x="1048.7" y="115.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1051.7" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="1049.1" y="147.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="1049.1" y="131.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1052.1" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="1049.1" y="115.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1052.1" y="126.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.09%)</title><rect x="1049.5" y="179.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.5" y="190.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="1049.5" y="163.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1052.5" y="174.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="1049.7" y="147.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1052.7" y="158.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="1050.1" y="163.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1053.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (342 samples, 5.86%)</title><rect x="1050.5" y="211.0" width="69.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1053.5" y="222.0">sun/nio..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.05%)</title><rect x="1050.5" y="195.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1053.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="1050.5" y="179.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1053.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="1050.5" y="163.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1053.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="1050.5" y="147.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="1050.5" y="131.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1053.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="1050.5" y="115.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.5" y="126.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (2 samples, 0.03%)</title><rect x="1050.5" y="99.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1053.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (339 samples, 5.81%)</title><rect x="1051.1" y="195.0" width="68.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1054.1" y="206.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (339 samples, 5.81%)</title><rect x="1051.1" y="179.0" width="68.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1054.1" y="190.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (328 samples, 5.62%)</title><rect x="1051.3" y="163.0" width="66.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1054.3" y="174.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (328 samples, 5.62%)</title><rect x="1051.3" y="147.0" width="66.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1054.3" y="158.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (328 samples, 5.62%)</title><rect x="1051.3" y="131.0" width="66.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1054.3" y="142.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.07%)</title><rect x="1053.7" y="115.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1056.7" y="126.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="1054.6" y="115.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1057.6" y="126.0"></text>
</g>
<g>
<title>write (310 samples, 5.31%)</title><rect x="1055.0" y="115.0" width="62.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1058.0" y="126.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (10 samples, 0.17%)</title><rect x="1117.6" y="163.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1120.6" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.05%)</title><rect x="1117.6" y="147.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1120.6" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.03%)</title><rect x="1117.8" y="131.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1120.8" y="142.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1117.8" y="115.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1120.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (7 samples, 0.12%)</title><rect x="1118.2" y="147.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1121.2" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="1118.8" y="131.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1121.8" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="1118.8" y="115.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1121.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.03%)</title><rect x="1119.2" y="131.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1122.2" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.15%)</title><rect x="1119.6" y="291.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1122.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.12%)</title><rect x="1120.1" y="275.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1123.1" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.10%)</title><rect x="1120.3" y="259.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1123.3" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.10%)</title><rect x="1120.3" y="243.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1123.3" y="254.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.10%)</title><rect x="1120.3" y="227.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1123.3" y="238.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (6 samples, 0.10%)</title><rect x="1120.3" y="211.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1123.3" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1121.1" y="195.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1124.1" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.03%)</title><rect x="1121.5" y="291.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1124.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (337 samples, 5.77%)</title><rect x="1121.9" y="307.0" width="68.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1124.9" y="318.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (337 samples, 5.77%)</title><rect x="1121.9" y="291.0" width="68.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1124.9" y="302.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (336 samples, 5.76%)</title><rect x="1122.1" y="275.0" width="67.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1125.1" y="286.0">ru/mail..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.03%)</title><rect x="1123.3" y="259.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.3" y="270.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.03%)</title><rect x="1123.7" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.7" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (61 samples, 1.05%)</title><rect x="1124.1" y="259.0" width="12.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.1" y="270.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.03%)</title><rect x="1124.1" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.1" y="254.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (14 samples, 0.24%)</title><rect x="1124.5" y="243.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.5" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (10 samples, 0.17%)</title><rect x="1125.1" y="227.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.1" y="238.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.05%)</title><rect x="1125.3" y="211.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.3" y="222.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.10%)</title><rect x="1125.9" y="211.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.9" y="222.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (6 samples, 0.10%)</title><rect x="1125.9" y="195.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.9" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (31 samples, 0.53%)</title><rect x="1127.7" y="243.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.7" y="254.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.03%)</title><rect x="1129.2" y="227.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.2" y="238.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (2 samples, 0.03%)</title><rect x="1129.2" y="211.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.2" y="222.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.09%)</title><rect x="1129.8" y="227.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.8" y="238.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (7 samples, 0.12%)</title><rect x="1131.0" y="227.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.0" y="238.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (5 samples, 0.09%)</title><rect x="1131.4" y="211.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.4" y="222.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (3 samples, 0.05%)</title><rect x="1132.4" y="227.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.4" y="238.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (4 samples, 0.07%)</title><rect x="1133.0" y="227.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.0" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.03%)</title><rect x="1134.0" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.0" y="254.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (10 samples, 0.17%)</title><rect x="1134.4" y="243.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.4" y="254.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (2 samples, 0.03%)</title><rect x="1135.2" y="227.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.2" y="238.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.05%)</title><rect x="1135.8" y="227.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.8" y="238.0"></text>
</g>
<g>
<title>_rethrow_Java (3 samples, 0.05%)</title><rect x="1136.4" y="259.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1139.4" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.05%)</title><rect x="1137.0" y="259.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1137.6" y="259.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1140.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="1137.8" y="243.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1140.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (256 samples, 4.39%)</title><rect x="1138.2" y="259.0" width="51.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1141.2" y="270.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.10%)</title><rect x="1139.7" y="243.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1142.7" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/510464020.invoke (6 samples, 0.10%)</title><rect x="1139.7" y="227.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1142.7" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (6 samples, 0.10%)</title><rect x="1139.7" y="211.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1142.7" y="222.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (4 samples, 0.07%)</title><rect x="1139.9" y="195.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1142.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (38 samples, 0.65%)</title><rect x="1140.9" y="243.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1143.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (30 samples, 0.51%)</title><rect x="1141.5" y="227.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1144.5" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (30 samples, 0.51%)</title><rect x="1141.5" y="211.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1144.5" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (16 samples, 0.27%)</title><rect x="1141.7" y="195.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1144.7" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (5 samples, 0.09%)</title><rect x="1142.3" y="179.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1145.3" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.14%)</title><rect x="1143.3" y="179.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1146.3" y="190.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.03%)</title><rect x="1144.9" y="195.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1147.9" y="206.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (8 samples, 0.14%)</title><rect x="1145.3" y="195.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1148.3" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1146.5" y="179.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1149.5" y="190.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1147.1" y="195.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1150.1" y="206.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (5 samples, 0.09%)</title><rect x="1147.5" y="227.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1150.5" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.09%)</title><rect x="1147.5" y="211.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1150.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.09%)</title><rect x="1147.5" y="195.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1150.5" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (3 samples, 0.05%)</title><rect x="1148.0" y="179.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1151.0" y="190.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (178 samples, 3.05%)</title><rect x="1148.6" y="243.0" width="35.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1151.6" y="254.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (178 samples, 3.05%)</title><rect x="1148.6" y="227.0" width="35.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1151.6" y="238.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (174 samples, 2.98%)</title><rect x="1149.2" y="211.0" width="35.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1152.2" y="222.0">Jav..</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="1151.6" y="195.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1154.6" y="206.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="1152.0" y="195.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1155.0" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.07%)</title><rect x="1152.4" y="195.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1155.4" y="206.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (7 samples, 0.12%)</title><rect x="1153.2" y="195.0" width="1.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1156.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.03%)</title><rect x="1154.6" y="195.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.6" y="206.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (145 samples, 2.48%)</title><rect x="1155.0" y="195.0" width="29.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.0" y="206.0">ro..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="1156.6" y="179.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.07%)</title><rect x="1157.0" y="179.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.0" y="190.0"></text>
</g>
<g>
<title>free (5 samples, 0.09%)</title><rect x="1158.7" y="179.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1161.7" y="190.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.07%)</title><rect x="1158.9" y="163.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1161.9" y="174.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.05%)</title><rect x="1159.7" y="179.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1162.7" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.05%)</title><rect x="1160.3" y="179.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1163.3" y="190.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="1160.5" y="163.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.5" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.14%)</title><rect x="1160.9" y="179.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1163.9" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.09%)</title><rect x="1162.7" y="179.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1165.7" y="190.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.09%)</title><rect x="1162.7" y="163.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1165.7" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.09%)</title><rect x="1162.7" y="147.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1165.7" y="158.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.03%)</title><rect x="1162.7" y="131.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1165.7" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="1163.1" y="131.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1166.1" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.05%)</title><rect x="1163.1" y="115.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1166.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (98 samples, 1.68%)</title><rect x="1163.7" y="179.0" width="19.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (95 samples, 1.63%)</title><rect x="1164.3" y="163.0" width="19.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (94 samples, 1.61%)</title><rect x="1164.5" y="147.0" width="19.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.5" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="1164.5" y="131.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1167.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.03%)</title><rect x="1164.9" y="131.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (81 samples, 1.39%)</title><rect x="1165.3" y="131.0" width="16.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.3" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (7 samples, 0.12%)</title><rect x="1168.4" y="115.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1171.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (17 samples, 0.29%)</title><rect x="1170.0" y="115.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (10 samples, 0.17%)</title><rect x="1170.8" y="99.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.05%)</title><rect x="1172.8" y="99.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.05%)</title><rect x="1172.8" y="83.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.05%)</title><rect x="1173.4" y="115.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (3 samples, 0.05%)</title><rect x="1173.4" y="99.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.4" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="1173.6" y="83.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1176.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.03%)</title><rect x="1174.0" y="115.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (2 samples, 0.03%)</title><rect x="1174.4" y="115.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (5 samples, 0.09%)</title><rect x="1174.8" y="115.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (3 samples, 0.05%)</title><rect x="1175.8" y="115.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.03%)</title><rect x="1176.5" y="115.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (21 samples, 0.36%)</title><rect x="1176.9" y="115.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (3 samples, 0.05%)</title><rect x="1179.1" y="99.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="1179.3" y="83.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1182.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (4 samples, 0.07%)</title><rect x="1179.7" y="99.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (3 samples, 0.05%)</title><rect x="1180.5" y="99.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="110.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.05%)</title><rect x="1181.1" y="115.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="1181.7" y="131.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (2 samples, 0.03%)</title><rect x="1182.1" y="131.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="1182.5" y="131.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="1182.9" y="131.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.05%)</title><rect x="1183.5" y="179.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (21 samples, 0.36%)</title><rect x="1184.5" y="243.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1187.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (20 samples, 0.34%)</title><rect x="1184.7" y="227.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1187.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (6 samples, 0.10%)</title><rect x="1184.9" y="211.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.10%)</title><rect x="1184.9" y="195.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1187.9" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (13 samples, 0.22%)</title><rect x="1186.2" y="211.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1189.2" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.07%)</title><rect x="1186.2" y="195.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1189.2" y="206.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1186.2" y="179.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1189.2" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.15%)</title><rect x="1187.0" y="195.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1190.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.15%)</title><rect x="1187.0" y="179.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1190.0" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1188.4" y="163.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1191.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/NoSuchElementLite.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1188.8" y="243.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1191.8" y="254.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1188.8" y="227.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1191.8" y="238.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1188.8" y="211.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1191.8" y="222.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1188.8" y="195.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1191.8" y="206.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1188.8" y="179.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1191.8" y="190.0"></text>
</g>
</g>
</svg>
