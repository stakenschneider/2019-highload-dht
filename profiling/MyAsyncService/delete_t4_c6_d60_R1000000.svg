<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (16,202 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (1,303 samples, 8.04%)</title><rect x="10.0" y="467.0" width="94.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="13.0" y="478.0">[NIO Select..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (46 samples, 0.28%)</title><rect x="10.0" y="451.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (46 samples, 0.28%)</title><rect x="10.0" y="435.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (41 samples, 0.25%)</title><rect x="10.1" y="419.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.1" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (40 samples, 0.25%)</title><rect x="10.1" y="403.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.1" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (38 samples, 0.23%)</title><rect x="10.1" y="387.0" width="2.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="13.1" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.02%)</title><rect x="13.1" y="419.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.1" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (13 samples, 0.08%)</title><rect x="13.4" y="451.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="16.4" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,240 samples, 7.65%)</title><rect x="14.4" y="451.0" width="90.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.4" y="462.0">one/nio/se..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (5 samples, 0.03%)</title><rect x="15.0" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.02%)</title><rect x="15.0" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.0" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (4 samples, 0.02%)</title><rect x="15.0" y="403.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (841 samples, 5.19%)</title><rect x="15.3" y="435.0" width="61.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.3" y="446.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (20 samples, 0.12%)</title><rect x="15.5" y="419.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (6 samples, 0.04%)</title><rect x="16.0" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (6 samples, 0.04%)</title><rect x="16.0" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (8 samples, 0.05%)</title><rect x="16.4" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.4" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (8 samples, 0.05%)</title><rect x="16.4" y="387.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (5 samples, 0.03%)</title><rect x="16.6" y="371.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.6" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (6 samples, 0.04%)</title><rect x="17.0" y="419.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (808 samples, 4.99%)</title><rect x="17.5" y="419.0" width="58.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.5" y="430.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (808 samples, 4.99%)</title><rect x="17.5" y="403.0" width="58.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.5" y="414.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (806 samples, 4.97%)</title><rect x="17.6" y="387.0" width="58.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.6" y="398.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (767 samples, 4.73%)</title><rect x="17.7" y="371.0" width="55.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.7" y="382.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (7 samples, 0.04%)</title><rect x="21.2" y="355.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="24.2" y="366.0"></text>
</g>
<g>
<title>kevent (712 samples, 4.39%)</title><rect x="21.7" y="355.0" width="51.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="24.7" y="366.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (13 samples, 0.08%)</title><rect x="73.6" y="371.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.02%)</title><rect x="73.8" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="76.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.02%)</title><rect x="73.8" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.04%)</title><rect x="74.1" y="355.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.03%)</title><rect x="74.1" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.03%)</title><rect x="74.1" y="323.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.03%)</title><rect x="74.1" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (6 samples, 0.04%)</title><rect x="74.5" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (13 samples, 0.08%)</title><rect x="75.0" y="371.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.0" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (13 samples, 0.08%)</title><rect x="75.0" y="355.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.0" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (13 samples, 0.08%)</title><rect x="75.0" y="339.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.0" y="350.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (13 samples, 0.08%)</title><rect x="75.0" y="323.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.0" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (13 samples, 0.08%)</title><rect x="75.0" y="307.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (6 samples, 0.04%)</title><rect x="75.9" y="371.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (386 samples, 2.38%)</title><rect x="76.6" y="435.0" width="28.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.6" y="446.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (373 samples, 2.30%)</title><rect x="77.1" y="419.0" width="27.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.1" y="430.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (217 samples, 1.34%)</title><rect x="77.1" y="403.0" width="15.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (162 samples, 1.00%)</title><rect x="77.4" y="387.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (162 samples, 1.00%)</title><rect x="77.4" y="371.0" width="11.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (12 samples, 0.07%)</title><rect x="77.4" y="355.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.07%)</title><rect x="77.4" y="339.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.03%)</title><rect x="77.4" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.03%)</title><rect x="77.4" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.04%)</title><rect x="77.7" y="323.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.04%)</title><rect x="77.7" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.7" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (6 samples, 0.04%)</title><rect x="77.8" y="291.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.8" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.02%)</title><rect x="78.0" y="275.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="81.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (9 samples, 0.06%)</title><rect x="78.2" y="355.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.04%)</title><rect x="78.5" y="339.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.5" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.04%)</title><rect x="78.5" y="323.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.03%)</title><rect x="78.5" y="307.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="81.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (141 samples, 0.87%)</title><rect x="78.9" y="355.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (137 samples, 0.85%)</title><rect x="79.2" y="339.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (18 samples, 0.11%)</title><rect x="79.8" y="323.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.06%)</title><rect x="79.8" y="307.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="82.8" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.05%)</title><rect x="79.9" y="291.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (111 samples, 0.69%)</title><rect x="81.1" y="323.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (110 samples, 0.68%)</title><rect x="81.2" y="307.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (110 samples, 0.68%)</title><rect x="81.2" y="291.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (97 samples, 0.60%)</title><rect x="81.2" y="275.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (95 samples, 0.59%)</title><rect x="81.4" y="259.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (95 samples, 0.59%)</title><rect x="81.4" y="243.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="84.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (95 samples, 0.59%)</title><rect x="81.4" y="227.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (95 samples, 0.59%)</title><rect x="81.4" y="211.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.4" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (95 samples, 0.59%)</title><rect x="81.4" y="195.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.4" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (84 samples, 0.52%)</title><rect x="81.8" y="179.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="84.8" y="190.0"></text>
</g>
<g>
<title>Thread::current() (5 samples, 0.03%)</title><rect x="82.3" y="163.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="85.3" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.02%)</title><rect x="82.4" y="147.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="85.4" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.04%)</title><rect x="82.8" y="163.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="85.8" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.02%)</title><rect x="82.9" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="85.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (53 samples, 0.33%)</title><rect x="83.8" y="163.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="86.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.02%)</title><rect x="88.3" y="275.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.02%)</title><rect x="88.3" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.05%)</title><rect x="88.6" y="275.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="91.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.05%)</title><rect x="88.6" y="259.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.03%)</title><rect x="88.8" y="243.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (32 samples, 0.20%)</title><rect x="89.2" y="387.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (17 samples, 0.10%)</title><rect x="89.2" y="371.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.05%)</title><rect x="90.5" y="371.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.05%)</title><rect x="90.5" y="355.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.04%)</title><rect x="91.1" y="371.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.04%)</title><rect x="91.5" y="387.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.04%)</title><rect x="91.5" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.5" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.04%)</title><rect x="91.5" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.06%)</title><rect x="92.2" y="387.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.06%)</title><rect x="92.3" y="371.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (156 samples, 0.96%)</title><rect x="93.0" y="403.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (155 samples, 0.96%)</title><rect x="93.0" y="387.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.03%)</title><rect x="93.0" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.03%)</title><rect x="93.0" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.03%)</title><rect x="93.0" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.0" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="93.0" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="93.0" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="93.0" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (150 samples, 0.93%)</title><rect x="93.3" y="371.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 0.09%)</title><rect x="93.3" y="355.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (14 samples, 0.09%)</title><rect x="93.3" y="339.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (11 samples, 0.07%)</title><rect x="93.5" y="323.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (11 samples, 0.07%)</title><rect x="93.5" y="307.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (136 samples, 0.84%)</title><rect x="94.3" y="355.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (136 samples, 0.84%)</title><rect x="94.3" y="339.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (136 samples, 0.84%)</title><rect x="94.3" y="323.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (135 samples, 0.83%)</title><rect x="94.4" y="307.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (135 samples, 0.83%)</title><rect x="94.4" y="291.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.4" y="302.0"></text>
</g>
<g>
<title>read (126 samples, 0.78%)</title><rect x="95.1" y="275.0" width="9.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="98.1" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.03%)</title><rect x="104.3" y="419.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="107.3" y="430.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=38659] (645 samples, 3.98%)</title><rect x="104.9" y="467.0" width="47.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="107.9" y="478.0">[NIO..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (33 samples, 0.20%)</title><rect x="105.0" y="451.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="108.0" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (32 samples, 0.20%)</title><rect x="105.0" y="435.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="108.0" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (27 samples, 0.17%)</title><rect x="105.1" y="419.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="108.1" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (25 samples, 0.15%)</title><rect x="105.3" y="403.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="108.3" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (24 samples, 0.15%)</title><rect x="105.3" y="387.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="108.3" y="398.0"></text>
</g>
<g>
<title>[unknown_Java] (9 samples, 0.06%)</title><rect x="107.4" y="451.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="110.4" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (601 samples, 3.71%)</title><rect x="108.1" y="451.0" width="43.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="111.1" y="462.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (397 samples, 2.45%)</title><rect x="108.3" y="435.0" width="28.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.3" y="446.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7 samples, 0.04%)</title><rect x="108.6" y="419.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.02%)</title><rect x="108.6" y="403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (4 samples, 0.02%)</title><rect x="108.6" y="387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="111.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (385 samples, 2.38%)</title><rect x="109.1" y="419.0" width="28.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.1" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (385 samples, 2.38%)</title><rect x="109.1" y="403.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.1" y="414.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (383 samples, 2.36%)</title><rect x="109.3" y="387.0" width="27.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.3" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (359 samples, 2.22%)</title><rect x="109.3" y="371.0" width="26.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.3" y="382.0">s..</text>
</g>
<g>
<title>kevent (330 samples, 2.04%)</title><rect x="111.5" y="355.0" width="24.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="114.5" y="366.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (11 samples, 0.07%)</title><rect x="135.5" y="371.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="138.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.03%)</title><rect x="135.9" y="355.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.02%)</title><rect x="135.9" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.02%)</title><rect x="135.9" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.02%)</title><rect x="135.9" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="138.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (9 samples, 0.06%)</title><rect x="136.4" y="371.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.4" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (9 samples, 0.06%)</title><rect x="136.4" y="355.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="139.4" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.04%)</title><rect x="136.4" y="339.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.4" y="350.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.04%)</title><rect x="136.4" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.04%)</title><rect x="136.4" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="139.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (201 samples, 1.24%)</title><rect x="137.2" y="435.0" width="14.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (195 samples, 1.20%)</title><rect x="137.3" y="419.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="140.3" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (117 samples, 0.72%)</title><rect x="137.4" y="403.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (95 samples, 0.59%)</title><rect x="137.5" y="387.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="140.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (95 samples, 0.59%)</title><rect x="137.5" y="371.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="140.5" y="382.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.02%)</title><rect x="137.5" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.02%)</title><rect x="137.5" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.02%)</title><rect x="137.8" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (87 samples, 0.54%)</title><rect x="138.1" y="355.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="141.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (86 samples, 0.53%)</title><rect x="138.2" y="339.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="141.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (16 samples, 0.10%)</title><rect x="138.6" y="323.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (8 samples, 0.05%)</title><rect x="138.9" y="307.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (64 samples, 0.40%)</title><rect x="139.8" y="323.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="142.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (64 samples, 0.40%)</title><rect x="139.8" y="307.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="142.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (64 samples, 0.40%)</title><rect x="139.8" y="291.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (54 samples, 0.33%)</title><rect x="139.9" y="275.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (53 samples, 0.33%)</title><rect x="139.9" y="259.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="142.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (53 samples, 0.33%)</title><rect x="139.9" y="243.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (53 samples, 0.33%)</title><rect x="139.9" y="227.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (53 samples, 0.33%)</title><rect x="139.9" y="211.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (53 samples, 0.33%)</title><rect x="139.9" y="195.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.9" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (48 samples, 0.30%)</title><rect x="140.3" y="179.0" width="3.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="143.3" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (28 samples, 0.17%)</title><rect x="141.5" y="163.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="144.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.05%)</title><rect x="143.9" y="275.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.05%)</title><rect x="143.9" y="259.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (5 samples, 0.03%)</title><rect x="143.9" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="146.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (4 samples, 0.02%)</title><rect x="143.9" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.10%)</title><rect x="144.4" y="387.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="147.4" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.05%)</title><rect x="144.9" y="371.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="147.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.05%)</title><rect x="144.9" y="355.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (77 samples, 0.48%)</title><rect x="145.9" y="403.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (77 samples, 0.48%)</title><rect x="145.9" y="387.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="148.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (74 samples, 0.46%)</title><rect x="146.1" y="371.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.06%)</title><rect x="146.1" y="355.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="149.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.06%)</title><rect x="146.1" y="339.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.06%)</title><rect x="146.2" y="323.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.06%)</title><rect x="146.2" y="307.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="149.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (7 samples, 0.04%)</title><rect x="146.2" y="291.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (64 samples, 0.40%)</title><rect x="146.8" y="355.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (64 samples, 0.40%)</title><rect x="146.8" y="339.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (64 samples, 0.40%)</title><rect x="146.8" y="323.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="149.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (64 samples, 0.40%)</title><rect x="146.8" y="307.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="149.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (64 samples, 0.40%)</title><rect x="146.8" y="291.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.8" y="302.0"></text>
</g>
<g>
<title>read (58 samples, 0.36%)</title><rect x="147.3" y="275.0" width="4.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="150.3" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.03%)</title><rect x="151.5" y="419.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="154.5" y="430.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=26115] (653 samples, 4.03%)</title><rect x="151.9" y="467.0" width="47.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="154.9" y="478.0">[NIO..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (23 samples, 0.14%)</title><rect x="151.9" y="451.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="154.9" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (23 samples, 0.14%)</title><rect x="151.9" y="435.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="154.9" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (21 samples, 0.13%)</title><rect x="151.9" y="419.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="154.9" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (20 samples, 0.12%)</title><rect x="152.0" y="403.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="155.0" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.12%)</title><rect x="152.0" y="387.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="155.0" y="398.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (623 samples, 3.85%)</title><rect x="153.9" y="451.0" width="45.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.9" y="462.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (432 samples, 2.67%)</title><rect x="154.3" y="435.0" width="31.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="157.3" y="446.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (15 samples, 0.09%)</title><rect x="154.4" y="419.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.03%)</title><rect x="155.1" y="403.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="158.1" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.03%)</title><rect x="155.1" y="387.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="158.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (415 samples, 2.56%)</title><rect x="155.5" y="419.0" width="30.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="158.5" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (415 samples, 2.56%)</title><rect x="155.5" y="403.0" width="30.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.5" y="414.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (415 samples, 2.56%)</title><rect x="155.5" y="387.0" width="30.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="158.5" y="398.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (389 samples, 2.40%)</title><rect x="155.6" y="371.0" width="28.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.6" y="382.0">su..</text>
</g>
<g>
<title>kevent (360 samples, 2.22%)</title><rect x="157.7" y="355.0" width="26.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="160.7" y="366.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.06%)</title><rect x="183.9" y="371.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="186.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.02%)</title><rect x="184.3" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="187.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (12 samples, 0.07%)</title><rect x="184.6" y="371.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.6" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (12 samples, 0.07%)</title><rect x="184.6" y="355.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.6" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (11 samples, 0.07%)</title><rect x="184.6" y="339.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.6" y="350.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (11 samples, 0.07%)</title><rect x="184.6" y="323.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (11 samples, 0.07%)</title><rect x="184.6" y="307.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.02%)</title><rect x="185.4" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="188.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (186 samples, 1.15%)</title><rect x="185.7" y="435.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="188.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (182 samples, 1.12%)</title><rect x="186.0" y="419.0" width="13.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="189.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (86 samples, 0.53%)</title><rect x="186.0" y="403.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (72 samples, 0.44%)</title><rect x="186.0" y="387.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (70 samples, 0.43%)</title><rect x="186.2" y="371.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (8 samples, 0.05%)</title><rect x="186.2" y="355.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.05%)</title><rect x="186.2" y="339.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.02%)</title><rect x="186.2" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.02%)</title><rect x="186.5" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.02%)</title><rect x="186.5" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (59 samples, 0.36%)</title><rect x="187.0" y="355.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (57 samples, 0.35%)</title><rect x="187.1" y="339.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.03%)</title><rect x="187.3" y="323.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (49 samples, 0.30%)</title><rect x="187.7" y="323.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (49 samples, 0.30%)</title><rect x="187.7" y="307.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (49 samples, 0.30%)</title><rect x="187.7" y="291.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="190.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (44 samples, 0.27%)</title><rect x="187.8" y="275.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (42 samples, 0.26%)</title><rect x="187.9" y="259.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="190.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (42 samples, 0.26%)</title><rect x="187.9" y="243.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (42 samples, 0.26%)</title><rect x="187.9" y="227.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (42 samples, 0.26%)</title><rect x="187.9" y="211.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (42 samples, 0.26%)</title><rect x="187.9" y="195.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.9" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (39 samples, 0.24%)</title><rect x="188.1" y="179.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="191.1" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (30 samples, 0.19%)</title><rect x="188.7" y="163.0" width="2.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="191.7" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.04%)</title><rect x="191.3" y="387.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="191.4" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="194.4" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="191.4" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (96 samples, 0.59%)</title><rect x="192.2" y="403.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="195.2" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (96 samples, 0.59%)</title><rect x="192.2" y="387.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (92 samples, 0.57%)</title><rect x="192.5" y="371.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.04%)</title><rect x="192.5" y="355.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="195.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.04%)</title><rect x="192.5" y="339.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.03%)</title><rect x="192.7" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.03%)</title><rect x="192.7" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (85 samples, 0.52%)</title><rect x="193.0" y="355.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (85 samples, 0.52%)</title><rect x="193.0" y="339.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (84 samples, 0.52%)</title><rect x="193.0" y="323.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (82 samples, 0.51%)</title><rect x="193.2" y="307.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (82 samples, 0.51%)</title><rect x="193.2" y="291.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.2" y="302.0"></text>
</g>
<g>
<title>read (71 samples, 0.44%)</title><rect x="194.0" y="275.0" width="5.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="197.0" y="286.0"></text>
</g>
<g>
<title>[tid=23555] (71 samples, 0.44%)</title><rect x="199.8" y="467.0" width="5.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="202.8" y="478.0"></text>
</g>
<g>
<title>thread_start (71 samples, 0.44%)</title><rect x="199.8" y="451.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="202.8" y="462.0"></text>
</g>
<g>
<title>_pthread_start (71 samples, 0.44%)</title><rect x="199.8" y="435.0" width="5.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="202.8" y="446.0"></text>
</g>
<g>
<title>_pthread_body (71 samples, 0.44%)</title><rect x="199.8" y="419.0" width="5.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="202.8" y="430.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void* (*)(void*), rocksdb::BGThreadMetadata*&gt; &gt;(void*) (71 samples, 0.44%)</title><rect x="199.8" y="403.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="202.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (71 samples, 0.44%)</title><rect x="199.8" y="387.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="202.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (71 samples, 0.44%)</title><rect x="199.8" y="371.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="202.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (71 samples, 0.44%)</title><rect x="199.8" y="355.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="202.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (70 samples, 0.43%)</title><rect x="199.9" y="339.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="202.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (70 samples, 0.43%)</title><rect x="199.9" y="323.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="202.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;&amp;, unsigned long long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (70 samples, 0.43%)</title><rect x="199.9" y="307.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="202.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*) (70 samples, 0.43%)</title><rect x="199.9" y="291.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="202.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::WriteLevel0Table() (69 samples, 0.43%)</title><rect x="199.9" y="275.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="202.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt; &gt; &gt;, rocksdb::FileMetaData*, rocksdb::InternalKeyComparator const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::__1::default_delete&lt;rocksdb::IntTblPropCollector (68 samples, 0.42%)</title><rect x="199.9" y="259.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="202.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (23 samples, 0.14%)</title><rect x="199.9" y="243.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="202.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (18 samples, 0.11%)</title><rect x="200.0" y="227.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="203.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (17 samples, 0.10%)</title><rect x="200.0" y="211.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="203.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (14 samples, 0.09%)</title><rect x="200.2" y="195.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="203.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (14 samples, 0.09%)</title><rect x="200.2" y="179.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="203.2" y="190.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (14 samples, 0.09%)</title><rect x="200.2" y="163.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="203.2" y="174.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (14 samples, 0.09%)</title><rect x="200.2" y="147.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="203.2" y="158.0"></text>
</g>
<g>
<title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (12 samples, 0.07%)</title><rect x="200.3" y="131.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="203.3" y="142.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (8 samples, 0.05%)</title><rect x="200.6" y="115.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="203.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (45 samples, 0.28%)</title><rect x="201.5" y="243.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="204.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (43 samples, 0.27%)</title><rect x="201.5" y="227.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="204.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (26 samples, 0.16%)</title><rect x="202.5" y="211.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="205.5" y="222.0"></text>
</g>
<g>
<title>[tid=40451] (12 samples, 0.07%)</title><rect x="205.0" y="467.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="208.0" y="478.0"></text>
</g>
<g>
<title>thread_start (12 samples, 0.07%)</title><rect x="205.0" y="451.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="208.0" y="462.0"></text>
</g>
<g>
<title>_pthread_start (12 samples, 0.07%)</title><rect x="205.0" y="435.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="208.0" y="446.0"></text>
</g>
<g>
<title>_pthread_body (12 samples, 0.07%)</title><rect x="205.0" y="419.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="208.0" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (12 samples, 0.07%)</title><rect x="205.0" y="403.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="208.0" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (12 samples, 0.07%)</title><rect x="205.0" y="387.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="208.0" y="398.0"></text>
</g>
<g>
<title>WatcherThread::run() (12 samples, 0.07%)</title><rect x="205.0" y="371.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="208.0" y="382.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (12 samples, 0.07%)</title><rect x="205.0" y="355.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="208.0" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (12 samples, 0.07%)</title><rect x="205.0" y="339.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="208.0" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (12 samples, 0.07%)</title><rect x="205.0" y="323.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="208.0" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (11 samples, 0.07%)</title><rect x="205.0" y="307.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="208.0" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.07%)</title><rect x="205.0" y="291.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="208.0" y="302.0"></text>
</g>
<g>
<title>[tid=43267] (74 samples, 0.46%)</title><rect x="205.9" y="467.0" width="5.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="208.9" y="478.0"></text>
</g>
<g>
<title>thread_start (74 samples, 0.46%)</title><rect x="205.9" y="451.0" width="5.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="208.9" y="462.0"></text>
</g>
<g>
<title>_pthread_start (74 samples, 0.46%)</title><rect x="205.9" y="435.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="208.9" y="446.0"></text>
</g>
<g>
<title>_pthread_body (74 samples, 0.46%)</title><rect x="205.9" y="419.0" width="5.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="208.9" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (74 samples, 0.46%)</title><rect x="205.9" y="403.0" width="5.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="208.9" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (74 samples, 0.46%)</title><rect x="205.9" y="387.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="208.9" y="398.0"></text>
</g>
<g>
<title>JavaThread::run() (74 samples, 0.46%)</title><rect x="205.9" y="371.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="208.9" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (74 samples, 0.46%)</title><rect x="205.9" y="355.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="208.9" y="366.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (74 samples, 0.46%)</title><rect x="205.9" y="339.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="208.9" y="350.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (73 samples, 0.45%)</title><rect x="205.9" y="323.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="208.9" y="334.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (73 samples, 0.45%)</title><rect x="205.9" y="307.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="208.9" y="318.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (73 samples, 0.45%)</title><rect x="205.9" y="291.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="208.9" y="302.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 0.25%)</title><rect x="206.0" y="275.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="209.0" y="286.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.02%)</title><rect x="206.2" y="259.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="209.2" y="270.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.02%)</title><rect x="206.5" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="209.5" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 0.19%)</title><rect x="206.8" y="259.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="209.8" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.05%)</title><rect x="207.1" y="243.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="210.1" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.02%)</title><rect x="208.1" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="211.1" y="254.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 0.14%)</title><rect x="209.0" y="275.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="212.0" y="286.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (8 samples, 0.05%)</title><rect x="209.0" y="259.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="212.0" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (8 samples, 0.05%)</title><rect x="209.0" y="243.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="212.0" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (11 samples, 0.07%)</title><rect x="209.6" y="259.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="212.6" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.02%)</title><rect x="210.0" y="243.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="213.0" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (4 samples, 0.02%)</title><rect x="210.0" y="227.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="213.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.06%)</title><rect x="210.6" y="275.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="213.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.06%)</title><rect x="210.6" y="259.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="213.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.06%)</title><rect x="210.6" y="243.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="213.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.06%)</title><rect x="210.6" y="227.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="213.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.06%)</title><rect x="210.6" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="213.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.04%)</title><rect x="210.6" y="195.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="213.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.04%)</title><rect x="210.6" y="179.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="213.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.04%)</title><rect x="210.6" y="163.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="213.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.04%)</title><rect x="210.6" y="147.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="213.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.04%)</title><rect x="210.6" y="131.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="213.6" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.03%)</title><rect x="210.6" y="115.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="213.6" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.03%)</title><rect x="210.6" y="99.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="213.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.03%)</title><rect x="210.6" y="83.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="213.6" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.03%)</title><rect x="210.6" y="67.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="213.6" y="78.0"></text>
</g>
<g>
<title>[worker tid=27139] (3,363 samples, 20.76%)</title><rect x="211.3" y="467.0" width="244.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="214.3" y="478.0">[worker tid=27139]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.06%)</title><rect x="211.4" y="451.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="214.4" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.05%)</title><rect x="211.5" y="435.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="214.5" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.04%)</title><rect x="211.7" y="419.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="214.7" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (4 samples, 0.02%)</title><rect x="211.8" y="403.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="214.8" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,346 samples, 20.65%)</title><rect x="212.3" y="451.0" width="243.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.3" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,346 samples, 20.65%)</title><rect x="212.3" y="435.0" width="243.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.3" y="446.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,346 samples, 20.65%)</title><rect x="212.3" y="419.0" width="243.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.3" y="430.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (947 samples, 5.84%)</title><rect x="212.5" y="403.0" width="69.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.5" y="414.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (944 samples, 5.83%)</title><rect x="212.8" y="387.0" width="68.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.8" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (887 samples, 5.47%)</title><rect x="212.8" y="371.0" width="64.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.8" y="382.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.02%)</title><rect x="213.0" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.02%)</title><rect x="213.0" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.02%)</title><rect x="213.0" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.0" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.02%)</title><rect x="213.0" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.0" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.02%)</title><rect x="213.0" y="291.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="216.0" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.02%)</title><rect x="213.0" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="216.0" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.02%)</title><rect x="213.0" y="259.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="216.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.05%)</title><rect x="213.3" y="355.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.05%)</title><rect x="213.3" y="339.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.04%)</title><rect x="213.3" y="323.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.04%)</title><rect x="213.3" y="307.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.3" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.04%)</title><rect x="213.3" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.3" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.02%)</title><rect x="213.4" y="275.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="216.4" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.02%)</title><rect x="213.4" y="259.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="216.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (872 samples, 5.38%)</title><rect x="213.9" y="355.0" width="63.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.9" y="366.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (872 samples, 5.38%)</title><rect x="213.9" y="339.0" width="63.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.9" y="350.0">jdk/int..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (849 samples, 5.24%)</title><rect x="215.5" y="323.0" width="61.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="218.5" y="334.0">Unsafe..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.02%)</title><rect x="216.3" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="219.3" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (805 samples, 4.97%)</title><rect x="217.1" y="307.0" width="58.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="220.1" y="318.0">Parker..</text>
</g>
<g>
<title>__psynch_cvwait (789 samples, 4.87%)</title><rect x="217.4" y="291.0" width="57.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="220.4" y="302.0">__psyn..</text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 0.03%)</title><rect x="274.9" y="291.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="277.9" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.02%)</title><rect x="276.3" y="307.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="279.3" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.02%)</title><rect x="276.6" y="307.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="279.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (16 samples, 0.10%)</title><rect x="277.4" y="371.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (16 samples, 0.10%)</title><rect x="277.4" y="355.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="280.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (15 samples, 0.09%)</title><rect x="277.4" y="339.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.06%)</title><rect x="277.5" y="323.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.04%)</title><rect x="277.7" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.03%)</title><rect x="277.7" y="291.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.7" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.03%)</title><rect x="277.7" y="275.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="280.7" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.03%)</title><rect x="277.7" y="259.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="280.7" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.03%)</title><rect x="277.7" y="243.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="280.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.03%)</title><rect x="278.2" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.03%)</title><rect x="278.2" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.02%)</title><rect x="278.2" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (41 samples, 0.25%)</title><rect x="278.5" y="371.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (41 samples, 0.25%)</title><rect x="278.5" y="355.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (41 samples, 0.25%)</title><rect x="278.5" y="339.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (41 samples, 0.25%)</title><rect x="278.5" y="323.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (41 samples, 0.25%)</title><rect x="278.5" y="307.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.5" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (36 samples, 0.22%)</title><rect x="278.9" y="291.0" width="2.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="281.9" y="302.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.02%)</title><rect x="279.0" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="282.0" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (4 samples, 0.02%)</title><rect x="279.0" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="282.0" y="270.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.02%)</title><rect x="279.0" y="243.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="282.0" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (27 samples, 0.17%)</title><rect x="279.5" y="275.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="282.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (2,396 samples, 14.79%)</title><rect x="281.5" y="403.0" width="174.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.5" y="414.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (2,396 samples, 14.79%)</title><rect x="281.5" y="387.0" width="174.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.5" y="398.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (561 samples, 3.46%)</title><rect x="281.7" y="371.0" width="40.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.7" y="382.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (12 samples, 0.07%)</title><rect x="281.7" y="355.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.07%)</title><rect x="281.7" y="339.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.7" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.04%)</title><rect x="281.9" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.9" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.02%)</title><rect x="282.1" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.1" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.02%)</title><rect x="282.1" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.1" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (539 samples, 3.33%)</title><rect x="282.5" y="355.0" width="39.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.5" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.08%)</title><rect x="282.5" y="339.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.07%)</title><rect x="282.6" y="323.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.6" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.02%)</title><rect x="282.6" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.6" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.05%)</title><rect x="282.9" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.9" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.05%)</title><rect x="282.9" y="291.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (526 samples, 3.25%)</title><rect x="283.5" y="339.0" width="38.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.5" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (526 samples, 3.25%)</title><rect x="283.5" y="323.0" width="38.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.5" y="334.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (525 samples, 3.24%)</title><rect x="283.6" y="307.0" width="38.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.6" y="318.0">one..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.03%)</title><rect x="283.6" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="286.6" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (519 samples, 3.20%)</title><rect x="284.0" y="291.0" width="37.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.0" y="302.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.09%)</title><rect x="284.0" y="275.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.0" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.09%)</title><rect x="284.0" y="259.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.03%)</title><rect x="284.2" y="243.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="284.3" y="227.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="287.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="284.3" y="211.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="284.3" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.3" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="284.3" y="179.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.3" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.04%)</title><rect x="284.6" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="287.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (505 samples, 3.12%)</title><rect x="285.0" y="275.0" width="36.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.0" y="286.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.02%)</title><rect x="285.0" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.02%)</title><rect x="285.0" y="243.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (501 samples, 3.09%)</title><rect x="285.3" y="259.0" width="36.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.3" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (501 samples, 3.09%)</title><rect x="285.3" y="243.0" width="36.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.3" y="254.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (484 samples, 2.99%)</title><rect x="285.5" y="227.0" width="35.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.5" y="238.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (484 samples, 2.99%)</title><rect x="285.5" y="211.0" width="35.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.5" y="222.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (484 samples, 2.99%)</title><rect x="285.5" y="195.0" width="35.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.5" y="206.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.02%)</title><rect x="286.2" y="179.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="289.2" y="190.0"></text>
</g>
<g>
<title>write (469 samples, 2.89%)</title><rect x="286.6" y="179.0" width="34.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="289.6" y="190.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (14 samples, 0.09%)</title><rect x="320.8" y="227.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.8" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.02%)</title><rect x="320.8" y="211.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="323.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (9 samples, 0.06%)</title><rect x="321.1" y="211.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="324.1" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="321.4" y="195.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="324.4" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="321.4" y="179.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.4" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.05%)</title><rect x="321.8" y="355.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.05%)</title><rect x="321.8" y="339.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$89/461316.act (1,833 samples, 11.31%)</title><rect x="322.5" y="371.0" width="133.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.5" y="382.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$2 (1,833 samples, 11.31%)</title><rect x="322.5" y="355.0" width="133.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.5" y="366.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.delete (1,833 samples, 11.31%)</title><rect x="322.5" y="339.0" width="133.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.5" y="350.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (1,829 samples, 11.29%)</title><rect x="322.8" y="323.0" width="133.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.8" y="334.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,823 samples, 11.25%)</title><rect x="322.8" y="307.0" width="132.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="325.8" y="318.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,823 samples, 11.25%)</title><rect x="322.8" y="291.0" width="132.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.8" y="302.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1,815 samples, 11.20%)</title><rect x="323.4" y="275.0" width="132.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="326.4" y="286.0">Java_org_rocksdb..</text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,810 samples, 11.17%)</title><rect x="323.8" y="259.0" width="131.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="326.8" y="270.0">rocksdb_delete_h..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.05%)</title><rect x="324.4" y="243.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="327.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,789 samples, 11.04%)</title><rect x="325.2" y="243.0" width="130.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="328.2" y="254.0">rocksdb::Compact..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1,786 samples, 11.02%)</title><rect x="325.2" y="227.0" width="130.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="328.2" y="238.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,765 samples, 10.89%)</title><rect x="325.4" y="211.0" width="128.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="328.4" y="222.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,762 samples, 10.88%)</title><rect x="325.4" y="195.0" width="128.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="328.4" y="206.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.02%)</title><rect x="327.6" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="330.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (232 samples, 1.43%)</title><rect x="327.9" y="179.0" width="16.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="330.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (229 samples, 1.41%)</title><rect x="328.1" y="163.0" width="16.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (229 samples, 1.41%)</title><rect x="328.1" y="147.0" width="16.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="331.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (8 samples, 0.05%)</title><rect x="328.1" y="131.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="331.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (221 samples, 1.36%)</title><rect x="328.6" y="131.0" width="16.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="331.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.03%)</title><rect x="328.9" y="115.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="331.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (212 samples, 1.31%)</title><rect x="329.2" y="115.0" width="15.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="332.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (206 samples, 1.27%)</title><rect x="329.7" y="99.0" width="15.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="332.7" y="110.0"></text>
</g>
<g>
<title>write (203 samples, 1.25%)</title><rect x="329.9" y="83.0" width="14.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="332.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (73 samples, 0.45%)</title><rect x="345.2" y="179.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="348.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (70 samples, 0.43%)</title><rect x="345.3" y="163.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="348.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (70 samples, 0.43%)</title><rect x="345.3" y="147.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="348.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (68 samples, 0.42%)</title><rect x="345.5" y="131.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="348.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (61 samples, 0.38%)</title><rect x="345.7" y="115.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="348.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (54 samples, 0.33%)</title><rect x="346.2" y="99.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="349.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (21 samples, 0.13%)</title><rect x="348.4" y="83.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="351.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (12 samples, 0.07%)</title><rect x="349.0" y="67.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="352.0" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.04%)</title><rect x="349.4" y="51.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="352.4" y="62.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.02%)</title><rect x="350.1" y="115.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="353.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (48 samples, 0.30%)</title><rect x="350.5" y="179.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="353.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (42 samples, 0.26%)</title><rect x="350.9" y="163.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="353.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (42 samples, 0.26%)</title><rect x="350.9" y="147.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="353.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (41 samples, 0.25%)</title><rect x="351.0" y="131.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="354.0" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.02%)</title><rect x="351.0" y="115.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="354.0" y="126.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.02%)</title><rect x="351.0" y="99.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="354.0" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.02%)</title><rect x="351.0" y="83.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="354.0" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="351.0" y="67.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="354.0" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="351.0" y="51.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="354.0" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (35 samples, 0.22%)</title><rect x="351.4" y="115.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="354.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (33 samples, 0.20%)</title><rect x="351.5" y="99.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="354.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (31 samples, 0.19%)</title><rect x="351.6" y="83.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="354.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (13 samples, 0.08%)</title><rect x="353.0" y="67.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="356.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.03%)</title><rect x="353.5" y="51.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="356.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (972 samples, 6.00%)</title><rect x="354.1" y="179.0" width="70.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="357.1" y="190.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (971 samples, 5.99%)</title><rect x="354.1" y="163.0" width="70.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="357.1" y="174.0">rocksdb:..</text>
</g>
<g>
<title>sched_yield (4 samples, 0.02%)</title><rect x="354.9" y="147.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="357.9" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.02%)</title><rect x="355.2" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="358.2" y="158.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.02%)</title><rect x="355.2" y="131.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="358.2" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (949 samples, 5.86%)</title><rect x="355.7" y="147.0" width="69.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="358.7" y="158.0">xdrrec_..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (6 samples, 0.04%)</title><rect x="425.0" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="428.0" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.02%)</title><rect x="425.1" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="428.1" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.02%)</title><rect x="425.1" y="147.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="428.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (374 samples, 2.31%)</title><rect x="425.4" y="179.0" width="27.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="428.4" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (372 samples, 2.30%)</title><rect x="425.5" y="163.0" width="27.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="428.5" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (223 samples, 1.38%)</title><rect x="426.1" y="147.0" width="16.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="429.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (215 samples, 1.33%)</title><rect x="426.1" y="131.0" width="15.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="429.1" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.04%)</title><rect x="441.7" y="131.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="444.7" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.03%)</title><rect x="441.9" y="115.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="444.9" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.03%)</title><rect x="441.9" y="99.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="444.9" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (140 samples, 0.86%)</title><rect x="442.4" y="147.0" width="10.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="445.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (12 samples, 0.07%)</title><rect x="452.7" y="179.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="455.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.07%)</title><rect x="452.7" y="163.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="455.7" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.07%)</title><rect x="452.7" y="147.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="455.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (6 samples, 0.04%)</title><rect x="454.0" y="211.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="457.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (4 samples, 0.02%)</title><rect x="454.0" y="195.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="457.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (6 samples, 0.04%)</title><rect x="454.7" y="211.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="457.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (6 samples, 0.04%)</title><rect x="455.6" y="307.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.02%)</title><rect x="455.7" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.7" y="302.0"></text>
</g>
<g>
<title>[worker tid=35075] (3,262 samples, 20.13%)</title><rect x="456.2" y="467.0" width="237.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="459.2" y="478.0">[worker tid=35075]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.04%)</title><rect x="456.2" y="451.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="459.2" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.04%)</title><rect x="456.2" y="435.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="459.2" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.04%)</title><rect x="456.2" y="419.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="459.2" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,247 samples, 20.04%)</title><rect x="457.0" y="451.0" width="236.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="460.0" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,247 samples, 20.04%)</title><rect x="457.0" y="435.0" width="236.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="460.0" y="446.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,247 samples, 20.04%)</title><rect x="457.0" y="419.0" width="236.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.0" y="430.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (853 samples, 5.26%)</title><rect x="457.2" y="403.0" width="62.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="460.2" y="414.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (848 samples, 5.23%)</title><rect x="457.5" y="387.0" width="61.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.5" y="398.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (815 samples, 5.03%)</title><rect x="457.5" y="371.0" width="59.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.5" y="382.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.04%)</title><rect x="457.8" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="460.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.04%)</title><rect x="457.8" y="339.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="460.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.04%)</title><rect x="457.8" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="460.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.04%)</title><rect x="457.8" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.04%)</title><rect x="457.8" y="291.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.8" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.02%)</title><rect x="458.0" y="275.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="461.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (803 samples, 4.96%)</title><rect x="458.3" y="355.0" width="58.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.3" y="366.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (803 samples, 4.96%)</title><rect x="458.3" y="339.0" width="58.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.3" y="350.0">jdk/in..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (779 samples, 4.81%)</title><rect x="460.1" y="323.0" width="56.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="463.1" y="334.0">Unsafe..</text>
</g>
<g>
<title>Parker::park(bool, long) (741 samples, 4.57%)</title><rect x="461.4" y="307.0" width="54.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="464.4" y="318.0">Parke..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.03%)</title><rect x="461.8" y="291.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="464.8" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (720 samples, 4.44%)</title><rect x="462.3" y="291.0" width="52.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="465.3" y="302.0">__psy..</text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.04%)</title><rect x="514.7" y="291.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="517.7" y="302.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.02%)</title><rect x="516.3" y="307.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="519.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 0.07%)</title><rect x="516.8" y="371.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.06%)</title><rect x="517.0" y="355.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="520.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.05%)</title><rect x="517.0" y="339.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.03%)</title><rect x="517.2" y="323.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 0.14%)</title><rect x="517.6" y="371.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 0.14%)</title><rect x="517.6" y="355.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 0.14%)</title><rect x="517.6" y="339.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="520.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 0.14%)</title><rect x="517.6" y="323.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="520.6" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (22 samples, 0.14%)</title><rect x="517.6" y="307.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="520.6" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (20 samples, 0.12%)</title><rect x="517.6" y="291.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="520.6" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.06%)</title><rect x="518.3" y="275.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="521.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (2,392 samples, 14.76%)</title><rect x="519.3" y="403.0" width="174.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="522.3" y="414.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (2,392 samples, 14.76%)</title><rect x="519.3" y="387.0" width="174.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="522.3" y="398.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (518 samples, 3.20%)</title><rect x="519.3" y="371.0" width="37.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.3" y="382.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (13 samples, 0.08%)</title><rect x="519.3" y="355.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="522.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (13 samples, 0.08%)</title><rect x="519.3" y="339.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="522.3" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.05%)</title><rect x="519.5" y="323.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="522.5" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.03%)</title><rect x="519.7" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="522.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.03%)</title><rect x="519.7" y="291.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="522.7" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.03%)</title><rect x="519.7" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="522.7" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (5 samples, 0.03%)</title><rect x="519.7" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="522.7" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.02%)</title><rect x="519.7" y="243.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="522.7" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (500 samples, 3.09%)</title><rect x="520.3" y="355.0" width="36.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="523.3" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.04%)</title><rect x="520.3" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.3" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.04%)</title><rect x="520.3" y="323.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.02%)</title><rect x="520.3" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="523.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (493 samples, 3.04%)</title><rect x="520.8" y="339.0" width="35.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.8" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (493 samples, 3.04%)</title><rect x="520.8" y="323.0" width="35.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="523.8" y="334.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (492 samples, 3.04%)</title><rect x="520.8" y="307.0" width="35.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="523.8" y="318.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (489 samples, 3.02%)</title><rect x="521.1" y="291.0" width="35.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="524.1" y="302.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (22 samples, 0.14%)</title><rect x="521.1" y="275.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (22 samples, 0.14%)</title><rect x="521.1" y="259.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="524.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="521.4" y="243.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="524.4" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.03%)</title><rect x="521.5" y="227.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="524.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="521.6" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="521.6" y="195.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="524.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="521.6" y="179.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="524.6" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.07%)</title><rect x="521.9" y="243.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="524.9" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (7 samples, 0.04%)</title><rect x="522.1" y="227.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="525.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (467 samples, 2.88%)</title><rect x="522.7" y="275.0" width="34.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="525.7" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (465 samples, 2.87%)</title><rect x="522.8" y="259.0" width="33.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="525.8" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (465 samples, 2.87%)</title><rect x="522.8" y="243.0" width="33.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.8" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (446 samples, 2.75%)</title><rect x="523.0" y="227.0" width="32.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="526.0" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (446 samples, 2.75%)</title><rect x="523.0" y="211.0" width="32.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.0" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (446 samples, 2.75%)</title><rect x="523.0" y="195.0" width="32.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.0" y="206.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.02%)</title><rect x="523.2" y="179.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="526.2" y="190.0"></text>
</g>
<g>
<title>write (438 samples, 2.70%)</title><rect x="523.6" y="179.0" width="31.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="526.6" y="190.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (16 samples, 0.10%)</title><rect x="555.5" y="227.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="558.5" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.02%)</title><rect x="555.6" y="211.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="558.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (10 samples, 0.06%)</title><rect x="555.9" y="211.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="558.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.02%)</title><rect x="556.7" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="559.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.02%)</title><rect x="556.7" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="559.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$89/461316.act (1,874 samples, 11.57%)</title><rect x="557.0" y="371.0" width="136.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="560.0" y="382.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$2 (1,874 samples, 11.57%)</title><rect x="557.0" y="355.0" width="136.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="560.0" y="366.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.delete (1,874 samples, 11.57%)</title><rect x="557.0" y="339.0" width="136.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="560.0" y="350.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (1,870 samples, 11.54%)</title><rect x="557.3" y="323.0" width="136.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="560.3" y="334.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,866 samples, 11.52%)</title><rect x="557.3" y="307.0" width="135.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="560.3" y="318.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,866 samples, 11.52%)</title><rect x="557.3" y="291.0" width="135.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="560.3" y="302.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1,859 samples, 11.47%)</title><rect x="557.8" y="275.0" width="135.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="560.8" y="286.0">Java_org_rocksdb_..</text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,850 samples, 11.42%)</title><rect x="558.4" y="259.0" width="134.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="561.4" y="270.0">rocksdb_delete_he..</text>
</g>
<g>
<title>free_tiny (4 samples, 0.02%)</title><rect x="559.5" y="243.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="562.5" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.04%)</title><rect x="559.8" y="243.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="562.8" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.02%)</title><rect x="560.4" y="243.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="563.4" y="254.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.02%)</title><rect x="560.4" y="227.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="563.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,816 samples, 11.21%)</title><rect x="560.7" y="243.0" width="132.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="563.7" y="254.0">rocksdb::Compact..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1,814 samples, 11.20%)</title><rect x="560.7" y="227.0" width="132.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="563.7" y="238.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,788 samples, 11.04%)</title><rect x="560.7" y="211.0" width="130.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="563.7" y="222.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,780 samples, 10.99%)</title><rect x="560.8" y="195.0" width="129.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="563.8" y="206.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.02%)</title><rect x="562.6" y="179.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="565.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (242 samples, 1.49%)</title><rect x="562.9" y="179.0" width="17.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="565.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (241 samples, 1.49%)</title><rect x="562.9" y="163.0" width="17.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="565.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (239 samples, 1.48%)</title><rect x="563.0" y="147.0" width="17.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="566.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (7 samples, 0.04%)</title><rect x="563.1" y="131.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="566.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (231 samples, 1.43%)</title><rect x="563.6" y="131.0" width="16.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="566.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (8 samples, 0.05%)</title><rect x="563.7" y="115.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="566.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (221 samples, 1.36%)</title><rect x="564.3" y="115.0" width="16.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="567.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (215 samples, 1.33%)</title><rect x="564.8" y="99.0" width="15.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="567.8" y="110.0"></text>
</g>
<g>
<title>write (213 samples, 1.31%)</title><rect x="564.9" y="83.0" width="15.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="567.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (73 samples, 0.45%)</title><rect x="580.7" y="179.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="583.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (70 samples, 0.43%)</title><rect x="580.8" y="163.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="583.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (63 samples, 0.39%)</title><rect x="581.4" y="147.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="584.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (58 samples, 0.36%)</title><rect x="581.7" y="131.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="584.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (58 samples, 0.36%)</title><rect x="581.7" y="115.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="584.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (55 samples, 0.34%)</title><rect x="581.9" y="99.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="584.9" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.03%)</title><rect x="583.9" y="83.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="586.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (20 samples, 0.12%)</title><rect x="584.5" y="83.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="587.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.06%)</title><rect x="585.2" y="67.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="588.2" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.03%)</title><rect x="585.5" y="51.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="588.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (56 samples, 0.35%)</title><rect x="586.0" y="179.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="589.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (48 samples, 0.30%)</title><rect x="586.6" y="163.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="589.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (47 samples, 0.29%)</title><rect x="586.7" y="147.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="589.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (44 samples, 0.27%)</title><rect x="586.9" y="131.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.9" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.02%)</title><rect x="587.0" y="115.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="590.0" y="126.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.02%)</title><rect x="587.0" y="99.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="590.0" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.02%)</title><rect x="587.0" y="83.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="590.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (39 samples, 0.24%)</title><rect x="587.3" y="115.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="590.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (36 samples, 0.22%)</title><rect x="587.5" y="99.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (35 samples, 0.22%)</title><rect x="587.5" y="83.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="590.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (15 samples, 0.09%)</title><rect x="588.9" y="67.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="591.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.04%)</title><rect x="589.4" y="51.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="592.4" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.03%)</title><rect x="589.6" y="35.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="592.6" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1,041 samples, 6.43%)</title><rect x="590.1" y="179.0" width="75.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="593.1" y="190.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1,041 samples, 6.43%)</title><rect x="590.1" y="163.0" width="75.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="593.1" y="174.0">rocksdb:..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (6 samples, 0.04%)</title><rect x="591.2" y="147.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="594.2" y="158.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.04%)</title><rect x="591.2" y="131.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="594.2" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (5 samples, 0.03%)</title><rect x="591.3" y="115.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="594.3" y="126.0"></text>
</g>
<g>
<title>xdrrec_ops (1,017 samples, 6.28%)</title><rect x="591.8" y="147.0" width="74.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="594.8" y="158.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (7 samples, 0.04%)</title><rect x="665.9" y="179.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="668.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.02%)</title><rect x="666.1" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="669.1" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.02%)</title><rect x="666.1" y="147.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="669.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (310 samples, 1.91%)</title><rect x="666.4" y="179.0" width="22.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="669.4" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (308 samples, 1.90%)</title><rect x="666.5" y="163.0" width="22.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="669.5" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (148 samples, 0.91%)</title><rect x="667.0" y="147.0" width="10.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="670.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (139 samples, 0.86%)</title><rect x="667.0" y="131.0" width="10.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="670.0" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (9 samples, 0.06%)</title><rect x="677.1" y="131.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="680.1" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.04%)</title><rect x="677.3" y="115.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="680.3" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.04%)</title><rect x="677.3" y="99.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="680.3" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (153 samples, 0.94%)</title><rect x="677.8" y="147.0" width="11.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="680.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (11 samples, 0.07%)</title><rect x="689.0" y="179.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="692.0" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.06%)</title><rect x="689.1" y="163.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="692.1" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.05%)</title><rect x="689.1" y="147.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="692.1" y="158.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (6 samples, 0.04%)</title><rect x="690.0" y="179.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="693.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.02%)</title><rect x="690.2" y="163.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="693.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (14 samples, 0.09%)</title><rect x="691.0" y="211.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="694.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (9 samples, 0.06%)</title><rect x="691.3" y="195.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="694.3" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (8 samples, 0.05%)</title><rect x="691.3" y="179.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="694.3" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (4 samples, 0.02%)</title><rect x="691.5" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="694.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.02%)</title><rect x="692.1" y="211.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="695.1" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.02%)</title><rect x="692.1" y="195.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="695.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.02%)</title><rect x="692.3" y="211.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="695.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (4 samples, 0.02%)</title><rect x="693.2" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="696.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.02%)</title><rect x="693.2" y="291.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="696.2" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.02%)</title><rect x="693.2" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="696.2" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="693.2" y="259.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="696.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="693.2" y="243.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="696.2" y="254.0"></text>
</g>
<g>
<title>[worker tid=35843] (3,393 samples, 20.94%)</title><rect x="693.8" y="467.0" width="247.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="696.8" y="478.0">[worker tid=35843]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.04%)</title><rect x="694.0" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="697.0" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.04%)</title><rect x="694.1" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="697.1" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.02%)</title><rect x="694.1" y="419.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="697.1" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.02%)</title><rect x="694.1" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="697.1" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.02%)</title><rect x="694.1" y="387.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="697.1" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,378 samples, 20.85%)</title><rect x="694.8" y="451.0" width="246.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="697.8" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,378 samples, 20.85%)</title><rect x="694.8" y="435.0" width="246.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.8" y="446.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,378 samples, 20.85%)</title><rect x="694.8" y="419.0" width="246.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="697.8" y="430.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (907 samples, 5.60%)</title><rect x="694.8" y="403.0" width="66.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="697.8" y="414.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (902 samples, 5.57%)</title><rect x="695.0" y="387.0" width="65.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.0" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (851 samples, 5.25%)</title><rect x="695.0" y="371.0" width="62.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="698.0" y="382.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.02%)</title><rect x="695.5" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.02%)</title><rect x="695.5" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="698.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.02%)</title><rect x="695.5" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="698.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.02%)</title><rect x="695.5" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="698.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.02%)</title><rect x="695.5" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (841 samples, 5.19%)</title><rect x="695.8" y="355.0" width="61.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="698.8" y="366.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (840 samples, 5.18%)</title><rect x="695.8" y="339.0" width="61.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="698.8" y="350.0">jdk/in..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (814 samples, 5.02%)</title><rect x="697.7" y="323.0" width="59.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="700.7" y="334.0">Unsafe..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.02%)</title><rect x="698.2" y="307.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="701.2" y="318.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (4 samples, 0.02%)</title><rect x="698.2" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="701.2" y="302.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.02%)</title><rect x="698.2" y="275.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="701.2" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (4 samples, 0.02%)</title><rect x="698.2" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="701.2" y="270.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (7 samples, 0.04%)</title><rect x="698.5" y="307.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="701.5" y="318.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (4 samples, 0.02%)</title><rect x="698.8" y="291.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="701.8" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (775 samples, 4.78%)</title><rect x="699.2" y="307.0" width="56.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="702.2" y="318.0">Parker..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.02%)</title><rect x="699.3" y="291.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="702.3" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (759 samples, 4.68%)</title><rect x="699.7" y="291.0" width="55.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="702.7" y="302.0">__psy..</text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.04%)</title><rect x="755.0" y="291.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="758.0" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (7 samples, 0.04%)</title><rect x="756.0" y="307.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="759.0" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.03%)</title><rect x="756.1" y="291.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="759.1" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.02%)</title><rect x="756.2" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="759.2" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.02%)</title><rect x="756.2" y="259.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="759.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (18 samples, 0.11%)</title><rect x="757.0" y="371.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (18 samples, 0.11%)</title><rect x="757.0" y="355.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (16 samples, 0.10%)</title><rect x="757.2" y="339.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (10 samples, 0.06%)</title><rect x="757.5" y="323.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.06%)</title><rect x="757.5" y="307.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.05%)</title><rect x="757.6" y="291.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="760.6" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.05%)</title><rect x="757.6" y="275.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="760.6" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.05%)</title><rect x="757.6" y="259.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="760.6" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.05%)</title><rect x="757.6" y="243.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="760.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (33 samples, 0.20%)</title><rect x="758.3" y="371.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="761.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (33 samples, 0.20%)</title><rect x="758.3" y="355.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="761.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (33 samples, 0.20%)</title><rect x="758.3" y="339.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="761.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (33 samples, 0.20%)</title><rect x="758.3" y="323.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="761.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (33 samples, 0.20%)</title><rect x="758.3" y="307.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="761.3" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (29 samples, 0.18%)</title><rect x="758.6" y="291.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="761.6" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (21 samples, 0.13%)</title><rect x="759.1" y="275.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="762.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (2,470 samples, 15.25%)</title><rect x="760.9" y="403.0" width="179.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="763.9" y="414.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (2,470 samples, 15.25%)</title><rect x="760.9" y="387.0" width="179.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="763.9" y="398.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (587 samples, 3.62%)</title><rect x="761.0" y="371.0" width="42.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="764.0" y="382.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (10 samples, 0.06%)</title><rect x="761.0" y="355.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="764.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.06%)</title><rect x="761.0" y="339.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="764.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.06%)</title><rect x="761.0" y="323.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="764.0" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.02%)</title><rect x="761.4" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="764.4" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.02%)</title><rect x="761.4" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="764.4" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (571 samples, 3.52%)</title><rect x="761.7" y="355.0" width="41.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="764.7" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (17 samples, 0.10%)</title><rect x="761.7" y="339.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="764.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (16 samples, 0.10%)</title><rect x="761.8" y="323.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.8" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.04%)</title><rect x="761.8" y="307.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="764.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.06%)</title><rect x="762.3" y="307.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="765.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.06%)</title><rect x="762.3" y="291.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="765.3" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (554 samples, 3.42%)</title><rect x="762.9" y="339.0" width="40.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="765.9" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (554 samples, 3.42%)</title><rect x="762.9" y="323.0" width="40.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="765.9" y="334.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (551 samples, 3.40%)</title><rect x="763.1" y="307.0" width="40.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="766.1" y="318.0">one..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.04%)</title><rect x="763.6" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="766.6" y="302.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (4 samples, 0.02%)</title><rect x="763.6" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="766.6" y="286.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (539 samples, 3.33%)</title><rect x="764.0" y="291.0" width="39.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="767.0" y="302.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (17 samples, 0.10%)</title><rect x="764.0" y="275.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="767.0" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.10%)</title><rect x="764.0" y="259.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.06%)</title><rect x="764.1" y="243.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="767.1" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="764.2" y="227.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="767.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="764.5" y="211.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="767.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="764.5" y="195.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="767.5" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="764.5" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="767.5" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.04%)</title><rect x="764.8" y="243.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="767.8" y="254.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.02%)</title><rect x="765.0" y="227.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="768.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (522 samples, 3.22%)</title><rect x="765.3" y="275.0" width="38.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="768.3" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (520 samples, 3.21%)</title><rect x="765.4" y="259.0" width="37.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="768.4" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (520 samples, 3.21%)</title><rect x="765.4" y="243.0" width="37.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.4" y="254.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (498 samples, 3.07%)</title><rect x="765.7" y="227.0" width="36.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="768.7" y="238.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (498 samples, 3.07%)</title><rect x="765.7" y="211.0" width="36.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="768.7" y="222.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (498 samples, 3.07%)</title><rect x="765.7" y="195.0" width="36.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="768.7" y="206.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.02%)</title><rect x="766.3" y="179.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="769.3" y="190.0"></text>
</g>
<g>
<title>write (483 samples, 2.98%)</title><rect x="766.8" y="179.0" width="35.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="769.8" y="190.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (18 samples, 0.11%)</title><rect x="802.0" y="227.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.0" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.05%)</title><rect x="802.0" y="211.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.0" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.02%)</title><rect x="802.3" y="195.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="805.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (9 samples, 0.06%)</title><rect x="802.6" y="211.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="805.6" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.03%)</title><rect x="803.3" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.03%)</title><rect x="803.3" y="339.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$89/461316.act (1,882 samples, 11.62%)</title><rect x="803.7" y="371.0" width="137.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="806.7" y="382.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$2 (1,882 samples, 11.62%)</title><rect x="803.7" y="355.0" width="137.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="806.7" y="366.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.delete (1,882 samples, 11.62%)</title><rect x="803.7" y="339.0" width="137.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="806.7" y="350.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (1,878 samples, 11.59%)</title><rect x="804.0" y="323.0" width="136.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.0" y="334.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,870 samples, 11.54%)</title><rect x="804.0" y="307.0" width="136.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.0" y="318.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,870 samples, 11.54%)</title><rect x="804.0" y="291.0" width="136.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="807.0" y="302.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1,864 samples, 11.50%)</title><rect x="804.4" y="275.0" width="135.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="807.4" y="286.0">Java_org_rocksdb_..</text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,856 samples, 11.46%)</title><rect x="805.0" y="259.0" width="135.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.0" y="270.0">rocksdb_delete_he..</text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.03%)</title><rect x="806.3" y="243.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="809.3" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.03%)</title><rect x="806.8" y="243.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="809.8" y="254.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.03%)</title><rect x="806.8" y="227.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="809.8" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.03%)</title><rect x="806.8" y="211.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="809.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,824 samples, 11.26%)</title><rect x="807.2" y="243.0" width="132.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="810.2" y="254.0">rocksdb::Compact..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1,821 samples, 11.24%)</title><rect x="807.3" y="227.0" width="132.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="810.3" y="238.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,789 samples, 11.04%)</title><rect x="807.5" y="211.0" width="130.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="810.5" y="222.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,778 samples, 10.97%)</title><rect x="807.9" y="195.0" width="129.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="810.9" y="206.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.03%)</title><rect x="809.6" y="179.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="812.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (301 samples, 1.86%)</title><rect x="810.3" y="179.0" width="21.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="813.3" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (4 samples, 0.02%)</title><rect x="810.4" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="813.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (292 samples, 1.80%)</title><rect x="810.7" y="163.0" width="21.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="813.7" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (289 samples, 1.78%)</title><rect x="810.9" y="147.0" width="21.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="813.9" y="158.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (8 samples, 0.05%)</title><rect x="811.1" y="131.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="814.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (279 samples, 1.72%)</title><rect x="811.6" y="131.0" width="20.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="814.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.03%)</title><rect x="812.2" y="115.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="815.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (267 samples, 1.65%)</title><rect x="812.5" y="115.0" width="19.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="815.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (261 samples, 1.61%)</title><rect x="813.0" y="99.0" width="19.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="816.0" y="110.0"></text>
</g>
<g>
<title>write (256 samples, 1.58%)</title><rect x="813.3" y="83.0" width="18.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="816.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (74 samples, 0.46%)</title><rect x="832.3" y="179.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="835.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (72 samples, 0.44%)</title><rect x="832.3" y="163.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (70 samples, 0.43%)</title><rect x="832.5" y="147.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="835.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (64 samples, 0.40%)</title><rect x="832.9" y="131.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="835.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (61 samples, 0.38%)</title><rect x="833.0" y="115.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="836.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (54 samples, 0.33%)</title><rect x="833.5" y="99.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="836.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (15 samples, 0.09%)</title><rect x="836.2" y="83.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.06%)</title><rect x="836.6" y="67.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.6" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.03%)</title><rect x="836.8" y="51.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="839.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (65 samples, 0.40%)</title><rect x="837.6" y="179.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="840.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (61 samples, 0.38%)</title><rect x="837.9" y="163.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="840.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (60 samples, 0.37%)</title><rect x="838.0" y="147.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="841.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (54 samples, 0.33%)</title><rect x="838.4" y="131.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="841.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (50 samples, 0.31%)</title><rect x="838.7" y="115.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="841.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (49 samples, 0.30%)</title><rect x="838.8" y="99.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="841.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (47 samples, 0.29%)</title><rect x="839.0" y="83.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="842.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (21 samples, 0.13%)</title><rect x="840.6" y="67.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="843.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (13 samples, 0.08%)</title><rect x="841.1" y="51.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="844.1" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (8 samples, 0.05%)</title><rect x="841.5" y="35.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="844.5" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (923 samples, 5.70%)</title><rect x="842.4" y="179.0" width="67.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="845.4" y="190.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (922 samples, 5.69%)</title><rect x="842.5" y="163.0" width="67.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="845.5" y="174.0">rocksdb..</text>
</g>
<g>
<title>xdrrec_ops (912 samples, 5.63%)</title><rect x="843.2" y="147.0" width="66.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="846.2" y="158.0">xdrrec_..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (4 samples, 0.02%)</title><rect x="909.6" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="912.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.02%)</title><rect x="909.6" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="912.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (13 samples, 0.08%)</title><rect x="909.9" y="179.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="912.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.07%)</title><rect x="910.0" y="163.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="913.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.07%)</title><rect x="910.0" y="147.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="913.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (356 samples, 2.20%)</title><rect x="910.8" y="179.0" width="26.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="913.8" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (353 samples, 2.18%)</title><rect x="910.9" y="163.0" width="25.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="913.9" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (201 samples, 1.24%)</title><rect x="912.0" y="147.0" width="14.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="915.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (193 samples, 1.19%)</title><rect x="912.2" y="131.0" width="14.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="915.2" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.04%)</title><rect x="926.2" y="131.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="929.2" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.04%)</title><rect x="926.2" y="115.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="929.2" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.04%)</title><rect x="926.2" y="99.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="929.2" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (137 samples, 0.85%)</title><rect x="926.6" y="147.0" width="10.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="929.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (5 samples, 0.03%)</title><rect x="936.8" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.02%)</title><rect x="936.8" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.8" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.02%)</title><rect x="936.8" y="147.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="939.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (12 samples, 0.07%)</title><rect x="938.0" y="211.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="941.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (11 samples, 0.07%)</title><rect x="938.0" y="195.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.0" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (7 samples, 0.04%)</title><rect x="938.2" y="179.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.2" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (4 samples, 0.02%)</title><rect x="938.4" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="941.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (11 samples, 0.07%)</title><rect x="939.1" y="211.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.1" y="222.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.03%)</title><rect x="939.4" y="195.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="942.4" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.02%)</title><rect x="939.5" y="179.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="942.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (8 samples, 0.05%)</title><rect x="940.2" y="307.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="943.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (8 samples, 0.05%)</title><rect x="940.2" y="291.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="943.2" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.04%)</title><rect x="940.3" y="275.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.3" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="940.3" y="259.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="943.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="940.3" y="243.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="943.3" y="254.0"></text>
</g>
<g>
<title>[worker tid=36611] (3,420 samples, 21.11%)</title><rect x="940.9" y="467.0" width="249.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="943.9" y="478.0">[worker tid=36611]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (13 samples, 0.08%)</title><rect x="941.0" y="451.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.0" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (9 samples, 0.06%)</title><rect x="941.3" y="435.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.3" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (5 samples, 0.03%)</title><rect x="941.4" y="419.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.4" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.03%)</title><rect x="941.4" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.4" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.03%)</title><rect x="941.4" y="387.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="944.4" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,401 samples, 20.99%)</title><rect x="942.2" y="451.0" width="247.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="945.2" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,401 samples, 20.99%)</title><rect x="942.2" y="435.0" width="247.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="945.2" y="446.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,401 samples, 20.99%)</title><rect x="942.2" y="419.0" width="247.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.2" y="430.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (922 samples, 5.69%)</title><rect x="942.2" y="403.0" width="67.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="945.2" y="414.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (918 samples, 5.67%)</title><rect x="942.5" y="387.0" width="66.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="945.5" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (866 samples, 5.35%)</title><rect x="942.5" y="371.0" width="63.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="945.5" y="382.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.03%)</title><rect x="942.9" y="355.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="945.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.02%)</title><rect x="942.9" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="945.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.02%)</title><rect x="942.9" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="945.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.02%)</title><rect x="942.9" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="945.9" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.02%)</title><rect x="942.9" y="291.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="945.9" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.02%)</title><rect x="942.9" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="945.9" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.02%)</title><rect x="942.9" y="259.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="945.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.04%)</title><rect x="943.3" y="355.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="946.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.04%)</title><rect x="943.3" y="339.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="946.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.04%)</title><rect x="943.3" y="323.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="946.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.04%)</title><rect x="943.3" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="946.3" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.04%)</title><rect x="943.3" y="291.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="946.3" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.03%)</title><rect x="943.3" y="275.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="946.3" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.02%)</title><rect x="943.4" y="259.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="946.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (849 samples, 5.24%)</title><rect x="943.8" y="355.0" width="61.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="946.8" y="366.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (849 samples, 5.24%)</title><rect x="943.8" y="339.0" width="61.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="946.8" y="350.0">jdk/in..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (819 samples, 5.05%)</title><rect x="945.9" y="323.0" width="59.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="948.9" y="334.0">Unsafe..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.03%)</title><rect x="946.2" y="307.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.2" y="318.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (5 samples, 0.03%)</title><rect x="946.2" y="291.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.2" y="302.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (5 samples, 0.03%)</title><rect x="946.2" y="275.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="949.2" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (5 samples, 0.03%)</title><rect x="946.2" y="259.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="949.2" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (790 samples, 4.88%)</title><rect x="947.0" y="307.0" width="57.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="950.0" y="318.0">Parker..</text>
</g>
<g>
<title>__psynch_cvwait (778 samples, 4.80%)</title><rect x="947.3" y="291.0" width="56.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="950.3" y="302.0">__psyn..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.02%)</title><rect x="1004.8" y="307.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 0.09%)</title><rect x="1005.6" y="371.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1008.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (14 samples, 0.09%)</title><rect x="1005.6" y="355.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1008.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (14 samples, 0.09%)</title><rect x="1005.6" y="339.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1008.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (10 samples, 0.06%)</title><rect x="1005.7" y="323.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1008.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.04%)</title><rect x="1005.8" y="307.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1008.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.04%)</title><rect x="1005.9" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1008.9" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.04%)</title><rect x="1005.9" y="275.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1008.9" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.03%)</title><rect x="1006.0" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.0" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.03%)</title><rect x="1006.0" y="243.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1009.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (38 samples, 0.23%)</title><rect x="1006.6" y="371.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1009.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (38 samples, 0.23%)</title><rect x="1006.6" y="355.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1009.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (38 samples, 0.23%)</title><rect x="1006.6" y="339.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1009.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (38 samples, 0.23%)</title><rect x="1006.6" y="323.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1009.6" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (38 samples, 0.23%)</title><rect x="1006.6" y="307.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1009.6" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (34 samples, 0.21%)</title><rect x="1006.9" y="291.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1009.9" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (26 samples, 0.16%)</title><rect x="1007.5" y="275.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1010.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (2,479 samples, 15.30%)</title><rect x="1009.4" y="403.0" width="180.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1012.4" y="414.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (2,479 samples, 15.30%)</title><rect x="1009.4" y="387.0" width="180.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1012.4" y="398.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (554 samples, 3.42%)</title><rect x="1009.4" y="371.0" width="40.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1012.4" y="382.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (20 samples, 0.12%)</title><rect x="1009.4" y="355.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1012.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (20 samples, 0.12%)</title><rect x="1009.4" y="339.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1012.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (16 samples, 0.10%)</title><rect x="1009.4" y="323.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1012.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (15 samples, 0.09%)</title><rect x="1009.5" y="307.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1012.5" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (15 samples, 0.09%)</title><rect x="1009.5" y="291.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1012.5" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.05%)</title><rect x="1009.9" y="275.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1012.9" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (8 samples, 0.05%)</title><rect x="1009.9" y="259.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1012.9" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.04%)</title><rect x="1009.9" y="243.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1012.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$89/461316.act (4 samples, 0.02%)</title><rect x="1010.5" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1013.5" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (522 samples, 3.22%)</title><rect x="1010.8" y="355.0" width="38.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1013.8" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.06%)</title><rect x="1010.8" y="339.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1013.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.04%)</title><rect x="1011.1" y="323.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1014.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (513 samples, 3.17%)</title><rect x="1011.5" y="339.0" width="37.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1014.5" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (513 samples, 3.17%)</title><rect x="1011.5" y="323.0" width="37.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1014.5" y="334.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (513 samples, 3.17%)</title><rect x="1011.5" y="307.0" width="37.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1014.5" y="318.0">one..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.05%)</title><rect x="1011.6" y="291.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.6" y="302.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (4 samples, 0.02%)</title><rect x="1011.8" y="275.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1014.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (504 samples, 3.11%)</title><rect x="1012.1" y="291.0" width="36.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1015.1" y="302.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.11%)</title><rect x="1012.1" y="275.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1015.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.11%)</title><rect x="1012.1" y="259.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1015.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="1012.2" y="243.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1015.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="1012.6" y="227.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1015.6" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.05%)</title><rect x="1012.9" y="243.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.9" y="254.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.03%)</title><rect x="1013.0" y="227.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1016.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (486 samples, 3.00%)</title><rect x="1013.5" y="275.0" width="35.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1016.5" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (485 samples, 2.99%)</title><rect x="1013.5" y="259.0" width="35.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1016.5" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (485 samples, 2.99%)</title><rect x="1013.5" y="243.0" width="35.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1016.5" y="254.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (471 samples, 2.91%)</title><rect x="1013.8" y="227.0" width="34.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1016.8" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (471 samples, 2.91%)</title><rect x="1013.8" y="211.0" width="34.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1016.8" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (471 samples, 2.91%)</title><rect x="1013.8" y="195.0" width="34.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1016.8" y="206.0">su..</text>
</g>
<g>
<title>write (457 samples, 2.82%)</title><rect x="1014.8" y="179.0" width="33.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1017.8" y="190.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.07%)</title><rect x="1048.1" y="227.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1051.1" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.04%)</title><rect x="1048.1" y="211.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1051.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.02%)</title><rect x="1048.6" y="211.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1051.6" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.06%)</title><rect x="1048.9" y="355.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1051.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.05%)</title><rect x="1048.9" y="339.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1051.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.03%)</title><rect x="1049.0" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1052.0" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.03%)</title><rect x="1049.0" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1052.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$89/461316.act (1,924 samples, 11.88%)</title><rect x="1049.8" y="371.0" width="140.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1052.8" y="382.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$2 (1,924 samples, 11.88%)</title><rect x="1049.8" y="355.0" width="140.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1052.8" y="366.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.delete (1,924 samples, 11.88%)</title><rect x="1049.8" y="339.0" width="140.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1052.8" y="350.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.remove (1,919 samples, 11.84%)</title><rect x="1050.2" y="323.0" width="139.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1053.2" y="334.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,909 samples, 11.78%)</title><rect x="1050.2" y="307.0" width="139.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.2" y="318.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (1,909 samples, 11.78%)</title><rect x="1050.2" y="291.0" width="139.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1053.2" y="302.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1,897 samples, 11.71%)</title><rect x="1050.9" y="275.0" width="138.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1053.9" y="286.0">Java_org_rocksdb_..</text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,889 samples, 11.66%)</title><rect x="1051.5" y="259.0" width="137.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.5" y="270.0">rocksdb_delete_he..</text>
</g>
<g>
<title>free_tiny (4 samples, 0.02%)</title><rect x="1052.9" y="243.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1055.9" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.02%)</title><rect x="1052.9" y="227.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1055.9" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.05%)</title><rect x="1053.4" y="243.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1056.4" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.04%)</title><rect x="1054.0" y="243.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1057.0" y="254.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.04%)</title><rect x="1054.0" y="227.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1057.0" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.04%)</title><rect x="1054.0" y="211.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1057.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,843 samples, 11.38%)</title><rect x="1054.5" y="243.0" width="134.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.5" y="254.0">rocksdb::Compacte..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1,839 samples, 11.35%)</title><rect x="1054.5" y="227.0" width="133.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.5" y="238.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,809 samples, 11.17%)</title><rect x="1055.0" y="211.0" width="131.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.0" y="222.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,796 samples, 11.09%)</title><rect x="1055.0" y="195.0" width="130.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.0" y="206.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.02%)</title><rect x="1056.1" y="179.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1059.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (291 samples, 1.80%)</title><rect x="1056.6" y="179.0" width="21.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1059.6" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (4 samples, 0.02%)</title><rect x="1056.6" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (284 samples, 1.75%)</title><rect x="1056.9" y="163.0" width="20.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (282 samples, 1.74%)</title><rect x="1057.1" y="147.0" width="20.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.02%)</title><rect x="1057.1" y="131.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1060.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (278 samples, 1.72%)</title><rect x="1057.4" y="131.0" width="20.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (270 samples, 1.67%)</title><rect x="1058.0" y="115.0" width="19.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (266 samples, 1.64%)</title><rect x="1058.2" y="99.0" width="19.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.2" y="110.0"></text>
</g>
<g>
<title>write (259 samples, 1.60%)</title><rect x="1058.8" y="83.0" width="18.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1061.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (98 samples, 0.60%)</title><rect x="1078.1" y="179.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (90 samples, 0.56%)</title><rect x="1078.6" y="163.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (82 samples, 0.51%)</title><rect x="1079.2" y="147.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (79 samples, 0.49%)</title><rect x="1079.4" y="131.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1082.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (77 samples, 0.48%)</title><rect x="1079.5" y="115.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (69 samples, 0.43%)</title><rect x="1080.1" y="99.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (30 samples, 0.19%)</title><rect x="1082.9" y="83.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (16 samples, 0.10%)</title><rect x="1083.8" y="67.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1086.8" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (9 samples, 0.06%)</title><rect x="1084.3" y="51.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1087.3" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (55 samples, 0.34%)</title><rect x="1085.2" y="179.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (46 samples, 0.28%)</title><rect x="1085.9" y="163.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (43 samples, 0.27%)</title><rect x="1086.1" y="147.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (42 samples, 0.26%)</title><rect x="1086.1" y="131.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1089.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (33 samples, 0.20%)</title><rect x="1086.7" y="115.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (32 samples, 0.20%)</title><rect x="1086.8" y="99.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (28 samples, 0.17%)</title><rect x="1087.1" y="83.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (13 samples, 0.08%)</title><rect x="1088.2" y="67.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.2" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.05%)</title><rect x="1088.5" y="51.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.5" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.02%)</title><rect x="1088.8" y="35.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1091.8" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (904 samples, 5.58%)</title><rect x="1089.2" y="179.0" width="65.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.2" y="190.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (904 samples, 5.58%)</title><rect x="1089.2" y="163.0" width="65.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.2" y="174.0">rocksdb..</text>
</g>
<g>
<title>xdrrec_ops (888 samples, 5.48%)</title><rect x="1090.4" y="147.0" width="64.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1093.4" y="158.0">xdrrec_..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (16 samples, 0.10%)</title><rect x="1155.3" y="179.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.3" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (13 samples, 0.08%)</title><rect x="1155.3" y="163.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.08%)</title><rect x="1155.3" y="147.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1158.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (382 samples, 2.36%)</title><rect x="1156.4" y="179.0" width="27.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.4" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (380 samples, 2.35%)</title><rect x="1156.5" y="163.0" width="27.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.5" y="174.0">r..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.02%)</title><rect x="1157.6" y="147.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.6" y="158.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.02%)</title><rect x="1157.6" y="131.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1160.6" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (210 samples, 1.30%)</title><rect x="1157.9" y="147.0" width="15.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (204 samples, 1.26%)</title><rect x="1157.9" y="131.0" width="14.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1160.9" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 0.03%)</title><rect x="1172.7" y="131.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1175.7" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.03%)</title><rect x="1172.7" y="115.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1175.7" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.03%)</title><rect x="1172.7" y="99.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1175.7" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (150 samples, 0.93%)</title><rect x="1173.2" y="147.0" width="11.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1176.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (9 samples, 0.06%)</title><rect x="1184.2" y="179.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.05%)</title><rect x="1184.2" y="163.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.04%)</title><rect x="1184.2" y="147.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1187.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.02%)</title><rect x="1185.8" y="195.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.02%)</title><rect x="1186.4" y="195.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (9 samples, 0.06%)</title><rect x="1186.9" y="211.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Delete(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;) (5 samples, 0.03%)</title><rect x="1187.1" y="195.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.03%)</title><rect x="1187.6" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (10 samples, 0.06%)</title><rect x="1189.2" y="307.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1192.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (8 samples, 0.05%)</title><rect x="1189.3" y="291.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.3" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.04%)</title><rect x="1189.4" y="275.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1192.4" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1189.4" y="259.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1192.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1189.4" y="243.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1192.4" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.02%)</title><rect x="1189.6" y="227.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1192.6" y="238.0"></text>
</g>
</g>
</svg>
