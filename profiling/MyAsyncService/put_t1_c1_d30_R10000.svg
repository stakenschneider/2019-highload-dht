<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (2,029 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>[NIO Selector #2 tid=38659] (693 samples, 34.15%)</title><rect x="10.0" y="1235.0" width="403.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="1246.0">[NIO Selector #2 tid=38659]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="10.0" y="1219.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="10.0" y="1203.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="10.0" y="1187.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="10.0" y="1171.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="10.0" y="1155.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="10.0" y="1139.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="10.0" y="1123.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.05%)</title><rect x="10.0" y="1107.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.05%)</title><rect x="10.0" y="1091.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.05%)</title><rect x="10.0" y="1075.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (1 samples, 0.05%)</title><rect x="10.0" y="1059.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>HeapRegionTracer::send_region_type_change(unsigned int, G1HeapRegionTraceType::Type, G1HeapRegionTraceType::Type, unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="10.0" y="1043.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.05%)</title><rect x="10.6" y="1219.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.6" y="1230.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason) (1 samples, 0.05%)</title><rect x="10.6" y="1203.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.6" y="1214.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize(JavaThread*, frame, RegisterMap*, Deoptimization::DeoptReason) (1 samples, 0.05%)</title><rect x="10.6" y="1187.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.6" y="1198.0"></text>
</g>
<g>
<title>Deoptimization::revoke_biases_of_monitors(JavaThread*, frame, RegisterMap*) (1 samples, 0.05%)</title><rect x="10.6" y="1171.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.6" y="1182.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.05%)</title><rect x="10.6" y="1155.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.6" y="1166.0"></text>
</g>
<g>
<title>compiledVFrame::compiledVFrame(frame const*, RegisterMap const*, JavaThread*, CompiledMethod*) (1 samples, 0.05%)</title><rect x="10.6" y="1139.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.6" y="1150.0"></text>
</g>
<g>
<title>vframe::vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.05%)</title><rect x="10.6" y="1123.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.6" y="1134.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.34%)</title><rect x="11.2" y="1219.0" width="4.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="14.2" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="14.7" y="1203.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.7" y="1214.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="14.7" y="1187.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="17.7" y="1198.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (684 samples, 33.71%)</title><rect x="15.2" y="1219.0" width="397.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.2" y="1230.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (24 samples, 1.18%)</title><rect x="15.8" y="1203.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.8" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (24 samples, 1.18%)</title><rect x="15.8" y="1187.0" width="14.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.8" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (23 samples, 1.13%)</title><rect x="15.8" y="1171.0" width="13.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.8" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvsignal (22 samples, 1.08%)</title><rect x="15.8" y="1155.0" width="12.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="18.8" y="1166.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.05%)</title><rect x="28.6" y="1155.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="31.6" y="1166.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.05%)</title><rect x="28.6" y="1139.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="31.6" y="1150.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.05%)</title><rect x="28.6" y="1123.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="31.6" y="1134.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.05%)</title><rect x="29.2" y="1171.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="32.2" y="1182.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.05%)</title><rect x="29.2" y="1155.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="32.2" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.05%)</title><rect x="29.8" y="1203.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.8" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.05%)</title><rect x="29.8" y="1187.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.8" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (259 samples, 12.76%)</title><rect x="30.4" y="1203.0" width="150.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.4" y="1214.0">one/nio/net/JavaSel..</text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="30.4" y="1187.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="33.4" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (6 samples, 0.30%)</title><rect x="30.9" y="1187.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.15%)</title><rect x="32.1" y="1171.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.15%)</title><rect x="32.1" y="1155.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.1" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.05%)</title><rect x="33.8" y="1171.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.05%)</title><rect x="33.8" y="1155.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.05%)</title><rect x="33.8" y="1139.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.8" y="1150.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.10%)</title><rect x="34.4" y="1187.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.4" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="35.6" y="1187.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="38.6" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (249 samples, 12.27%)</title><rect x="36.2" y="1187.0" width="144.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="39.2" y="1198.0">sun/nio/ch/Selecto..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (249 samples, 12.27%)</title><rect x="36.2" y="1171.0" width="144.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.2" y="1182.0">sun/nio/ch/Selecto..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (248 samples, 12.22%)</title><rect x="36.2" y="1155.0" width="144.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.2" y="1166.0">sun/nio/ch/KQueueS..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (219 samples, 10.79%)</title><rect x="36.8" y="1139.0" width="127.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.8" y="1150.0">sun/nio/ch/KQueu..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.20%)</title><rect x="44.9" y="1123.0" width="2.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="47.9" y="1134.0"></text>
</g>
<g>
<title>kevent (201 samples, 9.91%)</title><rect x="47.2" y="1123.0" width="116.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="50.2" y="1134.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (11 samples, 0.54%)</title><rect x="164.1" y="1139.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="165.3" y="1123.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="165.3" y="1107.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.05%)</title><rect x="165.9" y="1123.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="168.9" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (7 samples, 0.34%)</title><rect x="166.4" y="1123.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="169.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.30%)</title><rect x="167.0" y="1107.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="170.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.30%)</title><rect x="167.0" y="1091.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.30%)</title><rect x="167.0" y="1075.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.20%)</title><rect x="170.5" y="1139.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.5" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.05%)</title><rect x="172.3" y="1123.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (12 samples, 0.59%)</title><rect x="172.8" y="1139.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (12 samples, 0.59%)</title><rect x="172.8" y="1123.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="172.8" y="1107.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (10 samples, 0.49%)</title><rect x="173.4" y="1107.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (10 samples, 0.49%)</title><rect x="173.4" y="1091.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (10 samples, 0.49%)</title><rect x="173.4" y="1075.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.4" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.05%)</title><rect x="179.2" y="1107.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="182.2" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.05%)</title><rect x="179.8" y="1139.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.05%)</title><rect x="179.8" y="1123.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="182.8" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="179.8" y="1107.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="179.8" y="1091.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="179.8" y="1075.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="182.8" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.05%)</title><rect x="180.4" y="1155.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="183.4" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (399 samples, 19.66%)</title><rect x="181.0" y="1203.0" width="232.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="184.0" y="1214.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.10%)</title><rect x="182.1" y="1187.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="185.1" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (391 samples, 19.27%)</title><rect x="183.3" y="1187.0" width="227.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="186.3" y="1198.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (205 samples, 10.10%)</title><rect x="183.3" y="1171.0" width="119.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.3" y="1182.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (170 samples, 8.38%)</title><rect x="184.5" y="1155.0" width="98.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.5" y="1166.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (170 samples, 8.38%)</title><rect x="184.5" y="1139.0" width="98.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="187.5" y="1150.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.10%)</title><rect x="184.5" y="1123.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="187.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.10%)</title><rect x="184.5" y="1107.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.10%)</title><rect x="184.5" y="1091.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="187.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.05%)</title><rect x="185.1" y="1075.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.1" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (168 samples, 8.28%)</title><rect x="185.6" y="1123.0" width="97.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.6" y="1134.0">ru/mail/pol..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="185.6" y="1107.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="188.6" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (167 samples, 8.23%)</title><rect x="186.2" y="1107.0" width="97.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.2" y="1118.0">ru/mail/pol..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.05%)</title><rect x="186.2" y="1091.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="189.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="186.2" y="1075.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="186.2" y="1059.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.2" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (166 samples, 8.18%)</title><rect x="186.8" y="1091.0" width="96.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.8" y="1102.0">ru/mail/pol..</text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.05%)</title><rect x="186.8" y="1075.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="189.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.05%)</title><rect x="187.4" y="1075.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.05%)</title><rect x="187.4" y="1059.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.4" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.get$Lambda (1 samples, 0.05%)</title><rect x="187.4" y="1043.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.4" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.&lt;init&gt; (1 samples, 0.05%)</title><rect x="187.4" y="1027.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (164 samples, 8.08%)</title><rect x="188.0" y="1075.0" width="95.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.0" y="1086.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (164 samples, 8.08%)</title><rect x="188.0" y="1059.0" width="95.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="191.0" y="1070.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (1 samples, 0.05%)</title><rect x="188.0" y="1043.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (148 samples, 7.29%)</title><rect x="188.5" y="1043.0" width="86.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.5" y="1054.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.10%)</title><rect x="188.5" y="1027.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.10%)</title><rect x="188.5" y="1011.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="191.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.10%)</title><rect x="188.5" y="995.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.10%)</title><rect x="188.5" y="979.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.10%)</title><rect x="188.5" y="963.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.5" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.10%)</title><rect x="188.5" y="947.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.5" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.10%)</title><rect x="188.5" y="931.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (146 samples, 7.20%)</title><rect x="189.7" y="1027.0" width="84.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.7" y="1038.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (146 samples, 7.20%)</title><rect x="189.7" y="1011.0" width="84.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="192.7" y="1022.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (146 samples, 7.20%)</title><rect x="189.7" y="995.0" width="84.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.7" y="1006.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (146 samples, 7.20%)</title><rect x="189.7" y="979.0" width="84.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.7" y="990.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (146 samples, 7.20%)</title><rect x="189.7" y="963.0" width="84.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.7" y="974.0">jdk/intern..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.15%)</title><rect x="190.9" y="947.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="193.9" y="958.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.10%)</title><rect x="192.6" y="947.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="195.6" y="958.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="193.8" y="947.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="196.8" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="194.4" y="947.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="197.4" y="958.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (133 samples, 6.55%)</title><rect x="194.9" y="947.0" width="77.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="197.9" y="958.0">Unsafe_Un..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.25%)</title><rect x="196.1" y="931.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="199.1" y="942.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (4 samples, 0.20%)</title><rect x="196.7" y="915.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="199.7" y="926.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.20%)</title><rect x="196.7" y="899.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="199.7" y="910.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (4 samples, 0.20%)</title><rect x="196.7" y="883.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="199.7" y="894.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.10%)</title><rect x="196.7" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="199.7" y="878.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.05%)</title><rect x="197.8" y="867.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="200.8" y="878.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="198.4" y="867.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="201.4" y="878.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.05%)</title><rect x="199.0" y="931.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="202.0" y="942.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.15%)</title><rect x="199.6" y="931.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="202.6" y="942.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.05%)</title><rect x="199.6" y="915.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="202.6" y="926.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.10%)</title><rect x="200.2" y="915.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="203.2" y="926.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.05%)</title><rect x="201.3" y="931.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="204.3" y="942.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.05%)</title><rect x="201.9" y="931.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="204.9" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.05%)</title><rect x="202.5" y="931.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="205.5" y="942.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="202.5" y="915.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="205.5" y="926.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.05%)</title><rect x="203.1" y="931.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="206.1" y="942.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.05%)</title><rect x="203.1" y="915.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="206.1" y="926.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.20%)</title><rect x="203.7" y="931.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="206.7" y="942.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="205.4" y="915.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="208.4" y="926.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="206.0" y="931.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="209.0" y="942.0"></text>
</g>
<g>
<title>__psynch_cvsignal (104 samples, 5.13%)</title><rect x="206.6" y="931.0" width="60.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="209.6" y="942.0">__psyn..</text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.05%)</title><rect x="267.1" y="931.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="270.1" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.05%)</title><rect x="267.6" y="931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="270.6" y="942.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.05%)</title><rect x="268.2" y="931.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="271.2" y="942.0"></text>
</g>
<g>
<title>pthread_cond_signal (5 samples, 0.25%)</title><rect x="268.8" y="931.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="271.8" y="942.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.10%)</title><rect x="270.5" y="915.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="273.5" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.05%)</title><rect x="271.7" y="931.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="274.7" y="942.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="272.3" y="947.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="275.3" y="958.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.05%)</title><rect x="272.9" y="947.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="275.9" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.05%)</title><rect x="273.4" y="947.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="276.4" y="958.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.05%)</title><rect x="274.0" y="947.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="277.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 0.74%)</title><rect x="274.6" y="1043.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 0.74%)</title><rect x="274.6" y="1027.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 0.74%)</title><rect x="274.6" y="1011.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (15 samples, 0.74%)</title><rect x="274.6" y="995.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="282.2" y="979.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.05%)</title><rect x="282.8" y="979.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.8" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (15 samples, 0.74%)</title><rect x="283.3" y="1155.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.3" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8 samples, 0.39%)</title><rect x="283.3" y="1139.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.20%)</title><rect x="285.7" y="1123.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.20%)</title><rect x="285.7" y="1107.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.20%)</title><rect x="285.7" y="1091.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2 samples, 0.10%)</title><rect x="286.2" y="1075.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.2" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="287.4" y="1075.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.4" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.25%)</title><rect x="288.0" y="1139.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.25%)</title><rect x="288.0" y="1123.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.0" y="1134.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.05%)</title><rect x="290.3" y="1107.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.3" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.10%)</title><rect x="290.9" y="1139.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.9" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.15%)</title><rect x="292.1" y="1155.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.15%)</title><rect x="292.1" y="1139.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.15%)</title><rect x="292.1" y="1123.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.05%)</title><rect x="293.2" y="1107.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.05%)</title><rect x="293.2" y="1091.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.05%)</title><rect x="293.2" y="1075.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.2" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.44%)</title><rect x="293.8" y="1155.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.30%)</title><rect x="293.8" y="1139.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.20%)</title><rect x="295.0" y="1123.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.15%)</title><rect x="295.5" y="1107.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="296.7" y="1091.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.05%)</title><rect x="296.7" y="1075.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.15%)</title><rect x="297.3" y="1139.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.10%)</title><rect x="297.9" y="1123.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.9" y="1134.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="297.9" y="1107.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="300.9" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="298.5" y="1107.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="301.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.30%)</title><rect x="299.0" y="1155.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.0" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.15%)</title><rect x="300.8" y="1139.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.8" y="1150.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (186 samples, 9.17%)</title><rect x="302.5" y="1171.0" width="108.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.5" y="1182.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (185 samples, 9.12%)</title><rect x="303.1" y="1155.0" width="107.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.1" y="1166.0">one/nio/net/J..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (184 samples, 9.07%)</title><rect x="303.7" y="1139.0" width="107.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.7" y="1150.0">sun/nio/ch/So..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.39%)</title><rect x="303.7" y="1123.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.39%)</title><rect x="303.7" y="1107.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.05%)</title><rect x="305.4" y="1091.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.05%)</title><rect x="305.4" y="1075.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.05%)</title><rect x="305.4" y="1059.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.05%)</title><rect x="305.4" y="1043.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.20%)</title><rect x="306.0" y="1091.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.20%)</title><rect x="306.0" y="1075.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.20%)</title><rect x="306.0" y="1059.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.0" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (176 samples, 8.67%)</title><rect x="308.3" y="1123.0" width="102.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.3" y="1134.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (176 samples, 8.67%)</title><rect x="308.3" y="1107.0" width="102.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.3" y="1118.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (176 samples, 8.67%)</title><rect x="308.3" y="1091.0" width="102.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.3" y="1102.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (176 samples, 8.67%)</title><rect x="308.3" y="1075.0" width="102.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.3" y="1086.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (176 samples, 8.67%)</title><rect x="308.3" y="1059.0" width="102.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.3" y="1070.0">sun/nio/ch/F..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.20%)</title><rect x="314.7" y="1043.0" width="2.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="317.7" y="1054.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="316.5" y="1027.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="319.5" y="1038.0"></text>
</g>
<g>
<title>convertReturnVal (4 samples, 0.20%)</title><rect x="317.1" y="1043.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="320.1" y="1054.0"></text>
</g>
<g>
<title>read (157 samples, 7.74%)</title><rect x="319.4" y="1043.0" width="91.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="322.4" y="1054.0">read</text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.20%)</title><rect x="410.7" y="1187.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="413.7" y="1198.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.05%)</title><rect x="410.7" y="1171.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="413.7" y="1182.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.10%)</title><rect x="411.3" y="1171.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="414.3" y="1182.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.10%)</title><rect x="411.3" y="1155.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="414.3" y="1166.0"></text>
</g>
<g>
<title>_res (2 samples, 0.10%)</title><rect x="411.3" y="1139.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="414.3" y="1150.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="412.4" y="1171.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="415.4" y="1182.0"></text>
</g>
<g>
<title>[tid=13315] (15 samples, 0.74%)</title><rect x="413.0" y="1235.0" width="8.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="416.0" y="1246.0"></text>
</g>
<g>
<title>thread_start (15 samples, 0.74%)</title><rect x="413.0" y="1219.0" width="8.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="416.0" y="1230.0"></text>
</g>
<g>
<title>_pthread_start (15 samples, 0.74%)</title><rect x="413.0" y="1203.0" width="8.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="416.0" y="1214.0"></text>
</g>
<g>
<title>_pthread_body (15 samples, 0.74%)</title><rect x="413.0" y="1187.0" width="8.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="416.0" y="1198.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (15 samples, 0.74%)</title><rect x="413.0" y="1171.0" width="8.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="416.0" y="1182.0"></text>
</g>
<g>
<title>Thread::call_run() (15 samples, 0.74%)</title><rect x="413.0" y="1155.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="416.0" y="1166.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (15 samples, 0.74%)</title><rect x="413.0" y="1139.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="416.0" y="1150.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (15 samples, 0.74%)</title><rect x="413.0" y="1123.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="416.0" y="1134.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.05%)</title><rect x="413.0" y="1107.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="416.0" y="1118.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.05%)</title><rect x="413.0" y="1091.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="416.0" y="1102.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.05%)</title><rect x="413.0" y="1075.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="416.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.05%)</title><rect x="413.0" y="1059.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="416.0" y="1070.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (14 samples, 0.69%)</title><rect x="413.6" y="1107.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="416.6" y="1118.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (14 samples, 0.69%)</title><rect x="413.6" y="1091.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="416.6" y="1102.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (14 samples, 0.69%)</title><rect x="413.6" y="1075.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="416.6" y="1086.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.05%)</title><rect x="413.6" y="1059.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="416.6" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (13 samples, 0.64%)</title><rect x="414.2" y="1059.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="417.2" y="1070.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.05%)</title><rect x="414.8" y="1043.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="417.8" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.49%)</title><rect x="415.4" y="1043.0" width="5.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="418.4" y="1054.0"></text>
</g>
<g>
<title>mutex (1 samples, 0.05%)</title><rect x="421.2" y="1043.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="424.2" y="1054.0"></text>
</g>
<g>
<title>[tid=13827] (3 samples, 0.15%)</title><rect x="421.7" y="1235.0" width="1.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="424.7" y="1246.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.15%)</title><rect x="421.7" y="1219.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="424.7" y="1230.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.15%)</title><rect x="421.7" y="1203.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="424.7" y="1214.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.15%)</title><rect x="421.7" y="1187.0" width="1.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="424.7" y="1198.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.15%)</title><rect x="421.7" y="1171.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="424.7" y="1182.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.15%)</title><rect x="421.7" y="1155.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="424.7" y="1166.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.15%)</title><rect x="421.7" y="1139.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="424.7" y="1150.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.15%)</title><rect x="421.7" y="1123.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="424.7" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.10%)</title><rect x="422.3" y="1107.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="425.3" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.10%)</title><rect x="422.3" y="1091.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="425.3" y="1102.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.10%)</title><rect x="422.3" y="1075.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="425.3" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.10%)</title><rect x="422.3" y="1059.0" width="1.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="425.3" y="1070.0"></text>
</g>
<g>
<title>[tid=22531] (4 samples, 0.20%)</title><rect x="423.5" y="1235.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="426.5" y="1246.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.20%)</title><rect x="423.5" y="1219.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="426.5" y="1230.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.20%)</title><rect x="423.5" y="1203.0" width="2.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="426.5" y="1214.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.20%)</title><rect x="423.5" y="1187.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="426.5" y="1198.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.20%)</title><rect x="423.5" y="1171.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="426.5" y="1182.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.20%)</title><rect x="423.5" y="1155.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="426.5" y="1166.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.20%)</title><rect x="423.5" y="1139.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="426.5" y="1150.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.20%)</title><rect x="423.5" y="1123.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="426.5" y="1134.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (4 samples, 0.20%)</title><rect x="423.5" y="1107.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="426.5" y="1118.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.15%)</title><rect x="423.5" y="1091.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="426.5" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.15%)</title><rect x="423.5" y="1075.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="426.5" y="1086.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.15%)</title><rect x="423.5" y="1059.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="426.5" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.15%)</title><rect x="423.5" y="1043.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="426.5" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.15%)</title><rect x="423.5" y="1027.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="426.5" y="1038.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.05%)</title><rect x="423.5" y="1011.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="426.5" y="1022.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.05%)</title><rect x="423.5" y="995.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="426.5" y="1006.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.05%)</title><rect x="423.5" y="979.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="426.5" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.05%)</title><rect x="423.5" y="963.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="426.5" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="423.5" y="947.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="426.5" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="423.5" y="931.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="426.5" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="423.5" y="915.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="426.5" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="423.5" y="899.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="426.5" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="423.5" y="883.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="426.5" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="423.5" y="867.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="426.5" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="423.5" y="851.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="426.5" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="423.5" y="835.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="426.5" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="423.5" y="819.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="426.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="423.5" y="803.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="426.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="423.5" y="787.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="426.5" y="798.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="423.5" y="771.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="426.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.05%)</title><rect x="423.5" y="755.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="426.5" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.05%)</title><rect x="423.5" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="426.5" y="750.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.05%)</title><rect x="423.5" y="723.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.5" y="734.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.05%)</title><rect x="423.5" y="707.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="426.5" y="718.0"></text>
</g>
<g>
<title>FieldStreamBase::init_generic_signature_start_slot() (1 samples, 0.05%)</title><rect x="423.5" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="426.5" y="702.0"></text>
</g>
<g>
<title>Array&lt;unsigned short&gt;::length() const (1 samples, 0.05%)</title><rect x="423.5" y="675.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="426.5" y="686.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.10%)</title><rect x="424.1" y="1011.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="427.1" y="1022.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.10%)</title><rect x="424.1" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="427.1" y="1006.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.05%)</title><rect x="424.1" y="979.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="427.1" y="990.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.05%)</title><rect x="424.1" y="963.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="427.1" y="974.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.05%)</title><rect x="424.1" y="947.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="427.1" y="958.0"></text>
</g>
<g>
<title>LIRGenerator::is_vreg_flag_set(int, LIRGenerator::VregFlag) (1 samples, 0.05%)</title><rect x="424.1" y="931.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="427.1" y="942.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.05%)</title><rect x="424.7" y="979.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="427.7" y="990.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.05%)</title><rect x="424.7" y="963.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="427.7" y="974.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (1 samples, 0.05%)</title><rect x="424.7" y="947.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="427.7" y="958.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.05%)</title><rect x="424.7" y="931.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="427.7" y="942.0"></text>
</g>
<g>
<title>OopMap::OopMap(int, int) (1 samples, 0.05%)</title><rect x="424.7" y="915.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="427.7" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="424.7" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="427.7" y="910.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="424.7" y="883.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="427.7" y="894.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.05%)</title><rect x="425.2" y="1091.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="428.2" y="1102.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="425.2" y="1075.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="428.2" y="1086.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="425.2" y="1059.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="428.2" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="425.2" y="1043.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="428.2" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="425.2" y="1027.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="428.2" y="1038.0"></text>
</g>
<g>
<title>[tid=34051] (1 samples, 0.05%)</title><rect x="425.8" y="1235.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="428.8" y="1246.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="425.8" y="1219.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="428.8" y="1230.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="425.8" y="1203.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="428.8" y="1214.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="425.8" y="1187.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="428.8" y="1198.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="425.8" y="1171.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="428.8" y="1182.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="425.8" y="1155.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="428.8" y="1166.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.05%)</title><rect x="425.8" y="1139.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="428.8" y="1150.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.05%)</title><rect x="425.8" y="1123.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="428.8" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.05%)</title><rect x="425.8" y="1107.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="428.8" y="1118.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.05%)</title><rect x="425.8" y="1091.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="428.8" y="1102.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.05%)</title><rect x="425.8" y="1075.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="428.8" y="1086.0"></text>
</g>
<g>
<title>[tid=40451] (32 samples, 1.58%)</title><rect x="426.4" y="1235.0" width="18.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="429.4" y="1246.0"></text>
</g>
<g>
<title>thread_start (32 samples, 1.58%)</title><rect x="426.4" y="1219.0" width="18.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="429.4" y="1230.0"></text>
</g>
<g>
<title>_pthread_start (32 samples, 1.58%)</title><rect x="426.4" y="1203.0" width="18.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="429.4" y="1214.0"></text>
</g>
<g>
<title>_pthread_body (32 samples, 1.58%)</title><rect x="426.4" y="1187.0" width="18.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="429.4" y="1198.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (32 samples, 1.58%)</title><rect x="426.4" y="1171.0" width="18.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="429.4" y="1182.0"></text>
</g>
<g>
<title>Thread::call_run() (32 samples, 1.58%)</title><rect x="426.4" y="1155.0" width="18.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="429.4" y="1166.0"></text>
</g>
<g>
<title>VMError::is_error_reported() (1 samples, 0.05%)</title><rect x="426.4" y="1139.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="429.4" y="1150.0"></text>
</g>
<g>
<title>WatcherThread::run() (31 samples, 1.53%)</title><rect x="427.0" y="1139.0" width="18.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="430.0" y="1150.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (31 samples, 1.53%)</title><rect x="427.0" y="1123.0" width="18.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="430.0" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (31 samples, 1.53%)</title><rect x="427.0" y="1107.0" width="18.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="430.0" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (31 samples, 1.53%)</title><rect x="427.0" y="1091.0" width="18.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="430.0" y="1102.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (31 samples, 1.53%)</title><rect x="427.0" y="1075.0" width="18.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="430.0" y="1086.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.05%)</title><rect x="427.0" y="1059.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="430.0" y="1070.0"></text>
</g>
<g>
<title>__psynch_cvwait (30 samples, 1.48%)</title><rect x="427.6" y="1059.0" width="17.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="430.6" y="1070.0"></text>
</g>
<g>
<title>[tid=40963] (2 samples, 0.10%)</title><rect x="445.0" y="1235.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="448.0" y="1246.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.10%)</title><rect x="445.0" y="1219.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="448.0" y="1230.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.10%)</title><rect x="445.0" y="1203.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="448.0" y="1214.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.10%)</title><rect x="445.0" y="1187.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="448.0" y="1198.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.10%)</title><rect x="445.0" y="1171.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="448.0" y="1182.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.10%)</title><rect x="445.0" y="1155.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="448.0" y="1166.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.10%)</title><rect x="445.0" y="1139.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="448.0" y="1150.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.10%)</title><rect x="445.0" y="1123.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="448.0" y="1134.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.10%)</title><rect x="445.0" y="1107.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="448.0" y="1118.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.10%)</title><rect x="445.0" y="1091.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="448.0" y="1102.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.10%)</title><rect x="445.0" y="1075.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="448.0" y="1086.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.05%)</title><rect x="445.0" y="1059.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="448.0" y="1070.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.05%)</title><rect x="445.0" y="1043.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="448.0" y="1054.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.05%)</title><rect x="445.0" y="1027.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="448.0" y="1038.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.05%)</title><rect x="445.0" y="1011.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="448.0" y="1022.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="445.0" y="995.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="448.0" y="1006.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="445.0" y="979.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="448.0" y="990.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.05%)</title><rect x="445.6" y="1059.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="448.6" y="1070.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.05%)</title><rect x="445.6" y="1043.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="448.6" y="1054.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.05%)</title><rect x="445.6" y="1027.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="448.6" y="1038.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="445.6" y="1011.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="448.6" y="1022.0"></text>
</g>
<g>
<title>[tid=43267] (166 samples, 8.18%)</title><rect x="446.2" y="1235.0" width="96.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="449.2" y="1246.0">[tid=43267]</text>
</g>
<g>
<title>thread_start (166 samples, 8.18%)</title><rect x="446.2" y="1219.0" width="96.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="449.2" y="1230.0">thread_start</text>
</g>
<g>
<title>_pthread_start (166 samples, 8.18%)</title><rect x="446.2" y="1203.0" width="96.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="449.2" y="1214.0">_pthread_st..</text>
</g>
<g>
<title>_pthread_body (166 samples, 8.18%)</title><rect x="446.2" y="1187.0" width="96.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="449.2" y="1198.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (166 samples, 8.18%)</title><rect x="446.2" y="1171.0" width="96.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="449.2" y="1182.0">thread_nati..</text>
</g>
<g>
<title>Thread::call_run() (166 samples, 8.18%)</title><rect x="446.2" y="1155.0" width="96.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="449.2" y="1166.0">Thread::cal..</text>
</g>
<g>
<title>JavaThread::run() (166 samples, 8.18%)</title><rect x="446.2" y="1139.0" width="96.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="449.2" y="1150.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (166 samples, 8.18%)</title><rect x="446.2" y="1123.0" width="96.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="449.2" y="1134.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (166 samples, 8.18%)</title><rect x="446.2" y="1107.0" width="96.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="449.2" y="1118.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (166 samples, 8.18%)</title><rect x="446.2" y="1091.0" width="96.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="449.2" y="1102.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (166 samples, 8.18%)</title><rect x="446.2" y="1075.0" width="96.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="449.2" y="1086.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (166 samples, 8.18%)</title><rect x="446.2" y="1059.0" width="96.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="449.2" y="1070.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (98 samples, 4.83%)</title><rect x="446.2" y="1043.0" width="57.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="449.2" y="1054.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.15%)</title><rect x="446.2" y="1027.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="449.2" y="1038.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.10%)</title><rect x="446.2" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="449.2" y="1022.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.05%)</title><rect x="446.8" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="449.8" y="1006.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.05%)</title><rect x="446.8" y="979.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="449.8" y="990.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.05%)</title><rect x="447.3" y="1011.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="450.3" y="1022.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.05%)</title><rect x="447.3" y="995.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="450.3" y="1006.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.05%)</title><rect x="447.3" y="979.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="450.3" y="990.0"></text>
</g>
<g>
<title>Assembler::ud2() (1 samples, 0.05%)</title><rect x="447.3" y="963.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="450.3" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.15%)</title><rect x="447.9" y="1027.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="450.9" y="1038.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.15%)</title><rect x="447.9" y="1011.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="450.9" y="1022.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="447.9" y="995.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="450.9" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="448.5" y="995.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="451.5" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="448.5" y="979.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="451.5" y="990.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.05%)</title><rect x="448.5" y="963.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="451.5" y="974.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.05%)</title><rect x="448.5" y="947.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="451.5" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.05%)</title><rect x="449.1" y="995.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="452.1" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.05%)</title><rect x="449.1" y="979.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="452.1" y="990.0"></text>
</g>
<g>
<title>MachNode::is_TrapBasedCheckNode() const (1 samples, 0.05%)</title><rect x="449.7" y="1027.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="452.7" y="1038.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.34%)</title><rect x="450.2" y="1027.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="453.2" y="1038.0"></text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.05%)</title><rect x="450.2" y="1011.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="453.2" y="1022.0"></text>
</g>
<g>
<title>Compile::check_node_count(unsigned int, char const*) (1 samples, 0.05%)</title><rect x="450.8" y="1011.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="453.8" y="1022.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.25%)</title><rect x="451.4" y="1011.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="454.4" y="1022.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.10%)</title><rect x="452.6" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="455.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.05%)</title><rect x="453.7" y="995.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="456.7" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.05%)</title><rect x="453.7" y="979.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="456.7" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.05%)</title><rect x="453.7" y="963.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="456.7" y="974.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.05%)</title><rect x="453.7" y="947.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="456.7" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.05%)</title><rect x="454.3" y="1027.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="457.3" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.05%)</title><rect x="454.3" y="1011.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="457.3" y="1022.0"></text>
</g>
<g>
<title>RegionNode::RegionNode(unsigned int) (1 samples, 0.05%)</title><rect x="454.3" y="995.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="457.3" y="1006.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="454.3" y="979.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="457.3" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (9 samples, 0.44%)</title><rect x="454.9" y="1027.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="457.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.44%)</title><rect x="454.9" y="1011.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="457.9" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="454.9" y="995.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="457.9" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.10%)</title><rect x="455.5" y="995.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="458.5" y="1006.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.05%)</title><rect x="455.5" y="979.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="458.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.05%)</title><rect x="456.1" y="979.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="459.1" y="990.0"></text>
</g>
<g>
<title>Block::add_inst(Node*) (1 samples, 0.05%)</title><rect x="456.1" y="963.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="459.1" y="974.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="456.1" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="459.1" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.05%)</title><rect x="456.6" y="995.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="459.6" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.05%)</title><rect x="456.6" y="979.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="459.6" y="990.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (1 samples, 0.05%)</title><rect x="456.6" y="963.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="459.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.05%)</title><rect x="457.2" y="995.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="460.2" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.05%)</title><rect x="457.2" y="979.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="460.2" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.05%)</title><rect x="457.8" y="995.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="460.8" y="1006.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="457.8" y="979.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="460.8" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.10%)</title><rect x="458.4" y="995.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="461.4" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="458.4" y="979.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="461.4" y="990.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.05%)</title><rect x="459.0" y="979.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="462.0" y="990.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::oper_input_base() const (1 samples, 0.05%)</title><rect x="459.6" y="995.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="462.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (74 samples, 3.65%)</title><rect x="460.1" y="1027.0" width="43.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="463.1" y="1038.0">Phas..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.10%)</title><rect x="460.1" y="1011.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="463.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.20%)</title><rect x="461.3" y="1011.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="464.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.10%)</title><rect x="462.5" y="995.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="465.5" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="462.5" y="979.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="465.5" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="463.0" y="979.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="466.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.15%)</title><rect x="463.6" y="1011.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="466.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.15%)</title><rect x="463.6" y="995.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="466.6" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="464.8" y="979.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="467.8" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.49%)</title><rect x="465.4" y="1011.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="468.4" y="1022.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.05%)</title><rect x="470.0" y="995.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="473.0" y="1006.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="470.6" y="995.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="473.6" y="1006.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.05%)</title><rect x="470.6" y="979.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="473.6" y="990.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.05%)</title><rect x="470.6" y="963.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="473.6" y="974.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.05%)</title><rect x="470.6" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="473.6" y="958.0"></text>
</g>
<g>
<title>JavaThread::as_CompilerThread() (1 samples, 0.05%)</title><rect x="470.6" y="931.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="473.6" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (18 samples, 0.89%)</title><rect x="471.2" y="1011.0" width="10.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="474.2" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.10%)</title><rect x="472.3" y="995.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="475.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::adjust_high_pressure_index(Block*, unsigned int&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="473.5" y="995.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="476.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::assign_high_score_to_immediate_copies(Block*, Node*, LRG&amp;, unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="474.1" y="995.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="477.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.30%)</title><rect x="474.7" y="995.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="477.7" y="1006.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="475.3" y="979.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="478.3" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="475.8" y="979.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="478.8" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="476.4" y="979.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="479.4" y="990.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.10%)</title><rect x="477.0" y="979.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="480.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (5 samples, 0.25%)</title><rect x="478.2" y="995.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="481.2" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="478.7" y="979.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="481.7" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="479.3" y="979.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="482.3" y="990.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.10%)</title><rect x="479.9" y="979.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="482.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.05%)</title><rect x="481.1" y="995.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="484.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.05%)</title><rect x="481.7" y="1011.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="484.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.25%)</title><rect x="482.2" y="1011.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="485.2" y="1022.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.05%)</title><rect x="484.0" y="995.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="487.0" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.05%)</title><rect x="484.6" y="995.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="487.6" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="484.6" y="979.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="487.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 0.39%)</title><rect x="485.1" y="1011.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="488.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.15%)</title><rect x="486.3" y="995.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="489.3" y="1006.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (3 samples, 0.15%)</title><rect x="488.0" y="995.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="491.0" y="1006.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (3 samples, 0.15%)</title><rect x="488.0" y="979.0" width="1.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="491.0" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (7 samples, 0.34%)</title><rect x="489.8" y="1011.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="492.8" y="1022.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.10%)</title><rect x="489.8" y="995.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="492.8" y="1006.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (2 samples, 0.10%)</title><rect x="489.8" y="979.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="492.8" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (2 samples, 0.10%)</title><rect x="489.8" y="963.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="492.8" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="489.8" y="947.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="492.8" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="490.4" y="947.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="493.4" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.25%)</title><rect x="491.0" y="995.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="494.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.10%)</title><rect x="491.0" y="979.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="494.0" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.15%)</title><rect x="492.1" y="979.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="495.1" y="990.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.05%)</title><rect x="492.1" y="963.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="495.1" y="974.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="492.1" y="947.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.1" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.10%)</title><rect x="492.7" y="963.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="495.7" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="493.3" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="496.3" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.10%)</title><rect x="493.9" y="1011.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="496.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.10%)</title><rect x="493.9" y="995.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="496.9" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.10%)</title><rect x="493.9" y="979.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="496.9" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.15%)</title><rect x="495.0" y="1011.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="498.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.15%)</title><rect x="495.0" y="995.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="498.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.10%)</title><rect x="496.8" y="1011.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="499.8" y="1022.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.10%)</title><rect x="496.8" y="995.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="499.8" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.30%)</title><rect x="497.9" y="1011.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="500.9" y="1022.0"></text>
</g>
<g>
<title>IndexSet::clear() (1 samples, 0.05%)</title><rect x="499.7" y="995.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="502.7" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.10%)</title><rect x="500.3" y="995.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="503.3" y="1006.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="500.8" y="979.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="503.8" y="990.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.05%)</title><rect x="501.4" y="1011.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="504.4" y="1022.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="502.0" y="1011.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="505.0" y="1022.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="502.0" y="995.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="505.0" y="1006.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="502.0" y="979.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="505.0" y="990.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.05%)</title><rect x="502.0" y="963.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="505.0" y="974.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.05%)</title><rect x="502.6" y="1011.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="505.6" y="1022.0"></text>
</g>
<g>
<title>Compile::Optimize() (53 samples, 2.61%)</title><rect x="503.2" y="1043.0" width="30.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="506.2" y="1054.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.05%)</title><rect x="503.2" y="1027.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="506.2" y="1038.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.05%)</title><rect x="503.2" y="1011.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="506.2" y="1022.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.05%)</title><rect x="503.2" y="995.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="506.2" y="1006.0"></text>
</g>
<g>
<title>BarrierSetC2::final_graph_reshaping(Compile*, Node*, unsigned int) const (1 samples, 0.05%)</title><rect x="503.2" y="979.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="506.2" y="990.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (4 samples, 0.20%)</title><rect x="503.8" y="1027.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="506.8" y="1038.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (4 samples, 0.20%)</title><rect x="503.8" y="1011.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="506.8" y="1022.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="503.8" y="995.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="506.8" y="1006.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.15%)</title><rect x="504.3" y="995.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="507.3" y="1006.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.10%)</title><rect x="504.3" y="979.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="507.3" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.10%)</title><rect x="504.3" y="963.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="507.3" y="974.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="504.9" y="947.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="507.9" y="958.0"></text>
</g>
<g>
<title>NodeHash::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.05%)</title><rect x="505.5" y="979.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="508.5" y="990.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (22 samples, 1.08%)</title><rect x="506.1" y="1027.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="509.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (22 samples, 1.08%)</title><rect x="506.1" y="1011.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="509.1" y="1022.0"></text>
</g>
<g>
<title>Compile::cleanup_loop_predicates(PhaseIterGVN&amp;) (1 samples, 0.05%)</title><rect x="506.1" y="995.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="509.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="506.1" y="979.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="509.1" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="506.1" y="963.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="509.1" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.05%)</title><rect x="506.1" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="509.1" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="506.7" y="995.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="509.7" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="506.7" y="979.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="509.7" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="506.7" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="509.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(Node*) const (1 samples, 0.05%)</title><rect x="506.7" y="947.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="509.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="506.7" y="931.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="509.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="506.7" y="915.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="509.7" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="507.2" y="995.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="510.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="507.2" y="979.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.2" y="990.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason) (1 samples, 0.05%)</title><rect x="507.2" y="963.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="510.2" y="974.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.05%)</title><rect x="507.2" y="947.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="510.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.25%)</title><rect x="507.8" y="995.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="510.8" y="1006.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.10%)</title><rect x="509.6" y="979.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="512.6" y="990.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (1 samples, 0.05%)</title><rect x="509.6" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="512.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="510.1" y="963.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="513.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.10%)</title><rect x="510.7" y="995.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="513.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (2 samples, 0.10%)</title><rect x="510.7" y="979.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="513.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.10%)</title><rect x="510.7" y="963.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="513.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="511.3" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.30%)</title><rect x="511.9" y="995.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="514.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (5 samples, 0.25%)</title><rect x="512.5" y="979.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="515.5" y="990.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.05%)</title><rect x="513.1" y="963.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="516.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.10%)</title><rect x="513.6" y="963.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="516.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.05%)</title><rect x="513.6" y="947.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="516.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="513.6" y="931.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="516.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="513.6" y="915.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="516.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="513.6" y="899.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="516.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="513.6" y="883.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="516.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.05%)</title><rect x="514.2" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="517.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="514.2" y="931.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="517.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="514.2" y="915.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="517.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="514.8" y="963.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="517.8" y="974.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="514.8" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="517.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="515.4" y="995.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="518.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.20%)</title><rect x="516.0" y="995.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="519.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.05%)</title><rect x="516.0" y="979.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="519.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::identical_backtoback_ifs(Node*) (1 samples, 0.05%)</title><rect x="516.0" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="519.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.15%)</title><rect x="516.5" y="979.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="519.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="516.5" y="963.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="519.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.10%)</title><rect x="517.1" y="963.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="520.1" y="974.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.05%)</title><rect x="517.1" y="947.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="520.1" y="958.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.05%)</title><rect x="517.1" y="931.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="520.1" y="942.0"></text>
</g>
<g>
<title>PhiNode::make_blank(Node*, Node*) (1 samples, 0.05%)</title><rect x="517.7" y="947.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="520.7" y="958.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int) (1 samples, 0.05%)</title><rect x="517.7" y="931.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="520.7" y="942.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.05%)</title><rect x="517.7" y="915.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="520.7" y="926.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="517.7" y="899.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="520.7" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.05%)</title><rect x="518.3" y="995.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="521.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.05%)</title><rect x="518.3" y="979.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="521.3" y="990.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="518.3" y="963.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="521.3" y="974.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.05%)</title><rect x="518.3" y="947.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="521.3" y="958.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="518.3" y="931.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="521.3" y="942.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.05%)</title><rect x="518.3" y="915.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="521.3" y="926.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.05%)</title><rect x="518.9" y="1027.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="521.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.05%)</title><rect x="518.9" y="1011.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="521.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.10%)</title><rect x="519.5" y="1027.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="522.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.10%)</title><rect x="519.5" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.05%)</title><rect x="519.5" y="995.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="522.5" y="1006.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.05%)</title><rect x="519.5" y="979.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.5" y="990.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.05%)</title><rect x="519.5" y="963.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="522.5" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="520.0" y="995.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="523.0" y="1006.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="520.0" y="979.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="523.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (16 samples, 0.79%)</title><rect x="520.6" y="1027.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="523.6" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="520.6" y="1011.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="523.6" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="520.6" y="995.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="523.6" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="520.6" y="979.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="523.6" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="520.6" y="963.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="523.6" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_unroll(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="520.6" y="947.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="523.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.05%)</title><rect x="521.2" y="1011.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="524.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="521.8" y="1011.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="524.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.34%)</title><rect x="522.4" y="1011.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="525.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (6 samples, 0.30%)</title><rect x="522.9" y="995.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="525.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.15%)</title><rect x="522.9" y="979.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="525.9" y="990.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.05%)</title><rect x="522.9" y="963.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="525.9" y="974.0"></text>
</g>
<g>
<title>_platform_strcmp (1 samples, 0.05%)</title><rect x="522.9" y="947.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="525.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.05%)</title><rect x="523.5" y="963.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="526.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="523.5" y="947.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="526.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="523.5" y="931.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="526.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="523.5" y="915.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="526.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="523.5" y="899.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="526.5" y="910.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="523.5" y="883.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="526.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.05%)</title><rect x="524.1" y="963.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="527.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.05%)</title><rect x="524.1" y="947.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="527.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (3 samples, 0.15%)</title><rect x="524.7" y="979.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="527.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.15%)</title><rect x="524.7" y="963.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="527.7" y="974.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="525.9" y="947.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="528.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.10%)</title><rect x="526.4" y="1011.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="529.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.05%)</title><rect x="527.0" y="995.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="530.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.05%)</title><rect x="527.0" y="979.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="530.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.15%)</title><rect x="527.6" y="1011.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="530.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.15%)</title><rect x="527.6" y="995.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="530.6" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="528.2" y="979.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="531.2" y="990.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.05%)</title><rect x="528.2" y="963.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="531.2" y="974.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*) (1 samples, 0.05%)</title><rect x="528.2" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="531.2" y="958.0"></text>
</g>
<g>
<title>G1BarrierSetC2::step_over_gc_barrier(Node*) const (1 samples, 0.05%)</title><rect x="528.2" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="531.2" y="942.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.05%)</title><rect x="528.8" y="979.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="531.8" y="990.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="529.3" y="1011.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="532.3" y="1022.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="529.3" y="995.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="532.3" y="1006.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="529.3" y="979.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="532.3" y="990.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.05%)</title><rect x="529.3" y="963.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="532.3" y="974.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.05%)</title><rect x="529.3" y="947.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="532.3" y="958.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.05%)</title><rect x="529.3" y="931.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="532.3" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.30%)</title><rect x="529.9" y="1027.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="532.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.30%)</title><rect x="529.9" y="1011.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="532.9" y="1022.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="529.9" y="995.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="532.9" y="1006.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="529.9" y="979.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="532.9" y="990.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="530.5" y="995.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="533.5" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.05%)</title><rect x="531.1" y="995.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="534.1" y="1006.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.05%)</title><rect x="531.1" y="979.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="534.1" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.05%)</title><rect x="531.1" y="963.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="534.1" y="974.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.15%)</title><rect x="531.7" y="995.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="534.7" y="1006.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="531.7" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="534.7" y="990.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="531.7" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="534.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.05%)</title><rect x="532.2" y="979.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="535.2" y="990.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="532.8" y="979.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="535.8" y="990.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="533.4" y="1027.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="536.4" y="1038.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="533.4" y="1011.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="536.4" y="1022.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="533.4" y="995.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="536.4" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.74%)</title><rect x="534.0" y="1043.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="537.0" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.74%)</title><rect x="534.0" y="1027.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="537.0" y="1038.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="534.0" y="1011.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="537.0" y="1022.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="534.0" y="995.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="537.0" y="1006.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.05%)</title><rect x="534.0" y="979.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="537.0" y="990.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.05%)</title><rect x="534.0" y="963.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="537.0" y="974.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.05%)</title><rect x="534.0" y="947.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="537.0" y="958.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.05%)</title><rect x="534.0" y="931.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="537.0" y="942.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.05%)</title><rect x="534.0" y="915.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="537.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.69%)</title><rect x="534.6" y="1011.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="537.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.69%)</title><rect x="534.6" y="995.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="537.6" y="1006.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.05%)</title><rect x="534.6" y="979.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="537.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.64%)</title><rect x="535.2" y="979.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="538.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.64%)</title><rect x="535.2" y="963.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="538.2" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.64%)</title><rect x="535.2" y="947.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.64%)</title><rect x="535.2" y="931.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="538.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.64%)</title><rect x="535.2" y="915.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="538.2" y="926.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.05%)</title><rect x="535.2" y="899.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="538.2" y="910.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.05%)</title><rect x="535.2" y="883.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="538.2" y="894.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="535.2" y="867.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="538.2" y="878.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.05%)</title><rect x="535.2" y="851.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="538.2" y="862.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="535.2" y="835.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="538.2" y="846.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="535.2" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.2" y="830.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.05%)</title><rect x="535.2" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="538.2" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="535.2" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="538.2" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="535.2" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="538.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.59%)</title><rect x="535.7" y="899.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="538.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.44%)</title><rect x="535.7" y="883.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="538.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.44%)</title><rect x="535.7" y="867.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="538.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.44%)</title><rect x="535.7" y="851.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="538.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.44%)</title><rect x="535.7" y="835.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="538.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.39%)</title><rect x="535.7" y="819.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="538.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="535.7" y="803.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="538.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="535.7" y="787.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="538.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="535.7" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="538.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="535.7" y="755.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="538.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="535.7" y="739.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="535.7" y="723.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="538.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="535.7" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="538.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="535.7" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="538.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="535.7" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="538.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="535.7" y="659.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="538.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="535.7" y="643.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="538.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="535.7" y="627.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="538.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="535.7" y="611.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="538.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="535.7" y="595.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="538.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="535.7" y="579.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="538.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="535.7" y="563.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="538.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="535.7" y="547.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="538.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="535.7" y="531.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="538.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="535.7" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="538.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="535.7" y="499.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="538.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="535.7" y="483.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="538.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="535.7" y="467.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="538.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="535.7" y="451.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="538.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="535.7" y="435.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="538.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="535.7" y="419.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="538.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="535.7" y="403.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="538.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="535.7" y="387.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="538.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="535.7" y="371.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="538.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="535.7" y="355.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="538.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="535.7" y="339.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="535.7" y="323.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="538.7" y="334.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.05%)</title><rect x="535.7" y="307.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.7" y="318.0"></text>
</g>
<g>
<title>Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool) (1 samples, 0.05%)</title><rect x="535.7" y="291.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="538.7" y="302.0"></text>
</g>
<g>
<title>ciField::constant_value() (1 samples, 0.05%)</title><rect x="535.7" y="275.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="538.7" y="286.0"></text>
</g>
<g>
<title>ciInstance::field_value_impl(BasicType, int) (1 samples, 0.05%)</title><rect x="535.7" y="259.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="538.7" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.05%)</title><rect x="535.7" y="243.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="538.7" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::find_non_perm(oopDesc*) (1 samples, 0.05%)</title><rect x="535.7" y="227.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="538.7" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.30%)</title><rect x="536.3" y="803.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="539.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.25%)</title><rect x="536.3" y="787.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="539.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.25%)</title><rect x="536.3" y="771.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="539.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.25%)</title><rect x="536.3" y="755.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="539.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.25%)</title><rect x="536.3" y="739.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="539.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.25%)</title><rect x="536.3" y="723.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="539.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.25%)</title><rect x="536.3" y="707.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="539.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.25%)</title><rect x="536.3" y="691.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="539.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.25%)</title><rect x="536.3" y="675.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="539.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.25%)</title><rect x="536.3" y="659.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="539.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.15%)</title><rect x="536.3" y="643.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="539.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.15%)</title><rect x="536.3" y="627.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="539.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.15%)</title><rect x="536.3" y="611.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="539.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.15%)</title><rect x="536.3" y="595.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="539.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.15%)</title><rect x="536.3" y="579.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="539.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.15%)</title><rect x="536.3" y="563.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="539.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="536.3" y="547.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="539.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="536.3" y="531.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="539.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="536.3" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="539.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="536.3" y="499.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="539.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="536.3" y="483.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="539.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="536.3" y="467.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="539.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="536.3" y="451.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="539.3" y="462.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.05%)</title><rect x="536.3" y="435.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="539.3" y="446.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.05%)</title><rect x="536.3" y="419.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="539.3" y="430.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="536.3" y="403.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="539.3" y="414.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="536.3" y="387.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="539.3" y="398.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.05%)</title><rect x="536.3" y="371.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="539.3" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="536.3" y="355.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="539.3" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="536.9" y="547.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="539.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="536.9" y="531.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="539.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="536.9" y="515.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="539.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="536.9" y="499.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="539.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="536.9" y="483.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="539.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="536.9" y="467.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="539.9" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="536.9" y="451.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="539.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="536.9" y="435.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="539.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="536.9" y="419.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="539.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="536.9" y="403.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="539.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="536.9" y="387.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="539.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="536.9" y="371.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="539.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="536.9" y="355.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="539.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="536.9" y="339.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="539.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="536.9" y="323.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="539.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="536.9" y="307.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="539.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="536.9" y="291.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="539.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="536.9" y="275.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="539.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="536.9" y="259.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="539.9" y="270.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.05%)</title><rect x="536.9" y="243.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="539.9" y="254.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.05%)</title><rect x="536.9" y="227.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="539.9" y="238.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="536.9" y="211.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="539.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="536.9" y="195.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="539.9" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="536.9" y="179.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="539.9" y="190.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.05%)</title><rect x="536.9" y="163.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="539.9" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="537.5" y="355.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="540.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="537.5" y="339.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="540.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="537.5" y="323.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="540.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="537.5" y="307.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="540.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="537.5" y="291.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="540.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="537.5" y="275.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="540.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="537.5" y="259.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="540.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="537.5" y="243.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="540.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="537.5" y="227.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="540.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="537.5" y="211.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="540.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="537.5" y="195.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="540.5" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="537.5" y="179.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="540.5" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="537.5" y="163.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="540.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="537.5" y="147.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="540.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="537.5" y="131.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="540.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="537.5" y="115.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="540.5" y="126.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="537.5" y="99.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="540.5" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.05%)</title><rect x="537.5" y="83.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="540.5" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="537.5" y="67.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="540.5" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="537.5" y="51.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="540.5" y="62.0"></text>
</g>
<g>
<title>CreateExNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="537.5" y="35.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="540.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="538.1" y="643.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="541.1" y="654.0"></text>
</g>
<g>
<title>ciObject::klass() (1 samples, 0.05%)</title><rect x="538.1" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="541.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.05%)</title><rect x="538.6" y="643.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="541.6" y="654.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.05%)</title><rect x="538.6" y="627.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="541.6" y="638.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="538.6" y="611.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="541.6" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.05%)</title><rect x="538.6" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="541.6" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.05%)</title><rect x="538.6" y="579.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="541.6" y="590.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.05%)</title><rect x="538.6" y="563.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="541.6" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::grow_to_match(MergeMemNode const*) (1 samples, 0.05%)</title><rect x="538.6" y="547.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="541.6" y="558.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="538.6" y="531.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="541.6" y="542.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.05%)</title><rect x="538.6" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="541.6" y="526.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.05%)</title><rect x="539.2" y="787.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="542.2" y="798.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="539.2" y="771.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="542.2" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.05%)</title><rect x="539.2" y="755.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="542.2" y="766.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.05%)</title><rect x="539.2" y="739.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="542.2" y="750.0"></text>
</g>
<g>
<title>MergeMemStream::set_memory(Node*) (1 samples, 0.05%)</title><rect x="539.2" y="723.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="542.2" y="734.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.05%)</title><rect x="539.2" y="707.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="542.2" y="718.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="539.2" y="691.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="542.2" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="539.8" y="803.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="542.8" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="539.8" y="787.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="542.8" y="798.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="539.8" y="771.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="542.8" y="782.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="539.8" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="542.8" y="766.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="539.8" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="542.8" y="750.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="539.8" y="723.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="542.8" y="734.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="539.8" y="707.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="542.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="540.4" y="819.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="543.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="540.4" y="803.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="543.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="540.4" y="787.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="543.4" y="798.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="540.4" y="771.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="543.4" y="782.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="540.4" y="755.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="543.4" y="766.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.05%)</title><rect x="540.4" y="739.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="543.4" y="750.0"></text>
</g>
<g>
<title>G1BarrierSetC2::g1_mark_card(GraphKit*, IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) const (1 samples, 0.05%)</title><rect x="540.4" y="723.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="543.4" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="540.4" y="707.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="543.4" y="718.0"></text>
</g>
<g>
<title>SubLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="540.4" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="543.4" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.15%)</title><rect x="541.0" y="883.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="544.0" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.15%)</title><rect x="541.0" y="867.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="544.0" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.15%)</title><rect x="541.0" y="851.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="544.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.15%)</title><rect x="541.0" y="835.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="544.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.15%)</title><rect x="541.0" y="819.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="544.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.15%)</title><rect x="541.0" y="803.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="544.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.15%)</title><rect x="541.0" y="787.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="544.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.15%)</title><rect x="541.0" y="771.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="544.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.15%)</title><rect x="541.0" y="755.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="544.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.15%)</title><rect x="541.0" y="739.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="544.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.15%)</title><rect x="541.0" y="723.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="544.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.15%)</title><rect x="541.0" y="707.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="544.0" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.15%)</title><rect x="541.0" y="691.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="544.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.15%)</title><rect x="541.0" y="675.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="544.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.15%)</title><rect x="541.0" y="659.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="544.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.15%)</title><rect x="541.0" y="643.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="544.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="541.0" y="627.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="544.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="541.0" y="611.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="544.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="541.0" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="544.0" y="606.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.05%)</title><rect x="541.0" y="579.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="544.0" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="541.0" y="563.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="544.0" y="574.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="541.0" y="547.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="544.0" y="558.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.05%)</title><rect x="541.0" y="531.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="544.0" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="541.6" y="627.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="544.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="541.6" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="541.6" y="595.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="544.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="541.6" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="544.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="541.6" y="563.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="544.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="541.6" y="547.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="544.6" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="541.6" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="544.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="541.6" y="515.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="544.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="541.6" y="499.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="544.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="541.6" y="483.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="544.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="541.6" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="544.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="541.6" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="544.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="541.6" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="544.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="541.6" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="544.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="541.6" y="403.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="544.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="541.6" y="387.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="544.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="541.6" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="544.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="541.6" y="355.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="544.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="541.6" y="339.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="544.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="541.6" y="323.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="544.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="541.6" y="307.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="544.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.10%)</title><rect x="541.6" y="291.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="544.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="541.6" y="275.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="541.6" y="259.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="544.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.10%)</title><rect x="541.6" y="243.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="544.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.10%)</title><rect x="541.6" y="227.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="544.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.10%)</title><rect x="541.6" y="211.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="544.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="541.6" y="195.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="544.6" y="206.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="541.6" y="179.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="544.6" y="190.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="541.6" y="163.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="544.6" y="174.0"></text>
</g>
<g>
<title>C2AccessFence::~C2AccessFence() (1 samples, 0.05%)</title><rect x="541.6" y="147.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="544.6" y="158.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.05%)</title><rect x="541.6" y="131.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="544.6" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="541.6" y="115.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="544.6" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="541.6" y="99.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="542.1" y="195.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="545.1" y="206.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="542.1" y="179.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="545.1" y="190.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="542.1" y="163.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="545.1" y="174.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="542.1" y="147.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="545.1" y="158.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.05%)</title><rect x="542.1" y="131.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="545.1" y="142.0"></text>
</g>
<g>
<title>G1BarrierSetC2::g1_mark_card(GraphKit*, IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) const (1 samples, 0.05%)</title><rect x="542.1" y="115.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="545.1" y="126.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool) (1 samples, 0.05%)</title><rect x="542.1" y="99.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="545.1" y="110.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.05%)</title><rect x="542.1" y="83.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="545.1" y="94.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="542.1" y="67.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="545.1" y="78.0"></text>
</g>
<g>
<title>[worker tid=27139] (263 samples, 12.96%)</title><rect x="542.7" y="1235.0" width="153.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="545.7" y="1246.0">[worker tid=27139]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.20%)</title><rect x="542.7" y="1219.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="545.7" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.20%)</title><rect x="542.7" y="1203.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="545.7" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.20%)</title><rect x="542.7" y="1187.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="545.7" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.20%)</title><rect x="542.7" y="1171.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="545.7" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.20%)</title><rect x="542.7" y="1155.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="545.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (258 samples, 12.72%)</title><rect x="545.0" y="1219.0" width="150.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="548.0" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (258 samples, 12.72%)</title><rect x="545.0" y="1203.0" width="150.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="548.0" y="1214.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (258 samples, 12.72%)</title><rect x="545.0" y="1187.0" width="150.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="548.0" y="1198.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (74 samples, 3.65%)</title><rect x="545.0" y="1171.0" width="43.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="548.0" y="1182.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (74 samples, 3.65%)</title><rect x="545.0" y="1155.0" width="43.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="548.0" y="1166.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (72 samples, 3.55%)</title><rect x="545.0" y="1139.0" width="41.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.0" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.05%)</title><rect x="545.0" y="1123.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="545.0" y="1107.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="545.0" y="1091.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="548.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.05%)</title><rect x="545.0" y="1075.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="548.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.05%)</title><rect x="545.0" y="1059.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.05%)</title><rect x="545.0" y="1043.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="548.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.05%)</title><rect x="545.0" y="1027.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="548.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (71 samples, 3.50%)</title><rect x="545.6" y="1123.0" width="41.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="548.6" y="1134.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (71 samples, 3.50%)</title><rect x="545.6" y="1107.0" width="41.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="548.6" y="1118.0">jdk..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="545.6" y="1091.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="548.6" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (70 samples, 3.45%)</title><rect x="546.2" y="1091.0" width="40.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="549.2" y="1102.0">Uns..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="546.2" y="1075.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="549.2" y="1086.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.05%)</title><rect x="546.2" y="1059.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="549.2" y="1070.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="546.2" y="1043.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="549.2" y="1054.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.05%)</title><rect x="546.2" y="1027.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="549.2" y="1038.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="546.2" y="1011.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="549.2" y="1022.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.05%)</title><rect x="546.8" y="1075.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="549.8" y="1086.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.05%)</title><rect x="546.8" y="1059.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="549.8" y="1070.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="547.4" y="1075.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="550.4" y="1086.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (63 samples, 3.10%)</title><rect x="547.9" y="1075.0" width="36.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="550.9" y="1086.0">Par..</text>
</g>
<g>
<title>__psynch_cvwait (62 samples, 3.06%)</title><rect x="547.9" y="1059.0" width="36.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="550.9" y="1070.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.05%)</title><rect x="584.0" y="1059.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="587.0" y="1070.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.05%)</title><rect x="584.6" y="1075.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="587.6" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.10%)</title><rect x="585.2" y="1075.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="588.2" y="1086.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.05%)</title><rect x="585.2" y="1059.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="588.2" y="1070.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="585.8" y="1059.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="588.8" y="1070.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.05%)</title><rect x="586.3" y="1075.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="589.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.10%)</title><rect x="586.9" y="1139.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="589.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.10%)</title><rect x="586.9" y="1123.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="589.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.10%)</title><rect x="586.9" y="1107.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="589.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.05%)</title><rect x="586.9" y="1091.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="589.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.05%)</title><rect x="587.5" y="1091.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="590.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.05%)</title><rect x="587.5" y="1075.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="590.5" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (184 samples, 9.07%)</title><rect x="588.1" y="1171.0" width="107.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.1" y="1182.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (184 samples, 9.07%)</title><rect x="588.1" y="1155.0" width="107.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.1" y="1166.0">ru/mail/polis..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (83 samples, 4.09%)</title><rect x="588.1" y="1139.0" width="48.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="591.1" y="1150.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.10%)</title><rect x="588.1" y="1123.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.10%)</title><rect x="588.1" y="1107.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="588.7" y="1091.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="591.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (81 samples, 3.99%)</title><rect x="589.2" y="1123.0" width="47.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="592.2" y="1134.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.10%)</title><rect x="589.2" y="1107.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="589.8" y="1091.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.8" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.05%)</title><rect x="589.8" y="1075.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="592.8" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (79 samples, 3.89%)</title><rect x="590.4" y="1107.0" width="45.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="593.4" y="1118.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (79 samples, 3.89%)</title><rect x="590.4" y="1091.0" width="45.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.4" y="1102.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (79 samples, 3.89%)</title><rect x="590.4" y="1075.0" width="45.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.4" y="1086.0">one/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.10%)</title><rect x="590.4" y="1059.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="593.4" y="1070.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.05%)</title><rect x="590.4" y="1043.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="593.4" y="1054.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.05%)</title><rect x="591.0" y="1043.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="594.0" y="1054.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.05%)</title><rect x="591.0" y="1027.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="594.0" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (77 samples, 3.79%)</title><rect x="591.6" y="1059.0" width="44.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.6" y="1070.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="591.6" y="1043.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="594.6" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="591.6" y="1027.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="594.6" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="591.6" y="1011.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="594.6" y="1022.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="591.6" y="995.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="594.6" y="1006.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="591.6" y="979.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="594.6" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (76 samples, 3.75%)</title><rect x="592.1" y="1043.0" width="44.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="595.1" y="1054.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="592.1" y="1027.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="595.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="592.1" y="1011.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="595.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.05%)</title><rect x="592.1" y="995.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="595.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="592.1" y="979.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="595.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="592.1" y="963.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.05%)</title><rect x="592.1" y="947.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="595.1" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (75 samples, 3.70%)</title><rect x="592.7" y="1027.0" width="43.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="595.7" y="1038.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (75 samples, 3.70%)</title><rect x="592.7" y="1011.0" width="43.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="595.7" y="1022.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (73 samples, 3.60%)</title><rect x="592.7" y="995.0" width="42.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.7" y="1006.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (73 samples, 3.60%)</title><rect x="592.7" y="979.0" width="42.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="595.7" y="990.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (73 samples, 3.60%)</title><rect x="592.7" y="963.0" width="42.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="595.7" y="974.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.25%)</title><rect x="593.9" y="947.0" width="2.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="596.9" y="958.0"></text>
</g>
<g>
<title>write (66 samples, 3.25%)</title><rect x="596.8" y="947.0" width="38.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="599.8" y="958.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.10%)</title><rect x="635.2" y="995.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.2" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.10%)</title><rect x="635.2" y="979.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.2" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (101 samples, 4.98%)</title><rect x="636.3" y="1139.0" width="58.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.3" y="1150.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (101 samples, 4.98%)</title><rect x="636.3" y="1123.0" width="58.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.3" y="1134.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (101 samples, 4.98%)</title><rect x="636.3" y="1107.0" width="58.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="639.3" y="1118.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (101 samples, 4.98%)</title><rect x="636.3" y="1091.0" width="58.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.3" y="1102.0">ru/mai..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (101 samples, 4.98%)</title><rect x="636.3" y="1075.0" width="58.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.3" y="1086.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (101 samples, 4.98%)</title><rect x="636.3" y="1059.0" width="58.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="639.3" y="1070.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (101 samples, 4.98%)</title><rect x="636.3" y="1043.0" width="58.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="639.3" y="1054.0">Java_o..</text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="636.3" y="1027.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="639.3" y="1038.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (100 samples, 4.93%)</title><rect x="636.9" y="1027.0" width="58.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="639.9" y="1038.0">rocksd..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.05%)</title><rect x="637.5" y="1011.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="640.5" y="1022.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (97 samples, 4.78%)</title><rect x="638.1" y="1011.0" width="56.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="641.1" y="1022.0">rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (97 samples, 4.78%)</title><rect x="638.1" y="995.0" width="56.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="641.1" y="1006.0">rocksd..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (95 samples, 4.68%)</title><rect x="638.7" y="979.0" width="55.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="641.7" y="990.0">rocks..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.05%)</title><rect x="638.7" y="963.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="641.7" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (92 samples, 4.53%)</title><rect x="639.3" y="963.0" width="53.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="642.3" y="974.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (90 samples, 4.44%)</title><rect x="639.3" y="947.0" width="52.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="642.3" y="958.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (78 samples, 3.84%)</title><rect x="640.4" y="931.0" width="45.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="643.4" y="942.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (78 samples, 3.84%)</title><rect x="640.4" y="915.0" width="45.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="643.4" y="926.0">rock..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (78 samples, 3.84%)</title><rect x="640.4" y="899.0" width="45.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="643.4" y="910.0">rock..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (78 samples, 3.84%)</title><rect x="640.4" y="883.0" width="45.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="643.4" y="894.0">rock..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="640.4" y="867.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="643.4" y="878.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="640.4" y="851.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="643.4" y="862.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (77 samples, 3.79%)</title><rect x="641.0" y="867.0" width="44.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="644.0" y="878.0">rock..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (77 samples, 3.79%)</title><rect x="641.0" y="851.0" width="44.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="644.0" y="862.0">rock..</text>
</g>
<g>
<title>write (77 samples, 3.79%)</title><rect x="641.0" y="835.0" width="44.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="644.0" y="846.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (9 samples, 0.44%)</title><rect x="685.8" y="931.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="688.8" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (9 samples, 0.44%)</title><rect x="685.8" y="915.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="688.8" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.34%)</title><rect x="686.9" y="899.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="689.9" y="910.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1 samples, 0.05%)</title><rect x="686.9" y="883.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="689.9" y="894.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.30%)</title><rect x="687.5" y="883.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="690.5" y="894.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (6 samples, 0.30%)</title><rect x="687.5" y="867.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="690.5" y="878.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.05%)</title><rect x="687.5" y="851.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="690.5" y="862.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.05%)</title><rect x="688.1" y="851.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="691.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.20%)</title><rect x="688.7" y="851.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="691.7" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="689.9" y="835.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="692.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.05%)</title><rect x="690.4" y="835.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="693.4" y="846.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.05%)</title><rect x="690.4" y="819.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="693.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.05%)</title><rect x="691.0" y="931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="694.0" y="942.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.05%)</title><rect x="691.6" y="947.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="694.6" y="958.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.05%)</title><rect x="692.2" y="947.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="695.2" y="958.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.10%)</title><rect x="692.8" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="695.8" y="974.0"></text>
</g>
<g>
<title>free (2 samples, 0.10%)</title><rect x="692.8" y="947.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="695.8" y="958.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.10%)</title><rect x="692.8" y="931.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="695.8" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="693.9" y="979.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="696.9" y="990.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.05%)</title><rect x="694.5" y="1011.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="697.5" y="1022.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="695.1" y="1219.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="698.1" y="1230.0"></text>
</g>
<g>
<title>[worker tid=35075] (251 samples, 12.37%)</title><rect x="695.7" y="1235.0" width="145.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="698.7" y="1246.0">[worker tid=35075]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.20%)</title><rect x="695.7" y="1219.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="698.7" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.20%)</title><rect x="695.7" y="1203.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="698.7" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.15%)</title><rect x="696.2" y="1187.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="699.2" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.05%)</title><rect x="696.2" y="1171.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.2" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.05%)</title><rect x="696.2" y="1155.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="699.2" y="1166.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.10%)</title><rect x="696.8" y="1171.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="699.8" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.10%)</title><rect x="696.8" y="1155.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="699.8" y="1166.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.10%)</title><rect x="698.0" y="1219.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="701.0" y="1230.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.10%)</title><rect x="698.0" y="1203.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="701.0" y="1214.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.10%)</title><rect x="699.2" y="1219.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="702.2" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="699.7" y="1203.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="702.7" y="1214.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.05%)</title><rect x="699.7" y="1187.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="702.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.run (243 samples, 11.98%)</title><rect x="700.3" y="1219.0" width="141.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="703.3" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (243 samples, 11.98%)</title><rect x="700.3" y="1203.0" width="141.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="703.3" y="1214.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (243 samples, 11.98%)</title><rect x="700.3" y="1187.0" width="141.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="703.3" y="1198.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.10%)</title><rect x="700.3" y="1171.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="703.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.10%)</title><rect x="700.3" y="1155.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="703.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.05%)</title><rect x="700.9" y="1139.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="703.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.05%)</title><rect x="700.9" y="1123.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="703.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (56 samples, 2.76%)</title><rect x="701.5" y="1171.0" width="32.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="704.5" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (55 samples, 2.71%)</title><rect x="702.1" y="1155.0" width="32.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="705.1" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (54 samples, 2.66%)</title><rect x="702.1" y="1139.0" width="31.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.1" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (54 samples, 2.66%)</title><rect x="702.1" y="1123.0" width="31.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="705.1" y="1134.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (54 samples, 2.66%)</title><rect x="702.1" y="1107.0" width="31.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="705.1" y="1118.0">jd..</text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.05%)</title><rect x="702.1" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="705.1" y="1102.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.05%)</title><rect x="702.6" y="1091.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="705.6" y="1102.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.05%)</title><rect x="703.2" y="1091.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="706.2" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (51 samples, 2.51%)</title><rect x="703.8" y="1091.0" width="29.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="706.8" y="1102.0">Un..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="703.8" y="1075.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="706.8" y="1086.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.05%)</title><rect x="703.8" y="1059.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="706.8" y="1070.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.05%)</title><rect x="703.8" y="1043.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="706.8" y="1054.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.15%)</title><rect x="704.4" y="1075.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="707.4" y="1086.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (3 samples, 0.15%)</title><rect x="704.4" y="1059.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="707.4" y="1070.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive(JavaThread*) (1 samples, 0.05%)</title><rect x="704.4" y="1043.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="707.4" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.10%)</title><rect x="705.0" y="1043.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="708.0" y="1054.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (41 samples, 2.02%)</title><rect x="706.1" y="1075.0" width="23.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="709.1" y="1086.0">P..</text>
</g>
<g>
<title>__psynch_cvwait (40 samples, 1.97%)</title><rect x="706.7" y="1059.0" width="23.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="709.7" y="1070.0">_..</text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.05%)</title><rect x="730.0" y="1075.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="733.0" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.10%)</title><rect x="730.6" y="1075.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="733.6" y="1086.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="730.6" y="1059.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="733.6" y="1070.0"></text>
</g>
<g>
<title>SafepointMechanism::should_block(Thread*) (1 samples, 0.05%)</title><rect x="731.1" y="1059.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.1" y="1070.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.05%)</title><rect x="731.1" y="1043.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="734.1" y="1054.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="731.7" y="1075.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="734.7" y="1086.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.05%)</title><rect x="732.3" y="1075.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="735.3" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.05%)</title><rect x="732.9" y="1075.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="735.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.05%)</title><rect x="733.5" y="1139.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="736.5" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (185 samples, 9.12%)</title><rect x="734.1" y="1171.0" width="107.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.1" y="1182.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (185 samples, 9.12%)</title><rect x="734.1" y="1155.0" width="107.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.1" y="1166.0">ru/mail/polis..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (94 samples, 4.63%)</title><rect x="734.1" y="1139.0" width="54.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.1" y="1150.0">one/n..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.10%)</title><rect x="734.1" y="1123.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="737.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.10%)</title><rect x="734.1" y="1107.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="737.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.10%)</title><rect x="734.1" y="1091.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="737.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (88 samples, 4.34%)</title><rect x="735.2" y="1123.0" width="51.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="738.2" y="1134.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.20%)</title><rect x="735.2" y="1107.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="738.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="737.0" y="1091.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.0" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="737.0" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.0" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.05%)</title><rect x="737.0" y="1059.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="740.0" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (84 samples, 4.14%)</title><rect x="737.5" y="1107.0" width="48.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="740.5" y="1118.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (84 samples, 4.14%)</title><rect x="737.5" y="1091.0" width="48.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="740.5" y="1102.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (84 samples, 4.14%)</title><rect x="737.5" y="1075.0" width="48.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.5" y="1086.0">one/..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.05%)</title><rect x="737.5" y="1059.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="740.5" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (83 samples, 4.09%)</title><rect x="738.1" y="1059.0" width="48.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="741.1" y="1070.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.10%)</title><rect x="738.1" y="1043.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="741.1" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="738.1" y="1027.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="741.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="738.1" y="1011.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="741.1" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="738.1" y="995.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="741.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="738.1" y="979.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="741.1" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="738.1" y="963.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.1" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.05%)</title><rect x="738.1" y="947.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="741.1" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="738.7" y="1011.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="741.7" y="1022.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="738.7" y="995.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="741.7" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (81 samples, 3.99%)</title><rect x="739.3" y="1043.0" width="47.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="742.3" y="1054.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (81 samples, 3.99%)</title><rect x="739.3" y="1027.0" width="47.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.3" y="1038.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (81 samples, 3.99%)</title><rect x="739.3" y="1011.0" width="47.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.3" y="1022.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (78 samples, 3.84%)</title><rect x="739.3" y="995.0" width="45.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="742.3" y="1006.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (78 samples, 3.84%)</title><rect x="739.3" y="979.0" width="45.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="742.3" y="990.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (78 samples, 3.84%)</title><rect x="739.3" y="963.0" width="45.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="742.3" y="974.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.10%)</title><rect x="742.8" y="947.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="745.8" y="958.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="743.9" y="947.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="746.9" y="958.0"></text>
</g>
<g>
<title>write (69 samples, 3.40%)</title><rect x="744.5" y="947.0" width="40.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="747.5" y="958.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.15%)</title><rect x="784.6" y="995.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="787.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.10%)</title><rect x="784.6" y="979.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="787.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="785.2" y="963.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="788.2" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="785.8" y="979.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.8" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="785.8" y="963.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="788.8" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="785.8" y="947.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="788.8" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="785.8" y="931.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.8" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="785.8" y="915.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="788.8" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.20%)</title><rect x="786.4" y="1123.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.15%)</title><rect x="786.4" y="1107.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="789.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.05%)</title><rect x="786.4" y="1091.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.4" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.10%)</title><rect x="787.0" y="1091.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="790.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="788.1" y="1107.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="788.1" y="1091.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="788.1" y="1075.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="791.1" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (91 samples, 4.48%)</title><rect x="788.7" y="1139.0" width="52.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.7" y="1150.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (91 samples, 4.48%)</title><rect x="788.7" y="1123.0" width="52.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.7" y="1134.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (91 samples, 4.48%)</title><rect x="788.7" y="1107.0" width="52.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="791.7" y="1118.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (90 samples, 4.44%)</title><rect x="789.3" y="1091.0" width="52.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="792.3" y="1102.0">ru/ma..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (90 samples, 4.44%)</title><rect x="789.3" y="1075.0" width="52.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="792.3" y="1086.0">org/r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (90 samples, 4.44%)</title><rect x="789.3" y="1059.0" width="52.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="792.3" y="1070.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (88 samples, 4.34%)</title><rect x="789.9" y="1043.0" width="51.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="792.9" y="1054.0">Java_..</text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.05%)</title><rect x="789.9" y="1027.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="792.9" y="1038.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (87 samples, 4.29%)</title><rect x="790.5" y="1027.0" width="50.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="793.5" y="1038.0">rocks..</text>
</g>
<g>
<title>free (2 samples, 0.10%)</title><rect x="791.0" y="1011.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="794.0" y="1022.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.10%)</title><rect x="791.0" y="995.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="794.0" y="1006.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.10%)</title><rect x="792.2" y="1011.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="795.2" y="1022.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.05%)</title><rect x="792.8" y="995.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="795.8" y="1006.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="792.8" y="979.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="795.8" y="990.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (82 samples, 4.04%)</title><rect x="793.4" y="1011.0" width="47.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="796.4" y="1022.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (82 samples, 4.04%)</title><rect x="793.4" y="995.0" width="47.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="796.4" y="1006.0">rock..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (81 samples, 3.99%)</title><rect x="793.4" y="979.0" width="47.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="796.4" y="990.0">rock..</text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="793.4" y="963.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="796.4" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (77 samples, 3.79%)</title><rect x="794.0" y="963.0" width="44.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="797.0" y="974.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (77 samples, 3.79%)</title><rect x="794.0" y="947.0" width="44.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="797.0" y="958.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (68 samples, 3.35%)</title><rect x="794.5" y="931.0" width="39.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="797.5" y="942.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (67 samples, 3.30%)</title><rect x="794.5" y="915.0" width="39.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="797.5" y="926.0">roc..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (67 samples, 3.30%)</title><rect x="794.5" y="899.0" width="39.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="797.5" y="910.0">roc..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (66 samples, 3.25%)</title><rect x="795.1" y="883.0" width="38.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="798.1" y="894.0">roc..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="795.1" y="867.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="798.1" y="878.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (1 samples, 0.05%)</title><rect x="795.1" y="851.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (65 samples, 3.20%)</title><rect x="795.7" y="867.0" width="37.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="798.7" y="878.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.10%)</title><rect x="795.7" y="851.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="798.7" y="862.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (63 samples, 3.10%)</title><rect x="796.9" y="851.0" width="36.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="799.9" y="862.0">roc..</text>
</g>
<g>
<title>write (63 samples, 3.10%)</title><rect x="796.9" y="835.0" width="36.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="799.9" y="846.0">write</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="833.5" y="915.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.5" y="926.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.05%)</title><rect x="834.1" y="931.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="837.1" y="942.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.05%)</title><rect x="834.7" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.7" y="942.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.05%)</title><rect x="834.7" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="837.7" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (5 samples, 0.25%)</title><rect x="835.2" y="931.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="838.2" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (4 samples, 0.20%)</title><rect x="835.8" y="915.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="838.8" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.15%)</title><rect x="836.4" y="899.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="839.4" y="910.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.15%)</title><rect x="836.4" y="883.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="839.4" y="894.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1 samples, 0.05%)</title><rect x="836.4" y="867.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="839.4" y="878.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.05%)</title><rect x="837.0" y="867.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="840.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="837.6" y="867.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="840.6" y="878.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.05%)</title><rect x="838.2" y="931.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="841.2" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.15%)</title><rect x="838.7" y="963.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="841.7" y="974.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.10%)</title><rect x="838.7" y="947.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="841.7" y="958.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.05%)</title><rect x="839.9" y="947.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="842.9" y="958.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="840.5" y="979.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="843.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findNative (1 samples, 0.05%)</title><rect x="841.1" y="1043.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="844.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.findEntry (1 samples, 0.05%)</title><rect x="841.1" y="1027.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.1" y="1038.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_findEntry (1 samples, 0.05%)</title><rect x="841.1" y="1011.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="844.1" y="1022.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="841.1" y="995.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="844.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="841.1" y="979.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="844.1" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="841.1" y="963.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="844.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="841.1" y="947.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="844.1" y="958.0"></text>
</g>
<g>
<title>[worker tid=35843] (293 samples, 14.44%)</title><rect x="841.6" y="1235.0" width="170.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="844.6" y="1246.0">[worker tid=35843]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.44%)</title><rect x="841.6" y="1219.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.6" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.39%)</title><rect x="842.2" y="1203.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="845.2" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (7 samples, 0.34%)</title><rect x="842.8" y="1187.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="845.8" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.34%)</title><rect x="842.8" y="1171.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="845.8" y="1182.0"></text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.10%)</title><rect x="842.8" y="1155.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="845.8" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.25%)</title><rect x="844.0" y="1155.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="847.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (284 samples, 14.00%)</title><rect x="846.9" y="1219.0" width="165.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="849.9" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (284 samples, 14.00%)</title><rect x="846.9" y="1203.0" width="165.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="849.9" y="1214.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (284 samples, 14.00%)</title><rect x="846.9" y="1187.0" width="165.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="849.9" y="1198.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (77 samples, 3.79%)</title><rect x="846.9" y="1171.0" width="44.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="849.9" y="1182.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (77 samples, 3.79%)</title><rect x="846.9" y="1155.0" width="44.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="849.9" y="1166.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (77 samples, 3.79%)</title><rect x="846.9" y="1139.0" width="44.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.9" y="1150.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.05%)</title><rect x="846.9" y="1123.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="849.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.05%)</title><rect x="846.9" y="1107.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (1 samples, 0.05%)</title><rect x="846.9" y="1091.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.set (1 samples, 0.05%)</title><rect x="846.9" y="1075.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="849.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.05%)</title><rect x="846.9" y="1059.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="849.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (76 samples, 3.75%)</title><rect x="847.5" y="1123.0" width="44.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="850.5" y="1134.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (76 samples, 3.75%)</title><rect x="847.5" y="1107.0" width="44.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="850.5" y="1118.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (74 samples, 3.65%)</title><rect x="848.6" y="1091.0" width="43.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="851.6" y="1102.0">Unsa..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.10%)</title><rect x="848.6" y="1075.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="851.6" y="1086.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.05%)</title><rect x="848.6" y="1059.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="851.6" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.05%)</title><rect x="848.6" y="1043.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="851.6" y="1054.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.05%)</title><rect x="849.2" y="1059.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.2" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (71 samples, 3.50%)</title><rect x="849.8" y="1075.0" width="41.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.8" y="1086.0">Par..</text>
</g>
<g>
<title>__psynch_cvwait (67 samples, 3.30%)</title><rect x="850.4" y="1059.0" width="38.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="853.4" y="1070.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.15%)</title><rect x="889.3" y="1059.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="892.3" y="1070.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.05%)</title><rect x="891.1" y="1075.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="894.1" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (207 samples, 10.20%)</title><rect x="891.7" y="1171.0" width="120.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="894.7" y="1182.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (207 samples, 10.20%)</title><rect x="891.7" y="1155.0" width="120.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="894.7" y="1166.0">ru/mail/polis/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (82 samples, 4.04%)</title><rect x="891.7" y="1139.0" width="47.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="894.7" y="1150.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (81 samples, 3.99%)</title><rect x="892.2" y="1123.0" width="47.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="895.2" y="1134.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (81 samples, 3.99%)</title><rect x="892.2" y="1107.0" width="47.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="895.2" y="1118.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (81 samples, 3.99%)</title><rect x="892.2" y="1091.0" width="47.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="895.2" y="1102.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (80 samples, 3.94%)</title><rect x="892.8" y="1075.0" width="46.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="895.8" y="1086.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (79 samples, 3.89%)</title><rect x="893.4" y="1059.0" width="45.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="896.4" y="1070.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.10%)</title><rect x="893.4" y="1043.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="896.4" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="893.4" y="1027.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="896.4" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="893.4" y="1011.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="896.4" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="894.0" y="995.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="897.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="894.0" y="979.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="897.0" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="894.0" y="963.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="897.0" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="894.0" y="947.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="897.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (77 samples, 3.79%)</title><rect x="894.6" y="1043.0" width="44.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="897.6" y="1054.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (77 samples, 3.79%)</title><rect x="894.6" y="1027.0" width="44.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="897.6" y="1038.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (77 samples, 3.79%)</title><rect x="894.6" y="1011.0" width="44.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="897.6" y="1022.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (74 samples, 3.65%)</title><rect x="894.6" y="995.0" width="43.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="897.6" y="1006.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (74 samples, 3.65%)</title><rect x="894.6" y="979.0" width="43.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="897.6" y="990.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (74 samples, 3.65%)</title><rect x="894.6" y="963.0" width="43.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="897.6" y="974.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.05%)</title><rect x="895.7" y="947.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="898.7" y="958.0"></text>
</g>
<g>
<title>write (71 samples, 3.50%)</title><rect x="896.3" y="947.0" width="41.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="899.3" y="958.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.15%)</title><rect x="937.6" y="995.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="940.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.15%)</title><rect x="937.6" y="979.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="940.6" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (125 samples, 6.16%)</title><rect x="939.3" y="1139.0" width="72.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.3" y="1150.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (125 samples, 6.16%)</title><rect x="939.3" y="1123.0" width="72.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="942.3" y="1134.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (125 samples, 6.16%)</title><rect x="939.3" y="1107.0" width="72.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="942.3" y="1118.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (124 samples, 6.11%)</title><rect x="939.9" y="1091.0" width="72.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="942.9" y="1102.0">ru/mail/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (124 samples, 6.11%)</title><rect x="939.9" y="1075.0" width="72.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="942.9" y="1086.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (124 samples, 6.11%)</title><rect x="939.9" y="1059.0" width="72.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="942.9" y="1070.0">org/rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (122 samples, 6.01%)</title><rect x="941.1" y="1043.0" width="70.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="944.1" y="1054.0">Java_org..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (122 samples, 6.01%)</title><rect x="941.1" y="1027.0" width="70.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="944.1" y="1038.0">rocksdb_..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.05%)</title><rect x="941.1" y="1011.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="944.1" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="941.1" y="995.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.1" y="1006.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.05%)</title><rect x="941.1" y="979.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.1" y="990.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.05%)</title><rect x="941.1" y="963.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.1" y="974.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.10%)</title><rect x="941.7" y="1011.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="944.7" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="941.7" y="995.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.7" y="1006.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="941.7" y="979.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.7" y="990.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="941.7" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="944.7" y="974.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="941.7" y="947.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.7" y="958.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="941.7" y="931.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="944.7" y="942.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="941.7" y="915.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.7" y="926.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="942.3" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="945.3" y="1006.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="942.3" y="979.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="945.3" y="990.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.05%)</title><rect x="942.8" y="1011.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="945.8" y="1022.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.05%)</title><rect x="942.8" y="995.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="945.8" y="1006.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.05%)</title><rect x="942.8" y="979.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="945.8" y="990.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="942.8" y="963.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="945.8" y="974.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="942.8" y="947.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="945.8" y="958.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="942.8" y="931.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="945.8" y="942.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (118 samples, 5.82%)</title><rect x="943.4" y="1011.0" width="68.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.4" y="1022.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (118 samples, 5.82%)</title><rect x="943.4" y="995.0" width="68.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.4" y="1006.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (117 samples, 5.77%)</title><rect x="943.4" y="979.0" width="68.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="946.4" y="990.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (111 samples, 5.47%)</title><rect x="943.4" y="963.0" width="64.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.4" y="974.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (110 samples, 5.42%)</title><rect x="943.4" y="947.0" width="64.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.4" y="958.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.05%)</title><rect x="946.3" y="931.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="949.3" y="942.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (90 samples, 4.44%)</title><rect x="946.9" y="931.0" width="52.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.9" y="942.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (89 samples, 4.39%)</title><rect x="946.9" y="915.0" width="51.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.9" y="926.0">rocks..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (89 samples, 4.39%)</title><rect x="946.9" y="899.0" width="51.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="949.9" y="910.0">rocks..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.20%)</title><rect x="946.9" y="883.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.9" y="894.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (85 samples, 4.19%)</title><rect x="949.2" y="883.0" width="49.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="952.2" y="894.0">rocks..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (1 samples, 0.05%)</title><rect x="950.4" y="867.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="953.4" y="878.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (82 samples, 4.04%)</title><rect x="951.0" y="867.0" width="47.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.0" y="878.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="951.0" y="851.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="954.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (81 samples, 3.99%)</title><rect x="951.6" y="851.0" width="47.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.6" y="862.0">rock..</text>
</g>
<g>
<title>write (80 samples, 3.94%)</title><rect x="952.1" y="835.0" width="46.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="955.1" y="846.0">write</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="998.7" y="915.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.7" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (11 samples, 0.54%)</title><rect x="999.2" y="931.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1002.2" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (10 samples, 0.49%)</title><rect x="999.2" y="915.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.2" y="926.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.05%)</title><rect x="999.2" y="899.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.2" y="910.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (9 samples, 0.44%)</title><rect x="999.8" y="899.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1002.8" y="910.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1 samples, 0.05%)</title><rect x="999.8" y="883.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1002.8" y="894.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (8 samples, 0.39%)</title><rect x="1000.4" y="883.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1003.4" y="894.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (5 samples, 0.25%)</title><rect x="1001.0" y="867.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1004.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.25%)</title><rect x="1001.0" y="851.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1004.0" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1002.7" y="835.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1005.7" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.05%)</title><rect x="1003.3" y="835.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.3" y="846.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.05%)</title><rect x="1003.3" y="819.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1006.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (1 samples, 0.05%)</title><rect x="1003.9" y="867.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.9" y="878.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.05%)</title><rect x="1004.5" y="867.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.5" y="878.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="1005.1" y="915.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1008.1" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.05%)</title><rect x="1005.6" y="931.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1008.6" y="942.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.05%)</title><rect x="1006.2" y="931.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.2" y="942.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.05%)</title><rect x="1006.8" y="931.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1009.8" y="942.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.05%)</title><rect x="1006.8" y="915.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.8" y="926.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.05%)</title><rect x="1007.4" y="947.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1010.4" y="958.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.05%)</title><rect x="1008.0" y="963.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1011.0" y="974.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="1008.6" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1011.6" y="974.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.05%)</title><rect x="1008.6" y="947.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.6" y="958.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.10%)</title><rect x="1009.1" y="963.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.1" y="974.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1009.1" y="947.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1012.1" y="958.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.05%)</title><rect x="1009.7" y="947.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1012.7" y="958.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.10%)</title><rect x="1010.3" y="963.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1013.3" y="974.0"></text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="1010.3" y="947.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1013.3" y="958.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.05%)</title><rect x="1010.3" y="931.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1013.3" y="942.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.05%)</title><rect x="1010.9" y="947.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1013.9" y="958.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.05%)</title><rect x="1011.5" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1014.5" y="990.0"></text>
</g>
<g>
<title>[worker tid=36611] (306 samples, 15.08%)</title><rect x="1012.0" y="1235.0" width="178.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1015.0" y="1246.0">[worker tid=36611]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.25%)</title><rect x="1012.0" y="1219.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1015.0" y="1230.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.05%)</title><rect x="1012.0" y="1203.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.0" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.15%)</title><rect x="1012.6" y="1203.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.6" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.15%)</title><rect x="1012.6" y="1187.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1015.6" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.15%)</title><rect x="1012.6" y="1171.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1015.6" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.15%)</title><rect x="1012.6" y="1155.0" width="1.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1015.6" y="1166.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.05%)</title><rect x="1014.4" y="1203.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.4" y="1214.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.10%)</title><rect x="1014.9" y="1219.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1017.9" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.10%)</title><rect x="1014.9" y="1203.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1017.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (298 samples, 14.69%)</title><rect x="1016.1" y="1219.0" width="173.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1019.1" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (298 samples, 14.69%)</title><rect x="1016.1" y="1203.0" width="173.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1019.1" y="1214.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (298 samples, 14.69%)</title><rect x="1016.1" y="1187.0" width="173.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1019.1" y="1198.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (79 samples, 3.89%)</title><rect x="1016.1" y="1171.0" width="46.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1019.1" y="1182.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (78 samples, 3.84%)</title><rect x="1016.7" y="1155.0" width="45.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.7" y="1166.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (72 samples, 3.55%)</title><rect x="1016.7" y="1139.0" width="41.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1019.7" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (72 samples, 3.55%)</title><rect x="1016.7" y="1123.0" width="41.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1019.7" y="1134.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (72 samples, 3.55%)</title><rect x="1016.7" y="1107.0" width="41.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1019.7" y="1118.0">jdk..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="1018.4" y="1091.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.4" y="1102.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.10%)</title><rect x="1019.0" y="1091.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.0" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="1020.2" y="1091.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1023.2" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (65 samples, 3.20%)</title><rect x="1020.8" y="1091.0" width="37.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1023.8" y="1102.0">Uns..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.15%)</title><rect x="1020.8" y="1075.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.8" y="1086.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.15%)</title><rect x="1020.8" y="1059.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1023.8" y="1070.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.15%)</title><rect x="1020.8" y="1043.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1023.8" y="1054.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.10%)</title><rect x="1020.8" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.8" y="1038.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.05%)</title><rect x="1021.3" y="1011.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1024.3" y="1022.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="1021.9" y="1027.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.9" y="1038.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="1022.5" y="1075.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.5" y="1086.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (57 samples, 2.81%)</title><rect x="1023.1" y="1075.0" width="33.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1026.1" y="1086.0">Pa..</text>
</g>
<g>
<title>__psynch_cvwait (56 samples, 2.76%)</title><rect x="1023.7" y="1059.0" width="32.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1026.7" y="1070.0">__..</text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.05%)</title><rect x="1056.2" y="1075.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.2" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.15%)</title><rect x="1056.8" y="1075.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.8" y="1086.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll(Thread*) (1 samples, 0.05%)</title><rect x="1056.8" y="1059.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1059.8" y="1070.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.10%)</title><rect x="1057.4" y="1059.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1060.4" y="1070.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.10%)</title><rect x="1057.4" y="1043.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.4" y="1054.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.10%)</title><rect x="1057.4" y="1027.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1060.4" y="1038.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.10%)</title><rect x="1057.4" y="1011.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1060.4" y="1022.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="1058.0" y="995.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.30%)</title><rect x="1058.6" y="1139.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1061.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.30%)</title><rect x="1058.6" y="1123.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1061.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (6 samples, 0.30%)</title><rect x="1058.6" y="1107.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1061.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.05%)</title><rect x="1058.6" y="1091.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1061.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.15%)</title><rect x="1059.1" y="1091.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1062.1" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.10%)</title><rect x="1059.7" y="1075.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1062.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.10%)</title><rect x="1060.9" y="1091.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1063.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.10%)</title><rect x="1060.9" y="1075.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1063.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.10%)</title><rect x="1060.9" y="1059.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1063.9" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (219 samples, 10.79%)</title><rect x="1062.1" y="1171.0" width="127.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1065.1" y="1182.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (219 samples, 10.79%)</title><rect x="1062.1" y="1155.0" width="127.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1065.1" y="1166.0">ru/mail/polis/se..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (96 samples, 4.73%)</title><rect x="1062.1" y="1139.0" width="55.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1065.1" y="1150.0">one/n..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.05%)</title><rect x="1062.1" y="1123.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1065.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="1062.1" y="1107.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1065.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.05%)</title><rect x="1062.1" y="1091.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1065.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (94 samples, 4.63%)</title><rect x="1062.6" y="1123.0" width="54.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1065.6" y="1134.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.10%)</title><rect x="1062.6" y="1107.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1065.6" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.10%)</title><rect x="1062.6" y="1091.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1065.6" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="1062.6" y="1075.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1065.6" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.05%)</title><rect x="1062.6" y="1059.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1065.6" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.05%)</title><rect x="1063.2" y="1075.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1066.2" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (92 samples, 4.53%)</title><rect x="1063.8" y="1107.0" width="53.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1066.8" y="1118.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (92 samples, 4.53%)</title><rect x="1063.8" y="1091.0" width="53.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1066.8" y="1102.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (92 samples, 4.53%)</title><rect x="1063.8" y="1075.0" width="53.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1066.8" y="1086.0">one/n..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.05%)</title><rect x="1063.8" y="1059.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.8" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (91 samples, 4.48%)</title><rect x="1064.4" y="1059.0" width="52.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.4" y="1070.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.44%)</title><rect x="1064.4" y="1043.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1067.4" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.44%)</title><rect x="1064.4" y="1027.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.4" y="1038.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1064.4" y="1011.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1067.4" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1065.0" y="1011.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1068.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1065.5" y="995.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1068.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1065.5" y="979.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1068.5" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1065.5" y="963.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1068.5" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.05%)</title><rect x="1065.5" y="947.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1068.5" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.30%)</title><rect x="1066.1" y="1011.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1069.1" y="1022.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.10%)</title><rect x="1066.1" y="995.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1069.1" y="1006.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.20%)</title><rect x="1067.3" y="995.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1070.3" y="1006.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.20%)</title><rect x="1067.3" y="979.0" width="2.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1070.3" y="990.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="1069.0" y="963.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1072.0" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (82 samples, 4.04%)</title><rect x="1069.6" y="1043.0" width="47.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1072.6" y="1054.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="1069.6" y="1027.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1072.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="1069.6" y="1011.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1072.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.05%)</title><rect x="1069.6" y="995.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1072.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="1069.6" y="979.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1072.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="1069.6" y="963.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1072.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.05%)</title><rect x="1069.6" y="947.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1072.6" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.05%)</title><rect x="1069.6" y="931.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1072.6" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.05%)</title><rect x="1069.6" y="915.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1072.6" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (81 samples, 3.99%)</title><rect x="1070.2" y="1027.0" width="47.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1073.2" y="1038.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (81 samples, 3.99%)</title><rect x="1070.2" y="1011.0" width="47.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1073.2" y="1022.0">sun/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.05%)</title><rect x="1070.2" y="995.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1073.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.05%)</title><rect x="1070.2" y="979.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1073.2" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="1070.2" y="963.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1073.2" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="1070.2" y="947.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1073.2" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="1070.2" y="931.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1073.2" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.05%)</title><rect x="1070.2" y="915.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1073.2" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (78 samples, 3.84%)</title><rect x="1070.8" y="995.0" width="45.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1073.8" y="1006.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (78 samples, 3.84%)</title><rect x="1070.8" y="979.0" width="45.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1073.8" y="990.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (78 samples, 3.84%)</title><rect x="1070.8" y="963.0" width="45.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1073.8" y="974.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.15%)</title><rect x="1074.3" y="947.0" width="1.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1077.3" y="958.0"></text>
</g>
<g>
<title>write (69 samples, 3.40%)</title><rect x="1076.0" y="947.0" width="40.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1079.0" y="958.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.10%)</title><rect x="1116.1" y="995.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1119.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="1116.7" y="979.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="1116.7" y="963.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1119.7" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="1117.3" y="1123.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1120.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="1117.3" y="1107.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1120.3" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.05%)</title><rect x="1117.3" y="1091.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1120.3" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$87/1094263423.act (123 samples, 6.06%)</title><rect x="1117.9" y="1139.0" width="71.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1120.9" y="1150.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$1 (122 samples, 6.01%)</title><rect x="1118.5" y="1123.0" width="70.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1121.5" y="1134.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.put (122 samples, 6.01%)</title><rect x="1118.5" y="1107.0" width="70.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1121.5" y="1118.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (122 samples, 6.01%)</title><rect x="1118.5" y="1091.0" width="70.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1121.5" y="1102.0">ru/mail/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (122 samples, 6.01%)</title><rect x="1118.5" y="1075.0" width="70.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1121.5" y="1086.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (122 samples, 6.01%)</title><rect x="1118.5" y="1059.0" width="70.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1121.5" y="1070.0">org/rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (122 samples, 6.01%)</title><rect x="1118.5" y="1043.0" width="70.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1121.5" y="1054.0">Java_org..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (122 samples, 6.01%)</title><rect x="1118.5" y="1027.0" width="70.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.5" y="1038.0">rocksdb_..</text>
</g>
<g>
<title>free_tiny (4 samples, 0.20%)</title><rect x="1119.0" y="1011.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1122.0" y="1022.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="1119.6" y="995.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1122.6" y="1006.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.10%)</title><rect x="1120.2" y="995.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1123.2" y="1006.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.05%)</title><rect x="1121.4" y="1011.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1124.4" y="1022.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (116 samples, 5.72%)</title><rect x="1122.0" y="1011.0" width="67.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.0" y="1022.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (116 samples, 5.72%)</title><rect x="1122.0" y="995.0" width="67.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.0" y="1006.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (116 samples, 5.72%)</title><rect x="1122.0" y="979.0" width="67.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.0" y="990.0">rocksdb..</text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.05%)</title><rect x="1122.0" y="963.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1125.0" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (109 samples, 5.37%)</title><rect x="1122.5" y="963.0" width="63.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.5" y="974.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (107 samples, 5.27%)</title><rect x="1122.5" y="947.0" width="62.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.5" y="958.0">rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1125.4" y="931.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1128.4" y="942.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.05%)</title><rect x="1126.0" y="931.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.0" y="942.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (82 samples, 4.04%)</title><rect x="1126.6" y="931.0" width="47.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.6" y="942.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (80 samples, 3.94%)</title><rect x="1127.8" y="915.0" width="46.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.8" y="926.0">rock..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (80 samples, 3.94%)</title><rect x="1127.8" y="899.0" width="46.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.8" y="910.0">rock..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (80 samples, 3.94%)</title><rect x="1127.8" y="883.0" width="46.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.8" y="894.0">rock..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.10%)</title><rect x="1127.8" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.8" y="878.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1128.4" y="851.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1131.4" y="862.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (78 samples, 3.84%)</title><rect x="1128.9" y="867.0" width="45.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.9" y="878.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.10%)</title><rect x="1128.9" y="851.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1131.9" y="862.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize() (1 samples, 0.05%)</title><rect x="1130.1" y="851.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (75 samples, 3.70%)</title><rect x="1130.7" y="851.0" width="43.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.7" y="862.0">rock..</text>
</g>
<g>
<title>write (74 samples, 3.65%)</title><rect x="1131.3" y="835.0" width="43.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1134.3" y="846.0">write</text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.05%)</title><rect x="1174.3" y="931.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="942.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.05%)</title><rect x="1174.3" y="915.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.3" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (16 samples, 0.79%)</title><rect x="1174.9" y="931.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (16 samples, 0.79%)</title><rect x="1174.9" y="915.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.74%)</title><rect x="1175.5" y="899.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="910.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.05%)</title><rect x="1175.5" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="894.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (14 samples, 0.69%)</title><rect x="1176.0" y="883.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (13 samples, 0.64%)</title><rect x="1176.0" y="867.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.05%)</title><rect x="1177.2" y="851.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="862.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.05%)</title><rect x="1177.8" y="851.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="862.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.44%)</title><rect x="1178.4" y="851.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.05%)</title><rect x="1180.1" y="835.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.05%)</title><rect x="1180.1" y="819.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.10%)</title><rect x="1180.7" y="835.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="846.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1180.7" y="819.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1183.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.05%)</title><rect x="1181.3" y="819.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.15%)</title><rect x="1181.9" y="835.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.9" y="846.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.05%)</title><rect x="1183.0" y="819.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1186.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (1 samples, 0.05%)</title><rect x="1183.6" y="867.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="878.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.05%)</title><rect x="1184.2" y="931.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.10%)</title><rect x="1184.8" y="947.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="958.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.15%)</title><rect x="1185.9" y="963.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.9" y="974.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.05%)</title><rect x="1185.9" y="947.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="958.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.10%)</title><rect x="1186.5" y="947.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.5" y="958.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.10%)</title><rect x="1186.5" y="931.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.5" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.15%)</title><rect x="1187.7" y="963.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.7" y="974.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.10%)</title><rect x="1187.7" y="947.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="958.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.10%)</title><rect x="1187.7" y="931.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1190.7" y="942.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.10%)</title><rect x="1187.7" y="915.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1190.7" y="926.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.10%)</title><rect x="1187.7" y="899.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1190.7" y="910.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.10%)</title><rect x="1187.7" y="883.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.10%)</title><rect x="1187.7" y="867.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (1 samples, 0.05%)</title><rect x="1188.8" y="947.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.8" y="958.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="1189.4" y="1219.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.4" y="1230.0"></text>
</g>
</g>
</svg>
