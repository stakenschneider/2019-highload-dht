<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="469"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="469"> </text>
<g id="frames">
<g>
<title>all (4,615 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="446.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=39171] (472 samples, 10.23%)</title><rect x="10.0" y="419.0" width="120.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="430.0">[NIO Selector #..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="10.0" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="387.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="371.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="10.0" y="355.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.0" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.0" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="10.0" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.02%)</title><rect x="10.0" y="291.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.07%)</title><rect x="10.3" y="403.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.3" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="10.8" y="387.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="398.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="10.8" y="371.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.8" y="382.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (467 samples, 10.12%)</title><rect x="11.0" y="403.0" width="119.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="414.0">one/nio/server/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.02%)</title><rect x="11.8" y="387.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.02%)</title><rect x="11.8" y="371.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (295 samples, 6.39%)</title><rect x="12.0" y="387.0" width="75.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.0" y="398.0">one/nio/..</text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="12.0" y="371.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="15.0" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7 samples, 0.15%)</title><rect x="12.3" y="371.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="12.6" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.6" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title><rect x="12.6" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.09%)</title><rect x="13.1" y="355.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.09%)</title><rect x="13.1" y="339.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.09%)</title><rect x="13.1" y="323.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.09%)</title><rect x="13.1" y="307.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.09%)</title><rect x="13.1" y="291.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.02%)</title><rect x="14.1" y="371.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.1" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="14.3" y="371.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (283 samples, 6.13%)</title><rect x="14.6" y="371.0" width="72.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.6" y="382.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (283 samples, 6.13%)</title><rect x="14.6" y="355.0" width="72.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.6" y="366.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (282 samples, 6.11%)</title><rect x="14.9" y="339.0" width="72.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.9" y="350.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (269 samples, 5.83%)</title><rect x="14.9" y="323.0" width="68.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.9" y="334.0">sun/nio..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="19.2" y="307.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="22.2" y="318.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="19.2" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="22.2" y="302.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.02%)</title><rect x="19.2" y="275.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="22.2" y="286.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="19.2" y="259.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="22.2" y="270.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="19.2" y="243.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="22.2" y="254.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.02%)</title><rect x="19.2" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.2" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="19.2" y="211.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="22.2" y="222.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.02%)</title><rect x="19.5" y="307.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="22.5" y="318.0"></text>
</g>
<g>
<title>kevent (250 samples, 5.42%)</title><rect x="19.7" y="307.0" width="63.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="22.7" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.07%)</title><rect x="83.6" y="323.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getEvent (1 samples, 0.02%)</title><rect x="83.9" y="307.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.02%)</title><rect x="84.1" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.02%)</title><rect x="84.1" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="87.1" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.02%)</title><rect x="84.1" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="84.1" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.02%)</title><rect x="84.4" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="87.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (7 samples, 0.15%)</title><rect x="84.7" y="323.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="87.7" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (7 samples, 0.15%)</title><rect x="84.7" y="307.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.7" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.15%)</title><rect x="84.7" y="291.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.7" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.15%)</title><rect x="84.7" y="275.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="87.7" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.15%)</title><rect x="84.7" y="259.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="87.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="86.5" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="89.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (1 samples, 0.02%)</title><rect x="87.0" y="371.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.02%)</title><rect x="87.0" y="355.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.0" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.02%)</title><rect x="87.0" y="339.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.02%)</title><rect x="87.0" y="323.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.02%)</title><rect x="87.2" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.02%)</title><rect x="87.2" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.02%)</title><rect x="87.2" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.2" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (168 samples, 3.64%)</title><rect x="87.5" y="387.0" width="42.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.5" y="398.0">one/..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="87.5" y="371.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="90.5" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (167 samples, 3.62%)</title><rect x="87.7" y="371.0" width="42.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.7" y="382.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (98 samples, 2.12%)</title><rect x="87.7" y="355.0" width="25.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.7" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (70 samples, 1.52%)</title><rect x="89.5" y="339.0" width="17.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (68 samples, 1.47%)</title><rect x="90.0" y="323.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.07%)</title><rect x="90.0" y="307.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="90.3" y="291.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="90.5" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.5" y="286.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="90.5" y="259.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="93.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.02%)</title><rect x="90.8" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (64 samples, 1.39%)</title><rect x="91.1" y="307.0" width="16.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (64 samples, 1.39%)</title><rect x="91.1" y="291.0" width="16.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.1" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.04%)</title><rect x="91.1" y="275.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.02%)</title><rect x="91.3" y="259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (62 samples, 1.34%)</title><rect x="91.6" y="275.0" width="15.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (62 samples, 1.34%)</title><rect x="91.6" y="259.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (61 samples, 1.32%)</title><rect x="91.8" y="243.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (58 samples, 1.26%)</title><rect x="91.8" y="227.0" width="14.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="91.8" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (1 samples, 0.02%)</title><rect x="91.8" y="195.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (57 samples, 1.24%)</title><rect x="92.1" y="211.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="95.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (57 samples, 1.24%)</title><rect x="92.1" y="195.0" width="14.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (57 samples, 1.24%)</title><rect x="92.1" y="179.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="95.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (56 samples, 1.21%)</title><rect x="92.1" y="163.0" width="14.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.1" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (56 samples, 1.21%)</title><rect x="92.1" y="147.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.1" y="158.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="93.4" y="131.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="96.4" y="142.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.02%)</title><rect x="93.9" y="131.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="96.9" y="142.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.02%)</title><rect x="94.1" y="131.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="97.1" y="142.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="94.4" y="131.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="97.4" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (45 samples, 0.98%)</title><rect x="94.6" y="131.0" width="11.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="97.6" y="142.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="94.6" y="115.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="97.6" y="126.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.04%)</title><rect x="94.9" y="115.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="97.9" y="126.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (2 samples, 0.04%)</title><rect x="94.9" y="99.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="97.9" y="110.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="95.4" y="115.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="98.4" y="126.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.02%)</title><rect x="95.4" y="99.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="98.4" y="110.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="95.4" y="83.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="98.4" y="94.0"></text>
</g>
<g>
<title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.02%)</title><rect x="95.4" y="67.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="98.4" y="78.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.07%)</title><rect x="95.7" y="115.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="98.7" y="126.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.02%)</title><rect x="95.7" y="99.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="98.7" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="95.9" y="99.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="98.9" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.07%)</title><rect x="96.4" y="115.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="99.4" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.07%)</title><rect x="96.4" y="99.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="99.4" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.07%)</title><rect x="96.4" y="83.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="99.4" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.07%)</title><rect x="96.4" y="67.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="99.4" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="96.7" y="51.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="99.7" y="62.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.02%)</title><rect x="96.7" y="35.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="99.7" y="46.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="96.9" y="35.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="99.9" y="46.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.02%)</title><rect x="97.2" y="115.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="100.2" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="97.2" y="99.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="100.2" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="97.2" y="83.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="100.2" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="97.2" y="67.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="100.2" y="78.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="97.2" y="51.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="100.2" y="62.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="97.4" y="115.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.4" y="126.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="97.4" y="99.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="100.4" y="110.0"></text>
</g>
<g>
<title>__psynch_cvsignal (30 samples, 0.65%)</title><rect x="97.7" y="115.0" width="7.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="100.7" y="126.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="105.4" y="115.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="108.4" y="126.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="105.6" y="115.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="108.6" y="126.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="105.9" y="115.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="108.9" y="126.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="106.1" y="131.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="109.1" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="106.4" y="163.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.07%)</title><rect x="106.7" y="227.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="109.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.07%)</title><rect x="106.7" y="211.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="106.9" y="195.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.02%)</title><rect x="107.2" y="195.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.2" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.15%)</title><rect x="107.4" y="339.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.07%)</title><rect x="107.4" y="323.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.09%)</title><rect x="108.2" y="323.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.09%)</title><rect x="108.2" y="307.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.02%)</title><rect x="109.2" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.15%)</title><rect x="109.5" y="339.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.13%)</title><rect x="109.7" y="323.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.7" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.13%)</title><rect x="109.7" y="307.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.09%)</title><rect x="110.0" y="291.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.0" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.07%)</title><rect x="110.2" y="275.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="113.2" y="286.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="110.2" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.2" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.02%)</title><rect x="110.2" y="243.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.2" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="110.5" y="259.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="113.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="111.0" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.0" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="111.3" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.3" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.09%)</title><rect x="111.8" y="339.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.09%)</title><rect x="111.8" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="114.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (69 samples, 1.50%)</title><rect x="112.8" y="355.0" width="17.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="115.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (68 samples, 1.47%)</title><rect x="113.0" y="339.0" width="17.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="116.0" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="113.0" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="113.0" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="113.0" y="291.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.0" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="113.0" y="275.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="113.0" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="113.0" y="243.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="116.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (67 samples, 1.45%)</title><rect x="113.3" y="323.0" width="17.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.11%)</title><rect x="113.3" y="307.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.11%)</title><rect x="113.3" y="291.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.07%)</title><rect x="113.3" y="275.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.04%)</title><rect x="113.6" y="259.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="116.6" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="113.6" y="243.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.6" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.04%)</title><rect x="113.6" y="227.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="116.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="114.1" y="275.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="117.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="114.1" y="259.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="117.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="114.1" y="243.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (62 samples, 1.34%)</title><rect x="114.6" y="307.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (62 samples, 1.34%)</title><rect x="114.6" y="291.0" width="15.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (62 samples, 1.34%)</title><rect x="114.6" y="275.0" width="15.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="117.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (62 samples, 1.34%)</title><rect x="114.6" y="259.0" width="15.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="117.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (62 samples, 1.34%)</title><rect x="114.6" y="243.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.6" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.07%)</title><rect x="115.6" y="227.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="118.6" y="238.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="115.9" y="211.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="118.9" y="222.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="116.4" y="227.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="119.4" y="238.0"></text>
</g>
<g>
<title>read (54 samples, 1.17%)</title><rect x="116.6" y="227.0" width="13.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="119.6" y="238.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="130.4" y="403.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="133.4" y="414.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (519 samples, 11.25%)</title><rect x="130.7" y="419.0" width="132.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="133.7" y="430.0">[NIO Selector #1..</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.07%)</title><rect x="130.7" y="403.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="133.7" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="130.9" y="387.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="133.9" y="398.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="130.9" y="371.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="133.9" y="382.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (516 samples, 11.18%)</title><rect x="131.5" y="403.0" width="131.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.5" y="414.0">one/nio/server/S..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="132.0" y="387.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="135.0" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.04%)</title><rect x="132.0" y="371.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="135.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.02%)</title><rect x="132.0" y="355.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="135.0" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.02%)</title><rect x="132.2" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="135.2" y="366.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.02%)</title><rect x="132.2" y="339.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="135.2" y="350.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.02%)</title><rect x="132.2" y="323.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="135.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.04%)</title><rect x="132.5" y="387.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (330 samples, 7.15%)</title><rect x="133.0" y="387.0" width="84.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="136.0" y="398.0">one/nio/ne..</text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="133.0" y="371.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="136.0" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (6 samples, 0.13%)</title><rect x="133.2" y="371.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="136.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.02%)</title><rect x="133.8" y="355.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.02%)</title><rect x="133.8" y="339.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="136.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.07%)</title><rect x="134.0" y="355.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="137.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.07%)</title><rect x="134.0" y="339.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="134.0" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="137.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="134.0" y="307.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="137.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="134.0" y="291.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.02%)</title><rect x="134.5" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="137.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (323 samples, 7.00%)</title><rect x="134.8" y="371.0" width="82.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.8" y="382.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (323 samples, 7.00%)</title><rect x="134.8" y="355.0" width="82.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.8" y="366.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (322 samples, 6.98%)</title><rect x="135.0" y="339.0" width="82.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="138.0" y="350.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (305 samples, 6.61%)</title><rect x="135.3" y="323.0" width="78.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.3" y="334.0">sun/nio/c..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="139.9" y="307.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="142.9" y="318.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="139.9" y="291.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="142.9" y="302.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.02%)</title><rect x="139.9" y="275.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="142.9" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="139.9" y="259.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="142.9" y="270.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.02%)</title><rect x="140.1" y="307.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="143.1" y="318.0"></text>
</g>
<g>
<title>kevent (285 samples, 6.18%)</title><rect x="140.4" y="307.0" width="72.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="143.4" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.13%)</title><rect x="213.3" y="323.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.13%)</title><rect x="213.3" y="307.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.11%)</title><rect x="213.3" y="291.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.11%)</title><rect x="213.3" y="275.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.3" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.11%)</title><rect x="213.3" y="259.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.3" y="270.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.02%)</title><rect x="214.6" y="291.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="217.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.02%)</title><rect x="214.6" y="275.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="217.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="214.6" y="259.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.02%)</title><rect x="214.8" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (6 samples, 0.13%)</title><rect x="215.1" y="323.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.1" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (6 samples, 0.13%)</title><rect x="215.1" y="307.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.1" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="215.1" y="291.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.1" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.11%)</title><rect x="215.3" y="291.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.3" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.11%)</title><rect x="215.3" y="275.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.3" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.11%)</title><rect x="215.3" y="259.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.07%)</title><rect x="216.6" y="323.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.6" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.02%)</title><rect x="217.1" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.02%)</title><rect x="217.1" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (180 samples, 3.90%)</title><rect x="217.4" y="387.0" width="46.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.4" y="398.0">one/..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="218.6" y="371.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="221.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (172 samples, 3.73%)</title><rect x="218.9" y="371.0" width="44.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.9" y="382.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (96 samples, 2.08%)</title><rect x="218.9" y="355.0" width="24.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.9" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (72 samples, 1.56%)</title><rect x="219.7" y="339.0" width="18.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (72 samples, 1.56%)</title><rect x="219.7" y="323.0" width="18.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (72 samples, 1.56%)</title><rect x="219.7" y="307.0" width="18.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.04%)</title><rect x="219.7" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="219.7" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.7" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="219.7" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="219.7" y="243.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.7" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="219.9" y="243.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.9" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="219.9" y="227.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="222.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (70 samples, 1.52%)</title><rect x="220.2" y="291.0" width="17.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="220.2" y="275.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.2" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.02%)</title><rect x="220.2" y="259.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.02%)</title><rect x="220.2" y="243.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.15%)</title><rect x="220.4" y="275.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="220.4" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.4" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="220.4" y="243.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="220.4" y="227.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.4" y="238.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.13%)</title><rect x="220.7" y="259.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.11%)</title><rect x="220.9" y="243.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.11%)</title><rect x="220.9" y="227.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.9" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.11%)</title><rect x="220.9" y="211.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (62 samples, 1.34%)</title><rect x="222.2" y="275.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (62 samples, 1.34%)</title><rect x="222.2" y="259.0" width="15.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (60 samples, 1.30%)</title><rect x="222.5" y="243.0" width="15.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (55 samples, 1.19%)</title><rect x="223.0" y="227.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.04%)</title><rect x="223.0" y="211.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="226.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (2 samples, 0.04%)</title><rect x="223.0" y="195.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (53 samples, 1.15%)</title><rect x="223.5" y="211.0" width="13.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (53 samples, 1.15%)</title><rect x="223.5" y="195.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (53 samples, 1.15%)</title><rect x="223.5" y="179.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (53 samples, 1.15%)</title><rect x="223.5" y="163.0" width="13.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.5" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (53 samples, 1.15%)</title><rect x="223.5" y="147.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.5" y="158.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="223.8" y="131.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="226.8" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (50 samples, 1.08%)</title><rect x="224.0" y="131.0" width="12.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="227.0" y="142.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="224.0" y="115.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="227.0" y="126.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="224.0" y="99.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="227.0" y="110.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="224.0" y="83.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="227.0" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.04%)</title><rect x="224.0" y="67.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="227.0" y="78.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="224.0" y="51.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="227.0" y="62.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="224.3" y="51.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="227.3" y="62.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="224.3" y="35.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="227.3" y="46.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.07%)</title><rect x="224.5" y="115.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="227.5" y="126.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.04%)</title><rect x="224.5" y="99.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="227.5" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="225.0" y="99.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="228.0" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.07%)</title><rect x="225.3" y="115.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="228.3" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="225.3" y="99.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="228.3" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="225.3" y="83.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="228.3" y="94.0"></text>
</g>
<g>
<title>SafepointMechanism::should_block(Thread*) (1 samples, 0.02%)</title><rect x="225.5" y="99.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="228.5" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.02%)</title><rect x="225.5" y="83.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="228.5" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="225.8" y="99.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="228.8" y="110.0"></text>
</g>
<g>
<title>__psynch_cvsignal (40 samples, 0.87%)</title><rect x="226.1" y="115.0" width="10.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="229.1" y="126.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np (1 samples, 0.02%)</title><rect x="236.3" y="115.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="239.3" y="126.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="236.5" y="115.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="239.5" y="126.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.02%)</title><rect x="236.8" y="131.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="239.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.07%)</title><rect x="237.1" y="227.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.07%)</title><rect x="237.1" y="211.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="237.3" y="195.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.isRunning (1 samples, 0.02%)</title><rect x="237.8" y="243.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.22%)</title><rect x="238.1" y="339.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.11%)</title><rect x="238.1" y="323.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="238.8" y="307.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="238.8" y="291.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="239.1" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.1" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.11%)</title><rect x="239.4" y="323.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.11%)</title><rect x="239.4" y="307.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.22%)</title><rect x="240.6" y="339.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="240.6" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.20%)</title><rect x="240.9" y="323.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="240.9" y="307.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="240.9" y="291.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.9" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.17%)</title><rect x="241.1" y="307.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.1" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.11%)</title><rect x="241.9" y="291.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.9" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.11%)</title><rect x="241.9" y="275.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.9" y="286.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="242.4" y="259.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="245.4" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="242.7" y="259.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="245.7" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.02%)</title><rect x="243.2" y="339.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.02%)</title><rect x="243.2" y="323.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.2" y="334.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.02%)</title><rect x="243.2" y="307.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.2" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (76 samples, 1.65%)</title><rect x="243.4" y="355.0" width="19.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (76 samples, 1.65%)</title><rect x="243.4" y="339.0" width="19.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="243.7" y="323.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.7" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="243.7" y="307.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="243.7" y="291.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="244.0" y="275.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="244.0" y="259.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="244.0" y="243.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.0" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="244.0" y="227.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (73 samples, 1.58%)</title><rect x="244.2" y="323.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.17%)</title><rect x="244.2" y="307.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.17%)</title><rect x="244.2" y="291.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="247.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="244.2" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.02%)</title><rect x="244.5" y="259.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.5" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="244.5" y="243.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.5" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="244.5" y="227.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.13%)</title><rect x="244.7" y="275.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.13%)</title><rect x="244.7" y="259.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.07%)</title><rect x="244.7" y="243.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.02%)</title><rect x="245.5" y="243.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.5" y="254.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.04%)</title><rect x="245.7" y="243.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="248.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (65 samples, 1.41%)</title><rect x="246.3" y="307.0" width="16.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (65 samples, 1.41%)</title><rect x="246.3" y="291.0" width="16.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (65 samples, 1.41%)</title><rect x="246.3" y="275.0" width="16.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (63 samples, 1.37%)</title><rect x="246.8" y="259.0" width="16.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (63 samples, 1.37%)</title><rect x="246.8" y="243.0" width="16.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.8" y="254.0"></text>
</g>
<g>
<title>read (60 samples, 1.30%)</title><rect x="247.5" y="227.0" width="15.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="250.5" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="262.9" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="265.9" y="382.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="262.9" y="355.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="265.9" y="366.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="262.9" y="339.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="265.9" y="350.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="262.9" y="323.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="265.9" y="334.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="263.1" y="355.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="266.1" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=38659] (459 samples, 9.95%)</title><rect x="263.4" y="419.0" width="117.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="266.4" y="430.0">[NIO Selector ..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.04%)</title><rect x="263.4" y="403.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="266.4" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="263.4" y="387.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="266.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="263.6" y="387.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="266.6" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="263.6" y="371.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="266.6" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="263.6" y="355.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="266.6" y="366.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.02%)</title><rect x="263.6" y="339.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="266.6" y="350.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.07%)</title><rect x="263.9" y="403.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="266.9" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="264.4" y="387.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="267.4" y="398.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="264.4" y="371.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="267.4" y="382.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (454 samples, 9.84%)</title><rect x="264.7" y="403.0" width="116.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.7" y="414.0">one/nio/server..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.02%)</title><rect x="265.4" y="387.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.02%)</title><rect x="265.4" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (311 samples, 6.74%)</title><rect x="265.7" y="387.0" width="79.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.7" y="398.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.09%)</title><rect x="265.9" y="371.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.04%)</title><rect x="266.2" y="355.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="266.2" y="339.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="266.2" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="266.2" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.2" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="266.2" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.2" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.02%)</title><rect x="266.5" y="323.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.size (1 samples, 0.02%)</title><rect x="266.7" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (304 samples, 6.59%)</title><rect x="267.0" y="371.0" width="77.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.0" y="382.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (304 samples, 6.59%)</title><rect x="267.0" y="355.0" width="77.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.0" y="366.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (303 samples, 6.57%)</title><rect x="267.0" y="339.0" width="77.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.0" y="350.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (290 samples, 6.28%)</title><rect x="267.2" y="323.0" width="74.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.2" y="334.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.04%)</title><rect x="270.8" y="307.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="273.8" y="318.0"></text>
</g>
<g>
<title>kevent (274 samples, 5.94%)</title><rect x="271.3" y="307.0" width="70.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="274.3" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.04%)</title><rect x="341.4" y="323.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="344.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="341.6" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="344.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="341.6" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.07%)</title><rect x="341.9" y="323.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.9" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.02%)</title><rect x="342.4" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.09%)</title><rect x="342.7" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.7" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.09%)</title><rect x="342.7" y="307.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="342.7" y="291.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="345.7" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.07%)</title><rect x="342.9" y="291.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.9" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.07%)</title><rect x="342.9" y="275.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="345.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.07%)</title><rect x="342.9" y="259.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.02%)</title><rect x="343.7" y="323.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.7" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.02%)</title><rect x="343.7" y="307.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="346.7" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="343.7" y="291.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.7" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="343.7" y="275.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.7" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="343.7" y="259.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="346.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="343.9" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="346.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="343.9" y="307.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.04%)</title><rect x="343.9" y="291.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="346.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.02%)</title><rect x="344.4" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.4" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.02%)</title><rect x="344.4" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.04%)</title><rect x="344.7" y="371.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.04%)</title><rect x="344.7" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.04%)</title><rect x="344.7" y="339.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.7" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (139 samples, 3.01%)</title><rect x="345.2" y="387.0" width="35.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.2" y="398.0">one..</text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.04%)</title><rect x="345.5" y="371.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="348.5" y="382.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="346.0" y="371.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="349.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (132 samples, 2.86%)</title><rect x="346.2" y="371.0" width="33.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="349.2" y="382.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (70 samples, 1.52%)</title><rect x="346.7" y="355.0" width="17.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="349.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (53 samples, 1.15%)</title><rect x="347.3" y="339.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (53 samples, 1.15%)</title><rect x="347.3" y="323.0" width="13.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.02%)</title><rect x="347.3" y="307.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="350.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="347.3" y="291.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="347.3" y="275.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="347.3" y="259.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="350.3" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.02%)</title><rect x="347.5" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="350.5" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="347.5" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="350.5" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="347.5" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.5" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="347.5" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (51 samples, 1.11%)</title><rect x="347.8" y="307.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="350.8" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.02%)</title><rect x="347.8" y="291.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="347.8" y="275.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="347.8" y="259.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="350.8" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="347.8" y="243.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.8" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="347.8" y="227.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="350.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (50 samples, 1.08%)</title><rect x="348.0" y="291.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="351.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="348.0" y="275.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="351.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.02%)</title><rect x="348.0" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="351.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.02%)</title><rect x="348.0" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="351.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.07%)</title><rect x="348.3" y="275.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="348.3" y="259.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="348.3" y="243.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="351.3" y="254.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="348.5" y="259.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="351.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="348.5" y="243.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="351.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="348.5" y="227.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.5" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="348.5" y="211.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="351.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (46 samples, 1.00%)</title><rect x="349.0" y="275.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (46 samples, 1.00%)</title><rect x="349.0" y="259.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="352.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (46 samples, 1.00%)</title><rect x="349.0" y="243.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="352.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (42 samples, 0.91%)</title><rect x="349.3" y="227.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="349.3" y="211.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="349.3" y="195.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="352.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="349.3" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="352.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="349.3" y="163.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="352.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="349.3" y="147.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.3" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="349.3" y="131.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.3" y="142.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.02%)</title><rect x="349.3" y="115.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="352.3" y="126.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="349.3" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="352.3" y="110.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="349.3" y="83.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="352.3" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (41 samples, 0.89%)</title><rect x="349.6" y="211.0" width="10.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="352.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (41 samples, 0.89%)</title><rect x="349.6" y="195.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (41 samples, 0.89%)</title><rect x="349.6" y="179.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="352.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (41 samples, 0.89%)</title><rect x="349.6" y="163.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="352.6" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (41 samples, 0.89%)</title><rect x="349.6" y="147.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="352.6" y="158.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.02%)</title><rect x="349.8" y="131.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="352.8" y="142.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.02%)</title><rect x="350.1" y="131.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="353.1" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="350.3" y="131.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="353.3" y="142.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="350.6" y="131.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="353.6" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (35 samples, 0.76%)</title><rect x="350.8" y="131.0" width="9.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="353.8" y="142.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="351.3" y="115.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="354.3" y="126.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.02%)</title><rect x="351.6" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="354.6" y="110.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="351.6" y="83.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="354.6" y="94.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.04%)</title><rect x="351.9" y="115.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="354.9" y="126.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.02%)</title><rect x="351.9" y="99.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="354.9" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="352.1" y="99.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="355.1" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="352.4" y="115.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="355.4" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.02%)</title><rect x="352.4" y="99.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="355.4" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="352.4" y="83.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="355.4" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="352.6" y="115.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="355.6" y="126.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.02%)</title><rect x="352.6" y="99.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="355.6" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="352.9" y="115.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="355.9" y="126.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.02%)</title><rect x="353.1" y="115.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="356.1" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (21 samples, 0.46%)</title><rect x="353.4" y="115.0" width="5.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="356.4" y="126.0"></text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.02%)</title><rect x="358.8" y="115.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="361.8" y="126.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="359.0" y="115.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="362.0" y="126.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="359.3" y="115.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="362.3" y="126.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="359.5" y="115.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="362.5" y="126.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="359.8" y="131.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="362.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.07%)</title><rect x="360.0" y="227.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.07%)</title><rect x="360.0" y="211.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="360.0" y="195.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="360.0" y="179.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="360.0" y="163.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.0" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="360.0" y="147.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.0" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.02%)</title><rect x="360.0" y="131.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="363.0" y="142.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="360.0" y="115.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="363.0" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="360.3" y="195.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="360.3" y="179.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="360.3" y="163.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="363.3" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="360.3" y="147.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.3" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="360.3" y="131.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="363.3" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.13%)</title><rect x="360.8" y="339.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.09%)</title><rect x="361.3" y="323.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.09%)</title><rect x="361.3" y="307.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.13%)</title><rect x="362.3" y="339.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.13%)</title><rect x="362.3" y="323.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.13%)</title><rect x="362.3" y="307.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="362.8" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.8" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="362.8" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.8" y="286.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="362.8" y="259.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="365.8" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="363.1" y="291.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="366.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="363.6" y="291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="366.6" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="363.9" y="339.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.9" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="363.9" y="323.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="366.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (60 samples, 1.30%)</title><rect x="364.6" y="355.0" width="15.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (60 samples, 1.30%)</title><rect x="364.6" y="339.0" width="15.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="364.9" y="323.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.9" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="364.9" y="307.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="364.9" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.9" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="364.9" y="275.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="367.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="364.9" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="364.9" y="243.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="367.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (57 samples, 1.24%)</title><rect x="365.4" y="323.0" width="14.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.11%)</title><rect x="365.4" y="307.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.09%)</title><rect x="365.7" y="291.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.09%)</title><rect x="365.7" y="275.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="368.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.09%)</title><rect x="365.7" y="259.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="365.7" y="243.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.02%)</title><rect x="365.9" y="243.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="368.9" y="254.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="366.2" y="243.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="369.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (52 samples, 1.13%)</title><rect x="366.7" y="307.0" width="13.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="369.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (52 samples, 1.13%)</title><rect x="366.7" y="291.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (52 samples, 1.13%)</title><rect x="366.7" y="275.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (52 samples, 1.13%)</title><rect x="366.7" y="259.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (52 samples, 1.13%)</title><rect x="366.7" y="243.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.7" y="254.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.02%)</title><rect x="367.7" y="227.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="370.7" y="238.0"></text>
</g>
<g>
<title>read (47 samples, 1.02%)</title><rect x="368.0" y="227.0" width="12.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="371.0" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.07%)</title><rect x="380.0" y="371.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="383.0" y="382.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.02%)</title><rect x="380.0" y="355.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="383.0" y="366.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="380.2" y="355.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="383.2" y="366.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="380.2" y="339.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="383.2" y="350.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="380.2" y="323.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="383.2" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=26115] (434 samples, 9.40%)</title><rect x="380.7" y="419.0" width="111.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="383.7" y="430.0">[NIO Selector..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="380.7" y="403.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="383.7" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="380.7" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="383.7" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="380.7" y="371.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="383.7" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="380.7" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="383.7" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="380.7" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="383.7" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="380.7" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="383.7" y="334.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="380.7" y="307.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="383.7" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.02%)</title><rect x="380.7" y="291.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="383.7" y="302.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.02%)</title><rect x="380.7" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="383.7" y="286.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="381.0" y="403.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="384.0" y="414.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (430 samples, 9.32%)</title><rect x="381.5" y="403.0" width="110.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.5" y="414.0">one/nio/serve..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="381.8" y="387.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="384.8" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.02%)</title><rect x="381.8" y="371.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="384.8" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.02%)</title><rect x="381.8" y="355.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="384.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (286 samples, 6.20%)</title><rect x="382.0" y="387.0" width="73.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="385.0" y="398.0">one/nio/..</text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.02%)</title><rect x="382.0" y="371.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="385.0" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (8 samples, 0.17%)</title><rect x="382.3" y="371.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.3" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectionKey.isValid (1 samples, 0.02%)</title><rect x="383.3" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="386.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.02%)</title><rect x="383.6" y="355.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="386.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.04%)</title><rect x="383.8" y="355.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="383.8" y="339.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="386.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="383.8" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="386.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.02%)</title><rect x="384.1" y="323.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="387.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.02%)</title><rect x="384.3" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (275 samples, 5.96%)</title><rect x="384.6" y="371.0" width="70.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.6" y="382.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (275 samples, 5.96%)</title><rect x="384.6" y="355.0" width="70.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.6" y="366.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (272 samples, 5.89%)</title><rect x="385.1" y="339.0" width="69.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.1" y="350.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (259 samples, 5.61%)</title><rect x="385.6" y="323.0" width="66.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.6" y="334.0">sun/nio..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.02%)</title><rect x="388.9" y="307.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="391.9" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.11%)</title><rect x="389.2" y="307.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="392.2" y="318.0"></text>
</g>
<g>
<title>kevent (240 samples, 5.20%)</title><rect x="390.5" y="307.0" width="61.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="393.5" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.07%)</title><rect x="451.8" y="323.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="454.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.07%)</title><rect x="451.8" y="307.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="454.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="451.8" y="291.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="454.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="451.8" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.8" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="451.8" y="259.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="454.8" y="270.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.02%)</title><rect x="452.3" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.02%)</title><rect x="452.3" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.3" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="452.3" y="259.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="455.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.11%)</title><rect x="452.6" y="323.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="455.6" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.11%)</title><rect x="452.6" y="307.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.6" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="452.6" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.6" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.09%)</title><rect x="452.9" y="291.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="455.9" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.09%)</title><rect x="452.9" y="275.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.09%)</title><rect x="452.9" y="259.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="455.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.07%)</title><rect x="453.9" y="323.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="456.9" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.02%)</title><rect x="454.1" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.02%)</title><rect x="454.4" y="307.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="457.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.02%)</title><rect x="454.4" y="291.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.02%)</title><rect x="454.6" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="457.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.02%)</title><rect x="454.9" y="371.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="457.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.02%)</title><rect x="454.9" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.02%)</title><rect x="454.9" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.9" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (142 samples, 3.08%)</title><rect x="455.2" y="387.0" width="36.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.2" y="398.0">one..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="455.9" y="371.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="458.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (138 samples, 2.99%)</title><rect x="456.2" y="371.0" width="35.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.2" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (80 samples, 1.73%)</title><rect x="456.2" y="355.0" width="20.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (67 samples, 1.45%)</title><rect x="456.4" y="339.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (67 samples, 1.45%)</title><rect x="456.4" y="323.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.09%)</title><rect x="456.4" y="307.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="459.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.09%)</title><rect x="456.4" y="291.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.04%)</title><rect x="456.7" y="275.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="459.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="456.7" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="456.7" y="243.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="459.7" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="457.2" y="275.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="460.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="457.2" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (63 samples, 1.37%)</title><rect x="457.5" y="307.0" width="16.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.07%)</title><rect x="457.5" y="291.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="460.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.07%)</title><rect x="457.5" y="275.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="460.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.07%)</title><rect x="457.5" y="259.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="460.5" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.07%)</title><rect x="457.5" y="243.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.5" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="457.5" y="227.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="460.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (60 samples, 1.30%)</title><rect x="458.2" y="291.0" width="15.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="458.2" y="275.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.2" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.02%)</title><rect x="458.2" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="461.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.02%)</title><rect x="458.2" y="243.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="458.5" y="275.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="458.5" y="259.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.5" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="458.5" y="243.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="458.5" y="227.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.5" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="458.5" y="211.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="458.5" y="195.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="458.5" y="179.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.5" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="458.5" y="163.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="461.5" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.04%)</title><rect x="458.7" y="275.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="459.0" y="259.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="459.0" y="243.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (56 samples, 1.21%)</title><rect x="459.2" y="275.0" width="14.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (56 samples, 1.21%)</title><rect x="459.2" y="259.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="462.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (56 samples, 1.21%)</title><rect x="459.2" y="243.0" width="14.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="462.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (54 samples, 1.17%)</title><rect x="459.2" y="227.0" width="13.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="459.2" y="211.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="462.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.02%)</title><rect x="459.2" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.02%)</title><rect x="459.2" y="179.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="459.5" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="462.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="459.5" y="195.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="462.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="459.5" y="179.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="462.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="459.5" y="163.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="459.5" y="147.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="462.5" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="459.5" y="131.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="462.5" y="142.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.02%)</title><rect x="459.5" y="115.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="462.5" y="126.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="459.5" y="99.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="462.5" y="110.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="459.5" y="83.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="462.5" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (52 samples, 1.13%)</title><rect x="459.8" y="211.0" width="13.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (52 samples, 1.13%)</title><rect x="459.8" y="195.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (52 samples, 1.13%)</title><rect x="459.8" y="179.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="462.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (51 samples, 1.11%)</title><rect x="460.0" y="163.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.0" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (51 samples, 1.11%)</title><rect x="460.0" y="147.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.0" y="158.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="460.3" y="131.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="463.3" y="142.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.04%)</title><rect x="460.5" y="131.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="463.5" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.02%)</title><rect x="461.0" y="131.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="464.0" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (44 samples, 0.95%)</title><rect x="461.3" y="131.0" width="11.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="464.3" y="142.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.02%)</title><rect x="461.3" y="115.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="464.3" y="126.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="461.5" y="115.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="464.5" y="126.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.04%)</title><rect x="461.8" y="115.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="464.8" y="126.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.02%)</title><rect x="461.8" y="99.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="464.8" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="462.1" y="99.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="465.1" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="462.3" y="115.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="465.3" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.02%)</title><rect x="462.3" y="99.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="465.3" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="462.3" y="83.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="465.3" y="94.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.02%)</title><rect x="462.3" y="67.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="465.3" y="78.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="462.6" y="115.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="465.6" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="462.8" y="99.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="465.8" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="462.8" y="83.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="465.8" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="462.8" y="67.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="465.8" y="78.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.04%)</title><rect x="463.1" y="115.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="466.1" y="126.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.02%)</title><rect x="463.1" y="99.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="466.1" y="110.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="463.3" y="99.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="466.3" y="110.0"></text>
</g>
<g>
<title>__psynch_cvsignal (32 samples, 0.69%)</title><rect x="463.6" y="115.0" width="8.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="466.6" y="126.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.07%)</title><rect x="471.8" y="115.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="474.8" y="126.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.04%)</title><rect x="472.0" y="99.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="475.0" y="110.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="472.5" y="131.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="475.5" y="142.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="472.8" y="131.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="475.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="473.1" y="227.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="473.1" y="211.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="473.1" y="195.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.02%)</title><rect x="473.3" y="195.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.3" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.11%)</title><rect x="473.6" y="339.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.04%)</title><rect x="473.6" y="323.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="473.8" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="473.8" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="473.8" y="275.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.8" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="474.1" y="323.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="477.1" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="474.1" y="307.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="474.6" y="291.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="477.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="474.6" y="275.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.02%)</title><rect x="474.6" y="259.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.02%)</title><rect x="474.8" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.13%)</title><rect x="475.1" y="339.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.13%)</title><rect x="475.1" y="323.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="478.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.09%)</title><rect x="475.6" y="307.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="478.6" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.07%)</title><rect x="475.6" y="291.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="478.6" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.07%)</title><rect x="475.6" y="275.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="478.6" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="475.9" y="259.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="478.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.02%)</title><rect x="476.1" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.1" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="476.4" y="291.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.4" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (58 samples, 1.26%)</title><rect x="476.6" y="355.0" width="14.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (58 samples, 1.26%)</title><rect x="476.6" y="339.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="476.6" y="323.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.6" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="476.6" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="476.6" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.6" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="476.9" y="275.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="476.9" y="259.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="479.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="476.9" y="243.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (56 samples, 1.21%)</title><rect x="477.1" y="323.0" width="14.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="480.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.17%)</title><rect x="477.1" y="307.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.17%)</title><rect x="477.1" y="291.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="480.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="477.4" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.02%)</title><rect x="477.7" y="259.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.7" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="477.7" y="243.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.7" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="477.7" y="227.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="480.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.11%)</title><rect x="477.9" y="275.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.11%)</title><rect x="477.9" y="259.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.07%)</title><rect x="477.9" y="243.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.9" y="254.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.04%)</title><rect x="478.7" y="243.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="481.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (48 samples, 1.04%)</title><rect x="479.2" y="307.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (48 samples, 1.04%)</title><rect x="479.2" y="291.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (48 samples, 1.04%)</title><rect x="479.2" y="275.0" width="12.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="482.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (45 samples, 0.98%)</title><rect x="480.0" y="259.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (45 samples, 0.98%)</title><rect x="480.0" y="243.0" width="11.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="483.0" y="254.0"></text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.02%)</title><rect x="480.5" y="227.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="483.5" y="238.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.02%)</title><rect x="480.7" y="227.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="483.7" y="238.0"></text>
</g>
<g>
<title>read (41 samples, 0.89%)</title><rect x="481.0" y="227.0" width="10.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="484.0" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="491.5" y="403.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="494.5" y="414.0"></text>
</g>
<g>
<title>[tid=13315] (6 samples, 0.13%)</title><rect x="491.7" y="419.0" width="1.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="494.7" y="430.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.13%)</title><rect x="491.7" y="403.0" width="1.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="494.7" y="414.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.13%)</title><rect x="491.7" y="387.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="494.7" y="398.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.13%)</title><rect x="491.7" y="371.0" width="1.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="494.7" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.13%)</title><rect x="491.7" y="355.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="494.7" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.13%)</title><rect x="491.7" y="339.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="494.7" y="350.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (6 samples, 0.13%)</title><rect x="491.7" y="323.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="494.7" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (6 samples, 0.13%)</title><rect x="491.7" y="307.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="494.7" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.04%)</title><rect x="491.7" y="291.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="494.7" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.04%)</title><rect x="491.7" y="275.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="494.7" y="286.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.04%)</title><rect x="491.7" y="259.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="494.7" y="270.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="492.0" y="243.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.0" y="254.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.02%)</title><rect x="492.0" y="227.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="495.0" y="238.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.02%)</title><rect x="492.0" y="211.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="495.0" y="222.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.02%)</title><rect x="492.0" y="195.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="495.0" y="206.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (4 samples, 0.09%)</title><rect x="492.2" y="291.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="495.2" y="302.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.09%)</title><rect x="492.2" y="275.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="495.2" y="286.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.09%)</title><rect x="492.2" y="259.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="495.2" y="270.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.09%)</title><rect x="492.2" y="243.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="495.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.09%)</title><rect x="492.2" y="227.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="495.2" y="238.0"></text>
</g>
<g>
<title>[tid=13827] (1 samples, 0.02%)</title><rect x="493.3" y="419.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="496.3" y="430.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="493.3" y="403.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="496.3" y="414.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="493.3" y="387.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="496.3" y="398.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="493.3" y="371.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="496.3" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="493.3" y="355.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="496.3" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="493.3" y="339.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="496.3" y="350.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.02%)</title><rect x="493.3" y="323.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="496.3" y="334.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.02%)</title><rect x="493.3" y="307.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="496.3" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="493.3" y="291.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="496.3" y="302.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="493.3" y="275.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="496.3" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="493.3" y="259.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="496.3" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="493.3" y="243.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="496.3" y="254.0"></text>
</g>
<g>
<title>[tid=20739] (2 samples, 0.04%)</title><rect x="493.5" y="419.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="496.5" y="430.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.04%)</title><rect x="493.5" y="403.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="496.5" y="414.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.04%)</title><rect x="493.5" y="387.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="496.5" y="398.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.04%)</title><rect x="493.5" y="371.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="496.5" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.04%)</title><rect x="493.5" y="355.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="496.5" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.04%)</title><rect x="493.5" y="339.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="496.5" y="350.0"></text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.04%)</title><rect x="493.5" y="323.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="496.5" y="334.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.04%)</title><rect x="493.5" y="307.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="496.5" y="318.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.04%)</title><rect x="493.5" y="291.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="496.5" y="302.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="493.5" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="496.5" y="286.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="493.5" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="496.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="493.5" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="496.5" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="493.5" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="496.5" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="493.5" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="496.5" y="222.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title><rect x="493.5" y="195.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="496.5" y="206.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.02%)</title><rect x="493.8" y="275.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="496.8" y="286.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.02%)</title><rect x="493.8" y="259.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="496.8" y="270.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.02%)</title><rect x="493.8" y="243.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="496.8" y="254.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.02%)</title><rect x="493.8" y="227.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="496.8" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="493.8" y="211.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="496.8" y="222.0"></text>
</g>
<g>
<title>[tid=22531] (1 samples, 0.02%)</title><rect x="494.0" y="419.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="497.0" y="430.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="494.0" y="403.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="497.0" y="414.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="494.0" y="387.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="497.0" y="398.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="494.0" y="371.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="497.0" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="494.0" y="355.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="497.0" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="494.0" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="497.0" y="350.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.02%)</title><rect x="494.0" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="497.0" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.02%)</title><rect x="494.0" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="497.0" y="318.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.02%)</title><rect x="494.0" y="291.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="497.0" y="302.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.02%)</title><rect x="494.0" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="497.0" y="286.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="494.0" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="497.0" y="270.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="494.0" y="243.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="497.0" y="254.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="494.0" y="227.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="497.0" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="494.0" y="211.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="497.0" y="222.0"></text>
</g>
<g>
<title>[tid=40451] (10 samples, 0.22%)</title><rect x="494.3" y="419.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="497.3" y="430.0"></text>
</g>
<g>
<title>thread_start (10 samples, 0.22%)</title><rect x="494.3" y="403.0" width="2.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="497.3" y="414.0"></text>
</g>
<g>
<title>_pthread_start (10 samples, 0.22%)</title><rect x="494.3" y="387.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="497.3" y="398.0"></text>
</g>
<g>
<title>_pthread_body (10 samples, 0.22%)</title><rect x="494.3" y="371.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="497.3" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.22%)</title><rect x="494.3" y="355.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="497.3" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (10 samples, 0.22%)</title><rect x="494.3" y="339.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="497.3" y="350.0"></text>
</g>
<g>
<title>WatcherThread::run() (10 samples, 0.22%)</title><rect x="494.3" y="323.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="497.3" y="334.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (10 samples, 0.22%)</title><rect x="494.3" y="307.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="497.3" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 0.20%)</title><rect x="494.5" y="291.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.5" y="302.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 0.20%)</title><rect x="494.5" y="275.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="497.5" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 0.17%)</title><rect x="494.8" y="259.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="497.8" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.17%)</title><rect x="494.8" y="243.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="497.8" y="254.0"></text>
</g>
<g>
<title>[tid=43267] (1 samples, 0.02%)</title><rect x="496.8" y="419.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="499.8" y="430.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="496.8" y="403.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="499.8" y="414.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="496.8" y="387.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="499.8" y="398.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="496.8" y="371.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="499.8" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="496.8" y="355.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="499.8" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="496.8" y="339.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="499.8" y="350.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.02%)</title><rect x="496.8" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="499.8" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.02%)</title><rect x="496.8" y="307.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="499.8" y="318.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.02%)</title><rect x="496.8" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="499.8" y="302.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.02%)</title><rect x="496.8" y="275.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="499.8" y="286.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="496.8" y="259.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="499.8" y="270.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="496.8" y="243.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="499.8" y="254.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="496.8" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="499.8" y="238.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.02%)</title><rect x="496.8" y="211.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="499.8" y="222.0"></text>
</g>
<g>
<title>[worker tid=27139] (650 samples, 14.08%)</title><rect x="497.1" y="419.0" width="166.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="500.1" y="430.0">[worker tid=27139]</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (1 samples, 0.02%)</title><rect x="497.1" y="403.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="500.1" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="497.3" y="403.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="500.3" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="497.9" y="403.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="500.9" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (17 samples, 0.37%)</title><rect x="498.1" y="403.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="501.1" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (17 samples, 0.37%)</title><rect x="498.1" y="387.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="501.1" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="498.4" y="371.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="501.4" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="498.4" y="355.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="501.4" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="498.4" y="339.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="501.4" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (4 samples, 0.09%)</title><rect x="498.9" y="371.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="501.9" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.22%)</title><rect x="499.9" y="371.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="502.9" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.07%)</title><rect x="501.7" y="355.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="504.7" y="366.0"></text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.13%)</title><rect x="502.5" y="403.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="505.5" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="502.5" y="387.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="505.5" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="503.0" y="387.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="506.0" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.02%)</title><rect x="503.0" y="371.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="506.0" y="382.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="503.0" y="355.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="506.0" y="366.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.02%)</title><rect x="503.0" y="339.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="506.0" y="350.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.02%)</title><rect x="503.0" y="323.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="506.0" y="334.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.02%)</title><rect x="503.0" y="307.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="506.0" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="503.2" y="387.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="506.2" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.04%)</title><rect x="503.5" y="387.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="506.5" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="503.7" y="371.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="506.7" y="382.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="504.0" y="403.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="507.0" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="504.2" y="387.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="507.2" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="504.2" y="371.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="507.2" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.02%)</title><rect x="504.2" y="355.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="507.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (621 samples, 13.46%)</title><rect x="504.5" y="403.0" width="158.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.5" y="414.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (621 samples, 13.46%)</title><rect x="504.5" y="387.0" width="158.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.5" y="398.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (621 samples, 13.46%)</title><rect x="504.5" y="371.0" width="158.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="507.5" y="382.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.02%)</title><rect x="504.5" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="504.5" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="507.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.02%)</title><rect x="504.5" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="507.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="504.5" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.5" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="504.5" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="507.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="504.5" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="507.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.02%)</title><rect x="504.8" y="355.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="504.8" y="339.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (382 samples, 8.28%)</title><rect x="505.0" y="355.0" width="97.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.0" y="366.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (379 samples, 8.21%)</title><rect x="505.5" y="339.0" width="96.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="508.5" y="350.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (349 samples, 7.56%)</title><rect x="505.5" y="323.0" width="89.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.5" y="334.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.22%)</title><rect x="505.5" y="307.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.22%)</title><rect x="505.5" y="291.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="508.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.22%)</title><rect x="505.5" y="275.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="508.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.22%)</title><rect x="505.5" y="259.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.22%)</title><rect x="505.5" y="243.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.5" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (9 samples, 0.20%)</title><rect x="505.8" y="227.0" width="2.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="508.8" y="238.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.02%)</title><rect x="505.8" y="211.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="508.8" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="506.0" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="509.0" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.13%)</title><rect x="506.3" y="211.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="509.3" y="222.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.02%)</title><rect x="507.8" y="211.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="510.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (339 samples, 7.35%)</title><rect x="508.1" y="307.0" width="86.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="511.1" y="318.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (339 samples, 7.35%)</title><rect x="508.1" y="291.0" width="86.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.1" y="302.0">jdk/intern..</text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.02%)</title><rect x="510.6" y="275.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="513.6" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (328 samples, 7.11%)</title><rect x="510.9" y="275.0" width="83.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="513.9" y="286.0">Unsafe_Pa..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="511.1" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="514.1" y="270.0"></text>
</g>
<g>
<title>JavaThread::get_thread_stat() const (1 samples, 0.02%)</title><rect x="511.4" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="514.4" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="511.7" y="259.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="514.7" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.02%)</title><rect x="511.7" y="243.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="514.7" y="254.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="511.7" y="227.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="514.7" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="511.7" y="211.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="514.7" y="222.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.02%)</title><rect x="511.7" y="195.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="514.7" y="206.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="511.9" y="259.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="514.9" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="511.9" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="514.9" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="511.9" y="227.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="514.9" y="238.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="512.2" y="259.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="515.2" y="270.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.02%)</title><rect x="512.4" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="515.4" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (309 samples, 6.70%)</title><rect x="512.7" y="259.0" width="79.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="515.7" y="270.0">Parker::p..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.02%)</title><rect x="512.7" y="243.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="515.7" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="512.7" y="227.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="515.7" y="238.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="512.7" y="211.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="515.7" y="222.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.02%)</title><rect x="512.7" y="195.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="515.7" y="206.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="512.9" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="515.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (297 samples, 6.44%)</title><rect x="513.2" y="243.0" width="75.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="516.2" y="254.0">__psynch..</text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.15%)</title><rect x="589.1" y="243.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="592.1" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.04%)</title><rect x="590.4" y="227.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="593.4" y="238.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.04%)</title><rect x="590.9" y="243.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="593.9" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="591.4" y="243.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="594.4" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.02%)</title><rect x="591.7" y="259.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="594.7" y="270.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="591.9" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="594.9" y="270.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.02%)</title><rect x="592.2" y="259.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="595.2" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.09%)</title><rect x="592.5" y="259.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="595.5" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.09%)</title><rect x="592.5" y="243.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="595.5" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.07%)</title><rect x="592.7" y="227.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="595.7" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.07%)</title><rect x="592.7" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="595.7" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="592.7" y="195.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="595.7" y="206.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="593.0" y="179.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="596.0" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="593.2" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="596.2" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.02%)</title><rect x="593.5" y="259.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="596.5" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="593.5" y="243.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="596.5" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="593.5" y="227.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="596.5" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="593.5" y="211.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="596.5" y="222.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="593.5" y="195.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="596.5" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.02%)</title><rect x="593.7" y="259.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="596.7" y="270.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="594.0" y="259.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="597.0" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="594.2" y="259.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="597.2" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="594.5" y="259.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="597.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.15%)</title><rect x="594.8" y="323.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="597.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.15%)</title><rect x="594.8" y="307.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="597.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (7 samples, 0.15%)</title><rect x="594.8" y="291.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="597.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.09%)</title><rect x="595.0" y="275.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="598.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.04%)</title><rect x="595.0" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="598.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title><rect x="595.0" y="243.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="598.0" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.04%)</title><rect x="595.0" y="227.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="598.0" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.04%)</title><rect x="595.0" y="211.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="598.0" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="595.0" y="195.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="598.0" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title><rect x="595.5" y="259.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="598.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.04%)</title><rect x="596.0" y="275.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="599.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 0.50%)</title><rect x="596.5" y="323.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="599.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.50%)</title><rect x="596.5" y="307.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="599.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 0.50%)</title><rect x="596.5" y="291.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="599.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.50%)</title><rect x="596.5" y="275.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="599.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.50%)</title><rect x="596.5" y="259.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.5" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (21 samples, 0.46%)</title><rect x="597.1" y="243.0" width="5.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="600.1" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (19 samples, 0.41%)</title><rect x="597.1" y="227.0" width="4.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="600.1" y="238.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="601.9" y="227.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="604.9" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="602.2" y="227.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="605.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (1 samples, 0.02%)</title><rect x="602.4" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="605.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (237 samples, 5.14%)</title><rect x="602.7" y="355.0" width="60.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.7" y="366.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (237 samples, 5.14%)</title><rect x="602.7" y="339.0" width="60.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.7" y="350.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (176 samples, 3.81%)</title><rect x="602.7" y="323.0" width="45.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.7" y="334.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (172 samples, 3.73%)</title><rect x="602.9" y="307.0" width="44.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="605.9" y="318.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.17%)</title><rect x="602.9" y="291.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="605.9" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="603.2" y="275.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="606.2" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.13%)</title><rect x="603.5" y="275.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="606.5" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.02%)</title><rect x="603.5" y="259.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="606.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.02%)</title><rect x="603.5" y="243.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="606.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.07%)</title><rect x="603.7" y="259.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.7" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="604.5" y="259.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="607.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="604.5" y="243.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="607.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="604.7" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="607.7" y="238.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="604.7" y="211.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="607.7" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (164 samples, 3.55%)</title><rect x="605.0" y="291.0" width="41.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="608.0" y="302.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (164 samples, 3.55%)</title><rect x="605.0" y="275.0" width="41.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.0" y="286.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (163 samples, 3.53%)</title><rect x="605.2" y="259.0" width="41.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="608.2" y="270.0">one..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="605.2" y="243.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="608.2" y="254.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.02%)</title><rect x="605.2" y="227.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="608.2" y="238.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="605.5" y="227.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="608.5" y="238.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (161 samples, 3.49%)</title><rect x="605.8" y="243.0" width="41.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="608.8" y="254.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.15%)</title><rect x="605.8" y="227.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="608.8" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.15%)</title><rect x="605.8" y="211.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="608.8" y="222.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="605.8" y="195.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="608.8" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="606.0" y="195.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.0" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="606.3" y="179.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="606.5" y="163.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="609.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="606.5" y="147.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.5" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="606.5" y="131.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="609.5" y="142.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="607.0" y="195.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="610.0" y="206.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.02%)</title><rect x="607.0" y="179.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="610.0" y="190.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="607.3" y="179.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="610.3" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="607.3" y="163.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="610.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (154 samples, 3.34%)</title><rect x="607.5" y="227.0" width="39.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="610.5" y="238.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (154 samples, 3.34%)</title><rect x="607.5" y="211.0" width="39.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="610.5" y="222.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (154 samples, 3.34%)</title><rect x="607.5" y="195.0" width="39.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.5" y="206.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (143 samples, 3.10%)</title><rect x="607.8" y="179.0" width="36.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="610.8" y="190.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (143 samples, 3.10%)</title><rect x="607.8" y="163.0" width="36.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="610.8" y="174.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (143 samples, 3.10%)</title><rect x="607.8" y="147.0" width="36.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.8" y="158.0">sun..</text>
</g>
<g>
<title>write (135 samples, 2.93%)</title><rect x="609.8" y="131.0" width="34.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="612.8" y="142.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (10 samples, 0.22%)</title><rect x="644.4" y="179.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="647.4" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.09%)</title><rect x="644.9" y="163.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.07%)</title><rect x="645.1" y="147.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="648.1" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="645.1" y="131.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="648.1" y="142.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.02%)</title><rect x="645.6" y="131.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="648.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.09%)</title><rect x="645.9" y="163.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.02%)</title><rect x="646.7" y="147.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="649.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.07%)</title><rect x="646.9" y="307.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.9" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="647.2" y="291.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="650.2" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="647.2" y="275.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="650.2" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="647.2" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="650.2" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="647.2" y="243.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.2" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.04%)</title><rect x="647.2" y="227.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="650.2" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="647.2" y="211.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="650.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (61 samples, 1.32%)</title><rect x="647.7" y="323.0" width="15.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="650.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (61 samples, 1.32%)</title><rect x="647.7" y="307.0" width="15.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="650.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (61 samples, 1.32%)</title><rect x="647.7" y="291.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="650.7" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (7 samples, 0.15%)</title><rect x="648.2" y="275.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="651.2" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (5 samples, 0.11%)</title><rect x="648.5" y="259.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="651.5" y="270.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.02%)</title><rect x="648.7" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="651.7" y="254.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.02%)</title><rect x="648.7" y="227.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="651.7" y="238.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (1 samples, 0.02%)</title><rect x="649.0" y="243.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="652.0" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.02%)</title><rect x="649.2" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="652.2" y="254.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.02%)</title><rect x="649.5" y="243.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="652.5" y="254.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="649.7" y="259.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="652.7" y="270.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.02%)</title><rect x="649.7" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="652.7" y="254.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="650.0" y="275.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="653.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="650.2" y="275.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="653.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (49 samples, 1.06%)</title><rect x="650.8" y="275.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="653.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="650.8" y="259.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="653.8" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/510464020.invoke (1 samples, 0.02%)</title><rect x="650.8" y="243.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.8" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="650.8" y="227.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (1 samples, 0.02%)</title><rect x="650.8" y="211.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (6 samples, 0.13%)</title><rect x="651.0" y="259.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.0" y="270.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.02%)</title><rect x="651.3" y="243.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.3" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (4 samples, 0.09%)</title><rect x="651.5" y="243.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="654.5" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.09%)</title><rect x="651.5" y="227.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="654.5" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.07%)</title><rect x="651.5" y="211.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.5" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (1 samples, 0.02%)</title><rect x="651.8" y="195.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="654.8" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="652.0" y="195.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="655.0" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.02%)</title><rect x="652.3" y="211.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="655.3" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="652.3" y="195.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="655.3" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (40 samples, 0.87%)</title><rect x="652.5" y="259.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.5" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (40 samples, 0.87%)</title><rect x="652.5" y="243.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="655.5" y="254.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (39 samples, 0.85%)</title><rect x="652.8" y="227.0" width="10.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="655.8" y="238.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="653.1" y="211.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="656.1" y="222.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.02%)</title><rect x="653.3" y="211.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="656.3" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="653.6" y="211.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="656.6" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (35 samples, 0.76%)</title><rect x="653.8" y="211.0" width="9.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="656.8" y="222.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="654.3" y="195.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="657.3" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="654.6" y="195.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="657.6" y="206.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.02%)</title><rect x="654.8" y="195.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="657.8" y="206.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="654.8" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="657.8" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="655.1" y="195.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="658.1" y="206.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.02%)</title><rect x="655.6" y="195.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="658.6" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.11%)</title><rect x="655.9" y="195.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="658.9" y="206.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.11%)</title><rect x="655.9" y="179.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="658.9" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.11%)</title><rect x="655.9" y="163.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="658.9" y="174.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="656.4" y="147.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="659.4" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="656.6" y="147.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="659.6" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="656.9" y="131.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="659.9" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="656.9" y="115.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="659.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (19 samples, 0.41%)</title><rect x="657.1" y="195.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="660.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.02%)</title><rect x="657.1" y="179.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="660.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (18 samples, 0.39%)</title><rect x="657.4" y="179.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="660.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (18 samples, 0.39%)</title><rect x="657.4" y="163.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="660.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.02%)</title><rect x="657.4" y="147.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="660.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.02%)</title><rect x="657.7" y="147.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="660.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (16 samples, 0.35%)</title><rect x="657.9" y="147.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="660.9" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="658.2" y="131.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="661.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.02%)</title><rect x="658.7" y="131.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="661.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (5 samples, 0.11%)</title><rect x="658.9" y="131.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="661.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.04%)</title><rect x="659.4" y="115.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="662.4" y="126.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="659.4" y="99.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="662.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.02%)</title><rect x="660.0" y="115.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="663.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.02%)</title><rect x="660.0" y="99.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="663.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.02%)</title><rect x="660.2" y="131.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="663.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.02%)</title><rect x="660.2" y="115.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="663.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="660.5" y="131.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="660.7" y="131.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (4 samples, 0.09%)</title><rect x="661.0" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="664.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.02%)</title><rect x="661.2" y="115.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="664.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="661.5" y="115.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="664.5" y="126.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="661.5" y="99.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="664.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (1 samples, 0.02%)</title><rect x="661.7" y="115.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="664.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.04%)</title><rect x="662.0" y="195.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="665.0" y="206.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.02%)</title><rect x="662.5" y="195.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="665.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.04%)</title><rect x="662.8" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.04%)</title><rect x="662.8" y="243.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="665.8" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.02%)</title><rect x="663.0" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="666.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="663.0" y="211.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="663.0" y="195.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.0" y="206.0"></text>
</g>
<g>
<title>[worker tid=35075] (583 samples, 12.63%)</title><rect x="663.3" y="419.0" width="149.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="666.3" y="430.0">[worker tid=35075]</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (2 samples, 0.04%)</title><rect x="663.3" y="403.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="666.3" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="663.8" y="403.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="666.8" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="663.8" y="387.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="666.8" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="663.8" y="371.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="666.8" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="663.8" y="355.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="666.8" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="663.8" y="339.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="666.8" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="663.8" y="323.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="666.8" y="334.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="663.8" y="307.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="666.8" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.02%)</title><rect x="663.8" y="291.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="666.8" y="302.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.02%)</title><rect x="663.8" y="275.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="666.8" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="664.0" y="403.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="667.0" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="664.3" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="667.3" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="664.3" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="667.3" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="664.3" y="371.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="667.3" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="664.3" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="667.3" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="664.3" y="339.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="667.3" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="664.3" y="323.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="667.3" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="664.3" y="307.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="667.3" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="664.3" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="667.3" y="302.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.02%)</title><rect x="664.3" y="275.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="667.3" y="286.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="664.3" y="259.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="667.3" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (16 samples, 0.35%)</title><rect x="664.6" y="403.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="667.6" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (16 samples, 0.35%)</title><rect x="664.6" y="387.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="667.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.07%)</title><rect x="664.6" y="371.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="667.6" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="664.6" y="355.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="667.6" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="664.6" y="339.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="667.6" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="664.8" y="355.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="667.8" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="664.8" y="339.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="667.8" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="665.3" y="371.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="668.3" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (11 samples, 0.24%)</title><rect x="665.8" y="371.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="668.8" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (7 samples, 0.15%)</title><rect x="666.9" y="355.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="669.9" y="366.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.09%)</title><rect x="668.7" y="403.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="671.7" y="414.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.07%)</title><rect x="669.7" y="403.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="672.7" y="414.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.02%)</title><rect x="669.7" y="387.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="672.7" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.02%)</title><rect x="669.9" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="672.9" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="670.2" y="387.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="673.2" y="398.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.02%)</title><rect x="670.4" y="403.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="673.4" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.run (554 samples, 12.00%)</title><rect x="670.7" y="403.0" width="141.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.7" y="414.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (554 samples, 12.00%)</title><rect x="670.7" y="387.0" width="141.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.7" y="398.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (554 samples, 12.00%)</title><rect x="670.7" y="371.0" width="141.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="673.7" y="382.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.02%)</title><rect x="670.7" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="670.7" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.02%)</title><rect x="670.7" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="673.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="670.7" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="673.7" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="670.7" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="673.7" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="670.7" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="673.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.02%)</title><rect x="671.0" y="355.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="674.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="671.0" y="339.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (306 samples, 6.63%)</title><rect x="671.2" y="355.0" width="78.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="674.2" y="366.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (305 samples, 6.61%)</title><rect x="671.5" y="339.0" width="77.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="674.5" y="350.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (271 samples, 5.87%)</title><rect x="671.5" y="323.0" width="69.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="674.5" y="334.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.02%)</title><rect x="671.5" y="307.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.02%)</title><rect x="671.5" y="291.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="674.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (1 samples, 0.02%)</title><rect x="671.5" y="275.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.07%)</title><rect x="671.7" y="307.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="671.7" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="674.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="671.7" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="674.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="671.7" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.7" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.02%)</title><rect x="671.7" y="243.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="674.7" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="671.7" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="674.7" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="671.7" y="211.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="674.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.02%)</title><rect x="672.0" y="291.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="675.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="672.2" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="672.2" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="675.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="672.2" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="675.2" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="672.2" y="243.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="675.2" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="672.2" y="227.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.2" y="238.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="672.2" y="211.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="675.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.20%)</title><rect x="672.5" y="307.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.20%)</title><rect x="672.5" y="291.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.20%)</title><rect x="672.5" y="275.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="675.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.20%)</title><rect x="672.5" y="259.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.20%)</title><rect x="672.5" y="243.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.5" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.17%)</title><rect x="672.5" y="227.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="675.5" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.02%)</title><rect x="672.5" y="211.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="675.5" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.15%)</title><rect x="672.7" y="211.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="675.7" y="222.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="674.5" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="677.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.02%)</title><rect x="674.8" y="307.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="677.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (257 samples, 5.57%)</title><rect x="675.0" y="307.0" width="65.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="678.0" y="318.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (257 samples, 5.57%)</title><rect x="675.0" y="291.0" width="65.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="678.0" y="302.0">jdk/int..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="678.1" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="681.1" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (244 samples, 5.29%)</title><rect x="678.4" y="275.0" width="62.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="681.4" y="286.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="678.4" y="259.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="681.4" y="270.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.02%)</title><rect x="678.6" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="681.6" y="270.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="678.9" y="259.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="681.9" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="679.1" y="259.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="682.1" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.02%)</title><rect x="679.4" y="243.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="682.4" y="254.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="679.4" y="227.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="682.4" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="679.4" y="211.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="682.4" y="222.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title><rect x="679.4" y="195.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="682.4" y="206.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="679.6" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="682.6" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="679.6" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="682.6" y="254.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.02%)</title><rect x="679.9" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="682.9" y="270.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.02%)</title><rect x="679.9" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="682.9" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (228 samples, 4.94%)</title><rect x="680.2" y="259.0" width="58.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="683.2" y="270.0">Parker..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.02%)</title><rect x="680.4" y="243.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="683.4" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="680.4" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="683.4" y="238.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="680.4" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="683.4" y="222.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.02%)</title><rect x="680.4" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="683.4" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (221 samples, 4.79%)</title><rect x="680.7" y="243.0" width="56.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="683.7" y="254.0">__psyn..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.07%)</title><rect x="737.2" y="243.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="740.2" y="254.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.04%)</title><rect x="737.9" y="243.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="740.9" y="254.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.02%)</title><rect x="738.5" y="259.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="741.5" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="738.7" y="259.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="741.7" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="739.0" y="243.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="742.0" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.07%)</title><rect x="739.2" y="259.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="742.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="739.2" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="742.2" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="739.5" y="243.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="742.5" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="739.5" y="227.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="742.5" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="739.5" y="211.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.5" y="222.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="739.5" y="195.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="742.5" y="206.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="739.7" y="195.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.7" y="206.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="740.0" y="259.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="743.0" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="740.2" y="259.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="743.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 0.26%)</title><rect x="740.8" y="323.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.26%)</title><rect x="740.8" y="307.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="743.8" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="740.8" y="291.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="743.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (11 samples, 0.24%)</title><rect x="741.0" y="291.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="744.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.02%)</title><rect x="741.3" y="275.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="744.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.20%)</title><rect x="741.5" y="275.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="744.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.20%)</title><rect x="741.5" y="259.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="744.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.02%)</title><rect x="741.5" y="243.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="744.5" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.17%)</title><rect x="741.8" y="243.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.8" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.17%)</title><rect x="741.8" y="227.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="744.8" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.17%)</title><rect x="741.8" y="211.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="744.8" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.17%)</title><rect x="741.8" y="195.0" width="2.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="744.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 0.48%)</title><rect x="743.8" y="323.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="746.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 0.48%)</title><rect x="743.8" y="307.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 0.48%)</title><rect x="743.8" y="291.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="746.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 0.48%)</title><rect x="743.8" y="275.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="746.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (22 samples, 0.48%)</title><rect x="743.8" y="259.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="746.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="744.1" y="243.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="747.1" y="254.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.02%)</title><rect x="744.3" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="747.3" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.41%)</title><rect x="744.6" y="243.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="747.6" y="254.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.02%)</title><rect x="744.8" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="747.8" y="238.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.02%)</title><rect x="745.1" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="748.1" y="238.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="745.1" y="211.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="748.1" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.35%)</title><rect x="745.4" y="227.0" width="4.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="748.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (246 samples, 5.33%)</title><rect x="749.4" y="355.0" width="62.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="752.4" y="366.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (245 samples, 5.31%)</title><rect x="749.7" y="339.0" width="62.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.7" y="350.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (175 samples, 3.79%)</title><rect x="749.7" y="323.0" width="44.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.7" y="334.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (170 samples, 3.68%)</title><rect x="750.2" y="307.0" width="43.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="753.2" y="318.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.09%)</title><rect x="750.2" y="291.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.2" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title><rect x="750.7" y="275.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="753.7" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.04%)</title><rect x="750.7" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.7" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (166 samples, 3.60%)</title><rect x="751.2" y="291.0" width="42.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="754.2" y="302.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (166 samples, 3.60%)</title><rect x="751.2" y="275.0" width="42.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="754.2" y="286.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (166 samples, 3.60%)</title><rect x="751.2" y="259.0" width="42.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="754.2" y="270.0">one/..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.02%)</title><rect x="751.2" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="754.2" y="254.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.02%)</title><rect x="751.5" y="243.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="754.5" y="254.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.02%)</title><rect x="751.8" y="243.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="754.8" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.11%)</title><rect x="752.0" y="243.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="755.0" y="254.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.02%)</title><rect x="752.0" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="755.0" y="238.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.02%)</title><rect x="752.3" y="227.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="755.3" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.04%)</title><rect x="752.5" y="227.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="755.5" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.02%)</title><rect x="752.8" y="211.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="755.8" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="753.0" y="227.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="756.0" y="238.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (158 samples, 3.42%)</title><rect x="753.3" y="243.0" width="40.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.3" y="254.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.17%)</title><rect x="753.3" y="227.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="756.3" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.17%)</title><rect x="753.3" y="211.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="756.3" y="222.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="753.3" y="195.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="756.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="754.1" y="195.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="757.1" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="754.3" y="179.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="757.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="754.6" y="163.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="757.6" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="754.8" y="195.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="757.8" y="206.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.02%)</title><rect x="754.8" y="179.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="757.8" y="190.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="755.1" y="179.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="758.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (150 samples, 3.25%)</title><rect x="755.3" y="227.0" width="38.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.3" y="238.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="755.3" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="755.3" y="195.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="755.3" y="179.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="755.3" y="163.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="755.3" y="147.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="755.3" y="131.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.3" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="755.3" y="115.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="758.3" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.02%)</title><rect x="755.3" y="99.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.3" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="755.6" y="179.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="758.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="755.6" y="163.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="755.6" y="147.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="758.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (148 samples, 3.21%)</title><rect x="755.8" y="211.0" width="37.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.8" y="222.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (148 samples, 3.21%)</title><rect x="755.8" y="195.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="758.8" y="206.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (144 samples, 3.12%)</title><rect x="756.1" y="179.0" width="36.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="759.1" y="190.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (144 samples, 3.12%)</title><rect x="756.1" y="163.0" width="36.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="759.1" y="174.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (144 samples, 3.12%)</title><rect x="756.1" y="147.0" width="36.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="759.1" y="158.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.07%)</title><rect x="757.9" y="131.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="760.9" y="142.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="758.4" y="115.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="761.4" y="126.0"></text>
</g>
<g>
<title>write (134 samples, 2.90%)</title><rect x="758.7" y="131.0" width="34.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="761.7" y="142.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.07%)</title><rect x="792.9" y="179.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="795.9" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.02%)</title><rect x="792.9" y="163.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="795.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.02%)</title><rect x="792.9" y="147.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.9" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="792.9" y="131.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="795.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.04%)</title><rect x="793.2" y="163.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.2" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.02%)</title><rect x="793.4" y="147.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.4" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="793.7" y="307.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="796.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="793.9" y="291.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="796.9" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="793.9" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="793.9" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="796.9" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="793.9" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.9" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="793.9" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.9" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="793.9" y="211.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="796.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.02%)</title><rect x="794.2" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="797.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (70 samples, 1.52%)</title><rect x="794.5" y="323.0" width="17.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (70 samples, 1.52%)</title><rect x="794.5" y="307.0" width="17.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="797.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (70 samples, 1.52%)</title><rect x="794.5" y="291.0" width="17.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="797.5" y="302.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="795.2" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="798.2" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (9 samples, 0.20%)</title><rect x="795.5" y="275.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="798.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.09%)</title><rect x="795.5" y="259.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="798.5" y="270.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.07%)</title><rect x="795.7" y="243.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="798.7" y="254.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.07%)</title><rect x="795.7" y="227.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="798.7" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.07%)</title><rect x="795.7" y="211.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="798.7" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (4 samples, 0.09%)</title><rect x="796.5" y="259.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="799.5" y="270.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="796.5" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="799.5" y="254.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.02%)</title><rect x="796.8" y="243.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="799.8" y="254.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.02%)</title><rect x="796.8" y="227.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="799.8" y="238.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (1 samples, 0.02%)</title><rect x="797.0" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="800.0" y="254.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack() (1 samples, 0.02%)</title><rect x="797.3" y="243.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="800.3" y="254.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="797.5" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="800.5" y="270.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.02%)</title><rect x="797.5" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="800.5" y="254.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="797.8" y="275.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="800.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.02%)</title><rect x="798.0" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="801.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (55 samples, 1.19%)</title><rect x="798.3" y="275.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="801.3" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="798.3" y="259.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="801.3" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/510464020.invoke (1 samples, 0.02%)</title><rect x="798.3" y="243.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.3" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="798.3" y="227.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="801.3" y="238.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (1 samples, 0.02%)</title><rect x="798.3" y="211.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (5 samples, 0.11%)</title><rect x="798.5" y="259.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="801.5" y="270.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (5 samples, 0.11%)</title><rect x="798.5" y="243.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.5" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.11%)</title><rect x="798.5" y="227.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.5" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.04%)</title><rect x="798.5" y="211.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.5" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="798.8" y="195.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="801.8" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.02%)</title><rect x="799.1" y="211.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.1" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="799.1" y="195.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="802.1" y="206.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.04%)</title><rect x="799.3" y="211.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="802.3" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="799.6" y="195.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="802.6" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (43 samples, 0.93%)</title><rect x="799.8" y="259.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="802.8" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (43 samples, 0.93%)</title><rect x="799.8" y="243.0" width="11.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="802.8" y="254.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (42 samples, 0.91%)</title><rect x="800.1" y="227.0" width="10.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="803.1" y="238.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.02%)</title><rect x="800.1" y="211.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="803.1" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.02%)</title><rect x="800.3" y="211.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="803.3" y="222.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.02%)</title><rect x="800.6" y="211.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="803.6" y="222.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.07%)</title><rect x="800.8" y="211.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="803.8" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (36 samples, 0.78%)</title><rect x="801.6" y="211.0" width="9.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="804.6" y="222.0"></text>
</g>
<g>
<title>free (3 samples, 0.07%)</title><rect x="801.9" y="195.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="804.9" y="206.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.07%)</title><rect x="801.9" y="179.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="804.9" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.07%)</title><rect x="802.6" y="195.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="805.6" y="206.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="802.6" y="179.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="805.6" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="802.9" y="179.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="805.9" y="190.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="802.9" y="163.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="805.9" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="802.9" y="147.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="805.9" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="802.9" y="131.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="805.9" y="142.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="802.9" y="115.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="805.9" y="126.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title><rect x="802.9" y="99.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="805.9" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="803.1" y="99.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="806.1" y="110.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="803.1" y="83.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="806.1" y="94.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.13%)</title><rect x="803.4" y="195.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="806.4" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.07%)</title><rect x="803.9" y="179.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.9" y="190.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="804.2" y="163.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="807.2" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="804.4" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="807.4" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="804.4" y="131.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="807.4" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="804.7" y="179.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="807.7" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.11%)</title><rect x="804.9" y="195.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="807.9" y="206.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.11%)</title><rect x="804.9" y="179.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="807.9" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.11%)</title><rect x="804.9" y="163.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="807.9" y="174.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="805.2" y="147.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="808.2" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="805.4" y="147.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="808.4" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="805.7" y="131.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="808.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (18 samples, 0.39%)</title><rect x="806.2" y="195.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="809.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.02%)</title><rect x="806.2" y="179.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="809.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (17 samples, 0.37%)</title><rect x="806.5" y="179.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="809.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (17 samples, 0.37%)</title><rect x="806.5" y="163.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="809.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (15 samples, 0.33%)</title><rect x="806.5" y="147.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="809.5" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="807.5" y="131.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="810.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.07%)</title><rect x="808.0" y="131.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="811.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.07%)</title><rect x="808.0" y="115.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="811.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="808.8" y="131.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="811.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (3 samples, 0.07%)</title><rect x="809.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="812.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="809.5" y="115.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="812.5" y="126.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="809.8" y="131.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="812.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="810.3" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="813.3" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="810.6" y="147.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="813.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (6 samples, 0.13%)</title><rect x="810.8" y="259.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="813.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (5 samples, 0.11%)</title><rect x="811.1" y="243.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="814.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.07%)</title><rect x="811.1" y="227.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.07%)</title><rect x="811.1" y="211.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.1" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.04%)</title><rect x="811.8" y="227.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.8" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="811.8" y="211.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="814.8" y="222.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.02%)</title><rect x="811.8" y="195.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.8" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="812.1" y="211.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="812.1" y="195.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.1" y="206.0"></text>
</g>
<g>
<title>[worker tid=35843] (702 samples, 15.21%)</title><rect x="812.3" y="419.0" width="179.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="815.3" y="430.0">[worker tid=35843]</text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="812.3" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="815.3" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (23 samples, 0.50%)</title><rect x="812.6" y="403.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="815.6" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.02%)</title><rect x="812.9" y="387.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="815.9" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (20 samples, 0.43%)</title><rect x="813.1" y="387.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="816.1" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.07%)</title><rect x="813.1" y="371.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="816.1" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="813.1" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="816.1" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="813.4" y="355.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="816.4" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="813.4" y="339.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="816.4" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="813.9" y="371.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="816.9" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (15 samples, 0.33%)</title><rect x="814.4" y="371.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="817.4" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (6 samples, 0.13%)</title><rect x="816.7" y="355.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="819.7" y="366.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="818.2" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="821.2" y="398.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.02%)</title><rect x="818.2" y="371.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="821.2" y="382.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.07%)</title><rect x="818.5" y="403.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="821.5" y="414.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.02%)</title><rect x="819.3" y="403.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="822.3" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="819.3" y="387.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="822.3" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="819.3" y="371.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="822.3" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="819.3" y="355.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="822.3" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.11%)</title><rect x="819.5" y="403.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="822.5" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (5 samples, 0.11%)</title><rect x="819.5" y="387.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="822.5" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.11%)</title><rect x="819.5" y="371.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="822.5" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (4 samples, 0.09%)</title><rect x="819.5" y="355.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="822.5" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="820.5" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="823.5" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title><rect x="820.5" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="823.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.run (669 samples, 14.50%)</title><rect x="820.8" y="403.0" width="171.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="823.8" y="414.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (669 samples, 14.50%)</title><rect x="820.8" y="387.0" width="171.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="823.8" y="398.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (669 samples, 14.50%)</title><rect x="820.8" y="371.0" width="171.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="823.8" y="382.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (370 samples, 8.02%)</title><rect x="820.8" y="355.0" width="94.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="823.8" y="366.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (369 samples, 8.00%)</title><rect x="821.0" y="339.0" width="94.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.0" y="350.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (321 samples, 6.96%)</title><rect x="821.3" y="323.0" width="82.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="824.3" y="334.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.04%)</title><rect x="821.3" y="307.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="821.8" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="824.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="821.8" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="824.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="821.8" y="275.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="824.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="821.8" y="259.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="824.8" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.02%)</title><rect x="821.8" y="243.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="824.8" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="821.8" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="824.8" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="821.8" y="211.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="824.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.20%)</title><rect x="822.1" y="307.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.20%)</title><rect x="822.1" y="291.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="825.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.20%)</title><rect x="822.1" y="275.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="825.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.20%)</title><rect x="822.1" y="259.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.20%)</title><rect x="822.1" y="243.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="825.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.17%)</title><rect x="822.1" y="227.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="825.1" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="822.1" y="211.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="825.1" y="222.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.02%)</title><rect x="822.1" y="195.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="825.1" y="206.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="822.1" y="179.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="825.1" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="822.1" y="163.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="825.1" y="174.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="822.1" y="147.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="825.1" y="158.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="822.1" y="131.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="825.1" y="142.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="822.1" y="115.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="825.1" y="126.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.02%)</title><rect x="822.1" y="99.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="825.1" y="110.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.02%)</title><rect x="822.3" y="211.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="825.3" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::ThreadStateTransition(JavaThread*) (1 samples, 0.02%)</title><rect x="822.6" y="211.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="825.6" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.11%)</title><rect x="822.8" y="211.0" width="1.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="825.8" y="222.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="824.1" y="227.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="827.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (309 samples, 6.70%)</title><rect x="824.4" y="307.0" width="79.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="827.4" y="318.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (309 samples, 6.70%)</title><rect x="824.4" y="291.0" width="79.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="827.4" y="302.0">jdk/inter..</text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.02%)</title><rect x="826.7" y="275.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="829.7" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (299 samples, 6.48%)</title><rect x="826.9" y="275.0" width="76.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="829.9" y="286.0">Unsafe_P..</text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.02%)</title><rect x="827.2" y="259.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="830.2" y="270.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="827.4" y="259.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="830.4" y="270.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.04%)</title><rect x="827.4" y="243.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="830.4" y="254.0"></text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (1 samples, 0.02%)</title><rect x="827.9" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="830.9" y="270.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.02%)</title><rect x="828.2" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="831.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="828.5" y="259.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="831.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="828.7" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="831.7" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.02%)</title><rect x="828.7" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="831.7" y="254.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="828.7" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="831.7" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="828.7" y="211.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="831.7" y="222.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.02%)</title><rect x="828.7" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="831.7" y="206.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="829.0" y="259.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="832.0" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="829.0" y="243.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="832.0" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="829.0" y="227.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="832.0" y="238.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.02%)</title><rect x="829.2" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.2" y="254.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.02%)</title><rect x="829.5" y="259.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="832.5" y="270.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.02%)</title><rect x="829.7" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="832.7" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (281 samples, 6.09%)</title><rect x="830.0" y="259.0" width="71.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="833.0" y="270.0">Parker::..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.02%)</title><rect x="830.2" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="833.2" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="830.2" y="227.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="833.2" y="238.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="830.5" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="833.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (271 samples, 5.87%)</title><rect x="830.8" y="243.0" width="69.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="833.8" y="254.0">__psync..</text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.13%)</title><rect x="900.0" y="243.0" width="1.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="903.0" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.04%)</title><rect x="901.1" y="227.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="904.1" y="238.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.02%)</title><rect x="901.6" y="243.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="904.6" y="254.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="901.8" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="904.8" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.07%)</title><rect x="902.1" y="259.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="905.1" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="902.1" y="243.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="905.1" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="902.1" y="227.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.1" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="902.1" y="211.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="905.1" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="902.1" y="195.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="905.1" y="206.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="902.1" y="179.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="905.1" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="902.4" y="179.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="905.4" y="190.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="902.4" y="163.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="905.4" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="902.6" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="905.6" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.02%)</title><rect x="902.9" y="259.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="905.9" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="902.9" y="243.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="905.9" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="902.9" y="227.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="905.9" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="902.9" y="211.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="905.9" y="222.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="902.9" y="195.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="905.9" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.02%)</title><rect x="903.1" y="259.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="906.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (16 samples, 0.35%)</title><rect x="903.4" y="323.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="906.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (16 samples, 0.35%)</title><rect x="903.4" y="307.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="906.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (15 samples, 0.33%)</title><rect x="903.4" y="291.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="906.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (10 samples, 0.22%)</title><rect x="903.6" y="275.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="906.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.15%)</title><rect x="904.1" y="259.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="907.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.15%)</title><rect x="904.1" y="243.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="907.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.15%)</title><rect x="904.1" y="227.0" width="1.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="907.1" y="238.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="904.1" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="907.1" y="222.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="904.1" y="195.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="907.1" y="206.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.02%)</title><rect x="904.1" y="179.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="907.1" y="190.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.02%)</title><rect x="904.1" y="163.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="907.1" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.13%)</title><rect x="904.4" y="211.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="907.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.13%)</title><rect x="904.4" y="195.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="907.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="905.9" y="259.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="908.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.07%)</title><rect x="906.2" y="275.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="909.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.07%)</title><rect x="906.2" y="259.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="909.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.07%)</title><rect x="906.2" y="243.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.02%)</title><rect x="907.0" y="275.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="910.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="907.2" y="291.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="910.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="907.2" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="910.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="907.2" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="910.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (31 samples, 0.67%)</title><rect x="907.5" y="323.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="910.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (31 samples, 0.67%)</title><rect x="907.5" y="307.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="910.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (31 samples, 0.67%)</title><rect x="907.5" y="291.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="910.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (31 samples, 0.67%)</title><rect x="907.5" y="275.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="910.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (31 samples, 0.67%)</title><rect x="907.5" y="259.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="910.5" y="270.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="907.5" y="243.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="910.5" y="254.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.02%)</title><rect x="907.7" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="910.7" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (29 samples, 0.63%)</title><rect x="908.0" y="243.0" width="7.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="911.0" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="908.0" y="227.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="911.0" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="908.2" y="227.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.2" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.02%)</title><rect x="908.5" y="227.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="911.5" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (25 samples, 0.54%)</title><rect x="908.7" y="227.0" width="6.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="911.7" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="915.1" y="227.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (299 samples, 6.48%)</title><rect x="915.4" y="355.0" width="76.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="918.4" y="366.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (298 samples, 6.46%)</title><rect x="915.6" y="339.0" width="76.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="918.6" y="350.0">ru/mail/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (210 samples, 4.55%)</title><rect x="915.6" y="323.0" width="53.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="918.6" y="334.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (204 samples, 4.42%)</title><rect x="916.2" y="307.0" width="52.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="919.2" y="318.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.11%)</title><rect x="916.2" y="291.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="919.2" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.11%)</title><rect x="916.2" y="275.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="919.2" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.07%)</title><rect x="916.2" y="259.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="919.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="916.4" y="243.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="919.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="916.7" y="227.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="919.7" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="916.9" y="259.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="919.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="916.9" y="243.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="919.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="917.2" y="227.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="917.2" y="211.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.2" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (199 samples, 4.31%)</title><rect x="917.4" y="291.0" width="50.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="920.4" y="302.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (199 samples, 4.31%)</title><rect x="917.4" y="275.0" width="50.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.4" y="286.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (198 samples, 4.29%)</title><rect x="917.7" y="259.0" width="50.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.7" y="270.0">one/n..</text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (2 samples, 0.04%)</title><rect x="917.7" y="243.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="920.7" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.02%)</title><rect x="918.2" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.2" y="254.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.02%)</title><rect x="918.5" y="243.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.5" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="918.7" y="243.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.7" y="254.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.04%)</title><rect x="918.7" y="227.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.7" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (2 samples, 0.04%)</title><rect x="918.7" y="211.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.7" y="222.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (192 samples, 4.16%)</title><rect x="919.2" y="243.0" width="49.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.2" y="254.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.13%)</title><rect x="919.2" y="227.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="922.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="919.2" y="211.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="922.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="919.2" y="195.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="919.2" y="179.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="919.2" y="163.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="919.2" y="147.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="922.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.02%)</title><rect x="919.5" y="131.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="922.5" y="142.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.09%)</title><rect x="919.7" y="195.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="922.7" y="206.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.04%)</title><rect x="919.7" y="179.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="922.7" y="190.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="920.2" y="179.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="923.2" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="920.2" y="163.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="923.2" y="174.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="920.5" y="147.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="923.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (186 samples, 4.03%)</title><rect x="920.8" y="227.0" width="47.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="923.8" y="238.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="920.8" y="211.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="920.8" y="195.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="920.8" y="179.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="920.8" y="163.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="920.8" y="147.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="923.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="920.8" y="131.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="923.8" y="142.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (2 samples, 0.04%)</title><rect x="920.8" y="115.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="923.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (184 samples, 3.99%)</title><rect x="921.3" y="211.0" width="47.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="924.3" y="222.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (183 samples, 3.97%)</title><rect x="921.5" y="195.0" width="46.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="924.5" y="206.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (182 samples, 3.94%)</title><rect x="921.5" y="179.0" width="46.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="924.5" y="190.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (182 samples, 3.94%)</title><rect x="921.5" y="163.0" width="46.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="924.5" y="174.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (182 samples, 3.94%)</title><rect x="921.5" y="147.0" width="46.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="924.5" y="158.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.11%)</title><rect x="923.8" y="131.0" width="1.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="926.8" y="142.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="925.1" y="131.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="928.1" y="142.0"></text>
</g>
<g>
<title>write (167 samples, 3.62%)</title><rect x="925.4" y="131.0" width="42.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="928.4" y="142.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.02%)</title><rect x="968.1" y="179.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="971.1" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.02%)</title><rect x="968.1" y="163.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="971.1" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.02%)</title><rect x="968.1" y="147.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="971.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.07%)</title><rect x="968.3" y="307.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.02%)</title><rect x="969.1" y="307.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="972.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (88 samples, 1.91%)</title><rect x="969.3" y="323.0" width="22.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="972.3" y="334.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (88 samples, 1.91%)</title><rect x="969.3" y="307.0" width="22.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="972.3" y="318.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (88 samples, 1.91%)</title><rect x="969.3" y="291.0" width="22.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="972.3" y="302.0">r..</text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="969.9" y="275.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.9" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (6 samples, 0.13%)</title><rect x="970.1" y="275.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.1" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (6 samples, 0.13%)</title><rect x="970.1" y="259.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.1" y="270.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="970.6" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.6" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.02%)</title><rect x="970.6" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.6" y="238.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (2 samples, 0.04%)</title><rect x="970.9" y="243.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.9" y="254.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (1 samples, 0.02%)</title><rect x="971.4" y="243.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="974.4" y="254.0"></text>
</g>
<g>
<title>_rethrow_Java (1 samples, 0.02%)</title><rect x="971.6" y="275.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="974.6" y="286.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="971.9" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.07%)</title><rect x="972.2" y="275.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="975.2" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.02%)</title><rect x="972.4" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="975.4" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.02%)</title><rect x="972.7" y="259.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="975.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (74 samples, 1.60%)</title><rect x="972.9" y="275.0" width="18.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="975.9" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.04%)</title><rect x="972.9" y="259.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="975.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/510464020.invoke (2 samples, 0.04%)</title><rect x="972.9" y="243.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="975.9" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="972.9" y="227.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="975.9" y="238.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (1 samples, 0.02%)</title><rect x="973.2" y="211.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="976.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (13 samples, 0.28%)</title><rect x="973.4" y="259.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="976.4" y="270.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.02%)</title><rect x="973.7" y="243.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="976.7" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (4 samples, 0.09%)</title><rect x="973.9" y="243.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="976.9" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.09%)</title><rect x="973.9" y="227.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="976.9" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.04%)</title><rect x="973.9" y="211.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="976.9" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="973.9" y="195.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="976.9" y="206.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.02%)</title><rect x="974.5" y="211.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="977.5" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="974.5" y="195.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="977.5" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="974.7" y="211.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="977.7" y="222.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (6 samples, 0.13%)</title><rect x="975.0" y="243.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="978.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.13%)</title><rect x="975.0" y="227.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="978.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.11%)</title><rect x="975.0" y="211.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="978.0" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="975.2" y="195.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="978.2" y="206.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="975.7" y="195.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="978.7" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1 samples, 0.02%)</title><rect x="976.0" y="195.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="979.0" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="976.2" y="211.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="979.2" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="976.5" y="243.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.5" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (56 samples, 1.21%)</title><rect x="976.8" y="259.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="979.8" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (56 samples, 1.21%)</title><rect x="976.8" y="243.0" width="14.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="979.8" y="254.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (53 samples, 1.15%)</title><rect x="977.3" y="227.0" width="13.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="980.3" y="238.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="977.8" y="211.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="980.8" y="222.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.02%)</title><rect x="978.0" y="211.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.0" y="222.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="978.3" y="211.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="981.3" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.02%)</title><rect x="978.5" y="211.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="981.5" y="222.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.04%)</title><rect x="978.8" y="211.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="981.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.07%)</title><rect x="979.3" y="211.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.3" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (42 samples, 0.91%)</title><rect x="980.1" y="211.0" width="10.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.1" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="980.8" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="983.8" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="981.1" y="195.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="984.1" y="206.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="981.4" y="195.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="984.4" y="206.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="981.4" y="179.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="984.4" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="981.9" y="195.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="984.9" y="206.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="981.9" y="179.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="984.9" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="982.1" y="179.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.1" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="982.1" y="163.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.1" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.13%)</title><rect x="982.4" y="195.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="985.4" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.07%)</title><rect x="983.1" y="179.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="986.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (26 samples, 0.56%)</title><rect x="983.9" y="195.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (25 samples, 0.54%)</title><rect x="984.2" y="179.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (25 samples, 0.54%)</title><rect x="984.2" y="163.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (22 samples, 0.48%)</title><rect x="984.4" y="147.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.4" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="985.4" y="131.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="988.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (4 samples, 0.09%)</title><rect x="986.0" y="131.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.02%)</title><rect x="986.7" y="115.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.7" y="126.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="986.7" y="99.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="989.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.02%)</title><rect x="987.0" y="131.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="990.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (7 samples, 0.15%)</title><rect x="987.2" y="131.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="988.5" y="115.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.5" y="126.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="988.5" y="99.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="991.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (1 samples, 0.02%)</title><rect x="988.8" y="115.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="991.8" y="126.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.09%)</title><rect x="989.0" y="131.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (1 samples, 0.02%)</title><rect x="990.1" y="147.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.1" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="990.3" y="147.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="993.3" y="158.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.02%)</title><rect x="990.6" y="195.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.6" y="206.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1 samples, 0.02%)</title><rect x="990.8" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.04%)</title><rect x="991.1" y="259.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="994.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.04%)</title><rect x="991.1" y="243.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="994.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="991.1" y="227.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="994.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="991.1" y="211.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="994.1" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="991.1" y="195.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="994.1" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.02%)</title><rect x="991.3" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="994.3" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="991.3" y="211.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="994.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="991.3" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="994.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/NoSuchElementLite.&lt;init&gt; (1 samples, 0.02%)</title><rect x="991.6" y="259.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="994.6" y="270.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.02%)</title><rect x="991.6" y="243.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="994.6" y="254.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 0.02%)</title><rect x="991.6" y="227.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="994.6" y="238.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.02%)</title><rect x="991.6" y="211.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="994.6" y="222.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.02%)</title><rect x="991.6" y="195.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="994.6" y="206.0"></text>
</g>
<g>
<title>[worker tid=36611] (775 samples, 16.79%)</title><rect x="991.8" y="419.0" width="198.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="994.8" y="430.0">[worker tid=36611]</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (1 samples, 0.02%)</title><rect x="991.8" y="403.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="994.8" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (16 samples, 0.35%)</title><rect x="992.1" y="403.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="995.1" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (16 samples, 0.35%)</title><rect x="992.1" y="387.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.1" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="992.1" y="371.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.1" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="992.1" y="355.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="995.1" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="992.1" y="339.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="995.1" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.07%)</title><rect x="992.6" y="371.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="995.6" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.22%)</title><rect x="993.4" y="371.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.4" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (5 samples, 0.11%)</title><rect x="994.7" y="355.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="997.7" y="366.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="995.9" y="371.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="998.9" y="382.0"></text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.13%)</title><rect x="996.2" y="403.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="999.2" y="414.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.02%)</title><rect x="996.2" y="387.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="999.2" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.02%)</title><rect x="996.4" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="999.4" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="996.7" y="387.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="999.7" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.07%)</title><rect x="997.0" y="387.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1000.0" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="997.0" y="371.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.0" y="382.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.04%)</title><rect x="997.2" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.2" y="382.0"></text>
</g>
<g>
<title>[unknown_Java] (10 samples, 0.22%)</title><rect x="997.7" y="403.0" width="2.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1000.7" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (7 samples, 0.15%)</title><rect x="998.5" y="387.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.5" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (7 samples, 0.15%)</title><rect x="998.5" y="371.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.5" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (4 samples, 0.09%)</title><rect x="998.5" y="355.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1001.5" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.07%)</title><rect x="999.5" y="355.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1002.5" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.07%)</title><rect x="999.5" y="339.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.run (742 samples, 16.08%)</title><rect x="1000.3" y="403.0" width="189.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1003.3" y="414.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (742 samples, 16.08%)</title><rect x="1000.3" y="387.0" width="189.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1003.3" y="398.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (742 samples, 16.08%)</title><rect x="1000.3" y="371.0" width="189.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1003.3" y="382.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.02%)</title><rect x="1000.3" y="355.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1003.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="1000.3" y="339.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1003.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.02%)</title><rect x="1000.3" y="323.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1003.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="1000.3" y="307.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1003.3" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="1000.3" y="291.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1003.3" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="1000.3" y="275.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1003.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (414 samples, 8.97%)</title><rect x="1000.5" y="355.0" width="105.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1003.5" y="366.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (413 samples, 8.95%)</title><rect x="1000.8" y="339.0" width="105.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1003.8" y="350.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (352 samples, 7.63%)</title><rect x="1000.8" y="323.0" width="90.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1003.8" y="334.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="1000.8" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1003.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="1000.8" y="291.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1003.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="1000.8" y="275.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1003.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="1000.8" y="259.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1003.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="1001.0" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1004.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="1001.0" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1004.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="1001.0" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1004.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.20%)</title><rect x="1001.3" y="307.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1004.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.20%)</title><rect x="1001.3" y="291.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1004.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.20%)</title><rect x="1001.3" y="275.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1004.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.20%)</title><rect x="1001.3" y="259.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1004.3" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.20%)</title><rect x="1001.3" y="243.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1004.3" y="254.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.02%)</title><rect x="1001.3" y="227.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1004.3" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.17%)</title><rect x="1001.6" y="227.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1004.6" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="1001.6" y="211.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1004.6" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.02%)</title><rect x="1001.8" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1004.8" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="1001.8" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.8" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="1001.8" y="179.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1004.8" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="1001.8" y="163.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.8" y="174.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.02%)</title><rect x="1001.8" y="147.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1004.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.13%)</title><rect x="1002.1" y="211.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1005.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (341 samples, 7.39%)</title><rect x="1003.6" y="307.0" width="87.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1006.6" y="318.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (340 samples, 7.37%)</title><rect x="1003.9" y="291.0" width="86.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1006.9" y="302.0">jdk/intern..</text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.02%)</title><rect x="1005.1" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.1" y="286.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (2 samples, 0.04%)</title><rect x="1005.4" y="275.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1008.4" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (332 samples, 7.19%)</title><rect x="1005.9" y="275.0" width="84.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1008.9" y="286.0">Unsafe_Par..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="1005.9" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.9" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="1006.2" y="259.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.02%)</title><rect x="1006.4" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1009.4" y="270.0"></text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.04%)</title><rect x="1006.7" y="259.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.7" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="1007.2" y="259.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1010.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.02%)</title><rect x="1007.2" y="243.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.2" y="254.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title><rect x="1007.2" y="227.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1010.2" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.02%)</title><rect x="1007.2" y="211.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.2" y="222.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="1007.2" y="195.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.2" y="206.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.07%)</title><rect x="1007.4" y="259.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.4" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="1007.7" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.7" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="1007.7" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1010.7" y="238.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.02%)</title><rect x="1008.0" y="243.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1011.0" y="254.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.02%)</title><rect x="1008.0" y="227.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.0" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (322 samples, 6.98%)</title><rect x="1008.2" y="259.0" width="82.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1011.2" y="270.0">Parker::p..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="1009.0" y="243.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.0" y="254.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.11%)</title><rect x="1009.2" y="243.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1012.2" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1009.7" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.7" y="238.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="1009.7" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1012.7" y="222.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.02%)</title><rect x="1009.7" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.7" y="206.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1010.0" y="227.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1013.0" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (312 samples, 6.76%)</title><rect x="1010.5" y="243.0" width="79.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1013.5" y="254.0">__psynch_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="1090.3" y="243.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1093.3" y="254.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.02%)</title><rect x="1090.5" y="259.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1093.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 0.26%)</title><rect x="1090.8" y="323.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1093.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.26%)</title><rect x="1090.8" y="307.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1093.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (10 samples, 0.22%)</title><rect x="1091.3" y="291.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1094.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.13%)</title><rect x="1091.8" y="275.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1094.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.11%)</title><rect x="1091.8" y="259.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1094.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.11%)</title><rect x="1091.8" y="243.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1094.8" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.11%)</title><rect x="1091.8" y="227.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1094.8" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.11%)</title><rect x="1091.8" y="211.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.8" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.11%)</title><rect x="1091.8" y="195.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1094.8" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="1093.1" y="259.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1096.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="1093.3" y="275.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1096.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="1093.3" y="259.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1096.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="1093.3" y="243.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1096.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (49 samples, 1.06%)</title><rect x="1093.9" y="323.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1096.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (49 samples, 1.06%)</title><rect x="1093.9" y="307.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1096.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (49 samples, 1.06%)</title><rect x="1093.9" y="291.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1096.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (49 samples, 1.06%)</title><rect x="1093.9" y="275.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1096.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (49 samples, 1.06%)</title><rect x="1093.9" y="259.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1096.9" y="270.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.02%)</title><rect x="1094.4" y="243.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.4" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.04%)</title><rect x="1094.6" y="243.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.6" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (43 samples, 0.93%)</title><rect x="1095.1" y="243.0" width="11.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1098.1" y="254.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.02%)</title><rect x="1095.1" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.1" y="238.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="1095.1" y="211.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1098.1" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="1095.4" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.4" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.02%)</title><rect x="1095.4" y="211.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.4" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.02%)</title><rect x="1095.7" y="227.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.7" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="1095.7" y="211.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.7" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="1095.7" y="195.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.7" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="1095.7" y="179.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.7" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title><rect x="1095.7" y="163.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.7" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="1095.9" y="227.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.9" y="238.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.02%)</title><rect x="1095.9" y="211.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.9" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="1096.2" y="227.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.2" y="238.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.02%)</title><rect x="1096.4" y="227.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1099.4" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (37 samples, 0.80%)</title><rect x="1096.7" y="227.0" width="9.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1099.7" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="1106.1" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (327 samples, 7.09%)</title><rect x="1106.4" y="355.0" width="83.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1109.4" y="366.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (327 samples, 7.09%)</title><rect x="1106.4" y="339.0" width="83.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1109.4" y="350.0">ru/mail/p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (227 samples, 4.92%)</title><rect x="1106.4" y="323.0" width="58.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1109.4" y="334.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (223 samples, 4.83%)</title><rect x="1106.6" y="307.0" width="57.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1109.6" y="318.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.26%)</title><rect x="1106.6" y="291.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1109.6" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.17%)</title><rect x="1107.7" y="275.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1110.7" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.07%)</title><rect x="1108.2" y="259.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1111.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="1108.7" y="243.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1111.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="1108.7" y="227.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1111.7" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.07%)</title><rect x="1108.9" y="259.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1111.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.07%)</title><rect x="1108.9" y="243.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1111.9" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (211 samples, 4.57%)</title><rect x="1109.7" y="291.0" width="54.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1112.7" y="302.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (211 samples, 4.57%)</title><rect x="1109.7" y="275.0" width="54.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1112.7" y="286.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (209 samples, 4.53%)</title><rect x="1110.2" y="259.0" width="53.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1113.2" y="270.0">one/n..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.02%)</title><rect x="1110.2" y="243.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.2" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.02%)</title><rect x="1110.5" y="243.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.5" y="254.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.02%)</title><rect x="1110.7" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.7" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="1111.0" y="243.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.0" y="254.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.02%)</title><rect x="1111.0" y="227.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.0" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.02%)</title><rect x="1111.0" y="211.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.0" y="222.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (205 samples, 4.44%)</title><rect x="1111.2" y="243.0" width="52.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1114.2" y="254.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.22%)</title><rect x="1111.2" y="227.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1114.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.22%)</title><rect x="1111.2" y="211.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1114.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.11%)</title><rect x="1111.2" y="195.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1114.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1112.0" y="179.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1115.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="1112.0" y="163.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1115.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="1112.0" y="147.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1115.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.02%)</title><rect x="1112.0" y="131.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1115.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1112.3" y="163.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1115.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1112.3" y="147.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1115.3" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="1112.3" y="131.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1115.3" y="142.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.11%)</title><rect x="1112.5" y="195.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.5" y="206.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="1112.5" y="179.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1115.5" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="1112.8" y="163.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1115.8" y="174.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="1113.3" y="179.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1116.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (195 samples, 4.23%)</title><rect x="1113.8" y="227.0" width="49.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1116.8" y="238.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.07%)</title><rect x="1113.8" y="211.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1116.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.07%)</title><rect x="1113.8" y="195.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1116.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.07%)</title><rect x="1113.8" y="179.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1116.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.07%)</title><rect x="1113.8" y="163.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1116.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.07%)</title><rect x="1113.8" y="147.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1116.8" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (192 samples, 4.16%)</title><rect x="1114.6" y="211.0" width="49.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1117.6" y="222.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (192 samples, 4.16%)</title><rect x="1114.6" y="195.0" width="49.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.6" y="206.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (188 samples, 4.07%)</title><rect x="1114.8" y="179.0" width="48.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1117.8" y="190.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (188 samples, 4.07%)</title><rect x="1114.8" y="163.0" width="48.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1117.8" y="174.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (188 samples, 4.07%)</title><rect x="1114.8" y="147.0" width="48.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1117.8" y="158.0">sun/..</text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.02%)</title><rect x="1117.4" y="131.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1120.4" y="142.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="1117.6" y="131.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1120.6" y="142.0"></text>
</g>
<g>
<title>write (175 samples, 3.79%)</title><rect x="1118.2" y="131.0" width="44.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1121.2" y="142.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.07%)</title><rect x="1162.9" y="179.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1165.9" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.07%)</title><rect x="1162.9" y="163.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1165.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.04%)</title><rect x="1163.2" y="147.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1166.2" y="158.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="1163.2" y="131.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1166.2" y="142.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.02%)</title><rect x="1163.4" y="131.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1166.4" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.07%)</title><rect x="1163.7" y="307.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1166.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (100 samples, 2.17%)</title><rect x="1164.4" y="323.0" width="25.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1167.4" y="334.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (100 samples, 2.17%)</title><rect x="1164.4" y="307.0" width="25.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1167.4" y="318.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (99 samples, 2.15%)</title><rect x="1164.7" y="291.0" width="25.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1167.7" y="302.0">r..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="1166.0" y="275.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.0" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (21 samples, 0.46%)</title><rect x="1166.2" y="275.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.2" y="286.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1166.2" y="259.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="270.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (1 samples, 0.02%)</title><rect x="1166.5" y="259.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.07%)</title><rect x="1166.7" y="259.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.7" y="270.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="1167.0" y="243.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.0" y="254.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.04%)</title><rect x="1167.0" y="227.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.0" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title><rect x="1167.2" y="211.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="222.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack() (1 samples, 0.02%)</title><rect x="1167.5" y="259.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack(unsigned char*) (1 samples, 0.02%)</title><rect x="1167.8" y="259.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.8" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (9 samples, 0.20%)</title><rect x="1168.0" y="259.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="270.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (2 samples, 0.04%)</title><rect x="1168.3" y="243.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="254.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.02%)</title><rect x="1168.5" y="227.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.5" y="238.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (3 samples, 0.07%)</title><rect x="1168.8" y="243.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.8" y="254.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (2 samples, 0.04%)</title><rect x="1169.5" y="243.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.5" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.02%)</title><rect x="1170.1" y="243.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.04%)</title><rect x="1170.3" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.07%)</title><rect x="1170.8" y="259.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.8" y="270.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.02%)</title><rect x="1171.3" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.07%)</title><rect x="1171.6" y="275.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.6" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.07%)</title><rect x="1171.6" y="259.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.07%)</title><rect x="1171.6" y="243.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1174.6" y="254.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (1 samples, 0.02%)</title><rect x="1172.4" y="275.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (68 samples, 1.47%)</title><rect x="1172.6" y="275.0" width="17.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1175.6" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.04%)</title><rect x="1173.9" y="259.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1176.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/510464020.invoke (2 samples, 0.04%)</title><rect x="1173.9" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1176.9" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="1174.1" y="227.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1177.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.02%)</title><rect x="1174.1" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1177.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1174.1" y="195.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1177.1" y="206.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1174.1" y="179.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1177.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (8 samples, 0.17%)</title><rect x="1174.4" y="259.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1177.4" y="270.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (7 samples, 0.15%)</title><rect x="1174.4" y="243.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1177.4" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.15%)</title><rect x="1174.4" y="227.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1177.4" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.07%)</title><rect x="1174.4" y="211.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1177.4" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (2 samples, 0.04%)</title><rect x="1174.7" y="195.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1177.7" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.02%)</title><rect x="1175.2" y="211.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1178.2" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="1175.2" y="195.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1178.2" y="206.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.02%)</title><rect x="1175.4" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1178.4" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1175.7" y="211.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1178.7" y="222.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.02%)</title><rect x="1176.2" y="243.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1179.2" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1176.2" y="227.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1179.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1176.2" y="211.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1179.2" y="222.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1 samples, 0.02%)</title><rect x="1176.2" y="195.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1179.2" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (48 samples, 1.04%)</title><rect x="1176.4" y="259.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1179.4" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (48 samples, 1.04%)</title><rect x="1176.4" y="243.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1179.4" y="254.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (46 samples, 1.00%)</title><rect x="1177.0" y="227.0" width="11.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1180.0" y="238.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="1177.5" y="211.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1180.5" y="222.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.02%)</title><rect x="1177.7" y="211.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1180.7" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="1178.0" y="211.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1181.0" y="222.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.04%)</title><rect x="1178.5" y="211.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1181.5" y="222.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.04%)</title><rect x="1179.0" y="211.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1182.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.07%)</title><rect x="1179.5" y="211.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (33 samples, 0.72%)</title><rect x="1180.3" y="211.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="1180.3" y="195.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="1180.5" y="195.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="206.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="1180.8" y="195.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1183.8" y="206.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="1181.1" y="195.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1184.1" y="206.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="1181.6" y="195.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1184.6" y="206.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.04%)</title><rect x="1181.6" y="179.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="1182.1" y="195.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1185.1" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1182.1" y="179.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1185.1" y="190.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.02%)</title><rect x="1182.3" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.04%)</title><rect x="1182.6" y="195.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1185.6" y="206.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1182.6" y="179.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1185.6" y="190.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="1182.6" y="163.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1185.6" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.02%)</title><rect x="1182.8" y="163.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1185.8" y="174.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="1182.8" y="147.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1185.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (22 samples, 0.48%)</title><rect x="1183.1" y="195.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (22 samples, 0.48%)</title><rect x="1183.1" y="179.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (22 samples, 0.48%)</title><rect x="1183.1" y="163.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="1183.1" y="147.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1186.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.02%)</title><rect x="1183.4" y="147.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (15 samples, 0.33%)</title><rect x="1183.6" y="147.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.07%)</title><rect x="1184.4" y="131.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1187.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (5 samples, 0.11%)</title><rect x="1185.1" y="131.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.02%)</title><rect x="1185.4" y="115.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.02%)</title><rect x="1185.7" y="115.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.04%)</title><rect x="1185.9" y="115.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.02%)</title><rect x="1186.2" y="99.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="1186.4" y="131.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="1186.7" y="131.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="142.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1187.2" y="131.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.02%)</title><rect x="1187.4" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (2 samples, 0.04%)</title><rect x="1187.7" y="147.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.02%)</title><rect x="1188.2" y="147.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.2" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1188.5" y="147.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (4 samples, 0.09%)</title><rect x="1188.7" y="259.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1191.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (4 samples, 0.09%)</title><rect x="1188.7" y="243.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1191.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="1188.7" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1191.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="1188.7" y="211.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1191.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.07%)</title><rect x="1189.0" y="227.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1192.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="1189.0" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1192.0" y="222.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1189.0" y="195.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1192.0" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1189.5" y="211.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1192.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1189.5" y="195.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1192.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/NoSuchElementLite.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1189.7" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.7" y="270.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1189.7" y="243.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1192.7" y="254.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1189.7" y="227.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1192.7" y="238.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1189.7" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1192.7" y="222.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1189.7" y="195.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1192.7" y="206.0"></text>
</g>
</g>
</svg>
