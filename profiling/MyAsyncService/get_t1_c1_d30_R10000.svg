<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="629"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="629"> </text>
<g id="frames">
<g>
<title>all (2,044 samples, 100.00%)</title><rect x="10.0" y="595.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="606.0">all</text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (930 samples, 45.50%)</title><rect x="10.0" y="579.0" width="536.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="13.0" y="590.0">[NIO Selector #1 tid=25347]</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.05%)</title><rect x="10.0" y="563.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*, int) (1 samples, 0.05%)</title><rect x="10.0" y="547.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>Deoptimization::create_vframeArray(JavaThread*, frame, RegisterMap*, GrowableArray&lt;compiledVFrame*&gt;*, bool) (1 samples, 0.05%)</title><rect x="10.0" y="531.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>vframeArray::allocate(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap*, frame, frame, frame, bool) (1 samples, 0.05%)</title><rect x="10.0" y="515.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>vframeArray::fill_in(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap const*, bool) (1 samples, 0.05%)</title><rect x="10.0" y="499.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>vframeArrayElement::fill_in(compiledVFrame*, bool) (1 samples, 0.05%)</title><rect x="10.0" y="483.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>compiledVFrame::locals() const (1 samples, 0.05%)</title><rect x="10.0" y="467.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>GrowableArray&lt;ScopeValue*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="10.0" y="451.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.24%)</title><rect x="10.6" y="563.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.6" y="574.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.15%)</title><rect x="11.7" y="547.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.7" y="558.0"></text>
</g>
<g>
<title>_res (3 samples, 0.15%)</title><rect x="11.7" y="531.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="14.7" y="542.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (923 samples, 45.16%)</title><rect x="13.5" y="563.0" width="532.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.5" y="574.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.15%)</title><rect x="15.8" y="547.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.8" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.15%)</title><rect x="15.8" y="531.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.8" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.15%)</title><rect x="15.8" y="515.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.8" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.15%)</title><rect x="15.8" y="499.0" width="1.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="18.8" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (5 samples, 0.24%)</title><rect x="17.5" y="547.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.5" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (5 samples, 0.24%)</title><rect x="17.5" y="531.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (4 samples, 0.20%)</title><rect x="18.1" y="515.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (632 samples, 30.92%)</title><rect x="20.4" y="547.0" width="364.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.4" y="558.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="20.4" y="531.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="23.4" y="542.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="21.0" y="531.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="24.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7 samples, 0.34%)</title><rect x="21.5" y="531.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.15%)</title><rect x="22.7" y="515.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.15%)</title><rect x="22.7" y="499.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.10%)</title><rect x="24.4" y="515.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.10%)</title><rect x="24.4" y="499.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.05%)</title><rect x="24.4" y="483.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.05%)</title><rect x="25.0" y="483.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.0" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.05%)</title><rect x="25.6" y="531.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.05%)</title><rect x="25.6" y="515.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.6" y="526.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="26.2" y="531.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="29.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (621 samples, 30.38%)</title><rect x="26.7" y="531.0" width="358.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.7" y="542.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (621 samples, 30.38%)</title><rect x="26.7" y="515.0" width="358.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.7" y="526.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (619 samples, 30.28%)</title><rect x="27.9" y="499.0" width="357.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.9" y="510.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (583 samples, 28.52%)</title><rect x="30.8" y="483.0" width="336.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.8" y="494.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.05%)</title><rect x="44.1" y="467.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="47.1" y="478.0"></text>
</g>
<g>
<title>kevent (559 samples, 27.35%)</title><rect x="44.6" y="467.0" width="322.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="47.6" y="478.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.29%)</title><rect x="367.3" y="483.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="368.5" y="467.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="368.5" y="451.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="371.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.15%)</title><rect x="369.1" y="467.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="372.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.10%)</title><rect x="369.1" y="451.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.10%)</title><rect x="369.1" y="435.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.10%)</title><rect x="369.1" y="419.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="372.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.05%)</title><rect x="370.2" y="451.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (7 samples, 0.34%)</title><rect x="370.8" y="483.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="373.8" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.15%)</title><rect x="373.1" y="467.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="376.1" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (1 samples, 0.05%)</title><rect x="374.3" y="451.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (11 samples, 0.54%)</title><rect x="374.9" y="483.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.9" y="494.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (11 samples, 0.54%)</title><rect x="374.9" y="467.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.9" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (9 samples, 0.44%)</title><rect x="374.9" y="451.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="377.9" y="462.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (9 samples, 0.44%)</title><rect x="374.9" y="435.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.9" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (9 samples, 0.44%)</title><rect x="374.9" y="419.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.10%)</title><rect x="380.0" y="451.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="383.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.05%)</title><rect x="381.2" y="483.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="384.2" y="494.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.05%)</title><rect x="381.2" y="467.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="384.2" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="381.2" y="451.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.2" y="462.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="381.2" y="435.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="384.2" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="381.2" y="419.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="384.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (6 samples, 0.29%)</title><rect x="381.8" y="483.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="384.8" y="494.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.05%)</title><rect x="384.1" y="467.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.05%)</title><rect x="384.7" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.05%)</title><rect x="384.7" y="451.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="387.7" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (279 samples, 13.65%)</title><rect x="385.2" y="547.0" width="161.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.2" y="558.0">one/nio/net/Session.p..</text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="385.2" y="531.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="388.2" y="542.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.15%)</title><rect x="385.8" y="531.0" width="1.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="388.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (272 samples, 13.31%)</title><rect x="387.6" y="531.0" width="157.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.6" y="542.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (186 samples, 9.10%)</title><rect x="388.1" y="515.0" width="107.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="391.1" y="526.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (163 samples, 7.97%)</title><rect x="389.3" y="499.0" width="94.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.3" y="510.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (163 samples, 7.97%)</title><rect x="389.3" y="483.0" width="94.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="392.3" y="494.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.10%)</title><rect x="389.3" y="467.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.3" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.10%)</title><rect x="389.3" y="451.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="392.3" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.10%)</title><rect x="389.3" y="435.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.10%)</title><rect x="389.3" y="419.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.10%)</title><rect x="389.3" y="403.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="392.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.15%)</title><rect x="390.4" y="467.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.15%)</title><rect x="390.4" y="451.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.4" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.15%)</title><rect x="390.4" y="435.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="393.4" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.15%)</title><rect x="390.4" y="419.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="393.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.15%)</title><rect x="390.4" y="403.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.handleDefault (158 samples, 7.73%)</title><rect x="392.2" y="467.0" width="91.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.2" y="478.0">ru/mail/pol..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.05%)</title><rect x="392.7" y="451.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="392.7" y="435.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="395.7" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="392.7" y="419.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.7" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="392.7" y="403.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="395.7" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="392.7" y="387.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="395.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.entity (156 samples, 7.63%)</title><rect x="393.3" y="451.0" width="90.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.3" y="462.0">ru/mail/po..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.20%)</title><rect x="393.3" y="435.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="393.9" y="419.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="394.5" y="419.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.5" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="394.5" y="403.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.05%)</title><rect x="395.1" y="419.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="398.1" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="395.1" y="403.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="398.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="395.1" y="387.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="398.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.executeAsync (152 samples, 7.44%)</title><rect x="395.6" y="435.0" width="87.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="398.6" y="446.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (152 samples, 7.44%)</title><rect x="395.6" y="419.0" width="87.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="398.6" y="430.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (152 samples, 7.44%)</title><rect x="395.6" y="403.0" width="87.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="398.6" y="414.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (146 samples, 7.14%)</title><rect x="396.2" y="387.0" width="84.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="399.2" y="398.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.15%)</title><rect x="396.2" y="371.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.10%)</title><rect x="396.2" y="355.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="399.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (1 samples, 0.05%)</title><rect x="397.4" y="355.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (143 samples, 7.00%)</title><rect x="397.9" y="371.0" width="82.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.9" y="382.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (143 samples, 7.00%)</title><rect x="397.9" y="355.0" width="82.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.9" y="366.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (143 samples, 7.00%)</title><rect x="397.9" y="339.0" width="82.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.9" y="350.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (142 samples, 6.95%)</title><rect x="398.5" y="323.0" width="82.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.5" y="334.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (142 samples, 6.95%)</title><rect x="398.5" y="307.0" width="82.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="401.5" y="318.0">jdk/inter..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.05%)</title><rect x="399.1" y="291.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="402.1" y="302.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.10%)</title><rect x="399.7" y="291.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="402.7" y="302.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.05%)</title><rect x="400.8" y="291.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="403.8" y="302.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (2 samples, 0.10%)</title><rect x="401.4" y="291.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="404.4" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="402.6" y="291.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="405.6" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (131 samples, 6.41%)</title><rect x="403.1" y="291.0" width="75.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="406.1" y="302.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.15%)</title><rect x="403.1" y="275.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="406.1" y="286.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.10%)</title><rect x="403.7" y="259.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="406.7" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.05%)</title><rect x="404.9" y="275.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="407.9" y="286.0"></text>
</g>
<g>
<title>JavaThread::jni_environment_offset() (1 samples, 0.05%)</title><rect x="405.5" y="275.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="408.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.24%)</title><rect x="406.0" y="275.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="409.0" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (4 samples, 0.20%)</title><rect x="406.6" y="259.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="409.6" y="270.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.15%)</title><rect x="407.2" y="243.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="410.2" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (3 samples, 0.15%)</title><rect x="407.2" y="227.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="410.2" y="238.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (2 samples, 0.10%)</title><rect x="407.2" y="211.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="410.2" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="408.3" y="211.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="411.3" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="408.9" y="275.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="411.9" y="286.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.05%)</title><rect x="409.5" y="275.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="412.5" y="286.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (2 samples, 0.10%)</title><rect x="410.1" y="275.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="413.1" y="286.0"></text>
</g>
<g>
<title>Thread::current() (5 samples, 0.24%)</title><rect x="411.2" y="275.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="414.2" y="286.0"></text>
</g>
<g>
<title>Thread::current_or_null() (3 samples, 0.15%)</title><rect x="411.2" y="259.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="414.2" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.10%)</title><rect x="413.0" y="259.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="416.0" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.10%)</title><rect x="414.1" y="275.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="417.1" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.10%)</title><rect x="414.1" y="259.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="417.1" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.10%)</title><rect x="414.1" y="243.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="417.1" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="414.7" y="227.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="417.7" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="414.7" y="211.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="417.7" y="222.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.05%)</title><rect x="414.7" y="195.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="417.7" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.15%)</title><rect x="415.3" y="275.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="418.3" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="415.3" y="259.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="418.3" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="415.3" y="243.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="418.3" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="415.3" y="227.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="418.3" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="415.3" y="211.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="418.3" y="222.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="415.3" y="195.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="418.3" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="415.3" y="179.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="418.3" y="190.0"></text>
</g>
<g>
<title>SafepointMechanism::should_block(Thread*) (1 samples, 0.05%)</title><rect x="415.8" y="259.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="418.8" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.05%)</title><rect x="415.8" y="243.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="418.8" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="416.4" y="259.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="419.4" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.05%)</title><rect x="417.0" y="275.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="420.0" y="286.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.05%)</title><rect x="417.0" y="259.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="420.0" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.24%)</title><rect x="417.6" y="275.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="420.6" y="286.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::decode&lt;oopDesc*&gt;(AccessInternal::EncodedType&lt;1097844ull, oopDesc*&gt;::type) (1 samples, 0.05%)</title><rect x="419.3" y="259.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="422.3" y="270.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.05%)</title><rect x="419.9" y="259.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="422.9" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.05%)</title><rect x="420.5" y="275.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="423.5" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (90 samples, 4.40%)</title><rect x="421.0" y="275.0" width="52.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="424.0" y="286.0">__psy..</text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.05%)</title><rect x="473.0" y="275.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="476.0" y="286.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.10%)</title><rect x="473.6" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="476.6" y="286.0"></text>
</g>
<g>
<title>pthread_cond_signal (4 samples, 0.20%)</title><rect x="474.7" y="275.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="477.7" y="286.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.05%)</title><rect x="476.5" y="259.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="479.5" y="270.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np (1 samples, 0.05%)</title><rect x="477.0" y="275.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="480.0" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.10%)</title><rect x="477.6" y="275.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="480.6" y="286.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="478.8" y="291.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="481.8" y="302.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.05%)</title><rect x="479.3" y="291.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="482.3" y="302.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.05%)</title><rect x="479.9" y="291.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="482.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.24%)</title><rect x="480.5" y="387.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.20%)</title><rect x="481.1" y="371.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="484.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.05%)</title><rect x="481.7" y="355.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="484.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.10%)</title><rect x="482.2" y="355.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.24%)</title><rect x="483.4" y="499.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="486.4" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.10%)</title><rect x="484.0" y="483.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="487.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="484.5" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="487.5" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="484.5" y="451.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.5" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.10%)</title><rect x="485.1" y="483.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.1" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.10%)</title><rect x="485.1" y="467.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.1" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.54%)</title><rect x="486.3" y="499.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="489.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.54%)</title><rect x="486.3" y="483.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.3" y="494.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.05%)</title><rect x="486.3" y="467.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.3" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.49%)</title><rect x="486.8" y="467.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.8" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (7 samples, 0.34%)</title><rect x="488.0" y="451.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="491.0" y="462.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.29%)</title><rect x="488.6" y="435.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.6" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="490.9" y="419.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="493.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="491.5" y="419.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="494.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.05%)</title><rect x="492.0" y="451.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.0" y="462.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.05%)</title><rect x="492.6" y="499.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="495.6" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.20%)</title><rect x="493.2" y="499.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="496.2" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.20%)</title><rect x="493.2" y="483.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.2" y="494.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.10%)</title><rect x="494.4" y="467.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="497.4" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (85 samples, 4.16%)</title><rect x="495.5" y="515.0" width="49.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="498.5" y="526.0">one/n..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="495.5" y="499.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="498.5" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.05%)</title><rect x="495.5" y="483.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="498.5" y="494.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.05%)</title><rect x="495.5" y="467.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="498.5" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (83 samples, 4.06%)</title><rect x="496.1" y="499.0" width="47.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.1" y="510.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="496.1" y="483.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="499.1" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="496.1" y="467.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="496.1" y="451.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="499.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (82 samples, 4.01%)</title><rect x="496.7" y="483.0" width="47.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="499.7" y="494.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.44%)</title><rect x="496.7" y="467.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.44%)</title><rect x="496.7" y="451.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="499.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.10%)</title><rect x="497.8" y="435.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="500.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.05%)</title><rect x="497.8" y="419.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.8" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.05%)</title><rect x="497.8" y="403.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.8" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.05%)</title><rect x="497.8" y="387.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.05%)</title><rect x="498.4" y="419.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="501.4" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.05%)</title><rect x="498.4" y="403.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="501.4" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.05%)</title><rect x="498.4" y="387.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.24%)</title><rect x="499.0" y="435.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.24%)</title><rect x="499.0" y="419.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="502.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.15%)</title><rect x="499.0" y="403.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.10%)</title><rect x="500.7" y="403.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="503.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (73 samples, 3.57%)</title><rect x="501.9" y="467.0" width="42.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.9" y="478.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (73 samples, 3.57%)</title><rect x="501.9" y="451.0" width="42.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.9" y="462.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (73 samples, 3.57%)</title><rect x="501.9" y="435.0" width="42.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="504.9" y="446.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (73 samples, 3.57%)</title><rect x="501.9" y="419.0" width="42.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="504.9" y="430.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (73 samples, 3.57%)</title><rect x="501.9" y="403.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="504.9" y="414.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.15%)</title><rect x="508.2" y="387.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="511.2" y="398.0"></text>
</g>
<g>
<title>read (59 samples, 2.89%)</title><rect x="509.9" y="387.0" width="34.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="512.9" y="398.0">read</text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.05%)</title><rect x="544.0" y="499.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="547.0" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.15%)</title><rect x="544.6" y="531.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="547.6" y="542.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.10%)</title><rect x="544.6" y="515.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="547.6" y="526.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="545.2" y="499.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="548.2" y="510.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="545.7" y="515.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="548.7" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="546.3" y="563.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="549.3" y="574.0"></text>
</g>
<g>
<title>[tid=13315] (1 samples, 0.05%)</title><rect x="546.9" y="579.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="549.9" y="590.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="546.9" y="563.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="549.9" y="574.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="546.9" y="547.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="549.9" y="558.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="546.9" y="531.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="549.9" y="542.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="546.9" y="515.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="549.9" y="526.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="546.9" y="499.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="549.9" y="510.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.05%)</title><rect x="546.9" y="483.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="549.9" y="494.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.05%)</title><rect x="546.9" y="467.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="549.9" y="478.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.05%)</title><rect x="546.9" y="451.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="549.9" y="462.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="546.9" y="435.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="549.9" y="446.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="546.9" y="419.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="549.9" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="546.9" y="403.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="549.9" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="546.9" y="387.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="549.9" y="398.0"></text>
</g>
<g>
<title>[tid=13827] (1 samples, 0.05%)</title><rect x="547.5" y="579.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="550.5" y="590.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="547.5" y="563.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="550.5" y="574.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="547.5" y="547.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="550.5" y="558.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="547.5" y="531.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="550.5" y="542.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="547.5" y="515.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="550.5" y="526.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="547.5" y="499.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="550.5" y="510.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.05%)</title><rect x="547.5" y="483.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="550.5" y="494.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.05%)</title><rect x="547.5" y="467.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="550.5" y="478.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.05%)</title><rect x="547.5" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="550.5" y="462.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.05%)</title><rect x="547.5" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="550.5" y="446.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.05%)</title><rect x="547.5" y="419.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="550.5" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.05%)</title><rect x="547.5" y="403.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="550.5" y="414.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(CollectedHeap*, bool) (1 samples, 0.05%)</title><rect x="547.5" y="387.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="550.5" y="398.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.05%)</title><rect x="547.5" y="371.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="550.5" y="382.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool) (1 samples, 0.05%)</title><rect x="547.5" y="355.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="550.5" y="366.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.05%)</title><rect x="547.5" y="339.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="550.5" y="350.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.05%)</title><rect x="547.5" y="323.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="550.5" y="334.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.05%)</title><rect x="547.5" y="307.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="550.5" y="318.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.05%)</title><rect x="547.5" y="291.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="550.5" y="302.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.05%)</title><rect x="547.5" y="275.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="550.5" y="286.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.05%)</title><rect x="547.5" y="259.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="550.5" y="270.0"></text>
</g>
<g>
<title>[tid=22531] (1 samples, 0.05%)</title><rect x="548.0" y="579.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="551.0" y="590.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.05%)</title><rect x="548.0" y="563.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="551.0" y="574.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.05%)</title><rect x="548.0" y="547.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="551.0" y="558.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.05%)</title><rect x="548.0" y="531.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="551.0" y="542.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.05%)</title><rect x="548.0" y="515.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="551.0" y="526.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.05%)</title><rect x="548.0" y="499.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="551.0" y="510.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.05%)</title><rect x="548.0" y="483.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="551.0" y="494.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.05%)</title><rect x="548.0" y="467.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.0" y="478.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.05%)</title><rect x="548.0" y="451.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="551.0" y="462.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1 samples, 0.05%)</title><rect x="548.0" y="435.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="551.0" y="446.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.05%)</title><rect x="548.0" y="419.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="551.0" y="430.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.05%)</title><rect x="548.0" y="403.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="551.0" y="414.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.05%)</title><rect x="548.0" y="387.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="551.0" y="398.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.05%)</title><rect x="548.0" y="371.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="551.0" y="382.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.05%)</title><rect x="548.0" y="355.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="551.0" y="366.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.05%)</title><rect x="548.0" y="339.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="551.0" y="350.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.05%)</title><rect x="548.0" y="323.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="551.0" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.05%)</title><rect x="548.0" y="307.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="551.0" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="548.0" y="291.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="551.0" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="548.0" y="275.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="551.0" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="548.0" y="259.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.0" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="548.0" y="243.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="551.0" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="548.0" y="227.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="551.0" y="238.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="548.0" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="551.0" y="222.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="548.0" y="195.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="551.0" y="206.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="548.0" y="179.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="551.0" y="190.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="548.0" y="163.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="551.0" y="174.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.05%)</title><rect x="548.0" y="147.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="551.0" y="158.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.05%)</title><rect x="548.0" y="131.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="551.0" y="142.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.05%)</title><rect x="548.0" y="115.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="551.0" y="126.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*) (1 samples, 0.05%)</title><rect x="548.0" y="99.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="551.0" y="110.0"></text>
</g>
<g>
<title>[tid=22787] (2 samples, 0.10%)</title><rect x="548.6" y="579.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="551.6" y="590.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.10%)</title><rect x="548.6" y="563.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="551.6" y="574.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.10%)</title><rect x="548.6" y="547.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="551.6" y="558.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.10%)</title><rect x="548.6" y="531.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="551.6" y="542.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.10%)</title><rect x="548.6" y="515.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="551.6" y="526.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.10%)</title><rect x="548.6" y="499.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="551.6" y="510.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.10%)</title><rect x="548.6" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="551.6" y="494.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.10%)</title><rect x="548.6" y="467.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="551.6" y="478.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (2 samples, 0.10%)</title><rect x="548.6" y="451.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="551.6" y="462.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.10%)</title><rect x="548.6" y="435.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="551.6" y="446.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.10%)</title><rect x="548.6" y="419.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.6" y="430.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next() (1 samples, 0.05%)</title><rect x="548.6" y="403.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="551.6" y="414.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next_blob() (1 samples, 0.05%)</title><rect x="548.6" y="387.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="551.6" y="398.0"></text>
</g>
<g>
<title>CodeHeap::next(void*) const (1 samples, 0.05%)</title><rect x="548.6" y="371.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="551.6" y="382.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 0.05%)</title><rect x="549.2" y="403.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="552.2" y="414.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches(bool) (1 samples, 0.05%)</title><rect x="549.2" y="387.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="552.2" y="398.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool) (1 samples, 0.05%)</title><rect x="549.2" y="371.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="552.2" y="382.0"></text>
</g>
<g>
<title>clean_if_nmethod_is_unloaded(CompiledIC*, CompiledMethod*, bool) (1 samples, 0.05%)</title><rect x="549.2" y="355.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="552.2" y="366.0"></text>
</g>
<g>
<title>[tid=40451] (14 samples, 0.68%)</title><rect x="549.8" y="579.0" width="8.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="552.8" y="590.0"></text>
</g>
<g>
<title>thread_start (14 samples, 0.68%)</title><rect x="549.8" y="563.0" width="8.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="552.8" y="574.0"></text>
</g>
<g>
<title>_pthread_start (14 samples, 0.68%)</title><rect x="549.8" y="547.0" width="8.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="552.8" y="558.0"></text>
</g>
<g>
<title>_pthread_body (14 samples, 0.68%)</title><rect x="549.8" y="531.0" width="8.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="552.8" y="542.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (14 samples, 0.68%)</title><rect x="549.8" y="515.0" width="8.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="552.8" y="526.0"></text>
</g>
<g>
<title>Thread::call_run() (14 samples, 0.68%)</title><rect x="549.8" y="499.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="552.8" y="510.0"></text>
</g>
<g>
<title>WatcherThread::run() (14 samples, 0.68%)</title><rect x="549.8" y="483.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="552.8" y="494.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (14 samples, 0.68%)</title><rect x="549.8" y="467.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="552.8" y="478.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (14 samples, 0.68%)</title><rect x="549.8" y="451.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="552.8" y="462.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.05%)</title><rect x="549.8" y="435.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="552.8" y="446.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (13 samples, 0.64%)</title><rect x="550.4" y="435.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="553.4" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (13 samples, 0.64%)</title><rect x="550.4" y="419.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="553.4" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (13 samples, 0.64%)</title><rect x="550.4" y="403.0" width="7.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="553.4" y="414.0"></text>
</g>
<g>
<title>[tid=43267] (7 samples, 0.34%)</title><rect x="557.9" y="579.0" width="4.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="560.9" y="590.0"></text>
</g>
<g>
<title>thread_start (7 samples, 0.34%)</title><rect x="557.9" y="563.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="560.9" y="574.0"></text>
</g>
<g>
<title>_pthread_start (7 samples, 0.34%)</title><rect x="557.9" y="547.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="560.9" y="558.0"></text>
</g>
<g>
<title>_pthread_body (7 samples, 0.34%)</title><rect x="557.9" y="531.0" width="4.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="560.9" y="542.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (7 samples, 0.34%)</title><rect x="557.9" y="515.0" width="4.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="560.9" y="526.0"></text>
</g>
<g>
<title>Thread::call_run() (7 samples, 0.34%)</title><rect x="557.9" y="499.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="560.9" y="510.0"></text>
</g>
<g>
<title>JavaThread::run() (7 samples, 0.34%)</title><rect x="557.9" y="483.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="560.9" y="494.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (7 samples, 0.34%)</title><rect x="557.9" y="467.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="560.9" y="478.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (7 samples, 0.34%)</title><rect x="557.9" y="451.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="560.9" y="462.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (7 samples, 0.34%)</title><rect x="557.9" y="435.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="560.9" y="446.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (7 samples, 0.34%)</title><rect x="557.9" y="419.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="560.9" y="430.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (7 samples, 0.34%)</title><rect x="557.9" y="403.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="560.9" y="414.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (4 samples, 0.20%)</title><rect x="557.9" y="387.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="560.9" y="398.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.05%)</title><rect x="557.9" y="371.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="560.9" y="382.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.05%)</title><rect x="557.9" y="355.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="560.9" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.15%)</title><rect x="558.4" y="371.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="561.4" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.05%)</title><rect x="558.4" y="355.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="561.4" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.05%)</title><rect x="558.4" y="339.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="561.4" y="350.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.05%)</title><rect x="558.4" y="323.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="561.4" y="334.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.05%)</title><rect x="559.0" y="355.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="562.0" y="366.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.05%)</title><rect x="559.0" y="339.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="562.0" y="350.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.05%)</title><rect x="559.0" y="323.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="562.0" y="334.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.05%)</title><rect x="559.6" y="355.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="562.6" y="366.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="559.6" y="339.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="562.6" y="350.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.05%)</title><rect x="560.2" y="387.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="563.2" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.05%)</title><rect x="560.2" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="563.2" y="382.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.05%)</title><rect x="560.2" y="355.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="563.2" y="366.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="560.2" y="339.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="563.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.10%)</title><rect x="560.7" y="387.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="563.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.10%)</title><rect x="560.7" y="371.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="563.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="560.7" y="355.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="563.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="560.7" y="339.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="563.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="560.7" y="323.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="563.7" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="560.7" y="307.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="563.7" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="560.7" y="291.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="563.7" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="560.7" y="275.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="563.7" y="286.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="560.7" y="259.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="563.7" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="560.7" y="243.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="563.7" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="560.7" y="227.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="563.7" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="560.7" y="211.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="563.7" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="560.7" y="195.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="563.7" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="560.7" y="179.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="563.7" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="560.7" y="163.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="563.7" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="560.7" y="147.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="563.7" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="560.7" y="131.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="563.7" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="560.7" y="115.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="563.7" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="560.7" y="99.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="563.7" y="110.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="560.7" y="83.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="563.7" y="94.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="560.7" y="67.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="563.7" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.05%)</title><rect x="560.7" y="51.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="563.7" y="62.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.05%)</title><rect x="560.7" y="35.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="563.7" y="46.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.05%)</title><rect x="561.3" y="355.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="564.3" y="366.0"></text>
</g>
<g>
<title>Parse::Block::init_graph(Parse*) (1 samples, 0.05%)</title><rect x="561.3" y="339.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="564.3" y="350.0"></text>
</g>
<g>
<title>[worker tid=27139] (269 samples, 13.16%)</title><rect x="561.9" y="579.0" width="155.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="564.9" y="590.0">[worker tid=27139]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (16 samples, 0.78%)</title><rect x="561.9" y="563.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="564.9" y="574.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (14 samples, 0.68%)</title><rect x="561.9" y="547.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="564.9" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.10%)</title><rect x="562.5" y="531.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="565.5" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.05%)</title><rect x="562.5" y="515.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="565.5" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="563.1" y="515.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="566.1" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="563.1" y="499.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="566.1" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.10%)</title><rect x="563.6" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="566.6" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.34%)</title><rect x="564.8" y="531.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="567.8" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.15%)</title><rect x="567.1" y="515.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="570.1" y="526.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.05%)</title><rect x="568.8" y="531.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="571.8" y="542.0"></text>
</g>
<g>
<title>jfr_is_event_enabled(JfrEventId) (1 samples, 0.05%)</title><rect x="569.4" y="531.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="572.4" y="542.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.05%)</title><rect x="570.0" y="547.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="573.0" y="558.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (1 samples, 0.05%)</title><rect x="570.0" y="531.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="573.0" y="542.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (1 samples, 0.05%)</title><rect x="570.6" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="573.6" y="558.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.05%)</title><rect x="570.6" y="531.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="573.6" y="542.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.15%)</title><rect x="571.1" y="563.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="574.1" y="574.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.10%)</title><rect x="572.9" y="563.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="575.9" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.10%)</title><rect x="572.9" y="547.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="575.9" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="572.9" y="531.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="575.9" y="542.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.05%)</title><rect x="573.4" y="531.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="576.4" y="542.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.05%)</title><rect x="574.0" y="563.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="577.0" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="574.0" y="547.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="577.0" y="558.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.05%)</title><rect x="574.0" y="531.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="577.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (247 samples, 12.08%)</title><rect x="574.6" y="563.0" width="142.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="577.6" y="574.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (247 samples, 12.08%)</title><rect x="574.6" y="547.0" width="142.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.6" y="558.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (247 samples, 12.08%)</title><rect x="574.6" y="531.0" width="142.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="577.6" y="542.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (67 samples, 3.28%)</title><rect x="575.2" y="515.0" width="38.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.2" y="526.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (67 samples, 3.28%)</title><rect x="575.2" y="499.0" width="38.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="578.2" y="510.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (63 samples, 3.08%)</title><rect x="575.2" y="483.0" width="36.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="578.2" y="494.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (63 samples, 3.08%)</title><rect x="575.2" y="467.0" width="36.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.2" y="478.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (63 samples, 3.08%)</title><rect x="575.2" y="451.0" width="36.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="578.2" y="462.0">jdk..</text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.05%)</title><rect x="576.3" y="435.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="579.3" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.05%)</title><rect x="576.9" y="435.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.9" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (59 samples, 2.89%)</title><rect x="577.5" y="435.0" width="34.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="580.5" y="446.0">Un..</text>
</g>
<g>
<title>Parker::park(bool, long) (55 samples, 2.69%)</title><rect x="577.5" y="419.0" width="31.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="580.5" y="430.0">Pa..</text>
</g>
<g>
<title>__psynch_cvwait (51 samples, 2.50%)</title><rect x="578.1" y="403.0" width="29.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="581.1" y="414.0">__..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.10%)</title><rect x="607.5" y="403.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="610.5" y="414.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.05%)</title><rect x="608.1" y="387.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="611.1" y="398.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np (1 samples, 0.05%)</title><rect x="608.7" y="403.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="611.7" y="414.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.05%)</title><rect x="609.2" y="419.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="612.2" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.10%)</title><rect x="609.8" y="419.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="612.8" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="609.8" y="403.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="612.8" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.05%)</title><rect x="610.4" y="403.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="613.4" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.05%)</title><rect x="611.0" y="419.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="614.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.20%)</title><rect x="611.5" y="483.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="614.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.20%)</title><rect x="611.5" y="467.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="614.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.15%)</title><rect x="612.1" y="451.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="615.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.10%)</title><rect x="612.7" y="435.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="615.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.05%)</title><rect x="613.3" y="419.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="616.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.05%)</title><rect x="613.3" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="616.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (179 samples, 8.76%)</title><rect x="613.9" y="515.0" width="103.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.9" y="526.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (179 samples, 8.76%)</title><rect x="613.9" y="499.0" width="103.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="616.9" y="510.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (162 samples, 7.93%)</title><rect x="613.9" y="483.0" width="93.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="616.9" y="494.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (162 samples, 7.93%)</title><rect x="613.9" y="467.0" width="93.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="616.9" y="478.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/net/Session.write (162 samples, 7.93%)</title><rect x="613.9" y="451.0" width="93.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="616.9" y="462.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session.write (162 samples, 7.93%)</title><rect x="613.9" y="435.0" width="93.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="616.9" y="446.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (161 samples, 7.88%)</title><rect x="614.4" y="419.0" width="93.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.4" y="430.0">one/nio/net..</text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.05%)</title><rect x="614.4" y="403.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="617.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (160 samples, 7.83%)</title><rect x="615.0" y="403.0" width="92.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="618.0" y="414.0">one/nio/net..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.15%)</title><rect x="615.0" y="387.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="615.0" y="371.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.0" y="382.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="615.0" y="355.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="618.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="615.6" y="355.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="618.6" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="615.6" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="618.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="615.6" y="323.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="618.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="615.6" y="307.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.6" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="616.2" y="355.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="619.2" y="366.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="616.2" y="339.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="619.2" y="350.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="616.2" y="323.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="619.2" y="334.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="616.2" y="307.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="619.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (157 samples, 7.68%)</title><rect x="616.7" y="387.0" width="90.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.7" y="398.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (157 samples, 7.68%)</title><rect x="616.7" y="371.0" width="90.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="619.7" y="382.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (157 samples, 7.68%)</title><rect x="616.7" y="355.0" width="90.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="619.7" y="366.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (157 samples, 7.68%)</title><rect x="616.7" y="339.0" width="90.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="619.7" y="350.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (157 samples, 7.68%)</title><rect x="616.7" y="323.0" width="90.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="619.7" y="334.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (157 samples, 7.68%)</title><rect x="616.7" y="307.0" width="90.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="619.7" y="318.0">sun/nio/ch..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.05%)</title><rect x="617.3" y="291.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="620.3" y="302.0"></text>
</g>
<g>
<title>write (155 samples, 7.58%)</title><rect x="617.9" y="291.0" width="89.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="620.9" y="302.0">write</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (17 samples, 0.83%)</title><rect x="707.4" y="483.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="710.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (17 samples, 0.83%)</title><rect x="707.4" y="467.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="710.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (17 samples, 0.83%)</title><rect x="707.4" y="451.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.4" y="462.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.05%)</title><rect x="708.0" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="711.0" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (1 samples, 0.05%)</title><rect x="708.5" y="435.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="711.5" y="446.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack() (1 samples, 0.05%)</title><rect x="708.5" y="419.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="711.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.10%)</title><rect x="709.1" y="435.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (12 samples, 0.59%)</title><rect x="710.3" y="435.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="713.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (4 samples, 0.20%)</title><rect x="710.3" y="419.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="713.3" y="430.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (3 samples, 0.15%)</title><rect x="710.3" y="403.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="713.3" y="414.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.15%)</title><rect x="710.3" y="387.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="713.3" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.15%)</title><rect x="710.3" y="371.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="713.3" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.15%)</title><rect x="710.3" y="355.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="713.3" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.05%)</title><rect x="712.0" y="403.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="715.0" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="712.0" y="387.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="715.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="712.0" y="371.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="715.0" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="712.0" y="355.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="715.0" y="366.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (6 samples, 0.29%)</title><rect x="712.6" y="419.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="715.6" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (6 samples, 0.29%)</title><rect x="712.6" y="403.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="715.6" y="414.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (6 samples, 0.29%)</title><rect x="712.6" y="387.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="715.6" y="398.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (6 samples, 0.29%)</title><rect x="712.6" y="371.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="715.6" y="382.0"></text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="713.2" y="355.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="716.2" y="366.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.05%)</title><rect x="713.2" y="339.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="716.2" y="350.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.05%)</title><rect x="713.7" y="355.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="716.7" y="366.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="713.7" y="339.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="716.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.15%)</title><rect x="714.3" y="355.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="717.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.05%)</title><rect x="714.3" y="339.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="717.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.10%)</title><rect x="714.9" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="717.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2 samples, 0.10%)</title><rect x="714.9" y="323.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="717.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (1 samples, 0.05%)</title><rect x="714.9" y="307.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="717.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.05%)</title><rect x="714.9" y="291.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="717.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.05%)</title><rect x="714.9" y="275.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="717.9" y="286.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.05%)</title><rect x="715.5" y="307.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="718.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.10%)</title><rect x="716.0" y="419.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.10%)</title><rect x="716.0" y="403.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="719.0" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.10%)</title><rect x="716.0" y="387.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="719.0" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="716.0" y="371.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.0" y="382.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.05%)</title><rect x="716.0" y="355.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="716.6" y="371.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="716.6" y="355.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.6" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="716.6" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="719.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="716.6" y="323.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="719.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="716.6" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="716.6" y="291.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="719.6" y="302.0"></text>
</g>
<g>
<title>[worker tid=35075] (277 samples, 13.55%)</title><rect x="717.2" y="579.0" width="159.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="720.2" y="590.0">[worker tid=35075]</text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="717.2" y="563.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="720.2" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (18 samples, 0.88%)</title><rect x="717.8" y="563.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="720.8" y="574.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.05%)</title><rect x="717.8" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="720.8" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (16 samples, 0.78%)</title><rect x="718.3" y="547.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="721.3" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.15%)</title><rect x="718.3" y="531.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="721.3" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.05%)</title><rect x="718.3" y="515.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="721.3" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.10%)</title><rect x="718.9" y="515.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="721.9" y="526.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.05%)</title><rect x="718.9" y="499.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="721.9" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="719.5" y="499.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="722.5" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.15%)</title><rect x="720.1" y="531.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="723.1" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.49%)</title><rect x="721.8" y="531.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="724.8" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (5 samples, 0.24%)</title><rect x="724.7" y="515.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="727.7" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.05%)</title><rect x="727.6" y="547.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="730.6" y="558.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.05%)</title><rect x="727.6" y="531.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="730.6" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="728.2" y="563.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="731.2" y="574.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.05%)</title><rect x="728.7" y="563.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="731.7" y="574.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.10%)</title><rect x="729.3" y="563.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="732.3" y="574.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.05%)</title><rect x="729.3" y="547.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="732.3" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="729.9" y="547.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="732.9" y="558.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.15%)</title><rect x="730.5" y="563.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="733.5" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="731.6" y="547.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="734.6" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="731.6" y="531.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="734.6" y="542.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="731.6" y="515.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="734.6" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (251 samples, 12.28%)</title><rect x="732.2" y="563.0" width="144.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="735.2" y="574.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (251 samples, 12.28%)</title><rect x="732.2" y="547.0" width="144.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="735.2" y="558.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (251 samples, 12.28%)</title><rect x="732.2" y="531.0" width="144.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="735.2" y="542.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (75 samples, 3.67%)</title><rect x="732.2" y="515.0" width="43.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="735.2" y="526.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (74 samples, 3.62%)</title><rect x="732.2" y="499.0" width="42.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="735.2" y="510.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (71 samples, 3.47%)</title><rect x="732.2" y="483.0" width="41.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="735.2" y="494.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (71 samples, 3.47%)</title><rect x="732.2" y="467.0" width="41.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="735.2" y="478.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (71 samples, 3.47%)</title><rect x="732.2" y="451.0" width="41.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="735.2" y="462.0">jdk..</text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.05%)</title><rect x="732.8" y="435.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="735.8" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="733.4" y="435.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="736.4" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (68 samples, 3.33%)</title><rect x="733.9" y="435.0" width="39.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="736.9" y="446.0">Uns..</text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.10%)</title><rect x="733.9" y="419.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="736.9" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="735.1" y="419.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="738.1" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.05%)</title><rect x="735.1" y="403.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="738.1" y="414.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="735.7" y="419.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="738.7" y="430.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.05%)</title><rect x="735.7" y="403.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.7" y="414.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (62 samples, 3.03%)</title><rect x="736.2" y="419.0" width="35.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="739.2" y="430.0">Par..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.05%)</title><rect x="738.0" y="403.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="741.0" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (58 samples, 2.84%)</title><rect x="738.6" y="403.0" width="33.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="741.6" y="414.0">__..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.10%)</title><rect x="772.0" y="419.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="775.0" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="772.0" y="403.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="775.0" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="772.6" y="403.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="775.6" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="772.6" y="387.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="775.6" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="772.6" y="371.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="775.6" y="382.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="772.6" y="355.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="775.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.15%)</title><rect x="773.2" y="483.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.15%)</title><rect x="773.2" y="467.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.10%)</title><rect x="773.2" y="451.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.05%)</title><rect x="773.2" y="435.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="773.8" y="435.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="773.8" y="419.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.05%)</title><rect x="773.8" y="403.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="776.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="774.3" y="451.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="777.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="774.3" y="435.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="777.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (1 samples, 0.05%)</title><rect x="774.9" y="499.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="777.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (176 samples, 8.61%)</title><rect x="775.5" y="515.0" width="101.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="778.5" y="526.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (176 samples, 8.61%)</title><rect x="775.5" y="499.0" width="101.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="778.5" y="510.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (150 samples, 7.34%)</title><rect x="775.5" y="483.0" width="86.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.5" y="494.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (149 samples, 7.29%)</title><rect x="775.5" y="467.0" width="86.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.5" y="478.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="775.5" y="451.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="778.5" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="775.5" y="435.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="778.5" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.05%)</title><rect x="775.5" y="419.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="778.5" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.05%)</title><rect x="775.5" y="403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (148 samples, 7.24%)</title><rect x="776.1" y="451.0" width="85.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="779.1" y="462.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session.write (148 samples, 7.24%)</title><rect x="776.1" y="435.0" width="85.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.1" y="446.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (147 samples, 7.19%)</title><rect x="776.7" y="419.0" width="84.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="779.7" y="430.0">one/nio/ne..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="776.7" y="403.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="779.7" y="414.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.05%)</title><rect x="776.7" y="387.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (146 samples, 7.14%)</title><rect x="777.2" y="403.0" width="84.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.2" y="414.0">one/nio/ne..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.29%)</title><rect x="777.2" y="387.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.2" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.29%)</title><rect x="777.2" y="371.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="780.2" y="382.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.10%)</title><rect x="777.2" y="355.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="780.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="778.4" y="355.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="781.4" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="778.4" y="339.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="781.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.10%)</title><rect x="778.4" y="323.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="781.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.10%)</title><rect x="778.4" y="307.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="781.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.05%)</title><rect x="779.0" y="291.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="782.0" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.10%)</title><rect x="779.5" y="355.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="782.5" y="366.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.10%)</title><rect x="779.5" y="339.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="782.5" y="350.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.10%)</title><rect x="779.5" y="323.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="782.5" y="334.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="780.1" y="307.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="783.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (140 samples, 6.85%)</title><rect x="780.7" y="387.0" width="80.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.7" y="398.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (140 samples, 6.85%)</title><rect x="780.7" y="371.0" width="80.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="783.7" y="382.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (140 samples, 6.85%)</title><rect x="780.7" y="355.0" width="80.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.7" y="366.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (138 samples, 6.75%)</title><rect x="780.7" y="339.0" width="79.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.7" y="350.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (138 samples, 6.75%)</title><rect x="780.7" y="323.0" width="79.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.7" y="334.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (138 samples, 6.75%)</title><rect x="780.7" y="307.0" width="79.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.7" y="318.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.10%)</title><rect x="783.6" y="291.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="786.6" y="302.0"></text>
</g>
<g>
<title>write (131 samples, 6.41%)</title><rect x="784.7" y="291.0" width="75.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="787.7" y="302.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.10%)</title><rect x="860.4" y="339.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="863.4" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="860.4" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="863.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="860.9" y="323.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="863.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="861.5" y="467.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="864.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (26 samples, 1.27%)</title><rect x="862.1" y="483.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="865.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (26 samples, 1.27%)</title><rect x="862.1" y="467.0" width="15.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="865.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (26 samples, 1.27%)</title><rect x="862.1" y="451.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="865.1" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (3 samples, 0.15%)</title><rect x="862.7" y="435.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="865.7" y="446.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.05%)</title><rect x="862.7" y="419.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="865.7" y="430.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.05%)</title><rect x="862.7" y="403.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="865.7" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (1 samples, 0.05%)</title><rect x="863.2" y="419.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.2" y="430.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (1 samples, 0.05%)</title><rect x="863.2" y="403.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="866.2" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.05%)</title><rect x="863.8" y="419.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.8" y="430.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (1 samples, 0.05%)</title><rect x="864.4" y="435.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="865.0" y="435.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="868.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (20 samples, 0.98%)</title><rect x="865.6" y="435.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="868.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (4 samples, 0.20%)</title><rect x="866.1" y="419.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="869.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (3 samples, 0.15%)</title><rect x="866.1" y="403.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="869.1" y="414.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.15%)</title><rect x="866.1" y="387.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="869.1" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.15%)</title><rect x="866.1" y="371.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.1" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.10%)</title><rect x="866.7" y="355.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="869.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.05%)</title><rect x="867.9" y="403.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="870.9" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="867.9" y="387.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.9" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="867.9" y="371.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="870.9" y="382.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (13 samples, 0.64%)</title><rect x="868.4" y="419.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.4" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (13 samples, 0.64%)</title><rect x="868.4" y="403.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.4" y="414.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (12 samples, 0.59%)</title><rect x="869.0" y="387.0" width="6.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="872.0" y="398.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (12 samples, 0.59%)</title><rect x="869.0" y="371.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="872.0" y="382.0"></text>
</g>
<g>
<title>free (3 samples, 0.15%)</title><rect x="869.0" y="355.0" width="1.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="872.0" y="366.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.15%)</title><rect x="869.0" y="339.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="872.0" y="350.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.05%)</title><rect x="870.8" y="355.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="873.8" y="366.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.05%)</title><rect x="870.8" y="339.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="873.8" y="350.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.05%)</title><rect x="870.8" y="323.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="873.8" y="334.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="870.8" y="307.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="873.8" y="318.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="870.8" y="291.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="873.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.29%)</title><rect x="871.3" y="355.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.05%)</title><rect x="871.3" y="339.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="874.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (5 samples, 0.24%)</title><rect x="871.9" y="339.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="874.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (5 samples, 0.24%)</title><rect x="871.9" y="323.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="874.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (3 samples, 0.15%)</title><rect x="871.9" y="307.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="874.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.10%)</title><rect x="872.5" y="291.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="875.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.05%)</title><rect x="872.5" y="275.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="875.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.05%)</title><rect x="873.1" y="275.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="876.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.05%)</title><rect x="873.1" y="259.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.05%)</title><rect x="873.6" y="307.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.6" y="318.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.05%)</title><rect x="874.2" y="307.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.05%)</title><rect x="874.8" y="355.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.8" y="366.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.05%)</title><rect x="875.4" y="355.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="878.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.10%)</title><rect x="875.9" y="419.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="878.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.10%)</title><rect x="875.9" y="403.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="878.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.05%)</title><rect x="875.9" y="387.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="878.9" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.05%)</title><rect x="875.9" y="371.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="878.9" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="875.9" y="355.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="878.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="876.5" y="387.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="879.5" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="876.5" y="371.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="879.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="876.5" y="355.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="879.5" y="366.0"></text>
</g>
<g>
<title>[worker tid=35843] (248 samples, 12.13%)</title><rect x="877.1" y="579.0" width="143.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="880.1" y="590.0">[worker tid=35843]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.49%)</title><rect x="877.1" y="563.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="880.1" y="574.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.29%)</title><rect x="877.7" y="547.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.7" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.05%)</title><rect x="878.3" y="531.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="881.3" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="878.3" y="515.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="881.3" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="878.3" y="499.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="881.3" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.10%)</title><rect x="878.8" y="531.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="881.8" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.10%)</title><rect x="880.0" y="531.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="883.0" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.10%)</title><rect x="880.0" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="883.0" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.05%)</title><rect x="881.1" y="547.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="884.1" y="558.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.05%)</title><rect x="881.1" y="531.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="884.1" y="542.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (2 samples, 0.10%)</title><rect x="881.7" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="884.7" y="558.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.05%)</title><rect x="882.3" y="531.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="885.3" y="542.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.10%)</title><rect x="882.9" y="563.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="885.9" y="574.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.10%)</title><rect x="884.0" y="563.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="887.0" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="884.0" y="547.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="887.0" y="558.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.05%)</title><rect x="884.6" y="547.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.6" y="558.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.10%)</title><rect x="885.2" y="563.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="888.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (231 samples, 11.30%)</title><rect x="886.3" y="563.0" width="133.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="889.3" y="574.0">java/lang/Thread...</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (231 samples, 11.30%)</title><rect x="886.3" y="547.0" width="133.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="889.3" y="558.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (231 samples, 11.30%)</title><rect x="886.3" y="531.0" width="133.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="889.3" y="542.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.05%)</title><rect x="886.3" y="515.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="889.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="886.3" y="499.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="889.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.05%)</title><rect x="886.3" y="483.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="889.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.05%)</title><rect x="886.3" y="467.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="889.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (57 samples, 2.79%)</title><rect x="886.9" y="515.0" width="32.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="889.9" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (57 samples, 2.79%)</title><rect x="886.9" y="499.0" width="32.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="889.9" y="510.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (57 samples, 2.79%)</title><rect x="886.9" y="483.0" width="32.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="889.9" y="494.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.05%)</title><rect x="886.9" y="467.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="889.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="886.9" y="451.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="889.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.05%)</title><rect x="886.9" y="435.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="889.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (56 samples, 2.74%)</title><rect x="887.5" y="467.0" width="32.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="890.5" y="478.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (56 samples, 2.74%)</title><rect x="887.5" y="451.0" width="32.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="890.5" y="462.0">jd..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (52 samples, 2.54%)</title><rect x="889.2" y="435.0" width="30.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="892.2" y="446.0">Un..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="889.2" y="419.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="892.2" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.05%)</title><rect x="889.2" y="403.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="892.2" y="414.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="889.2" y="387.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.2" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.05%)</title><rect x="889.2" y="371.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="892.2" y="382.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="889.2" y="355.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.2" y="366.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="889.2" y="339.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="892.2" y="350.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.05%)</title><rect x="889.2" y="323.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="892.2" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (46 samples, 2.25%)</title><rect x="889.8" y="419.0" width="26.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="892.8" y="430.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.05%)</title><rect x="891.0" y="403.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.0" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (41 samples, 2.01%)</title><rect x="891.5" y="403.0" width="23.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="894.5" y="414.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.05%)</title><rect x="915.2" y="403.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="918.2" y="414.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.05%)</title><rect x="915.8" y="403.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="918.8" y="414.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.05%)</title><rect x="916.4" y="419.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="919.4" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="916.9" y="419.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.9" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="916.9" y="403.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="919.9" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="916.9" y="387.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="919.9" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="916.9" y="371.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="919.9" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="916.9" y="355.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.9" y="366.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="916.9" y="339.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="919.9" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.05%)</title><rect x="917.5" y="419.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="920.5" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="917.5" y="403.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="920.5" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="917.5" y="387.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="920.5" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="917.5" y="371.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="920.5" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="917.5" y="355.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="920.5" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="917.5" y="339.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="920.5" y="350.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.05%)</title><rect x="918.1" y="419.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.1" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.05%)</title><rect x="918.7" y="419.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="921.7" y="430.0"></text>
</g>
<g>
<title>os::verify_stack_alignment() (1 samples, 0.05%)</title><rect x="919.2" y="435.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="922.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (173 samples, 8.46%)</title><rect x="919.8" y="515.0" width="99.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.8" y="526.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (173 samples, 8.46%)</title><rect x="919.8" y="499.0" width="99.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="922.8" y="510.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (148 samples, 7.24%)</title><rect x="919.8" y="483.0" width="85.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.8" y="494.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (145 samples, 7.09%)</title><rect x="920.4" y="467.0" width="83.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.4" y="478.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.24%)</title><rect x="920.4" y="451.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.4" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="920.4" y="435.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.4" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.20%)</title><rect x="921.0" y="435.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="924.0" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.05%)</title><rect x="921.6" y="419.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="924.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="921.6" y="403.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="924.6" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="921.6" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="924.6" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.10%)</title><rect x="922.1" y="419.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="925.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.10%)</title><rect x="922.1" y="403.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="925.1" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (140 samples, 6.85%)</title><rect x="923.3" y="451.0" width="80.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.3" y="462.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (140 samples, 6.85%)</title><rect x="923.3" y="435.0" width="80.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="926.3" y="446.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (140 samples, 6.85%)</title><rect x="923.3" y="419.0" width="80.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.3" y="430.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (140 samples, 6.85%)</title><rect x="923.3" y="403.0" width="80.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="926.3" y="414.0">one/nio/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.20%)</title><rect x="923.3" y="387.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.3" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.20%)</title><rect x="923.3" y="371.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="926.3" y="382.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="923.3" y="355.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="926.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="923.9" y="355.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="926.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="923.9" y="339.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="926.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="923.9" y="323.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="926.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="923.9" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.05%)</title><rect x="923.9" y="291.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="924.4" y="323.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="927.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="924.4" y="307.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="927.4" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="924.4" y="291.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.4" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="925.0" y="355.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.0" y="366.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="925.0" y="339.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="928.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (136 samples, 6.65%)</title><rect x="925.6" y="387.0" width="78.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="928.6" y="398.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (136 samples, 6.65%)</title><rect x="925.6" y="371.0" width="78.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.6" y="382.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (136 samples, 6.65%)</title><rect x="925.6" y="355.0" width="78.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="928.6" y="366.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (135 samples, 6.60%)</title><rect x="925.6" y="339.0" width="77.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="928.6" y="350.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (135 samples, 6.60%)</title><rect x="925.6" y="323.0" width="77.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="928.6" y="334.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (135 samples, 6.60%)</title><rect x="925.6" y="307.0" width="77.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="928.6" y="318.0">sun/nio/c..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.05%)</title><rect x="926.2" y="291.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="929.2" y="302.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.05%)</title><rect x="926.8" y="291.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="929.8" y="302.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="927.3" y="291.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="930.3" y="302.0"></text>
</g>
<g>
<title>write (131 samples, 6.41%)</title><rect x="927.9" y="291.0" width="75.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="930.9" y="302.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="1003.5" y="339.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1006.5" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="1003.5" y="323.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1006.5" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="1003.5" y="307.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1006.5" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1003.5" y="291.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1006.5" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="1004.1" y="467.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1007.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="1004.1" y="451.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1007.1" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="1004.1" y="435.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1007.1" y="446.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="1004.1" y="419.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1007.1" y="430.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="1004.1" y="403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1007.1" y="414.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.05%)</title><rect x="1004.1" y="387.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1007.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.05%)</title><rect x="1004.7" y="467.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1007.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (25 samples, 1.22%)</title><rect x="1005.3" y="483.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1008.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (25 samples, 1.22%)</title><rect x="1005.3" y="467.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1008.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (25 samples, 1.22%)</title><rect x="1005.3" y="451.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1008.3" y="462.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.05%)</title><rect x="1005.3" y="435.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1008.3" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (5 samples, 0.24%)</title><rect x="1005.8" y="435.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1008.8" y="446.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.05%)</title><rect x="1005.8" y="419.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1008.8" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="1005.8" y="403.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1008.8" y="414.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.05%)</title><rect x="1005.8" y="387.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.8" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.05%)</title><rect x="1005.8" y="371.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1008.8" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (3 samples, 0.15%)</title><rect x="1006.4" y="419.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.4" y="430.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1007.0" y="403.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1010.0" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.05%)</title><rect x="1007.6" y="403.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1010.6" y="414.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="1008.2" y="419.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1011.2" y="430.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.05%)</title><rect x="1008.2" y="403.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1011.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1008.7" y="435.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1011.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (18 samples, 0.88%)</title><rect x="1009.3" y="435.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1012.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (1 samples, 0.05%)</title><rect x="1009.3" y="419.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1012.3" y="430.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (1 samples, 0.05%)</title><rect x="1009.3" y="403.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1012.3" y="414.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.05%)</title><rect x="1009.3" y="387.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1012.3" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.05%)</title><rect x="1009.3" y="371.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1012.3" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (1 samples, 0.05%)</title><rect x="1009.3" y="355.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1012.3" y="366.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (15 samples, 0.73%)</title><rect x="1009.9" y="419.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1012.9" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (15 samples, 0.73%)</title><rect x="1009.9" y="403.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1012.9" y="414.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (15 samples, 0.73%)</title><rect x="1009.9" y="387.0" width="8.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1012.9" y="398.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (14 samples, 0.68%)</title><rect x="1010.5" y="371.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.5" y="382.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="1011.0" y="355.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.0" y="366.0"></text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="1011.6" y="355.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1014.6" y="366.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.05%)</title><rect x="1011.6" y="339.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1014.6" y="350.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.10%)</title><rect x="1012.2" y="355.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1015.2" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="1012.8" y="339.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1015.8" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="1012.8" y="323.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1015.8" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="1012.8" y="307.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.8" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="1012.8" y="291.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1015.8" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="1012.8" y="275.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1015.8" y="286.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.05%)</title><rect x="1012.8" y="259.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1015.8" y="270.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.05%)</title><rect x="1013.3" y="355.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1016.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (8 samples, 0.39%)</title><rect x="1013.9" y="355.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1016.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.05%)</title><rect x="1013.9" y="339.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1016.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.34%)</title><rect x="1014.5" y="339.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1017.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (6 samples, 0.29%)</title><rect x="1015.1" y="323.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (4 samples, 0.20%)</title><rect x="1015.1" y="307.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1018.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.05%)</title><rect x="1015.1" y="291.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1018.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.05%)</title><rect x="1015.1" y="275.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1018.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.05%)</title><rect x="1015.7" y="291.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1018.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.05%)</title><rect x="1015.7" y="275.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1018.7" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1015.7" y="259.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1018.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (1 samples, 0.05%)</title><rect x="1016.2" y="291.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1019.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.05%)</title><rect x="1016.8" y="291.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1019.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (1 samples, 0.05%)</title><rect x="1017.4" y="307.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.05%)</title><rect x="1018.0" y="307.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.10%)</title><rect x="1018.5" y="419.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1021.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.10%)</title><rect x="1018.5" y="403.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1021.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.10%)</title><rect x="1018.5" y="387.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1021.5" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.10%)</title><rect x="1018.5" y="371.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1021.5" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.10%)</title><rect x="1018.5" y="355.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1021.5" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="1019.7" y="563.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.7" y="574.0"></text>
</g>
<g>
<title>[worker tid=36611] (294 samples, 14.38%)</title><rect x="1020.3" y="579.0" width="169.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1023.3" y="590.0">[worker tid=36611]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1020.3" y="563.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1023.3" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1020.3" y="547.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1023.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1020.3" y="531.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.3" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1020.3" y="515.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.3" y="526.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="1020.3" y="499.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1023.3" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.39%)</title><rect x="1020.9" y="563.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1023.9" y="574.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.24%)</title><rect x="1021.4" y="547.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.4" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.10%)</title><rect x="1021.4" y="531.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.10%)</title><rect x="1021.4" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="526.0"></text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.10%)</title><rect x="1021.4" y="499.0" width="1.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1024.4" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.15%)</title><rect x="1022.6" y="531.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1025.6" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.05%)</title><rect x="1023.7" y="515.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.7" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.05%)</title><rect x="1024.3" y="547.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1027.3" y="558.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (1 samples, 0.05%)</title><rect x="1024.3" y="531.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1027.3" y="542.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (1 samples, 0.05%)</title><rect x="1024.9" y="547.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.9" y="558.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.05%)</title><rect x="1024.9" y="531.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.9" y="542.0"></text>
</g>
<g>
<title>ObjectSynchronizer::omAlloc(Thread*) (1 samples, 0.05%)</title><rect x="1024.9" y="515.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.9" y="526.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.15%)</title><rect x="1025.5" y="563.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1028.5" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="1025.5" y="547.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1028.5" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.10%)</title><rect x="1026.0" y="547.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.0" y="558.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.05%)</title><rect x="1026.6" y="531.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.6" y="542.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.15%)</title><rect x="1027.2" y="563.0" width="1.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1030.2" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="1028.4" y="547.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1031.4" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="1028.4" y="531.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1031.4" y="542.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="1028.4" y="515.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1031.4" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (279 samples, 13.65%)</title><rect x="1028.9" y="563.0" width="161.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1031.9" y="574.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (279 samples, 13.65%)</title><rect x="1028.9" y="547.0" width="161.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1031.9" y="558.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (279 samples, 13.65%)</title><rect x="1028.9" y="531.0" width="161.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1031.9" y="542.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (69 samples, 3.38%)</title><rect x="1028.9" y="515.0" width="39.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1031.9" y="526.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (68 samples, 3.33%)</title><rect x="1029.5" y="499.0" width="39.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.5" y="510.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (67 samples, 3.28%)</title><rect x="1029.5" y="483.0" width="38.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1032.5" y="494.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (67 samples, 3.28%)</title><rect x="1029.5" y="467.0" width="38.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1032.5" y="478.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (67 samples, 3.28%)</title><rect x="1029.5" y="451.0" width="38.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1032.5" y="462.0">jdk..</text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.05%)</title><rect x="1032.4" y="435.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.4" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (61 samples, 2.98%)</title><rect x="1033.0" y="435.0" width="35.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1036.0" y="446.0">Uns..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.05%)</title><rect x="1033.0" y="419.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.0" y="430.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.05%)</title><rect x="1033.6" y="419.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.6" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="1034.1" y="419.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1037.1" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.05%)</title><rect x="1034.1" y="403.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1037.1" y="414.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="1034.1" y="387.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1037.1" y="398.0"></text>
</g>
<g>
<title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.05%)</title><rect x="1034.1" y="371.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.1" y="382.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::is_enabled() (1 samples, 0.05%)</title><rect x="1034.7" y="419.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1037.7" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (55 samples, 2.69%)</title><rect x="1035.3" y="419.0" width="31.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.3" y="430.0">Pa..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.05%)</title><rect x="1036.4" y="403.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.4" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (49 samples, 2.40%)</title><rect x="1037.0" y="403.0" width="28.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1040.0" y="414.0">__..</text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.05%)</title><rect x="1065.3" y="403.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1068.3" y="414.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.10%)</title><rect x="1065.9" y="403.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1068.9" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.10%)</title><rect x="1067.0" y="419.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.0" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="1067.6" y="403.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.05%)</title><rect x="1068.2" y="483.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1071.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.05%)</title><rect x="1068.2" y="467.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1071.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.05%)</title><rect x="1068.2" y="451.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1071.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="1068.2" y="435.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1071.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="1068.2" y="419.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1071.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.05%)</title><rect x="1068.2" y="403.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1071.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$84/494463390.run (210 samples, 10.27%)</title><rect x="1068.8" y="515.0" width="121.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1071.8" y="526.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$executeAsync$3 (210 samples, 10.27%)</title><rect x="1068.8" y="499.0" width="121.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1071.8" y="510.0">ru/mail/polis/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (180 samples, 8.81%)</title><rect x="1068.8" y="483.0" width="103.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1071.8" y="494.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (172 samples, 8.41%)</title><rect x="1069.3" y="467.0" width="99.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1072.3" y="478.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.68%)</title><rect x="1069.3" y="451.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.3" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1072.8" y="435.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1075.8" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.29%)</title><rect x="1074.0" y="435.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1077.0" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.15%)</title><rect x="1074.0" y="419.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.10%)</title><rect x="1074.5" y="403.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1077.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="1074.5" y="387.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1077.5" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="1075.1" y="387.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1078.1" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.15%)</title><rect x="1075.7" y="419.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1078.7" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.15%)</title><rect x="1075.7" y="403.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1078.7" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (158 samples, 7.73%)</title><rect x="1077.4" y="451.0" width="91.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.4" y="462.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session.write (158 samples, 7.73%)</title><rect x="1077.4" y="435.0" width="91.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1080.4" y="446.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (157 samples, 7.68%)</title><rect x="1078.0" y="419.0" width="90.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1081.0" y="430.0">one/nio/ne..</text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.05%)</title><rect x="1078.0" y="403.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.0" y="414.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.05%)</title><rect x="1078.6" y="403.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.6" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.10%)</title><rect x="1079.2" y="403.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.2" y="414.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.05%)</title><rect x="1079.2" y="387.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.2" y="398.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1079.7" y="387.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1082.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (153 samples, 7.49%)</title><rect x="1080.3" y="403.0" width="88.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1083.3" y="414.0">one/nio/ne..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.44%)</title><rect x="1080.3" y="387.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1083.3" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.44%)</title><rect x="1080.3" y="371.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1083.3" y="382.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="1080.3" y="355.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1083.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.24%)</title><rect x="1080.9" y="355.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1083.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1082.6" y="339.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1085.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="1083.2" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1086.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="1083.2" y="307.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1086.2" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="1083.2" y="291.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1086.2" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.15%)</title><rect x="1083.8" y="355.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.8" y="366.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1083.8" y="339.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1086.8" y="350.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="1083.8" y="323.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1086.8" y="334.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.10%)</title><rect x="1084.4" y="339.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1087.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (144 samples, 7.05%)</title><rect x="1085.5" y="387.0" width="83.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1088.5" y="398.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (144 samples, 7.05%)</title><rect x="1085.5" y="371.0" width="83.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1088.5" y="382.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (144 samples, 7.05%)</title><rect x="1085.5" y="355.0" width="83.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1088.5" y="366.0">sun/nio/c..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.05%)</title><rect x="1086.1" y="339.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1089.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.05%)</title><rect x="1086.1" y="323.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1089.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="1086.1" y="307.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1089.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="1086.1" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1089.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="1086.1" y="275.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1089.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.05%)</title><rect x="1086.1" y="259.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1089.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (138 samples, 6.75%)</title><rect x="1086.7" y="339.0" width="79.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1089.7" y="350.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (138 samples, 6.75%)</title><rect x="1086.7" y="323.0" width="79.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1089.7" y="334.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (138 samples, 6.75%)</title><rect x="1086.7" y="307.0" width="79.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1089.7" y="318.0">sun/nio/c..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.05%)</title><rect x="1087.2" y="291.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1090.2" y="302.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.10%)</title><rect x="1087.8" y="291.0" width="1.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1090.8" y="302.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="1088.4" y="275.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1091.4" y="286.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="1089.0" y="291.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1092.0" y="302.0"></text>
</g>
<g>
<title>write (133 samples, 6.51%)</title><rect x="1089.5" y="291.0" width="76.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1092.5" y="302.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.20%)</title><rect x="1166.3" y="339.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1169.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="1166.9" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1169.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.10%)</title><rect x="1167.5" y="323.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1170.5" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="1167.5" y="307.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1170.5" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="1167.5" y="291.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1170.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.05%)</title><rect x="1168.1" y="307.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1171.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.34%)</title><rect x="1168.6" y="467.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1171.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.24%)</title><rect x="1169.8" y="451.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1172.8" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.24%)</title><rect x="1169.8" y="435.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1172.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.24%)</title><rect x="1169.8" y="419.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1172.8" y="430.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.24%)</title><rect x="1169.8" y="403.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1172.8" y="414.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (5 samples, 0.24%)</title><rect x="1169.8" y="387.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1172.8" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.20%)</title><rect x="1170.4" y="371.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1173.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService$$Lambda$81/424115822.act (30 samples, 1.47%)</title><rect x="1172.7" y="483.0" width="17.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1175.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.lambda$entity$0 (30 samples, 1.47%)</title><rect x="1172.7" y="467.0" width="17.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1175.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyAsyncService.get (30 samples, 1.47%)</title><rect x="1172.7" y="451.0" width="17.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1175.7" y="462.0"></text>
</g>
<g>
<title>ExceptionBlob (1 samples, 0.05%)</title><rect x="1172.7" y="435.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1175.7" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (13 samples, 0.64%)</title><rect x="1173.3" y="435.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="446.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (2 samples, 0.10%)</title><rect x="1173.3" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="430.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (1 samples, 0.05%)</title><rect x="1174.4" y="419.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="430.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.15%)</title><rect x="1175.0" y="419.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="430.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.05%)</title><rect x="1175.0" y="403.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.10%)</title><rect x="1175.6" y="403.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.6" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="1175.6" y="387.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.05%)</title><rect x="1176.1" y="387.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.1" y="398.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack() (1 samples, 0.05%)</title><rect x="1176.7" y="419.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (4 samples, 0.20%)</title><rect x="1177.3" y="419.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="1177.3" y="403.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.3" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="1177.3" y="387.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.3" y="398.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.05%)</title><rect x="1177.9" y="403.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="414.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (2 samples, 0.10%)</title><rect x="1178.5" y="403.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.5" y="414.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.10%)</title><rect x="1179.6" y="419.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="430.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.05%)</title><rect x="1180.2" y="403.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (1 samples, 0.05%)</title><rect x="1180.8" y="435.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1181.3" y="435.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (14 samples, 0.68%)</title><rect x="1181.9" y="435.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1184.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (3 samples, 0.15%)</title><rect x="1181.9" y="419.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1184.9" y="430.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (2 samples, 0.10%)</title><rect x="1181.9" y="403.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.10%)</title><rect x="1181.9" y="387.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.10%)</title><rect x="1181.9" y="371.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (1 samples, 0.05%)</title><rect x="1181.9" y="355.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="1182.5" y="355.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1185.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.05%)</title><rect x="1183.1" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1186.1" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="1183.1" y="387.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1186.1" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.39%)</title><rect x="1183.6" y="419.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1186.6" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.39%)</title><rect x="1183.6" y="403.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1186.6" y="414.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (8 samples, 0.39%)</title><rect x="1183.6" y="387.0" width="4.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1186.6" y="398.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.05%)</title><rect x="1183.6" y="371.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1186.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.05%)</title><rect x="1184.2" y="371.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="382.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (6 samples, 0.29%)</title><rect x="1184.8" y="371.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.8" y="382.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.05%)</title><rect x="1184.8" y="355.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1187.8" y="366.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.05%)</title><rect x="1185.4" y="355.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1188.4" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1185.4" y="339.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.20%)</title><rect x="1186.0" y="355.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.20%)</title><rect x="1186.0" y="339.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (4 samples, 0.20%)</title><rect x="1186.0" y="323.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (3 samples, 0.15%)</title><rect x="1186.0" y="307.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.05%)</title><rect x="1187.1" y="291.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.05%)</title><rect x="1187.7" y="307.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.10%)</title><rect x="1188.3" y="419.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1191.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (2 samples, 0.10%)</title><rect x="1188.3" y="403.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1191.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.05%)</title><rect x="1188.3" y="387.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1191.3" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.05%)</title><rect x="1188.3" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1191.3" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="1188.8" y="387.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1191.8" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1188.8" y="371.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1191.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1188.8" y="355.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1191.8" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1188.8" y="339.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1191.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="1188.8" y="323.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1191.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="1188.8" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1191.8" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="1188.8" y="291.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1191.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/NoSuchElementLite.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1189.4" y="419.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1192.4" y="430.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1189.4" y="403.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1192.4" y="414.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1189.4" y="387.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1192.4" y="398.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1189.4" y="371.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1192.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1189.4" y="355.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1192.4" y="366.0"></text>
</g>
</g>
</svg>
