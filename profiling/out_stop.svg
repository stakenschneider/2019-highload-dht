<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="405"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="405"> </text>
<g id="frames">
<g>
<title>all (70 samples, 100.00%)</title><rect x="10.0" y="371.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="382.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=26115] (2 samples, 2.86%)</title><rect x="10.0" y="355.0" width="33.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="366.0">[N..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2 samples, 2.86%)</title><rect x="10.0" y="339.0" width="33.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="350.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1 samples, 1.43%)</title><rect x="10.0" y="323.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 1.43%)</title><rect x="10.0" y="307.0" width="16.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 1.43%)</title><rect x="10.0" y="291.0" width="16.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 1.43%)</title><rect x="10.0" y="275.0" width="16.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 1.43%)</title><rect x="10.0" y="259.0" width="16.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.clearInterrupt (1 samples, 1.43%)</title><rect x="10.0" y="243.0" width="16.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1 samples, 1.43%)</title><rect x="26.9" y="323.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1 samples, 1.43%)</title><rect x="26.9" y="307.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 1.43%)</title><rect x="26.9" y="291.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.9" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1 samples, 1.43%)</title><rect x="26.9" y="275.0" width="16.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 1.43%)</title><rect x="26.9" y="259.0" width="16.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.handleDefault (1 samples, 1.43%)</title><rect x="26.9" y="243.0" width="16.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.9" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 1.43%)</title><rect x="26.9" y="227.0" width="16.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1 samples, 1.43%)</title><rect x="26.9" y="211.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.9" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 1.43%)</title><rect x="26.9" y="195.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.9" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 1.43%)</title><rect x="26.9" y="179.0" width="16.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.9" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1 samples, 1.43%)</title><rect x="26.9" y="163.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.9" y="174.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1 samples, 1.43%)</title><rect x="26.9" y="147.0" width="16.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 1.43%)</title><rect x="26.9" y="131.0" width="16.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 1.43%)</title><rect x="26.9" y="115.0" width="16.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 1.43%)</title><rect x="26.9" y="99.0" width="16.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1 samples, 1.43%)</title><rect x="26.9" y="83.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1 samples, 1.43%)</title><rect x="26.9" y="67.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.9" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 1.43%)</title><rect x="26.9" y="51.0" width="16.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.9" y="62.0"></text>
</g>
<g>
<title>write (1 samples, 1.43%)</title><rect x="26.9" y="35.0" width="16.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="29.9" y="46.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=39939] (1 samples, 1.43%)</title><rect x="43.7" y="355.0" width="16.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="46.7" y="366.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1 samples, 1.43%)</title><rect x="43.7" y="339.0" width="16.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.7" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1 samples, 1.43%)</title><rect x="43.7" y="323.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 1.43%)</title><rect x="43.7" y="307.0" width="16.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="46.7" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.register (1 samples, 1.43%)</title><rect x="43.7" y="291.0" width="16.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.register (1 samples, 1.43%)</title><rect x="43.7" y="275.0" width="16.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 1.43%)</title><rect x="43.7" y="259.0" width="16.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.setEventOps (1 samples, 1.43%)</title><rect x="43.7" y="243.0" width="16.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.7" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addLast (1 samples, 1.43%)</title><rect x="43.7" y="227.0" width="16.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="46.7" y="238.0"></text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 1.43%)</title><rect x="43.7" y="211.0" width="16.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="46.7" y="222.0"></text>
</g>
<g>
<title>Method::result_type() const (1 samples, 1.43%)</title><rect x="43.7" y="195.0" width="16.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="46.7" y="206.0"></text>
</g>
<g>
<title>[tid=13315] (9 samples, 12.86%)</title><rect x="60.6" y="355.0" width="151.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="63.6" y="366.0">[tid=13315]</text>
</g>
<g>
<title>thread_start (9 samples, 12.86%)</title><rect x="60.6" y="339.0" width="151.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="63.6" y="350.0">thread_start</text>
</g>
<g>
<title>_pthread_start (9 samples, 12.86%)</title><rect x="60.6" y="323.0" width="151.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="63.6" y="334.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (9 samples, 12.86%)</title><rect x="60.6" y="307.0" width="151.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="63.6" y="318.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 12.86%)</title><rect x="60.6" y="291.0" width="151.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="63.6" y="302.0">thread_native_entry..</text>
</g>
<g>
<title>Thread::call_run() (9 samples, 12.86%)</title><rect x="60.6" y="275.0" width="151.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="63.6" y="286.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (9 samples, 12.86%)</title><rect x="60.6" y="259.0" width="151.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="63.6" y="270.0">ConcurrentGCThread:..</text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (9 samples, 12.86%)</title><rect x="60.6" y="243.0" width="151.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="63.6" y="254.0">G1YoungRemSetSampli..</text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 2.86%)</title><rect x="60.6" y="227.0" width="33.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="63.6" y="238.0">G1..</text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 2.86%)</title><rect x="60.6" y="211.0" width="33.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="63.6" y="222.0">G1..</text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 2.86%)</title><rect x="60.6" y="195.0" width="33.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="63.6" y="206.0">G1..</text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 1.43%)</title><rect x="60.6" y="179.0" width="16.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="63.6" y="190.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 1.43%)</title><rect x="60.6" y="163.0" width="16.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="63.6" y="174.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 1.43%)</title><rect x="60.6" y="147.0" width="16.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="63.6" y="158.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 1.43%)</title><rect x="77.4" y="179.0" width="16.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="80.4" y="190.0"></text>
</g>
<g>
<title>OtherRegionsTable::occ_fine() const (1 samples, 1.43%)</title><rect x="77.4" y="163.0" width="16.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="80.4" y="174.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (7 samples, 10.00%)</title><rect x="94.3" y="227.0" width="118.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="97.3" y="238.0">G1YoungRemSetS..</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 10.00%)</title><rect x="94.3" y="211.0" width="118.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="97.3" y="222.0">Monitor::wait(..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 10.00%)</title><rect x="94.3" y="195.0" width="118.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="97.3" y="206.0">Monitor::IWait..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 8.57%)</title><rect x="94.3" y="179.0" width="101.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="97.3" y="190.0">os::Platform..</text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 8.57%)</title><rect x="94.3" y="163.0" width="101.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="97.3" y="174.0">__psynch_cvw..</text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 1.43%)</title><rect x="195.4" y="179.0" width="16.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="198.4" y="190.0"></text>
</g>
<g>
<title>[tid=13827] (13 samples, 18.57%)</title><rect x="212.3" y="355.0" width="219.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="215.3" y="366.0">[tid=13827]</text>
</g>
<g>
<title>thread_start (13 samples, 18.57%)</title><rect x="212.3" y="339.0" width="219.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="215.3" y="350.0">thread_start</text>
</g>
<g>
<title>_pthread_start (13 samples, 18.57%)</title><rect x="212.3" y="323.0" width="219.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="215.3" y="334.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (13 samples, 18.57%)</title><rect x="212.3" y="307.0" width="219.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="215.3" y="318.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 18.57%)</title><rect x="212.3" y="291.0" width="219.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="215.3" y="302.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (13 samples, 18.57%)</title><rect x="212.3" y="275.0" width="219.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="215.3" y="286.0">Thread::call_run()</text>
</g>
<g>
<title>VMThread::run() (13 samples, 18.57%)</title><rect x="212.3" y="259.0" width="219.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="215.3" y="270.0">VMThread::run()</text>
</g>
<g>
<title>VMThread::loop() (13 samples, 18.57%)</title><rect x="212.3" y="243.0" width="219.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="215.3" y="254.0">VMThread::loop()</text>
</g>
<g>
<title>G1CollectedHeap::safepoint_synchronize_end() (1 samples, 1.43%)</title><rect x="212.3" y="227.0" width="16.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="215.3" y="238.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 10.00%)</title><rect x="229.1" y="227.0" width="118.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="232.1" y="238.0">Monitor::wait(..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 10.00%)</title><rect x="229.1" y="211.0" width="118.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="232.1" y="222.0">Monitor::IWait..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 8.57%)</title><rect x="229.1" y="195.0" width="101.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="232.1" y="206.0">os::Platform..</text>
</g>
<g>
<title>__gettimeofday (2 samples, 2.86%)</title><rect x="229.1" y="179.0" width="33.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="232.1" y="190.0">__..</text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 5.71%)</title><rect x="262.9" y="179.0" width="67.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="265.9" y="190.0">__psync..</text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 1.43%)</title><rect x="330.3" y="195.0" width="16.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="333.3" y="206.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (5 samples, 7.14%)</title><rect x="347.1" y="227.0" width="84.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="350.1" y="238.0">SafepointS..</text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (4 samples, 5.71%)</title><rect x="364.0" y="211.0" width="67.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="367.0" y="222.0">Safepoi..</text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (4 samples, 5.71%)</title><rect x="364.0" y="195.0" width="67.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="367.0" y="206.0">WorkGan..</text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (4 samples, 5.71%)</title><rect x="364.0" y="179.0" width="67.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="367.0" y="190.0">Semapho..</text>
</g>
<g>
<title>__block_descriptor_tmp (4 samples, 5.71%)</title><rect x="364.0" y="163.0" width="67.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="367.0" y="174.0">__block..</text>
</g>
<g>
<title>[tid=20483] (13 samples, 18.57%)</title><rect x="431.4" y="355.0" width="219.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="434.4" y="366.0">[tid=20483]</text>
</g>
<g>
<title>thread_start (13 samples, 18.57%)</title><rect x="431.4" y="339.0" width="219.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="434.4" y="350.0">thread_start</text>
</g>
<g>
<title>_pthread_start (13 samples, 18.57%)</title><rect x="431.4" y="323.0" width="219.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="434.4" y="334.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (13 samples, 18.57%)</title><rect x="431.4" y="307.0" width="219.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="434.4" y="318.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 18.57%)</title><rect x="431.4" y="291.0" width="219.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="434.4" y="302.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (13 samples, 18.57%)</title><rect x="431.4" y="275.0" width="219.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.4" y="286.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 18.57%)</title><rect x="431.4" y="259.0" width="219.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="434.4" y="270.0">GangWorker::loop()</text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (6 samples, 8.57%)</title><rect x="448.3" y="243.0" width="101.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="451.3" y="254.0">ParallelSPCl..</text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (6 samples, 8.57%)</title><rect x="448.3" y="227.0" width="101.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="451.3" y="238.0">Threads::pos..</text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 2.86%)</title><rect x="448.3" y="211.0" width="33.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="451.3" y="222.0">Ja..</text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 2.86%)</title><rect x="448.3" y="195.0" width="33.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="451.3" y="206.0">fr..</text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 1.43%)</title><rect x="448.3" y="179.0" width="16.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="451.3" y="190.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 1.43%)</title><rect x="448.3" y="163.0" width="16.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="451.3" y="174.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 1.43%)</title><rect x="448.3" y="147.0" width="16.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="451.3" y="158.0"></text>
</g>
<g>
<title>OopMapValue::read_from(CompressedReadStream*) (1 samples, 1.43%)</title><rect x="448.3" y="131.0" width="16.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="451.3" y="142.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (1 samples, 1.43%)</title><rect x="465.1" y="179.0" width="16.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="468.1" y="190.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (3 samples, 4.29%)</title><rect x="482.0" y="211.0" width="50.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="485.0" y="222.0">Paral..</text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (3 samples, 4.29%)</title><rect x="482.0" y="195.0" width="50.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="485.0" y="206.0">Objec..</text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (2 samples, 2.86%)</title><rect x="482.0" y="179.0" width="33.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="485.0" y="190.0">Th..</text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 2.86%)</title><rect x="482.0" y="163.0" width="33.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="485.0" y="174.0">os..</text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 2.86%)</title><rect x="482.0" y="147.0" width="33.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="485.0" y="158.0">__..</text>
</g>
<g>
<title>elapsedTimer::seconds() const (1 samples, 1.43%)</title><rect x="515.7" y="179.0" width="16.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="518.7" y="190.0"></text>
</g>
<g>
<title>Thread::claim_oops_do_par_case(int) (1 samples, 1.43%)</title><rect x="532.6" y="211.0" width="16.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="535.6" y="222.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (6 samples, 8.57%)</title><rect x="549.4" y="243.0" width="101.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="552.4" y="254.0">SemaphoreGan..</text>
</g>
<g>
<title>OSXSemaphore::wait() (2 samples, 2.86%)</title><rect x="549.4" y="227.0" width="33.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="552.4" y="238.0">OS..</text>
</g>
<g>
<title>__block_descriptor_tmp (4 samples, 5.71%)</title><rect x="583.1" y="227.0" width="67.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="586.1" y="238.0">__block..</text>
</g>
<g>
<title>[tid=28419] (1 samples, 1.43%)</title><rect x="650.6" y="355.0" width="16.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="653.6" y="366.0"></text>
</g>
<g>
<title>thread_start (1 samples, 1.43%)</title><rect x="650.6" y="339.0" width="16.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="653.6" y="350.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 1.43%)</title><rect x="650.6" y="323.0" width="16.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="653.6" y="334.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 1.43%)</title><rect x="650.6" y="307.0" width="16.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="653.6" y="318.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 1.43%)</title><rect x="650.6" y="291.0" width="16.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="653.6" y="302.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 1.43%)</title><rect x="650.6" y="275.0" width="16.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="653.6" y="286.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 1.43%)</title><rect x="650.6" y="259.0" width="16.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="653.6" y="270.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 1.43%)</title><rect x="650.6" y="243.0" width="16.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="653.6" y="254.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 1.43%)</title><rect x="650.6" y="227.0" width="16.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="653.6" y="238.0"></text>
</g>
<g>
<title>[tid=28675] (1 samples, 1.43%)</title><rect x="667.4" y="355.0" width="16.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="670.4" y="366.0"></text>
</g>
<g>
<title>thread_start (1 samples, 1.43%)</title><rect x="667.4" y="339.0" width="16.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="670.4" y="350.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 1.43%)</title><rect x="667.4" y="323.0" width="16.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="670.4" y="334.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 1.43%)</title><rect x="667.4" y="307.0" width="16.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="670.4" y="318.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 1.43%)</title><rect x="667.4" y="291.0" width="16.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="670.4" y="302.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 1.43%)</title><rect x="667.4" y="275.0" width="16.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="670.4" y="286.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 1.43%)</title><rect x="667.4" y="259.0" width="16.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="670.4" y="270.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 1.43%)</title><rect x="667.4" y="243.0" width="16.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="670.4" y="254.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 1.43%)</title><rect x="667.4" y="227.0" width="16.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="670.4" y="238.0"></text>
</g>
<g>
<title>[tid=37891] (2 samples, 2.86%)</title><rect x="684.3" y="355.0" width="33.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="687.3" y="366.0">[t..</text>
</g>
<g>
<title>thread_start (2 samples, 2.86%)</title><rect x="684.3" y="339.0" width="33.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="687.3" y="350.0">th..</text>
</g>
<g>
<title>_pthread_start (2 samples, 2.86%)</title><rect x="684.3" y="323.0" width="33.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="687.3" y="334.0">_p..</text>
</g>
<g>
<title>_pthread_body (2 samples, 2.86%)</title><rect x="684.3" y="307.0" width="33.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="687.3" y="318.0">_p..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 2.86%)</title><rect x="684.3" y="291.0" width="33.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="687.3" y="302.0">th..</text>
</g>
<g>
<title>Thread::call_run() (2 samples, 2.86%)</title><rect x="684.3" y="275.0" width="33.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="687.3" y="286.0">Th..</text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 2.86%)</title><rect x="684.3" y="259.0" width="33.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="687.3" y="270.0">Ga..</text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 2.86%)</title><rect x="684.3" y="243.0" width="33.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="687.3" y="254.0">Se..</text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 2.86%)</title><rect x="684.3" y="227.0" width="33.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="687.3" y="238.0">__..</text>
</g>
<g>
<title>[tid=41219] (27 samples, 38.57%)</title><rect x="718.0" y="355.0" width="455.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="721.0" y="366.0">[tid=41219]</text>
</g>
<g>
<title>thread_start (27 samples, 38.57%)</title><rect x="718.0" y="339.0" width="455.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="721.0" y="350.0">thread_start</text>
</g>
<g>
<title>_pthread_start (27 samples, 38.57%)</title><rect x="718.0" y="323.0" width="455.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="721.0" y="334.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (27 samples, 38.57%)</title><rect x="718.0" y="307.0" width="455.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="721.0" y="318.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (27 samples, 38.57%)</title><rect x="718.0" y="291.0" width="455.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="721.0" y="302.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (27 samples, 38.57%)</title><rect x="718.0" y="275.0" width="455.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="721.0" y="286.0">Thread::call_run()</text>
</g>
<g>
<title>WatcherThread::run() (27 samples, 38.57%)</title><rect x="718.0" y="259.0" width="455.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="721.0" y="270.0">WatcherThread::run()</text>
</g>
<g>
<title>WatcherThread::sleep() const (26 samples, 37.14%)</title><rect x="718.0" y="243.0" width="438.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="721.0" y="254.0">WatcherThread::sleep() const</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (26 samples, 37.14%)</title><rect x="718.0" y="227.0" width="438.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="721.0" y="238.0">Monitor::wait(bool, long, bool)</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (26 samples, 37.14%)</title><rect x="718.0" y="211.0" width="438.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="721.0" y="222.0">Monitor::IWait(Thread*, long)</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (26 samples, 37.14%)</title><rect x="718.0" y="195.0" width="438.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="721.0" y="206.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__psynch_cvwait (26 samples, 37.14%)</title><rect x="718.0" y="179.0" width="438.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="721.0" y="190.0">__psynch_cvwait</text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 1.43%)</title><rect x="1156.3" y="243.0" width="16.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.3" y="254.0"></text>
</g>
<g>
<title>[tid=42755] (1 samples, 1.43%)</title><rect x="1173.1" y="355.0" width="16.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1176.1" y="366.0"></text>
</g>
<g>
<title>thread_start (1 samples, 1.43%)</title><rect x="1173.1" y="339.0" width="16.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1176.1" y="350.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 1.43%)</title><rect x="1173.1" y="323.0" width="16.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1176.1" y="334.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 1.43%)</title><rect x="1173.1" y="307.0" width="16.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1176.1" y="318.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 1.43%)</title><rect x="1173.1" y="291.0" width="16.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1176.1" y="302.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 1.43%)</title><rect x="1173.1" y="275.0" width="16.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.1" y="286.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 1.43%)</title><rect x="1173.1" y="259.0" width="16.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.1" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 1.43%)</title><rect x="1173.1" y="243.0" width="16.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.1" y="254.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 1.43%)</title><rect x="1173.1" y="227.0" width="16.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.1" y="238.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 1.43%)</title><rect x="1173.1" y="211.0" width="16.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.1" y="222.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 1.43%)</title><rect x="1173.1" y="195.0" width="16.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="206.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 1.43%)</title><rect x="1173.1" y="179.0" width="16.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.1" y="190.0"></text>
</g>
</g>
</svg>
