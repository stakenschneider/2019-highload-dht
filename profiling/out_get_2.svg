<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (8,175 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=24835] (4,735 samples, 57.92%)</title><rect x="10.0" y="947.0" width="683.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="958.0">[NIO Selector #0 tid=24835]</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (3 samples, 0.04%)</title><rect x="10.0" y="931.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (4 samples, 0.05%)</title><rect x="10.9" y="931.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.9" y="942.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (2 samples, 0.02%)</title><rect x="11.4" y="931.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.4" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.04%)</title><rect x="11.7" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.7" y="942.0"></text>
</g>
<g>
<title>[not_walkable_Java] (23 samples, 0.28%)</title><rect x="12.2" y="931.0" width="3.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="15.2" y="942.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (4 samples, 0.05%)</title><rect x="12.3" y="915.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.3" y="926.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.02%)</title><rect x="13.0" y="915.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.0" y="926.0"></text>
</g>
<g>
<title>caller_is_deopted() (2 samples, 0.02%)</title><rect x="13.0" y="899.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="16.0" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (15 samples, 0.18%)</title><rect x="13.3" y="915.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.3" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.04%)</title><rect x="14.2" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="17.2" y="910.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (5 samples, 0.06%)</title><rect x="14.8" y="899.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="17.8" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (53 samples, 0.65%)</title><rect x="15.5" y="931.0" width="7.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="18.5" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (24 samples, 0.29%)</title><rect x="19.1" y="915.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="22.1" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (24 samples, 0.29%)</title><rect x="19.1" y="899.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="22.1" y="910.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (21 samples, 0.26%)</title><rect x="19.1" y="883.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="22.1" y="894.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="22.1" y="883.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="25.1" y="894.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.02%)</title><rect x="22.1" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="25.1" y="878.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.05%)</title><rect x="22.6" y="915.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="25.6" y="926.0"></text>
</g>
<g>
<title>_res (4 samples, 0.05%)</title><rect x="22.6" y="899.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="25.6" y="910.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (2 samples, 0.02%)</title><rect x="23.3" y="931.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="26.3" y="942.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (4,629 samples, 56.62%)</title><rect x="23.6" y="931.0" width="668.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="942.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (10 samples, 0.12%)</title><rect x="25.9" y="915.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.9" y="926.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (2 samples, 0.02%)</title><rect x="27.0" y="899.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.0" y="910.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.02%)</title><rect x="27.3" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.3" y="926.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.02%)</title><rect x="27.3" y="899.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.3" y="910.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (2 samples, 0.02%)</title><rect x="27.6" y="915.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.6" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.02%)</title><rect x="27.6" y="899.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.02%)</title><rect x="27.6" y="883.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.6" y="894.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,257 samples, 15.38%)</title><rect x="27.9" y="915.0" width="181.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.9" y="926.0">one/nio/net/JavaSelecto..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (36 samples, 0.44%)</title><rect x="28.0" y="899.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="31.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (9 samples, 0.11%)</title><rect x="29.3" y="883.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (7 samples, 0.09%)</title><rect x="29.6" y="867.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.6" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (18 samples, 0.22%)</title><rect x="30.6" y="883.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (18 samples, 0.22%)</title><rect x="30.6" y="867.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (10 samples, 0.12%)</title><rect x="30.8" y="851.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (5 samples, 0.06%)</title><rect x="31.5" y="835.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.06%)</title><rect x="31.5" y="819.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (7 samples, 0.09%)</title><rect x="32.2" y="851.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.2" y="862.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (78 samples, 0.95%)</title><rect x="33.2" y="899.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (77 samples, 0.94%)</title><rect x="33.4" y="883.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (63 samples, 0.77%)</title><rect x="35.0" y="867.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="38.0" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (50 samples, 0.61%)</title><rect x="35.3" y="851.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.3" y="862.0"></text>
</g>
<g>
<title>_res (5 samples, 0.06%)</title><rect x="36.3" y="835.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="39.3" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (35 samples, 0.43%)</title><rect x="37.0" y="835.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.0" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.02%)</title><rect x="41.8" y="819.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.8" y="830.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.04%)</title><rect x="42.0" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="45.0" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (11 samples, 0.13%)</title><rect x="42.5" y="851.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.5" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (7 samples, 0.09%)</title><rect x="42.5" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.05%)</title><rect x="43.5" y="835.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.04%)</title><rect x="44.1" y="867.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,142 samples, 13.97%)</title><rect x="44.5" y="899.0" width="164.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.5" y="910.0">sun/nio/ch/SelectorIm..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,142 samples, 13.97%)</title><rect x="44.5" y="883.0" width="164.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.5" y="894.0">sun/nio/ch/SelectorIm..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,142 samples, 13.97%)</title><rect x="44.5" y="867.0" width="164.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.5" y="878.0">sun/nio/ch/KQueueSele..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,097 samples, 13.42%)</title><rect x="44.5" y="851.0" width="158.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.5" y="862.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (5 samples, 0.06%)</title><rect x="55.8" y="835.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="58.8" y="846.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (19 samples, 0.23%)</title><rect x="56.5" y="835.0" width="2.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="59.5" y="846.0"></text>
</g>
<g>
<title>kevent (995 samples, 12.17%)</title><rect x="59.2" y="835.0" width="143.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="62.2" y="846.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (24 samples, 0.29%)</title><rect x="202.8" y="851.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.04%)</title><rect x="203.6" y="835.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="203.6" y="819.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.6" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (16 samples, 0.20%)</title><rect x="204.0" y="835.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.add (13 samples, 0.16%)</title><rect x="204.3" y="819.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.16%)</title><rect x="204.3" y="803.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="207.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (13 samples, 0.16%)</title><rect x="204.3" y="787.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.3" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.06%)</title><rect x="206.3" y="851.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.3" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (4 samples, 0.05%)</title><rect x="206.5" y="835.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="209.5" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.02%)</title><rect x="207.0" y="851.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="210.0" y="862.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.02%)</title><rect x="207.0" y="835.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="210.0" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.02%)</title><rect x="207.0" y="819.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="210.0" y="830.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.02%)</title><rect x="207.0" y="803.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.02%)</title><rect x="207.0" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.0" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (13 samples, 0.16%)</title><rect x="207.5" y="851.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.5" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (2 samples, 0.02%)</title><rect x="209.0" y="835.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (3,342 samples, 40.88%)</title><rect x="209.3" y="915.0" width="482.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.3" y="926.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,329 samples, 40.72%)</title><rect x="210.5" y="899.0" width="480.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.5" y="910.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,792 samples, 34.15%)</title><rect x="211.1" y="883.0" width="403.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.1" y="894.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,603 samples, 31.84%)</title><rect x="215.4" y="867.0" width="375.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.4" y="878.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,597 samples, 31.77%)</title><rect x="215.5" y="851.0" width="374.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.5" y="862.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,506 samples, 30.65%)</title><rect x="215.7" y="835.0" width="361.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.7" y="846.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,447 samples, 17.70%)</title><rect x="215.8" y="819.0" width="208.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.8" y="830.0">one/nio/http/HttpSession.se..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (9 samples, 0.11%)</title><rect x="216.0" y="803.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,428 samples, 17.47%)</title><rect x="217.3" y="803.0" width="206.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.3" y="814.0">one/nio/http/HttpSession.wr..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (73 samples, 0.89%)</title><rect x="217.3" y="787.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.3" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="219.2" y="771.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="222.2" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (58 samples, 0.71%)</title><rect x="219.4" y="771.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.04%)</title><rect x="219.9" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.02%)</title><rect x="220.0" y="739.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (5 samples, 0.06%)</title><rect x="220.3" y="755.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (32 samples, 0.39%)</title><rect x="221.0" y="755.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (13 samples, 0.16%)</title><rect x="223.6" y="739.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (12 samples, 0.15%)</title><rect x="223.8" y="723.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.8" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (15 samples, 0.18%)</title><rect x="225.6" y="755.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (15 samples, 0.18%)</title><rect x="225.6" y="739.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.09%)</title><rect x="226.7" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (5 samples, 0.06%)</title><rect x="226.7" y="707.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.7" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.02%)</title><rect x="227.4" y="707.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.4" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,355 samples, 16.57%)</title><rect x="227.8" y="787.0" width="195.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.8" y="798.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,355 samples, 16.57%)</title><rect x="227.8" y="771.0" width="195.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.8" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,354 samples, 16.56%)</title><rect x="227.8" y="755.0" width="195.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.8" y="766.0">one/nio/net/Session$Array..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1,354 samples, 16.56%)</title><rect x="227.8" y="739.0" width="195.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.8" y="750.0">one/nio/net/JavaSocket.wr..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="227.8" y="723.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.8" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="227.8" y="707.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="227.8" y="691.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.8" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1,352 samples, 16.54%)</title><rect x="228.1" y="723.0" width="195.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.1" y="734.0">sun/nio/ch/SocketChannelI..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (2 samples, 0.02%)</title><rect x="229.1" y="707.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.10%)</title><rect x="229.4" y="707.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.09%)</title><rect x="229.5" y="691.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.09%)</title><rect x="229.5" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.09%)</title><rect x="229.5" y="659.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.04%)</title><rect x="230.0" y="643.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.04%)</title><rect x="230.0" y="627.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.04%)</title><rect x="230.0" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.04%)</title><rect x="230.6" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.04%)</title><rect x="230.6" y="691.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.02%)</title><rect x="230.7" y="675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.7" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,320 samples, 16.15%)</title><rect x="231.0" y="707.0" width="190.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.0" y="718.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,319 samples, 16.13%)</title><rect x="231.1" y="691.0" width="190.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.1" y="702.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (6 samples, 0.07%)</title><rect x="232.6" y="675.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.6" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.06%)</title><rect x="232.7" y="659.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="235.7" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.06%)</title><rect x="232.7" y="643.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.7" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (5 samples, 0.06%)</title><rect x="232.7" y="627.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.7" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (5 samples, 0.06%)</title><rect x="232.7" y="611.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (4 samples, 0.05%)</title><rect x="232.9" y="595.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1,264 samples, 15.46%)</title><rect x="233.4" y="675.0" width="182.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.4" y="686.0">sun/nio/ch/IOUtil.writeF..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1,264 samples, 15.46%)</title><rect x="233.4" y="659.0" width="182.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.4" y="670.0">sun/nio/ch/SocketDispatc..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1,264 samples, 15.46%)</title><rect x="233.4" y="643.0" width="182.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.4" y="654.0">sun/nio/ch/FileDispatche..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (10 samples, 0.12%)</title><rect x="238.3" y="627.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="241.3" y="638.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.02%)</title><rect x="239.8" y="627.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="242.8" y="638.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.02%)</title><rect x="240.1" y="627.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="243.1" y="638.0"></text>
</g>
<g>
<title>write (1,216 samples, 14.87%)</title><rect x="240.4" y="627.0" width="175.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="243.4" y="638.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (39 samples, 0.48%)</title><rect x="415.9" y="675.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="418.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 0.16%)</title><rect x="416.3" y="659.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.05%)</title><rect x="417.6" y="643.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="420.6" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="417.8" y="627.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="420.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (23 samples, 0.28%)</title><rect x="418.2" y="659.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.2" y="670.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.12%)</title><rect x="419.5" y="643.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="422.5" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.12%)</title><rect x="419.5" y="627.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="422.5" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.10%)</title><rect x="419.8" y="611.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.8" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.10%)</title><rect x="419.8" y="595.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (3 samples, 0.04%)</title><rect x="420.9" y="643.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (11 samples, 0.13%)</title><rect x="421.7" y="707.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.7" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.11%)</title><rect x="423.4" y="803.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="426.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.06%)</title><rect x="424.0" y="787.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="427.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.02%)</title><rect x="424.1" y="771.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.02%)</title><rect x="424.4" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (55 samples, 0.67%)</title><rect x="424.7" y="819.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (9 samples, 0.11%)</title><rect x="425.6" y="803.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="428.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.02%)</title><rect x="426.6" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (17 samples, 0.21%)</title><rect x="426.9" y="803.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="429.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (7 samples, 0.09%)</title><rect x="427.1" y="787.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="430.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.09%)</title><rect x="428.3" y="787.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="431.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.06%)</title><rect x="428.4" y="771.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="431.4" y="782.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.04%)</title><rect x="429.3" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.3" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.09%)</title><rect x="429.7" y="803.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="432.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (13 samples, 0.16%)</title><rect x="430.8" y="803.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.13%)</title><rect x="431.0" y="787.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="434.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.13%)</title><rect x="431.0" y="771.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="434.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (10 samples, 0.12%)</title><rect x="431.2" y="755.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (1,003 samples, 12.27%)</title><rect x="432.6" y="819.0" width="144.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="435.6" y="830.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="432.8" y="803.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.8" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="432.8" y="787.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="435.8" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="433.1" y="771.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="436.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="433.1" y="755.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.1" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="433.1" y="739.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.1" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="433.1" y="723.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="436.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.doAction (998 samples, 12.21%)</title><rect x="433.4" y="803.0" width="144.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.4" y="814.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.get (989 samples, 12.10%)</title><rect x="433.5" y="787.0" width="142.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.5" y="798.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (6 samples, 0.07%)</title><rect x="434.4" y="771.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="437.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.05%)</title><rect x="435.2" y="771.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="438.2" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (102 samples, 1.25%)</title><rect x="435.8" y="771.0" width="14.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="438.8" y="782.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (5 samples, 0.06%)</title><rect x="436.8" y="755.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="439.8" y="766.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (16 samples, 0.20%)</title><rect x="437.5" y="755.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="440.5" y="766.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.02%)</title><rect x="437.5" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="440.5" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (13 samples, 0.16%)</title><rect x="437.8" y="739.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="440.8" y="750.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (12 samples, 0.15%)</title><rect x="438.0" y="723.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="441.0" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (10 samples, 0.12%)</title><rect x="438.3" y="707.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="441.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (61 samples, 0.75%)</title><rect x="440.1" y="755.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="443.1" y="766.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.02%)</title><rect x="442.9" y="739.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="445.9" y="750.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (4 samples, 0.05%)</title><rect x="443.2" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="446.2" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="443.7" y="739.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="446.7" y="750.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="443.7" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="446.7" y="734.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (13 samples, 0.16%)</title><rect x="444.0" y="739.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="447.0" y="750.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (10 samples, 0.12%)</title><rect x="444.5" y="723.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="447.5" y="734.0"></text>
</g>
<g>
<title>CompiledMethod::is_method_handle_return(unsigned char*) (2 samples, 0.02%)</title><rect x="445.9" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="448.9" y="750.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (4 samples, 0.05%)</title><rect x="446.2" y="739.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="449.2" y="750.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack() (2 samples, 0.02%)</title><rect x="446.9" y="739.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="449.9" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (3 samples, 0.04%)</title><rect x="447.4" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="450.4" y="750.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.04%)</title><rect x="447.8" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="450.8" y="750.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (5 samples, 0.06%)</title><rect x="448.2" y="739.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="451.2" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (4 samples, 0.05%)</title><rect x="448.9" y="755.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="451.9" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (7 samples, 0.09%)</title><rect x="449.5" y="755.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="452.5" y="766.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.04%)</title><rect x="450.1" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="453.1" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="450.2" y="723.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="453.2" y="734.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.02%)</title><rect x="450.2" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="453.2" y="718.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (6 samples, 0.07%)</title><rect x="450.7" y="771.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="453.7" y="782.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (4 samples, 0.05%)</title><rect x="451.7" y="771.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="454.7" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.04%)</title><rect x="452.4" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (19 samples, 0.23%)</title><rect x="452.8" y="771.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="455.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (836 samples, 10.23%)</title><rect x="455.6" y="771.0" width="120.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="458.6" y="782.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (7 samples, 0.09%)</title><rect x="458.6" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.6" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/157456214.invoke (7 samples, 0.09%)</title><rect x="458.6" y="739.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.6" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (7 samples, 0.09%)</title><rect x="458.6" y="723.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="461.6" y="734.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (3 samples, 0.04%)</title><rect x="458.6" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.02%)</title><rect x="458.8" y="691.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="461.8" y="702.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2 samples, 0.02%)</title><rect x="459.0" y="707.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (81 samples, 0.99%)</title><rect x="459.6" y="755.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Class.getName (2 samples, 0.02%)</title><rect x="460.5" y="739.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="463.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (55 samples, 0.67%)</title><rect x="460.8" y="739.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.8" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (54 samples, 0.66%)</title><rect x="460.9" y="723.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="463.9" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (30 samples, 0.37%)</title><rect x="461.8" y="707.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.8" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.12%)</title><rect x="463.5" y="691.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.5" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.09%)</title><rect x="464.0" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="467.0" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.09%)</title><rect x="465.1" y="691.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="468.1" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.02%)</title><rect x="466.1" y="707.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.02%)</title><rect x="466.1" y="691.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.1" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (4 samples, 0.05%)</title><rect x="466.4" y="707.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="469.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (10 samples, 0.12%)</title><rect x="467.0" y="707.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="470.0" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="468.4" y="707.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="471.4" y="718.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (18 samples, 0.22%)</title><rect x="468.7" y="739.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14 samples, 0.17%)</title><rect x="469.3" y="723.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="472.3" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (10 samples, 0.12%)</title><rect x="469.9" y="707.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="472.9" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (703 samples, 8.60%)</title><rect x="471.3" y="755.0" width="101.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="474.3" y="766.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (702 samples, 8.59%)</title><rect x="471.5" y="739.0" width="101.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.5" y="750.0">org/rocksdb/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (693 samples, 8.48%)</title><rect x="472.6" y="723.0" width="100.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="475.6" y="734.0">Java_org_roc..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (3 samples, 0.04%)</title><rect x="474.6" y="707.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="477.6" y="718.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (2 samples, 0.02%)</title><rect x="475.1" y="707.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="478.1" y="718.0"></text>
</g>
<g>
<title>free (6 samples, 0.07%)</title><rect x="475.4" y="707.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="478.4" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.02%)</title><rect x="476.2" y="707.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="479.2" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.04%)</title><rect x="476.5" y="707.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="479.5" y="718.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.11%)</title><rect x="477.1" y="707.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="480.1" y="718.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (6 samples, 0.07%)</title><rect x="478.4" y="707.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="481.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (5 samples, 0.06%)</title><rect x="479.3" y="707.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="482.3" y="718.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (641 samples, 7.84%)</title><rect x="480.0" y="707.0" width="92.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="483.0" y="718.0">rocksdb_get..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (7 samples, 0.09%)</title><rect x="481.1" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="484.1" y="702.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.04%)</title><rect x="482.1" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="485.1" y="702.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.06%)</title><rect x="482.6" y="691.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="485.6" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (7 samples, 0.09%)</title><rect x="483.3" y="691.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="486.3" y="702.0"></text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.02%)</title><rect x="484.3" y="691.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="487.3" y="702.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (2 samples, 0.02%)</title><rect x="484.6" y="691.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="487.6" y="702.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (9 samples, 0.11%)</title><rect x="484.9" y="691.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="487.9" y="702.0"></text>
</g>
<g>
<title>_setcontext (3 samples, 0.04%)</title><rect x="486.2" y="691.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="489.2" y="702.0"></text>
</g>
<g>
<title>free (14 samples, 0.17%)</title><rect x="486.8" y="691.0" width="2.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="489.8" y="702.0"></text>
</g>
<g>
<title>tiny_size (7 samples, 0.09%)</title><rect x="487.8" y="675.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="490.8" y="686.0"></text>
</g>
<g>
<title>free_tiny (9 samples, 0.11%)</title><rect x="488.8" y="691.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="491.8" y="702.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (18 samples, 0.22%)</title><rect x="490.1" y="691.0" width="2.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="493.1" y="702.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="490.4" y="675.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="493.4" y="686.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.02%)</title><rect x="490.7" y="675.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="493.7" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (12 samples, 0.15%)</title><rect x="490.9" y="675.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="493.9" y="686.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.10%)</title><rect x="491.2" y="659.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="494.2" y="670.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.09%)</title><rect x="491.4" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="494.4" y="654.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.09%)</title><rect x="491.4" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="494.4" y="638.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.07%)</title><rect x="491.4" y="611.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="494.4" y="622.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (2 samples, 0.02%)</title><rect x="491.5" y="595.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="494.5" y="606.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (64 samples, 0.78%)</title><rect x="492.7" y="691.0" width="9.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="495.7" y="702.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (3 samples, 0.04%)</title><rect x="494.8" y="675.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="497.8" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (26 samples, 0.32%)</title><rect x="495.6" y="675.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="498.6" y="686.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (24 samples, 0.29%)</title><rect x="495.9" y="659.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="498.9" y="670.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (22 samples, 0.27%)</title><rect x="496.1" y="643.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="499.1" y="654.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (19 samples, 0.23%)</title><rect x="496.6" y="627.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="499.6" y="638.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (14 samples, 0.17%)</title><rect x="496.6" y="611.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="499.6" y="622.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (4 samples, 0.05%)</title><rect x="496.7" y="595.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="499.7" y="606.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.02%)</title><rect x="497.4" y="595.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="500.4" y="606.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="497.7" y="595.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="500.7" y="606.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.05%)</title><rect x="498.0" y="595.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="501.0" y="606.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="498.0" y="579.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="501.0" y="590.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="498.6" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="501.6" y="622.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="499.0" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="502.0" y="622.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (10 samples, 0.12%)</title><rect x="499.3" y="675.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="502.3" y="686.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (6 samples, 0.07%)</title><rect x="500.8" y="675.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="503.8" y="686.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (2 samples, 0.02%)</title><rect x="501.2" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="504.2" y="670.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (2 samples, 0.02%)</title><rect x="501.6" y="675.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="504.6" y="686.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.05%)</title><rect x="501.9" y="691.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="504.9" y="702.0"></text>
</g>
<g>
<title>operator new(unsigned long) (37 samples, 0.45%)</title><rect x="502.5" y="691.0" width="5.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="505.5" y="702.0"></text>
</g>
<g>
<title>malloc (35 samples, 0.43%)</title><rect x="502.6" y="675.0" width="5.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="505.6" y="686.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.04%)</title><rect x="502.6" y="659.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="505.6" y="670.0"></text>
</g>
<g>
<title>malloc_zone_malloc (27 samples, 0.33%)</title><rect x="503.1" y="659.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="506.1" y="670.0"></text>
</g>
<g>
<title>default_zone_malloc (7 samples, 0.09%)</title><rect x="503.7" y="643.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="506.7" y="654.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (15 samples, 0.18%)</title><rect x="504.7" y="643.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="507.7" y="654.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (13 samples, 0.16%)</title><rect x="505.0" y="627.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="508.0" y="638.0"></text>
</g>
<g>
<title>szone_malloc (4 samples, 0.05%)</title><rect x="507.0" y="659.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="510.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (435 samples, 5.32%)</title><rect x="507.8" y="691.0" width="62.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="510.8" y="702.0">rocksd..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (4 samples, 0.05%)</title><rect x="508.6" y="675.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="511.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.02%)</title><rect x="509.1" y="675.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="512.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (423 samples, 5.17%)</title><rect x="509.4" y="675.0" width="61.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.4" y="686.0">rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (420 samples, 5.14%)</title><rect x="509.7" y="659.0" width="60.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="512.7" y="670.0">rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.04%)</title><rect x="509.7" y="643.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="512.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.04%)</title><rect x="510.1" y="643.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="513.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.02%)</title><rect x="510.6" y="643.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="513.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (395 samples, 4.83%)</title><rect x="510.9" y="643.0" width="57.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="513.9" y="654.0">rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attrs (18 samples, 0.22%)</title><rect x="514.9" y="627.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="517.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (26 samples, 0.32%)</title><rect x="517.8" y="627.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="520.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.04%)</title><rect x="518.4" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="521.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.02%)</title><rect x="518.8" y="611.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="521.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (15 samples, 0.18%)</title><rect x="519.1" y="611.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="522.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (3 samples, 0.04%)</title><rect x="520.8" y="595.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="523.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.02%)</title><rect x="521.3" y="611.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="524.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (8 samples, 0.10%)</title><rect x="521.5" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="524.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.02%)</title><rect x="521.8" y="611.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="524.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.02%)</title><rect x="521.8" y="595.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="524.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.02%)</title><rect x="522.3" y="611.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="525.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.02%)</title><rect x="522.7" y="627.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="525.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (2 samples, 0.02%)</title><rect x="523.0" y="627.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="526.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (256 samples, 3.13%)</title><rect x="523.4" y="627.0" width="37.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="526.4" y="638.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.02%)</title><rect x="526.5" y="611.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="529.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.04%)</title><rect x="526.7" y="611.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="529.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.02%)</title><rect x="527.2" y="611.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="530.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (227 samples, 2.78%)</title><rect x="527.5" y="611.0" width="32.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="530.5" y="622.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.02%)</title><rect x="547.0" y="595.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="550.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (83 samples, 1.02%)</title><rect x="547.2" y="595.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="550.2" y="606.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (10 samples, 0.12%)</title><rect x="550.6" y="579.0" width="1.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="553.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (40 samples, 0.49%)</title><rect x="552.0" y="579.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="555.0" y="590.0"></text>
</g>
<g>
<title>_platform_memcmp (13 samples, 0.16%)</title><rect x="555.9" y="563.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="558.9" y="574.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (10 samples, 0.12%)</title><rect x="557.8" y="579.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="560.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.05%)</title><rect x="559.2" y="595.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="562.2" y="606.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="559.8" y="595.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="562.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (3 samples, 0.04%)</title><rect x="560.4" y="627.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="563.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.02%)</title><rect x="560.8" y="627.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="563.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.05%)</title><rect x="561.2" y="627.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="564.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.02%)</title><rect x="561.8" y="627.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="564.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (38 samples, 0.46%)</title><rect x="562.1" y="627.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="565.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (7 samples, 0.09%)</title><rect x="565.1" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="568.1" y="622.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.04%)</title><rect x="565.4" y="595.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="568.4" y="606.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="565.9" y="595.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="568.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (6 samples, 0.07%)</title><rect x="566.2" y="611.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="569.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.02%)</title><rect x="567.0" y="611.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="570.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.02%)</title><rect x="567.3" y="611.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="570.3" y="622.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="567.6" y="627.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="570.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.05%)</title><rect x="567.9" y="643.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="570.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (6 samples, 0.07%)</title><rect x="568.7" y="643.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="571.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.02%)</title><rect x="569.6" y="643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="572.6" y="654.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="569.9" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="572.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (7 samples, 0.09%)</title><rect x="570.6" y="691.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="573.6" y="702.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="571.6" y="691.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="574.6" y="702.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.05%)</title><rect x="571.9" y="691.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="574.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (19 samples, 0.23%)</title><rect x="572.8" y="755.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="575.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (15 samples, 0.18%)</title><rect x="573.4" y="739.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="576.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.02%)</title><rect x="573.7" y="723.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="576.7" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.02%)</title><rect x="573.7" y="707.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="576.7" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="573.7" y="691.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="576.7" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.10%)</title><rect x="573.9" y="723.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="576.9" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="573.9" y="707.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="576.9" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="573.9" y="691.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="576.9" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.07%)</title><rect x="574.2" y="675.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="577.2" y="686.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (3 samples, 0.04%)</title><rect x="575.1" y="723.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="578.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementLite.&lt;init&gt; (5 samples, 0.06%)</title><rect x="575.5" y="755.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="578.5" y="766.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (5 samples, 0.06%)</title><rect x="575.5" y="739.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="578.5" y="750.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (5 samples, 0.06%)</title><rect x="575.5" y="723.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="578.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (5 samples, 0.06%)</title><rect x="575.5" y="707.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (5 samples, 0.06%)</title><rect x="575.5" y="691.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="578.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.put (8 samples, 0.10%)</title><rect x="576.3" y="787.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="579.3" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.06%)</title><rect x="576.4" y="771.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="579.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.upsert (2 samples, 0.02%)</title><rect x="577.1" y="771.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="580.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (2 samples, 0.02%)</title><rect x="577.1" y="755.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="580.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (82 samples, 1.00%)</title><rect x="577.4" y="835.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="580.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (81 samples, 0.99%)</title><rect x="577.6" y="819.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="580.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (54 samples, 0.66%)</title><rect x="577.6" y="803.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="580.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.equals (40 samples, 0.49%)</title><rect x="578.0" y="787.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="581.0" y="798.0"></text>
</g>
<g>
<title>__cxx_global_var_init (4 samples, 0.05%)</title><rect x="578.9" y="771.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="581.9" y="782.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.07%)</title><rect x="579.4" y="771.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="582.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.02%)</title><rect x="580.3" y="771.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.3" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (22 samples, 0.27%)</title><rect x="580.6" y="771.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="583.6" y="782.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.02%)</title><rect x="581.0" y="755.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="584.0" y="766.0"></text>
</g>
<g>
<title>gettimeofday (10 samples, 0.12%)</title><rect x="581.3" y="755.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="584.3" y="766.0"></text>
</g>
<g>
<title>_res (3 samples, 0.04%)</title><rect x="581.3" y="739.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="584.3" y="750.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (7 samples, 0.09%)</title><rect x="581.7" y="739.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="584.7" y="750.0"></text>
</g>
<g>
<title>_res (5 samples, 0.06%)</title><rect x="582.0" y="723.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="585.0" y="734.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (7 samples, 0.09%)</title><rect x="582.8" y="755.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="585.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.13%)</title><rect x="583.8" y="787.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="586.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (25 samples, 0.31%)</title><rect x="585.3" y="803.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (23 samples, 0.28%)</title><rect x="585.6" y="787.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (22 samples, 0.27%)</title><rect x="585.8" y="771.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="588.8" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="587.8" y="755.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="590.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="588.2" y="755.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="591.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOStatus.normalize (2 samples, 0.02%)</title><rect x="589.0" y="803.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="592.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (8 samples, 0.10%)</title><rect x="589.2" y="835.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="592.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.10%)</title><rect x="589.2" y="819.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.2" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.02%)</title><rect x="590.1" y="803.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.06%)</title><rect x="590.4" y="851.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="593.4" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (75 samples, 0.92%)</title><rect x="591.1" y="867.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (29 samples, 0.35%)</title><rect x="591.3" y="851.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="594.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.06%)</title><rect x="594.7" y="835.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="597.7" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.06%)</title><rect x="594.7" y="819.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="597.7" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (45 samples, 0.55%)</title><rect x="595.5" y="851.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="598.5" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (44 samples, 0.54%)</title><rect x="595.6" y="835.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="598.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="601.4" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="604.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="601.4" y="803.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="604.4" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.04%)</title><rect x="601.4" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="604.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (51 samples, 0.62%)</title><rect x="601.9" y="867.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (45 samples, 0.55%)</title><rect x="602.1" y="851.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="605.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (44 samples, 0.54%)</title><rect x="602.2" y="835.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="605.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.charAt (9 samples, 0.11%)</title><rect x="605.1" y="819.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (6 samples, 0.07%)</title><rect x="605.3" y="803.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="608.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.04%)</title><rect x="605.7" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.02%)</title><rect x="606.1" y="803.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.06%)</title><rect x="606.4" y="819.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.05%)</title><rect x="606.6" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.6" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="607.1" y="819.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (7 samples, 0.09%)</title><rect x="607.6" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.6" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (5 samples, 0.06%)</title><rect x="608.6" y="851.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (6 samples, 0.07%)</title><rect x="609.3" y="867.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="612.3" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (15 samples, 0.18%)</title><rect x="610.2" y="867.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="613.2" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.13%)</title><rect x="610.8" y="851.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="613.8" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.12%)</title><rect x="610.9" y="835.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="613.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="611.9" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="614.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="611.9" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="614.9" y="814.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.04%)</title><rect x="611.9" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="614.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.15%)</title><rect x="612.3" y="867.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="615.3" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.13%)</title><rect x="612.5" y="851.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="615.5" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (533 samples, 6.52%)</title><rect x="614.1" y="883.0" width="76.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.1" y="894.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (528 samples, 6.46%)</title><rect x="614.5" y="867.0" width="76.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="617.5" y="878.0">one/nio/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.15%)</title><rect x="614.9" y="851.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.9" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.12%)</title><rect x="615.2" y="835.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="618.2" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.12%)</title><rect x="615.2" y="819.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="618.2" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.12%)</title><rect x="615.2" y="803.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="618.2" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.05%)</title><rect x="615.8" y="787.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="618.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="616.4" y="787.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="619.4" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="616.4" y="771.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="619.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (513 samples, 6.28%)</title><rect x="616.7" y="851.0" width="74.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="619.7" y="862.0">sun/nio/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (20 samples, 0.24%)</title><rect x="617.1" y="835.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="620.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (20 samples, 0.24%)</title><rect x="617.1" y="819.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="620.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (20 samples, 0.24%)</title><rect x="617.1" y="803.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="620.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (20 samples, 0.24%)</title><rect x="617.1" y="787.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="620.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (7 samples, 0.09%)</title><rect x="617.1" y="771.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="620.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (13 samples, 0.16%)</title><rect x="618.1" y="771.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="621.1" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (13 samples, 0.16%)</title><rect x="618.1" y="755.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="621.1" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (8 samples, 0.10%)</title><rect x="620.1" y="835.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="623.1" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (478 samples, 5.85%)</title><rect x="621.6" y="835.0" width="69.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="624.6" y="846.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (478 samples, 5.85%)</title><rect x="621.6" y="819.0" width="69.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.6" y="830.0">sun/nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (8 samples, 0.10%)</title><rect x="621.7" y="803.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="624.7" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.10%)</title><rect x="621.7" y="787.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="624.7" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (7 samples, 0.09%)</title><rect x="621.9" y="771.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="624.9" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (6 samples, 0.07%)</title><rect x="622.0" y="755.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="625.0" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (5 samples, 0.06%)</title><rect x="622.2" y="739.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.2" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (5 samples, 0.06%)</title><rect x="622.2" y="723.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="625.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (4 samples, 0.05%)</title><rect x="622.3" y="707.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="625.3" y="718.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (4 samples, 0.05%)</title><rect x="622.3" y="691.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="625.3" y="702.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (2 samples, 0.02%)</title><rect x="622.3" y="675.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="625.3" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="622.6" y="675.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="625.6" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (458 samples, 5.60%)</title><rect x="622.9" y="803.0" width="66.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.9" y="814.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (455 samples, 5.57%)</title><rect x="623.3" y="787.0" width="65.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.3" y="798.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (453 samples, 5.54%)</title><rect x="623.6" y="771.0" width="65.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="626.6" y="782.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (20 samples, 0.24%)</title><rect x="628.2" y="755.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="631.2" y="766.0"></text>
</g>
<g>
<title>fdval (6 samples, 0.07%)</title><rect x="630.2" y="739.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="633.2" y="750.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.02%)</title><rect x="631.1" y="755.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="634.1" y="766.0"></text>
</g>
<g>
<title>read (399 samples, 4.88%)</title><rect x="631.4" y="755.0" width="57.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="634.4" y="766.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.13%)</title><rect x="689.0" y="803.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.0" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.04%)</title><rect x="690.1" y="787.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="693.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.02%)</title><rect x="690.3" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="693.3" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.02%)</title><rect x="690.7" y="867.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="693.7" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.06%)</title><rect x="691.0" y="899.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="694.0" y="910.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.05%)</title><rect x="691.0" y="883.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="694.0" y="894.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.04%)</title><rect x="691.2" y="867.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="694.2" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.11%)</title><rect x="691.7" y="931.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="694.7" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.04%)</title><rect x="693.0" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="696.0" y="942.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25859] (2,933 samples, 35.88%)</title><rect x="693.6" y="947.0" width="423.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="696.6" y="958.0">[NIO Selector #2 tid=25859]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.02%)</title><rect x="693.8" y="931.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="696.8" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="693.8" y="915.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="696.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="693.8" y="899.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="696.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.02%)</title><rect x="694.0" y="931.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="697.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.02%)</title><rect x="694.0" y="915.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="697.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.02%)</title><rect x="694.0" y="899.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="697.0" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="694.0" y="883.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="697.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (5 samples, 0.06%)</title><rect x="694.3" y="931.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="697.3" y="942.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.02%)</title><rect x="695.2" y="931.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.2" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.04%)</title><rect x="695.6" y="931.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="698.6" y="942.0"></text>
</g>
<g>
<title>[not_walkable_Java] (16 samples, 0.20%)</title><rect x="696.2" y="931.0" width="2.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="699.2" y="942.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (5 samples, 0.06%)</title><rect x="696.3" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="699.3" y="926.0"></text>
</g>
<g>
<title>CompiledMethod::is_method_handle_return(unsigned char*) (2 samples, 0.02%)</title><rect x="697.1" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="700.1" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (8 samples, 0.10%)</title><rect x="697.4" y="915.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="700.4" y="926.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.05%)</title><rect x="697.5" y="899.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="700.5" y="910.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.04%)</title><rect x="698.1" y="899.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="701.1" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (37 samples, 0.45%)</title><rect x="698.5" y="931.0" width="5.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="701.5" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (16 samples, 0.20%)</title><rect x="701.4" y="915.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="704.4" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (16 samples, 0.20%)</title><rect x="701.4" y="899.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="704.4" y="910.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (9 samples, 0.11%)</title><rect x="701.4" y="883.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="704.4" y="894.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.07%)</title><rect x="702.7" y="883.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.7" y="894.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (6 samples, 0.07%)</title><rect x="702.7" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="705.7" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="703.9" y="931.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.9" y="942.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (2 samples, 0.02%)</title><rect x="704.1" y="931.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="707.1" y="942.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,857 samples, 34.95%)</title><rect x="704.4" y="931.0" width="412.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="707.4" y="942.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.05%)</title><rect x="705.2" y="915.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.2" y="926.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,064 samples, 13.02%)</title><rect x="705.9" y="915.0" width="153.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="708.9" y="926.0">one/nio/net/JavaSel..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (27 samples, 0.33%)</title><rect x="706.0" y="899.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (13 samples, 0.16%)</title><rect x="706.9" y="883.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="709.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (12 samples, 0.15%)</title><rect x="707.0" y="867.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="710.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (8 samples, 0.10%)</title><rect x="708.8" y="883.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (8 samples, 0.10%)</title><rect x="708.8" y="867.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="711.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.05%)</title><rect x="708.8" y="851.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="709.1" y="835.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="709.1" y="819.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="712.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.05%)</title><rect x="709.3" y="851.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="712.3" y="862.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (45 samples, 0.55%)</title><rect x="709.9" y="899.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (45 samples, 0.55%)</title><rect x="709.9" y="883.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (39 samples, 0.48%)</title><rect x="710.6" y="867.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="713.6" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (32 samples, 0.39%)</title><rect x="711.1" y="851.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="714.1" y="862.0"></text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.02%)</title><rect x="711.2" y="835.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="714.2" y="846.0"></text>
</g>
<g>
<title>_res (6 samples, 0.07%)</title><rect x="711.5" y="835.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="714.5" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (19 samples, 0.23%)</title><rect x="712.4" y="835.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="715.4" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.05%)</title><rect x="715.1" y="835.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="718.1" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (4 samples, 0.05%)</title><rect x="715.7" y="851.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="718.7" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (3 samples, 0.04%)</title><rect x="715.7" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="718.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (991 samples, 12.12%)</title><rect x="716.4" y="899.0" width="143.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.4" y="910.0">sun/nio/ch/Selecto..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (991 samples, 12.12%)</title><rect x="716.4" y="883.0" width="143.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.4" y="894.0">sun/nio/ch/Selecto..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (991 samples, 12.12%)</title><rect x="716.4" y="867.0" width="143.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="719.4" y="878.0">sun/nio/ch/KQueueS..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (972 samples, 11.89%)</title><rect x="716.4" y="851.0" width="140.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="719.4" y="862.0">sun/nio/ch/KQueue...</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (11 samples, 0.13%)</title><rect x="724.4" y="835.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="727.4" y="846.0"></text>
</g>
<g>
<title>kevent (906 samples, 11.08%)</title><rect x="725.9" y="835.0" width="130.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="728.9" y="846.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (12 samples, 0.15%)</title><rect x="856.7" y="851.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="859.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (10 samples, 0.12%)</title><rect x="857.0" y="835.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="860.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.10%)</title><rect x="857.0" y="819.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.10%)</title><rect x="857.0" y="803.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 0.10%)</title><rect x="857.0" y="787.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.0" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (6 samples, 0.07%)</title><rect x="858.4" y="851.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="861.4" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,783 samples, 21.81%)</title><rect x="859.5" y="915.0" width="257.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="862.5" y="926.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,774 samples, 21.70%)</title><rect x="860.0" y="899.0" width="256.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.0" y="910.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,523 samples, 18.63%)</title><rect x="860.3" y="883.0" width="219.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="863.3" y="894.0">one/nio/http/HttpSession.proc..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,425 samples, 17.43%)</title><rect x="862.8" y="867.0" width="205.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="865.8" y="878.0">one/nio/http/HttpSession.ha..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,422 samples, 17.39%)</title><rect x="862.9" y="851.0" width="205.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="865.9" y="862.0">one/nio/http/HttpServer.han..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,386 samples, 16.95%)</title><rect x="863.1" y="835.0" width="200.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="866.1" y="846.0">RequestHandler1_entity.han..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (768 samples, 9.39%)</title><rect x="863.1" y="819.0" width="110.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="866.1" y="830.0">one/nio/http/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (10 samples, 0.12%)</title><rect x="863.4" y="803.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="866.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (753 samples, 9.21%)</title><rect x="864.8" y="803.0" width="108.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.8" y="814.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (20 samples, 0.24%)</title><rect x="864.8" y="787.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (15 samples, 0.18%)</title><rect x="865.5" y="771.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="868.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (9 samples, 0.11%)</title><rect x="865.5" y="755.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="868.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.02%)</title><rect x="866.5" y="739.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="869.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.07%)</title><rect x="866.8" y="755.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="869.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.07%)</title><rect x="866.8" y="739.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="869.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="867.4" y="723.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.4" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (733 samples, 8.97%)</title><rect x="867.7" y="787.0" width="105.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.7" y="798.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session.write (733 samples, 8.97%)</title><rect x="867.7" y="771.0" width="105.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.7" y="782.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (733 samples, 8.97%)</title><rect x="867.7" y="755.0" width="105.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.7" y="766.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (733 samples, 8.97%)</title><rect x="867.7" y="739.0" width="105.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="870.7" y="750.0">one/nio/net/J..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (732 samples, 8.95%)</title><rect x="867.8" y="723.0" width="105.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.8" y="734.0">sun/nio/ch/So..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="868.1" y="707.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="868.1" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="871.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.04%)</title><rect x="868.1" y="675.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="871.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.04%)</title><rect x="868.1" y="659.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.02%)</title><rect x="868.3" y="643.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.02%)</title><rect x="868.5" y="707.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="871.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.02%)</title><rect x="868.5" y="691.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="871.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.02%)</title><rect x="868.5" y="675.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="871.5" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (721 samples, 8.82%)</title><rect x="868.8" y="707.0" width="104.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="871.8" y="718.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (721 samples, 8.82%)</title><rect x="868.8" y="691.0" width="104.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="871.8" y="702.0">sun/nio/ch/I..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.02%)</title><rect x="869.1" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="872.1" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.02%)</title><rect x="869.1" y="659.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="872.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.02%)</title><rect x="869.1" y="643.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="872.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.02%)</title><rect x="869.1" y="627.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="872.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.02%)</title><rect x="869.1" y="611.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="872.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (699 samples, 8.55%)</title><rect x="869.4" y="675.0" width="100.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="872.4" y="686.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (699 samples, 8.55%)</title><rect x="869.4" y="659.0" width="100.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="872.4" y="670.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (699 samples, 8.55%)</title><rect x="869.4" y="643.0" width="100.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="872.4" y="654.0">sun/nio/ch/F..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (20 samples, 0.24%)</title><rect x="873.6" y="627.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="876.6" y="638.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.04%)</title><rect x="876.1" y="611.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="879.1" y="622.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.02%)</title><rect x="876.5" y="627.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="879.5" y="638.0"></text>
</g>
<g>
<title>write (648 samples, 7.93%)</title><rect x="876.8" y="627.0" width="93.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="879.8" y="638.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (18 samples, 0.22%)</title><rect x="970.3" y="675.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="973.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.07%)</title><rect x="970.3" y="659.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="973.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.02%)</title><rect x="970.9" y="643.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="973.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (12 samples, 0.15%)</title><rect x="971.2" y="659.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="974.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (3 samples, 0.04%)</title><rect x="972.5" y="643.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="975.5" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (4 samples, 0.05%)</title><rect x="972.9" y="707.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="975.9" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.04%)</title><rect x="973.5" y="803.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="976.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.02%)</title><rect x="973.6" y="787.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="976.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.02%)</title><rect x="973.6" y="771.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="976.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (23 samples, 0.28%)</title><rect x="973.9" y="819.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="976.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (11 samples, 0.13%)</title><rect x="974.5" y="803.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="977.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.10%)</title><rect x="974.9" y="787.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="977.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="975.2" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="978.2" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.04%)</title><rect x="975.7" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="978.7" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="975.7" y="755.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="978.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.07%)</title><rect x="976.4" y="803.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="979.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.06%)</title><rect x="976.5" y="787.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="979.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.06%)</title><rect x="976.5" y="771.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="979.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.06%)</title><rect x="976.5" y="755.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="979.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.entity (595 samples, 7.28%)</title><rect x="977.2" y="819.0" width="85.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.2" y="830.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.doAction (594 samples, 7.27%)</title><rect x="977.4" y="803.0" width="85.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.4" y="814.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.get (589 samples, 7.20%)</title><rect x="977.5" y="787.0" width="85.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="980.5" y="798.0">ru/mail/po..</text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.04%)</title><rect x="978.1" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (56 samples, 0.69%)</title><rect x="978.5" y="771.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.5" y="782.0"></text>
</g>
<g>
<title>CodeCache::find_nmethod(void*) (2 samples, 0.02%)</title><rect x="979.0" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="982.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (8 samples, 0.10%)</title><rect x="979.4" y="755.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="982.4" y="766.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (7 samples, 0.09%)</title><rect x="979.5" y="739.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="982.5" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.04%)</title><rect x="979.5" y="723.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="982.5" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.05%)</title><rect x="980.0" y="723.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.0" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.02%)</title><rect x="980.3" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (28 samples, 0.34%)</title><rect x="980.6" y="755.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.6" y="766.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (6 samples, 0.07%)</title><rect x="982.6" y="739.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.6" y="750.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (4 samples, 0.05%)</title><rect x="982.9" y="723.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.9" y="734.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (3 samples, 0.04%)</title><rect x="983.4" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="986.4" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.02%)</title><rect x="984.2" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.2" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (4 samples, 0.05%)</title><rect x="984.6" y="755.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.6" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (10 samples, 0.12%)</title><rect x="985.2" y="755.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.2" y="766.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (3 samples, 0.04%)</title><rect x="985.8" y="739.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.8" y="750.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.04%)</title><rect x="986.2" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.2" y="750.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="986.8" y="771.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.8" y="782.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (3 samples, 0.04%)</title><rect x="987.2" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="990.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (16 samples, 0.20%)</title><rect x="987.6" y="771.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="990.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.02%)</title><rect x="989.7" y="755.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="992.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.02%)</title><rect x="989.7" y="739.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="992.7" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.02%)</title><rect x="989.7" y="723.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="992.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RockDAO.get (503 samples, 6.15%)</title><rect x="989.9" y="771.0" width="72.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="992.9" y="782.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (9 samples, 0.11%)</title><rect x="991.8" y="755.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="994.8" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/157456214.invoke (9 samples, 0.11%)</title><rect x="991.8" y="739.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="994.8" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.11%)</title><rect x="991.8" y="723.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="994.8" y="734.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (7 samples, 0.09%)</title><rect x="991.8" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="994.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (7 samples, 0.09%)</title><rect x="991.8" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="994.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (6 samples, 0.07%)</title><rect x="992.0" y="675.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="995.0" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (59 samples, 0.72%)</title><rect x="993.1" y="755.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="996.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="993.4" y="739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="996.4" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="993.4" y="723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="996.4" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (38 samples, 0.46%)</title><rect x="993.7" y="739.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="996.7" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (36 samples, 0.44%)</title><rect x="994.0" y="723.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="997.0" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (14 samples, 0.17%)</title><rect x="995.1" y="707.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="998.1" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.10%)</title><rect x="995.7" y="691.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="998.7" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.04%)</title><rect x="996.4" y="675.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="999.4" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (2 samples, 0.02%)</title><rect x="997.2" y="707.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1000.2" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.04%)</title><rect x="997.6" y="707.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1000.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (4 samples, 0.05%)</title><rect x="998.0" y="707.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1001.0" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="998.7" y="707.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1001.7" y="718.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (17 samples, 0.21%)</title><rect x="999.2" y="739.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1002.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (13 samples, 0.16%)</title><rect x="999.8" y="723.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1002.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1000.3" y="707.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1003.3" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.09%)</title><rect x="1000.6" y="707.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1003.6" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1001.3" y="691.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1004.3" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (404 samples, 4.94%)</title><rect x="1001.6" y="755.0" width="58.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1004.6" y="766.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (404 samples, 4.94%)</title><rect x="1001.6" y="739.0" width="58.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1004.6" y="750.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (393 samples, 4.81%)</title><rect x="1003.1" y="723.0" width="56.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1006.1" y="734.0">Java_o..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.02%)</title><rect x="1005.4" y="707.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1008.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.05%)</title><rect x="1006.1" y="707.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1009.1" y="718.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (368 samples, 4.50%)</title><rect x="1006.7" y="707.0" width="53.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.7" y="718.0">rocks..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (4 samples, 0.05%)</title><rect x="1007.6" y="691.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1010.6" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.04%)</title><rect x="1008.4" y="691.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1011.4" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="1008.9" y="691.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.9" y="702.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="1009.3" y="691.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1012.3" y="702.0"></text>
</g>
<g>
<title>free (7 samples, 0.09%)</title><rect x="1010.0" y="691.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1013.0" y="702.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.06%)</title><rect x="1010.3" y="675.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1013.3" y="686.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.04%)</title><rect x="1011.0" y="691.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1014.0" y="702.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (15 samples, 0.18%)</title><rect x="1011.4" y="691.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1014.4" y="702.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.04%)</title><rect x="1012.0" y="675.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1015.0" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.10%)</title><rect x="1012.5" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.5" y="686.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.06%)</title><rect x="1012.6" y="659.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1015.6" y="670.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title><rect x="1012.6" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1015.6" y="654.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="1012.6" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1015.6" y="638.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="1012.6" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1015.6" y="622.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (2 samples, 0.02%)</title><rect x="1013.0" y="643.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.0" y="654.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (48 samples, 0.59%)</title><rect x="1013.6" y="691.0" width="6.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1016.6" y="702.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (4 samples, 0.05%)</title><rect x="1015.5" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1018.5" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (21 samples, 0.26%)</title><rect x="1016.4" y="675.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1019.4" y="686.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (18 samples, 0.22%)</title><rect x="1016.6" y="659.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.6" y="670.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (16 samples, 0.20%)</title><rect x="1016.9" y="643.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1019.9" y="654.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (15 samples, 0.18%)</title><rect x="1017.1" y="627.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.1" y="638.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (11 samples, 0.13%)</title><rect x="1017.2" y="611.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1020.2" y="622.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (3 samples, 0.04%)</title><rect x="1017.5" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1020.5" y="606.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.02%)</title><rect x="1017.9" y="595.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.9" y="606.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (2 samples, 0.02%)</title><rect x="1018.2" y="595.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1021.2" y="606.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="1018.8" y="611.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.8" y="622.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.06%)</title><rect x="1019.4" y="675.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1022.4" y="686.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (2 samples, 0.02%)</title><rect x="1020.3" y="675.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1023.3" y="686.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.02%)</title><rect x="1020.5" y="691.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1023.5" y="702.0"></text>
</g>
<g>
<title>operator new(unsigned long) (14 samples, 0.17%)</title><rect x="1020.8" y="691.0" width="2.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1023.8" y="702.0"></text>
</g>
<g>
<title>malloc (14 samples, 0.17%)</title><rect x="1020.8" y="675.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1023.8" y="686.0"></text>
</g>
<g>
<title>malloc_zone_malloc (10 samples, 0.12%)</title><rect x="1021.0" y="659.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1024.0" y="670.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.04%)</title><rect x="1021.4" y="643.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1024.4" y="654.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="1021.8" y="643.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1024.8" y="654.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="1022.0" y="627.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1025.0" y="638.0"></text>
</g>
<g>
<title>szone_malloc (2 samples, 0.02%)</title><rect x="1022.4" y="659.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1025.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (249 samples, 3.05%)</title><rect x="1022.9" y="691.0" width="35.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1025.9" y="702.0">roc..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (4 samples, 0.05%)</title><rect x="1023.3" y="675.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1026.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (242 samples, 2.96%)</title><rect x="1023.9" y="675.0" width="34.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1026.9" y="686.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (240 samples, 2.94%)</title><rect x="1024.2" y="659.0" width="34.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.2" y="670.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.02%)</title><rect x="1024.2" y="643.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1027.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.02%)</title><rect x="1024.4" y="643.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1027.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (224 samples, 2.74%)</title><rect x="1024.7" y="643.0" width="32.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.7" y="654.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (7 samples, 0.09%)</title><rect x="1026.9" y="627.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1029.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (21 samples, 0.26%)</title><rect x="1028.0" y="627.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1031.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.02%)</title><rect x="1029.5" y="611.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1032.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (5 samples, 0.06%)</title><rect x="1029.8" y="611.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1032.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.05%)</title><rect x="1030.5" y="611.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.04%)</title><rect x="1031.1" y="627.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (141 samples, 1.72%)</title><rect x="1031.7" y="627.0" width="20.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.7" y="638.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.02%)</title><rect x="1032.5" y="611.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1035.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (132 samples, 1.61%)</title><rect x="1033.0" y="611.0" width="19.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.0" y="622.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.04%)</title><rect x="1043.8" y="595.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1046.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (49 samples, 0.60%)</title><rect x="1044.2" y="595.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.2" y="606.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.05%)</title><rect x="1046.5" y="579.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1049.5" y="590.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.04%)</title><rect x="1047.1" y="579.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1050.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (23 samples, 0.28%)</title><rect x="1047.5" y="579.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1050.5" y="590.0"></text>
</g>
<g>
<title>_platform_memcmp (8 samples, 0.10%)</title><rect x="1049.7" y="563.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1052.7" y="574.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="1050.9" y="579.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.06%)</title><rect x="1051.3" y="595.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.02%)</title><rect x="1052.2" y="627.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (27 samples, 0.33%)</title><rect x="1052.9" y="627.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (10 samples, 0.12%)</title><rect x="1054.9" y="611.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.9" y="622.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (5 samples, 0.06%)</title><rect x="1055.5" y="595.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1058.5" y="606.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="1056.8" y="627.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.04%)</title><rect x="1057.1" y="643.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.02%)</title><rect x="1057.6" y="643.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.02%)</title><rect x="1057.9" y="643.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.9" y="654.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="1058.4" y="643.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.04%)</title><rect x="1058.8" y="691.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.8" y="702.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.04%)</title><rect x="1059.4" y="691.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.convertSub (11 samples, 0.13%)</title><rect x="1059.9" y="755.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1062.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBuff.array (8 samples, 0.10%)</title><rect x="1060.4" y="739.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1063.4" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.07%)</title><rect x="1060.5" y="723.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1063.5" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="1060.7" y="707.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1063.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="1060.7" y="691.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1063.7" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1061.0" y="675.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1064.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementLite.&lt;init&gt; (7 samples, 0.09%)</title><rect x="1061.5" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.5" y="766.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1061.7" y="739.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1064.7" y="750.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1061.7" y="723.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1064.7" y="734.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1061.7" y="707.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1064.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1061.7" y="691.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1064.7" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/MyService.put (4 samples, 0.05%)</title><rect x="1062.5" y="787.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1065.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1062.5" y="771.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1065.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (32 samples, 0.39%)</title><rect x="1063.1" y="835.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1066.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (32 samples, 0.39%)</title><rect x="1063.1" y="819.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1066.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (16 samples, 0.20%)</title><rect x="1063.1" y="803.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1066.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.equals (12 samples, 0.15%)</title><rect x="1063.3" y="787.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1066.3" y="798.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="1063.3" y="771.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1066.3" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.11%)</title><rect x="1063.7" y="771.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.7" y="782.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="1063.8" y="755.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1066.8" y="766.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.06%)</title><rect x="1064.3" y="755.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1067.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="1065.0" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1068.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (15 samples, 0.18%)</title><rect x="1065.4" y="803.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1068.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (15 samples, 0.18%)</title><rect x="1065.4" y="787.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1068.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (15 samples, 0.18%)</title><rect x="1065.4" y="771.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1068.4" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1066.7" y="755.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1069.7" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1067.0" y="755.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1070.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="1067.3" y="755.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1070.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.04%)</title><rect x="1067.7" y="835.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1070.7" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="1067.7" y="819.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1070.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.02%)</title><rect x="1068.2" y="851.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1071.2" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (25 samples, 0.31%)</title><rect x="1068.5" y="867.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1071.5" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (11 samples, 0.13%)</title><rect x="1068.5" y="851.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1071.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1069.8" y="835.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1072.8" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1069.8" y="819.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1072.8" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.17%)</title><rect x="1070.1" y="851.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1073.1" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.17%)</title><rect x="1070.1" y="835.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1073.1" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1071.8" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1074.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1071.8" y="803.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1074.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.02%)</title><rect x="1071.8" y="787.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1074.8" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (35 samples, 0.43%)</title><rect x="1072.1" y="867.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1075.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (29 samples, 0.35%)</title><rect x="1072.5" y="851.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1075.5" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (27 samples, 0.33%)</title><rect x="1072.8" y="835.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1075.8" y="846.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.10%)</title><rect x="1074.4" y="819.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1077.4" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (6 samples, 0.07%)</title><rect x="1074.7" y="803.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1077.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.04%)</title><rect x="1074.7" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1077.7" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.04%)</title><rect x="1075.1" y="787.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1078.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.02%)</title><rect x="1075.5" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1078.5" y="830.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="1075.5" y="803.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1078.5" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1075.8" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1078.8" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (3 samples, 0.04%)</title><rect x="1076.3" y="819.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1079.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (3 samples, 0.04%)</title><rect x="1076.7" y="851.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1079.7" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (6 samples, 0.07%)</title><rect x="1077.1" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1080.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.05%)</title><rect x="1078.0" y="867.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1081.0" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.13%)</title><rect x="1078.6" y="867.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1081.6" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.12%)</title><rect x="1078.7" y="851.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1081.7" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (249 samples, 3.05%)</title><rect x="1080.2" y="883.0" width="35.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1083.2" y="894.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (249 samples, 3.05%)</title><rect x="1080.2" y="867.0" width="35.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1083.2" y="878.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.07%)</title><rect x="1080.4" y="851.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1083.4" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1080.4" y="835.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1083.4" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1080.4" y="819.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1083.4" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="1080.6" y="803.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1083.6" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.05%)</title><rect x="1080.7" y="787.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1083.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.05%)</title><rect x="1080.7" y="771.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1083.7" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.05%)</title><rect x="1080.7" y="755.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1083.7" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (241 samples, 2.95%)</title><rect x="1081.3" y="851.0" width="34.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1084.3" y="862.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.11%)</title><rect x="1081.7" y="835.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1084.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.11%)</title><rect x="1081.7" y="819.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1084.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.11%)</title><rect x="1081.7" y="803.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1084.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.11%)</title><rect x="1081.7" y="787.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1084.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.05%)</title><rect x="1081.7" y="771.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1084.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.06%)</title><rect x="1082.3" y="771.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1085.3" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.06%)</title><rect x="1082.3" y="755.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1085.3" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.07%)</title><rect x="1083.2" y="835.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1086.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (222 samples, 2.72%)</title><rect x="1084.1" y="835.0" width="32.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1087.1" y="846.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (222 samples, 2.72%)</title><rect x="1084.1" y="819.0" width="32.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1087.1" y="830.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (8 samples, 0.10%)</title><rect x="1084.1" y="803.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1087.1" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.07%)</title><rect x="1084.3" y="787.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1087.3" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (6 samples, 0.07%)</title><rect x="1084.3" y="771.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1087.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (4 samples, 0.05%)</title><rect x="1084.3" y="755.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1087.3" y="766.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.02%)</title><rect x="1084.3" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.3" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.02%)</title><rect x="1084.9" y="755.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1087.9" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.02%)</title><rect x="1084.9" y="739.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1087.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (210 samples, 2.57%)</title><rect x="1085.2" y="803.0" width="30.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1088.2" y="814.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (210 samples, 2.57%)</title><rect x="1085.2" y="787.0" width="30.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1088.2" y="798.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (209 samples, 2.56%)</title><rect x="1085.4" y="771.0" width="30.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1088.4" y="782.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (6 samples, 0.07%)</title><rect x="1087.7" y="755.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1090.7" y="766.0"></text>
</g>
<g>
<title>fdval (5 samples, 0.06%)</title><rect x="1087.8" y="739.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1090.8" y="750.0"></text>
</g>
<g>
<title>read (187 samples, 2.29%)</title><rect x="1088.5" y="755.0" width="27.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1091.5" y="766.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.05%)</title><rect x="1115.5" y="803.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1118.5" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.06%)</title><rect x="1116.1" y="899.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.1" y="910.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="1116.4" y="883.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1119.4" y="894.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.02%)</title><rect x="1116.5" y="867.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1119.5" y="878.0"></text>
</g>
<g>
<title>_res (2 samples, 0.02%)</title><rect x="1116.5" y="851.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1119.5" y="862.0"></text>
</g>
<g>
<title>[tid=13571] (5 samples, 0.06%)</title><rect x="1117.0" y="947.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1120.0" y="958.0"></text>
</g>
<g>
<title>thread_start (5 samples, 0.06%)</title><rect x="1117.0" y="931.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1120.0" y="942.0"></text>
</g>
<g>
<title>_pthread_start (5 samples, 0.06%)</title><rect x="1117.0" y="915.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1120.0" y="926.0"></text>
</g>
<g>
<title>_pthread_body (5 samples, 0.06%)</title><rect x="1117.0" y="899.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1120.0" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.06%)</title><rect x="1117.0" y="883.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1120.0" y="894.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.06%)</title><rect x="1117.0" y="867.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.0" y="878.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (5 samples, 0.06%)</title><rect x="1117.0" y="851.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.0" y="862.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (5 samples, 0.06%)</title><rect x="1117.0" y="835.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.0" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (4 samples, 0.05%)</title><rect x="1117.1" y="819.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.1" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.05%)</title><rect x="1117.1" y="803.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.1" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.05%)</title><rect x="1117.1" y="787.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.1" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.05%)</title><rect x="1117.1" y="771.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.1" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.05%)</title><rect x="1117.1" y="755.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1120.1" y="766.0"></text>
</g>
<g>
<title>[tid=14339] (2 samples, 0.02%)</title><rect x="1117.7" y="947.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1120.7" y="958.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.02%)</title><rect x="1117.7" y="931.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1120.7" y="942.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.02%)</title><rect x="1117.7" y="915.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1120.7" y="926.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.02%)</title><rect x="1117.7" y="899.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1120.7" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.02%)</title><rect x="1117.7" y="883.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1120.7" y="894.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.02%)</title><rect x="1117.7" y="867.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.7" y="878.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.02%)</title><rect x="1117.7" y="851.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.7" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.02%)</title><rect x="1117.7" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.7" y="846.0"></text>
</g>
<g>
<title>[tid=23043] (10 samples, 0.12%)</title><rect x="1118.1" y="947.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1121.1" y="958.0"></text>
</g>
<g>
<title>thread_start (10 samples, 0.12%)</title><rect x="1118.1" y="931.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1121.1" y="942.0"></text>
</g>
<g>
<title>_pthread_start (10 samples, 0.12%)</title><rect x="1118.1" y="915.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1121.1" y="926.0"></text>
</g>
<g>
<title>_pthread_body (10 samples, 0.12%)</title><rect x="1118.1" y="899.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1121.1" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.12%)</title><rect x="1118.1" y="883.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1121.1" y="894.0"></text>
</g>
<g>
<title>Thread::call_run() (10 samples, 0.12%)</title><rect x="1118.1" y="867.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.1" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (10 samples, 0.12%)</title><rect x="1118.1" y="851.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.1" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (10 samples, 0.12%)</title><rect x="1118.1" y="835.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.1" y="846.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (10 samples, 0.12%)</title><rect x="1118.1" y="819.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.1" y="830.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (7 samples, 0.09%)</title><rect x="1118.1" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.1" y="814.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (7 samples, 0.09%)</title><rect x="1118.1" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.1" y="798.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (6 samples, 0.07%)</title><rect x="1118.3" y="771.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1121.3" y="782.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (3 samples, 0.04%)</title><rect x="1118.4" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.4" y="766.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.02%)</title><rect x="1118.8" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.8" y="766.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.04%)</title><rect x="1119.1" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.1" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.04%)</title><rect x="1119.1" y="787.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.1" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.04%)</title><rect x="1119.1" y="771.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.1" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="1119.1" y="755.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1122.1" y="766.0"></text>
</g>
<g>
<title>[tid=23555] (13 samples, 0.16%)</title><rect x="1119.6" y="947.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1122.6" y="958.0"></text>
</g>
<g>
<title>thread_start (13 samples, 0.16%)</title><rect x="1119.6" y="931.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1122.6" y="942.0"></text>
</g>
<g>
<title>_pthread_start (13 samples, 0.16%)</title><rect x="1119.6" y="915.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1122.6" y="926.0"></text>
</g>
<g>
<title>_pthread_body (13 samples, 0.16%)</title><rect x="1119.6" y="899.0" width="1.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1122.6" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 0.16%)</title><rect x="1119.6" y="883.0" width="1.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1122.6" y="894.0"></text>
</g>
<g>
<title>Thread::call_run() (13 samples, 0.16%)</title><rect x="1119.6" y="867.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.6" y="878.0"></text>
</g>
<g>
<title>WatcherThread::run() (13 samples, 0.16%)</title><rect x="1119.6" y="851.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.6" y="862.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.02%)</title><rect x="1119.6" y="835.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.6" y="846.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (11 samples, 0.13%)</title><rect x="1119.8" y="835.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.8" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 0.11%)</title><rect x="1120.0" y="819.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.0" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 0.11%)</title><rect x="1120.0" y="803.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.0" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 0.10%)</title><rect x="1120.1" y="787.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.1" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.09%)</title><rect x="1120.1" y="771.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1123.1" y="782.0"></text>
</g>
<g>
<title>[tid=42499] (6 samples, 0.07%)</title><rect x="1121.9" y="947.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1124.9" y="958.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.07%)</title><rect x="1121.9" y="931.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1124.9" y="942.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.07%)</title><rect x="1121.9" y="915.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1124.9" y="926.0"></text>
</g>
<g>
<title>_pthread_body (6 samples, 0.07%)</title><rect x="1121.9" y="899.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1124.9" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.07%)</title><rect x="1121.9" y="883.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1124.9" y="894.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.07%)</title><rect x="1121.9" y="867.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.9" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (6 samples, 0.07%)</title><rect x="1121.9" y="851.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.9" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (6 samples, 0.07%)</title><rect x="1121.9" y="835.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.9" y="846.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (6 samples, 0.07%)</title><rect x="1121.9" y="819.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.9" y="830.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (6 samples, 0.07%)</title><rect x="1121.9" y="803.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.9" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 0.07%)</title><rect x="1121.9" y="787.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.9" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (6 samples, 0.07%)</title><rect x="1121.9" y="771.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.9" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (6 samples, 0.07%)</title><rect x="1121.9" y="755.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.9" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 0.06%)</title><rect x="1121.9" y="739.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.9" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.02%)</title><rect x="1121.9" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.9" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.02%)</title><rect x="1121.9" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.9" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.02%)</title><rect x="1121.9" y="691.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.9" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.02%)</title><rect x="1121.9" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.9" y="686.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.02%)</title><rect x="1122.2" y="723.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.2" y="734.0"></text>
</g>
<g>
<title>[tid=43267] (464 samples, 5.68%)</title><rect x="1122.7" y="947.0" width="67.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1125.7" y="958.0">[tid=43..</text>
</g>
<g>
<title>thread_start (464 samples, 5.68%)</title><rect x="1122.7" y="931.0" width="67.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1125.7" y="942.0">thread_..</text>
</g>
<g>
<title>_pthread_start (464 samples, 5.68%)</title><rect x="1122.7" y="915.0" width="67.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1125.7" y="926.0">_pthrea..</text>
</g>
<g>
<title>_pthread_body (464 samples, 5.68%)</title><rect x="1122.7" y="899.0" width="67.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1125.7" y="910.0">_pthrea..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (464 samples, 5.68%)</title><rect x="1122.7" y="883.0" width="67.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1125.7" y="894.0">thread_..</text>
</g>
<g>
<title>Thread::call_run() (464 samples, 5.68%)</title><rect x="1122.7" y="867.0" width="67.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.7" y="878.0">Thread:..</text>
</g>
<g>
<title>JavaThread::run() (464 samples, 5.68%)</title><rect x="1122.7" y="851.0" width="67.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.7" y="862.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (464 samples, 5.68%)</title><rect x="1122.7" y="835.0" width="67.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.7" y="846.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (464 samples, 5.68%)</title><rect x="1122.7" y="819.0" width="67.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.7" y="830.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (463 samples, 5.66%)</title><rect x="1122.7" y="803.0" width="66.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.7" y="814.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (458 samples, 5.60%)</title><rect x="1122.7" y="787.0" width="66.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.7" y="798.0">C2Compi..</text>
</g>
<g>
<title>Arena::~Arena() (2 samples, 0.02%)</title><rect x="1122.7" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.7" y="782.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (2 samples, 0.02%)</title><rect x="1122.7" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.7" y="766.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.02%)</title><rect x="1122.7" y="739.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.7" y="750.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (456 samples, 5.58%)</title><rect x="1123.0" y="771.0" width="65.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="782.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (252 samples, 3.08%)</title><rect x="1123.0" y="755.0" width="36.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.0" y="766.0">Com..</text>
</g>
<g>
<title>Compile::Output() (7 samples, 0.09%)</title><rect x="1123.0" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.0" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (6 samples, 0.07%)</title><rect x="1123.0" y="723.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.0" y="734.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.11%)</title><rect x="1124.0" y="739.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.0" y="750.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.04%)</title><rect x="1124.3" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.3" y="734.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (3 samples, 0.04%)</title><rect x="1124.9" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.9" y="734.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.02%)</title><rect x="1125.0" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.0" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (19 samples, 0.23%)</title><rect x="1125.3" y="739.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.3" y="750.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.05%)</title><rect x="1125.5" y="723.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.5" y="734.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (2 samples, 0.02%)</title><rect x="1125.8" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.8" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (14 samples, 0.17%)</title><rect x="1126.1" y="723.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.1" y="734.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.05%)</title><rect x="1126.2" y="707.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.2" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (6 samples, 0.07%)</title><rect x="1127.1" y="707.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.1" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.02%)</title><rect x="1127.2" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.2" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.04%)</title><rect x="1127.5" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (28 samples, 0.34%)</title><rect x="1128.4" y="739.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.4" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (28 samples, 0.34%)</title><rect x="1128.4" y="723.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.4" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.10%)</title><rect x="1128.4" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.4" y="718.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.02%)</title><rect x="1128.4" y="691.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.4" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (3 samples, 0.04%)</title><rect x="1128.7" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.7" y="702.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (2 samples, 0.02%)</title><rect x="1128.8" y="675.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.8" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (3 samples, 0.04%)</title><rect x="1129.1" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.1" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 0.05%)</title><rect x="1129.5" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.5" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.02%)</title><rect x="1129.7" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.7" y="702.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (2 samples, 0.02%)</title><rect x="1129.7" y="675.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1132.7" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (3 samples, 0.04%)</title><rect x="1130.1" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.02%)</title><rect x="1130.5" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.5" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.02%)</title><rect x="1131.0" y="707.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.0" y="718.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.02%)</title><rect x="1131.0" y="691.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.0" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.09%)</title><rect x="1131.3" y="707.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.3" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.02%)</title><rect x="1131.4" y="691.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.4" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.02%)</title><rect x="1131.8" y="691.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (185 samples, 2.26%)</title><rect x="1132.7" y="739.0" width="26.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.7" y="750.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (8 samples, 0.10%)</title><rect x="1133.1" y="723.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.10%)</title><rect x="1134.3" y="723.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.3" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (6 samples, 0.07%)</title><rect x="1134.6" y="707.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.6" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.04%)</title><rect x="1134.9" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.09%)</title><rect x="1135.4" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.4" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1135.6" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.6" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.05%)</title><rect x="1135.9" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (16 samples, 0.20%)</title><rect x="1136.4" y="723.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (40 samples, 0.49%)</title><rect x="1138.8" y="723.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (6 samples, 0.07%)</title><rect x="1139.8" y="707.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.02%)</title><rect x="1140.2" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.02%)</title><rect x="1140.8" y="707.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (16 samples, 0.20%)</title><rect x="1141.1" y="707.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.1" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.04%)</title><rect x="1141.4" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.4" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.05%)</title><rect x="1141.8" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.8" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1142.4" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.4" y="702.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (5 samples, 0.06%)</title><rect x="1142.7" y="691.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (3 samples, 0.04%)</title><rect x="1143.4" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.4" y="718.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.04%)</title><rect x="1143.4" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.05%)</title><rect x="1143.8" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.8" y="718.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.02%)</title><rect x="1144.1" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (5 samples, 0.06%)</title><rect x="1144.5" y="723.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.04%)</title><rect x="1144.8" y="707.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (21 samples, 0.26%)</title><rect x="1145.3" y="723.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.3" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.05%)</title><rect x="1146.7" y="707.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.7" y="718.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (2 samples, 0.02%)</title><rect x="1147.3" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.3" y="718.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (5 samples, 0.06%)</title><rect x="1147.6" y="707.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.6" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (5 samples, 0.06%)</title><rect x="1147.6" y="691.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.02%)</title><rect x="1148.3" y="723.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (20 samples, 0.24%)</title><rect x="1148.6" y="723.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.6" y="734.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.02%)</title><rect x="1149.3" y="707.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.3" y="718.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1149.3" y="691.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1152.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (9 samples, 0.11%)</title><rect x="1149.6" y="707.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.02%)</title><rect x="1151.5" y="723.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.5" y="734.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.07%)</title><rect x="1151.7" y="723.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.7" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 0.07%)</title><rect x="1151.7" y="707.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.7" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 0.06%)</title><rect x="1151.9" y="691.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.9" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.04%)</title><rect x="1152.0" y="675.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.0" y="686.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.02%)</title><rect x="1152.0" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.0" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (7 samples, 0.09%)</title><rect x="1152.6" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.6" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (7 samples, 0.09%)</title><rect x="1152.6" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.6" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.04%)</title><rect x="1152.9" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.02%)</title><rect x="1153.3" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.3" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (6 samples, 0.07%)</title><rect x="1153.6" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="734.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.02%)</title><rect x="1153.6" y="707.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.05%)</title><rect x="1153.9" y="707.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.9" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.04%)</title><rect x="1154.5" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.5" y="734.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1154.6" y="707.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1157.6" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (21 samples, 0.26%)</title><rect x="1154.9" y="723.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.9" y="734.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.09%)</title><rect x="1156.4" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.4" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.05%)</title><rect x="1156.5" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.5" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1157.1" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="702.0"></text>
</g>
<g>
<title>loadNNode::out_RegMask() const (2 samples, 0.02%)</title><rect x="1159.0" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.0" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (152 samples, 1.86%)</title><rect x="1159.4" y="755.0" width="21.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.4" y="766.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.04%)</title><rect x="1159.4" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.4" y="750.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.02%)</title><rect x="1159.5" y="723.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.5" y="734.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (55 samples, 0.67%)</title><rect x="1159.8" y="739.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (54 samples, 0.66%)</title><rect x="1160.0" y="723.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.06%)</title><rect x="1160.3" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.10%)</title><rect x="1161.0" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (7 samples, 0.09%)</title><rect x="1161.1" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (7 samples, 0.09%)</title><rect x="1161.1" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (5 samples, 0.06%)</title><rect x="1161.4" y="659.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (5 samples, 0.06%)</title><rect x="1161.4" y="643.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="654.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.02%)</title><rect x="1161.4" y="627.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.4" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (3 samples, 0.04%)</title><rect x="1161.7" y="627.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.7" y="638.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (3 samples, 0.04%)</title><rect x="1161.7" y="611.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 0.26%)</title><rect x="1162.1" y="707.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (16 samples, 0.20%)</title><rect x="1162.7" y="691.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 0.16%)</title><rect x="1163.0" y="675.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.0" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.04%)</title><rect x="1163.0" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.04%)</title><rect x="1163.0" y="643.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.02%)</title><rect x="1163.2" y="627.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.02%)</title><rect x="1163.2" y="611.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.02%)</title><rect x="1163.2" y="595.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (10 samples, 0.12%)</title><rect x="1163.4" y="659.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.04%)</title><rect x="1163.7" y="643.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (4 samples, 0.05%)</title><rect x="1164.2" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (4 samples, 0.05%)</title><rect x="1164.2" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.2" y="638.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (4 samples, 0.05%)</title><rect x="1164.2" y="611.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.2" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (11 samples, 0.13%)</title><rect x="1165.2" y="707.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (2 samples, 0.02%)</title><rect x="1165.5" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (7 samples, 0.09%)</title><rect x="1165.8" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (2 samples, 0.02%)</title><rect x="1165.9" y="675.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (4 samples, 0.05%)</title><rect x="1166.2" y="675.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.02%)</title><rect x="1166.3" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.02%)</title><rect x="1166.3" y="643.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.3" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.06%)</title><rect x="1166.8" y="707.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.8" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.06%)</title><rect x="1166.8" y="691.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="702.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (4 samples, 0.05%)</title><rect x="1167.8" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.8" y="750.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.02%)</title><rect x="1168.1" y="723.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.05%)</title><rect x="1168.3" y="739.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.05%)</title><rect x="1168.3" y="723.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.02%)</title><rect x="1168.5" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (5 samples, 0.06%)</title><rect x="1168.9" y="739.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (3 samples, 0.04%)</title><rect x="1169.6" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.6" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (3 samples, 0.04%)</title><rect x="1169.6" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.6" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.02%)</title><rect x="1169.8" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.8" y="718.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (2 samples, 0.02%)</title><rect x="1169.8" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (56 samples, 0.69%)</title><rect x="1170.1" y="739.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.1" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.02%)</title><rect x="1170.2" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.2" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.02%)</title><rect x="1170.2" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.02%)</title><rect x="1170.2" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.2" y="702.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.02%)</title><rect x="1170.5" y="723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.04%)</title><rect x="1170.8" y="723.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.07%)</title><rect x="1171.2" y="723.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (4 samples, 0.05%)</title><rect x="1171.4" y="707.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.05%)</title><rect x="1171.4" y="691.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (4 samples, 0.05%)</title><rect x="1171.4" y="675.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (4 samples, 0.05%)</title><rect x="1171.4" y="659.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (2 samples, 0.02%)</title><rect x="1171.7" y="643.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.7" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (28 samples, 0.34%)</title><rect x="1172.1" y="723.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (19 samples, 0.23%)</title><rect x="1173.4" y="707.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 0.18%)</title><rect x="1173.5" y="691.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (5 samples, 0.06%)</title><rect x="1173.7" y="675.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (4 samples, 0.05%)</title><rect x="1173.8" y="659.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.05%)</title><rect x="1173.8" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (3 samples, 0.04%)</title><rect x="1174.0" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.0" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.04%)</title><rect x="1174.0" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.0" y="622.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.02%)</title><rect x="1174.1" y="595.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (8 samples, 0.10%)</title><rect x="1174.6" y="675.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.02%)</title><rect x="1174.6" y="659.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (5 samples, 0.06%)</title><rect x="1174.8" y="659.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (4 samples, 0.05%)</title><rect x="1175.0" y="643.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="654.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.02%)</title><rect x="1175.3" y="627.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.02%)</title><rect x="1175.7" y="691.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="702.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.02%)</title><rect x="1175.7" y="675.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.05%)</title><rect x="1176.1" y="723.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.02%)</title><rect x="1176.4" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.05%)</title><rect x="1176.7" y="723.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.02%)</title><rect x="1177.0" y="707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.07%)</title><rect x="1177.3" y="723.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.06%)</title><rect x="1177.4" y="707.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.02%)</title><rect x="1177.7" y="691.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 0.20%)</title><rect x="1178.2" y="739.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 0.20%)</title><rect x="1178.2" y="723.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="734.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.04%)</title><rect x="1178.6" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.02%)</title><rect x="1179.3" y="707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.02%)</title><rect x="1179.3" y="691.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (2 samples, 0.02%)</title><rect x="1179.3" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.02%)</title><rect x="1180.0" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (5 samples, 0.06%)</title><rect x="1180.6" y="739.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.05%)</title><rect x="1180.8" y="723.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.05%)</title><rect x="1180.8" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="718.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (7 samples, 0.09%)</title><rect x="1181.3" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="766.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (3 samples, 0.04%)</title><rect x="1181.3" y="739.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1181.3" y="723.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1181.3" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1181.3" y="691.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1181.3" y="675.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1181.3" y="659.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1181.3" y="643.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1181.3" y="627.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1181.3" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1181.3" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1181.3" y="579.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1181.3" y="563.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1181.3" y="547.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1181.3" y="531.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1181.3" y="515.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1181.3" y="499.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.04%)</title><rect x="1181.8" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (3 samples, 0.04%)</title><rect x="1181.8" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (43 samples, 0.53%)</title><rect x="1182.3" y="755.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (43 samples, 0.53%)</title><rect x="1182.3" y="739.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (43 samples, 0.53%)</title><rect x="1182.3" y="723.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (43 samples, 0.53%)</title><rect x="1182.3" y="707.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (38 samples, 0.46%)</title><rect x="1182.6" y="691.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (36 samples, 0.44%)</title><rect x="1182.8" y="675.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (36 samples, 0.44%)</title><rect x="1182.8" y="659.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (35 samples, 0.43%)</title><rect x="1182.9" y="643.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (35 samples, 0.43%)</title><rect x="1182.9" y="627.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (33 samples, 0.40%)</title><rect x="1182.9" y="611.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (27 samples, 0.33%)</title><rect x="1183.1" y="595.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (27 samples, 0.33%)</title><rect x="1183.1" y="579.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (27 samples, 0.33%)</title><rect x="1183.1" y="563.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (27 samples, 0.33%)</title><rect x="1183.1" y="547.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (27 samples, 0.33%)</title><rect x="1183.1" y="531.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.23%)</title><rect x="1183.1" y="515.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.23%)</title><rect x="1183.1" y="499.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 0.21%)</title><rect x="1183.1" y="483.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 0.21%)</title><rect x="1183.1" y="467.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.18%)</title><rect x="1183.1" y="451.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.02%)</title><rect x="1183.1" y="435.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.02%)</title><rect x="1183.1" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="430.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.02%)</title><rect x="1183.1" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.02%)</title><rect x="1183.1" y="387.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.02%)</title><rect x="1183.1" y="371.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.02%)</title><rect x="1183.1" y="355.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.15%)</title><rect x="1183.4" y="435.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.15%)</title><rect x="1183.4" y="419.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.12%)</title><rect x="1183.5" y="403.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.12%)</title><rect x="1183.5" y="387.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.10%)</title><rect x="1183.5" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.09%)</title><rect x="1183.5" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.09%)</title><rect x="1183.5" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.07%)</title><rect x="1183.6" y="323.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.07%)</title><rect x="1183.6" y="307.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1183.6" y="291.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1183.8" y="275.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1183.8" y="259.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1183.8" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1183.8" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (7 samples, 0.09%)</title><rect x="1185.8" y="515.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.09%)</title><rect x="1185.8" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.09%)</title><rect x="1185.8" y="483.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.09%)</title><rect x="1185.8" y="467.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.09%)</title><rect x="1185.8" y="451.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.09%)</title><rect x="1185.8" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.07%)</title><rect x="1186.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.07%)</title><rect x="1186.0" y="403.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.07%)</title><rect x="1186.0" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.07%)</title><rect x="1186.0" y="371.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.07%)</title><rect x="1186.0" y="355.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1186.1" y="339.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="1186.1" y="323.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="1186.1" y="307.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="1186.1" y="291.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.06%)</title><rect x="1186.1" y="275.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1186.1" y="259.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="1186.1" y="243.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="1186.1" y="227.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="1186.1" y="211.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.06%)</title><rect x="1186.1" y="195.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1186.2" y="179.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1186.2" y="163.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1186.2" y="147.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1186.2" y="131.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.04%)</title><rect x="1186.2" y="115.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.02%)</title><rect x="1186.4" y="99.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (2 samples, 0.02%)</title><rect x="1186.4" y="83.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.4" y="94.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.02%)</title><rect x="1186.4" y="67.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.4" y="78.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.02%)</title><rect x="1186.4" y="51.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.4" y="62.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (2 samples, 0.02%)</title><rect x="1186.4" y="35.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1187.0" y="595.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1187.0" y="579.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="1187.0" y="563.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="1187.0" y="547.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="1187.0" y="531.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.06%)</title><rect x="1187.0" y="515.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1187.0" y="499.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="1187.0" y="483.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="1187.0" y="467.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="1187.0" y="451.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.06%)</title><rect x="1187.0" y="435.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1187.0" y="419.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="1187.0" y="403.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="1187.0" y="387.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="1187.0" y="371.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1187.0" y="355.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1187.1" y="339.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1187.1" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1187.1" y="307.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1187.1" y="291.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1187.1" y="275.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1187.1" y="259.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1187.1" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1187.1" y="227.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1187.1" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1187.3" y="195.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.3" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1187.3" y="179.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.3" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1187.3" y="163.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1187.3" y="147.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1187.3" y="131.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.04%)</title><rect x="1188.1" y="691.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.1" y="702.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.02%)</title><rect x="1188.6" y="755.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.6" y="766.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.02%)</title><rect x="1188.6" y="739.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.6" y="750.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.02%)</title><rect x="1189.0" y="787.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.02%)</title><rect x="1189.0" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.02%)</title><rect x="1189.0" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>ThreadCritical::~ThreadCritical() (2 samples, 0.02%)</title><rect x="1189.0" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.02%)</title><rect x="1189.0" y="723.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.02%)</title><rect x="1189.0" y="707.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
<g>
<title>[tid=4611] (2 samples, 0.02%)</title><rect x="1189.7" y="947.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1192.7" y="958.0"></text>
</g>
<g>
<title>start_wqthread (2 samples, 0.02%)</title><rect x="1189.7" y="931.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1192.7" y="942.0"></text>
</g>
<g>
<title>_pthread_wqthread (2 samples, 0.02%)</title><rect x="1189.7" y="915.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1192.7" y="926.0"></text>
</g>
<g>
<title>_dispatch_kevent_worker_thread (2 samples, 0.02%)</title><rect x="1189.7" y="899.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1192.7" y="910.0"></text>
</g>
<g>
<title>_dispatch_lane_serial_drain (2 samples, 0.02%)</title><rect x="1189.7" y="883.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1192.7" y="894.0"></text>
</g>
<g>
<title>_dispatch_source_invoke (2 samples, 0.02%)</title><rect x="1189.7" y="867.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1192.7" y="878.0"></text>
</g>
<g>
<title>_dispatch_continuation_pop (2 samples, 0.02%)</title><rect x="1189.7" y="851.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1192.7" y="862.0"></text>
</g>
<g>
<title>_dispatch_client_callout (2 samples, 0.02%)</title><rect x="1189.7" y="835.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1192.7" y="846.0"></text>
</g>
<g>
<title>malloc_memory_event_handler (2 samples, 0.02%)</title><rect x="1189.7" y="819.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1192.7" y="830.0"></text>
</g>
<g>
<title>malloc_zone_pressure_relief (2 samples, 0.02%)</title><rect x="1189.7" y="803.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1192.7" y="814.0"></text>
</g>
<g>
<title>szone_pressure_relief (2 samples, 0.02%)</title><rect x="1189.7" y="787.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.7" y="798.0"></text>
</g>
</g>
</svg>
